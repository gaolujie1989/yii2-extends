<?php

namespace lujie\amazon\sp\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
*/
class Messaging extends \lujie\amazon\sp\BaseAmazonSPClient
{

                
    /**
     * @description Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which you want a list of available message types.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @return array
     *      - *_links* - object
     *      - *_embedded* - object
     *      - *errors* - 
     */
    public function getMessagingActionsForOrder(string $amazonOrderId, array $query): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}"], $query));
    }
                    
    /**
     * @description Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @param array $data 
     * @return array
     *      - *errors* - 
     */
    public function confirmCustomizationDetails(string $amazonOrderId, array $query, array $data): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/confirmCustomizationDetails"], $query), 'POST', $data);
    }
                    
    /**
     * @description Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @param array $data 
     * @return array
     *      - *errors* - 
     */
    public function createConfirmDeliveryDetails(string $amazonOrderId, array $query, array $data): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/confirmDeliveryDetails"], $query), 'POST', $data);
    }
                    
    /**
     * @description Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @param array $data 
     * @return array
     *      - *errors* - 
     */
    public function createLegalDisclosure(string $amazonOrderId, array $query, array $data): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/legalDisclosure"], $query), 'POST', $data);
    }
                    
    /**
     * @description Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer's problem.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @return array
     *      - *errors* - 
     */
    public function createNegativeFeedbackRemoval(string $amazonOrderId, array $query): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/negativeFeedbackRemoval"], $query), 'POST');
    }
                    
    /**
     * @description Sends a message to ask a buyer an order-related question prior to shipping their order.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @param array $data 
     * @return array
     *      - *errors* - 
     */
    public function createConfirmOrderDetails(string $amazonOrderId, array $query, array $data): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/confirmOrderDetails"], $query), 'POST', $data);
    }
                    
    /**
     * @description Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @param array $data 
     * @return array
     *      - *errors* - 
     */
    public function createConfirmServiceDetails(string $amazonOrderId, array $query, array $data): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/confirmServiceDetails"], $query), 'POST', $data);
    }
                    
    /**
     * @description Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @param array $data 
     * @return array
     *      - *errors* - 
     */
    public function CreateAmazonMotors(string $amazonOrderId, array $query, array $data): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/amazonMotors"], $query), 'POST', $data);
    }
                    
    /**
     * @description Sends a message to a buyer to provide details about warranty information on a purchase in their order.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @param array $data 
     * @return array
     *      - *errors* - 
     */
    public function CreateWarranty(string $amazonOrderId, array $query, array $data): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/warranty"], $query), 'POST', $data);
    }
                    
    /**
     * @description Returns a response containing attributes related to an order. This includes buyer preferences.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @return array
     *      - *buyer* - object
     *          - The list of attributes related to the buyer.
     *      - *errors* - 
     */
    public function GetAttributes(string $amazonOrderId, array $query): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/attributes"], $query));
    }
                    
    /**
     * @description Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @param array $data 
     * @return array
     *      - *errors* - 
     */
    public function createDigitalAccessKey(string $amazonOrderId, array $query, array $data): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/digitalAccessKey"], $query), 'POST', $data);
    }
                    
    /**
     * @description Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @param array $data 
     * @return array
     *      - *errors* - 
     */
    public function createUnexpectedProblem(string $amazonOrderId, array $query, array $data): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/unexpectedProblem"], $query), 'POST', $data);
    }
                    
    /**
     * @description Sends a message providing the buyer an invoice
     * @tag messaging
     * @param string $amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @param array $data 
     * @return array
     *      - *errors* - 
     */
    public function sendInvoice(string $amazonOrderId, array $query, array $data): array
    {
        return $this->api(array_merge(["/messaging/v1/orders/{$amazonOrderId}/messages/invoice"], $query), 'POST', $data);
    }
    
}
