<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Account extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Logs in to the online store with frontend user credentials. The login call returns a JSON object that contains information, such as the access token and the refresh token.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *accessToken* - string
     *          - The access token. Required for REST call authentication.
     *      - *tokenType* - string
     *          - The token type. The token type is Bearer.
     *      - *expiresIn* - integer
     *          - The expiration time in seconds that the access token is valid for
     *      - *refreshToken* - string
     *          - The refresh token. Required for refreshing the access token.
     */
    public function createAccountLogin(array $data): array
    {
        return $this->api("/rest/account/login", 'POST', $data);
    }
                    
    /**
     * @description Refreshes the access token using the refresh token. The refresh token is part of the login call response.
     * @tag Account

     */
    public function createAccountLoginRefresh()
    {
        return $this->api("/rest/account/login/refresh", 'POST');
    }
                    
    /**
     * @description Logs out the frontend user from the online store. The access token expires.
     * @tag Account

     */
    public function createAccountLogout()
    {
        return $this->api("/rest/account/logout", 'POST');
    }
                    
    /**
     * @description Lists all companies. An account is equivalent to a company.
     * @tag Account
     * @param array $query
     *      - *updatedAt* - string - optional
     *          - Filter that restricts the search result to accounts that were updated according
     *      to given filters.
    <br> Usage: <ul>
    <li>'updatedAt=between:yyyy-mm-dd,yyyy-mm-dd'</li>
    <li>'updatedAt=eq:yyyy-mm-dd' (=)</li>
    <li>'updatedAt=gt:yyyy-mm-dd' (>)</li>
    <li>'updatedAt=gte:yyyy-mm-dd' (>=)</li>
    <li>'updatedAt=lt:yyyy-mm-dd' (<)</li>
    <li>'updatedAt=lte:yyyy-mm-dd' (<=)</li>
    <li>Dates can also include the time. Example: 2017-03-08 13:24:17</li>
    <li>Without including the time we will use 00:00:00 as default. Example: 2017-03-08 00:00:00</li>
    </ul>
     *      - *createdAt* - string - optional
     *          - Filter that restricts the search result to accounts that were created according
     *      to given filters.
    <br> Usage: <ul>
    <li>'createdAt=between:yyyy-mm-dd,yyyy-mm-dd'</li>
    <li>'createdAt=eq:yyyy-mm-dd' (=)</li>
    <li>'createdAt=gt:yyyy-mm-dd' (>)</li>
    <li>'createdAt=gte:yyyy-mm-dd' (>=)</li>
    <li>'createdAt=lt:yyyy-mm-dd' (<)</li>
    <li>'createdAt=lte:yyyy-mm-dd' (<=)</li>
    <li>Dates can also include the time. Example: 2017-03-08 13:24:17</li>
    <li>Without including the time we will use 00:00:00 as default. Example: 2017-03-08 00:00:00</li>
    </ul>
     *      - *id* - int - optional
     *          - Filter that restricts the search result to companies that have an ID according
     *      to given filters.
    <br> Usage: <ul>
    <li>'id=eq:ID' (=) </li>
    </ul>
     *      - *companyName* - string - optional
     *          - Filter that restricts the search result to companies that have a company name according
     *      to given filters.
    <br> Usage: <ul>
    <li>'companyName=like:expamle'</li>
    <li>'companyName=eq:example' (=)</li>
    </ul>
     *      - *userId* - int - optional
     *          - Filter that restricts the search result to companies that have a userId / ownerId according
     *      to given filters.
    <br> Usage: <ul>
    <li>'userId=eq:ID' (=) </li>
    </ul>
     *      - *sortBy* - string - optional
     *          - Enables the sorting of fields. SortBy has as parameter.
     *      The name of the field will also be sorted.
     *      - *sortOrder* - string - optional
     *          - Enables to sort the result in an ascending and descending order.
     *      When you want to sort the results in ascending order, use  <code>asc</code>.
     *      When you want to sort the result in descending order, use <code>desc</code>.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *with* - string - optional
     *          - Includes the specified contact information in the results.
     *      The following parameters are available:
     *          <code>contacts</code>,
     *          <code>contactRelations</code>,
     *          <code>contactsPrimaryBillingAddress</code>,
     *          <code>salesRepresentativeRegions</code>.
     *      More than one parameter should be separated by commas
     * @return array
     */
    public function getAccounts(array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts"], $query));
    }
                
    /**
     * @description Creates a company. An account is equivalent to a company.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the account
     *      - *number* - string
     *          - The number of the account
     *      - *companyName* - string
     *          - The company name
     *      - *taxIdNumber* - string
     *          - The ID of the tax number
     *      - *valuta* - integer
     *          - The valuta date in days specified for the account
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The contact ID of the sales representative
     *      - *userId* - integer
     *          - The ID of the account owner
     *      - *deliveryTime* - integer
     *          - The delivery time for the supplier
     *      - *dealerMinOrderValue* - number
     *          - The minimum order value for the supplier
     *      - *supplierCurrency* - string
     *          - The currency used by a supplier
     *      - *createdAt* - string
     *          - The time the account was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the account was last updated as unix timestamp
     */
    public function createAccount(array $data): array
    {
        return $this->api("/rest/accounts", 'POST', $data);
    }
                
    /**
     * @description Get all available addresses
     * @tag Account
     * @param array $query
     *      - *updatedTo* - string - optional
     *          - Filter that restricts the search result to addresses that were updated before a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *updatedFrom* - string - optional
     *          - Filter that restricts the search result to addresses that were updated after a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *createdTo* - string - optional
     *          - Filter that restricts the search result to addresses that were created before a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *createdFrom* - string - optional
     *          - Filter that restricts the search result to addresses that were created after a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *with* - string - optional
     *          - Includes the specified address information in the results. The following parameters are available: contactRelations, orderRelations. More than one parameter should be separated by commas.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Address
     */
    public function eachAccountsAddresses(array $query = []): Iterator
    {
        return $this->eachInternal('getAccountsAddresses', func_get_args());
    }
        
    /**
     * @description Get all available addresses
     * @tag Account
     * @param array $query
     *      - *updatedTo* - string - optional
     *          - Filter that restricts the search result to addresses that were updated before a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *updatedFrom* - string - optional
     *          - Filter that restricts the search result to addresses that were updated after a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *createdTo* - string - optional
     *          - Filter that restricts the search result to addresses that were created before a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *createdFrom* - string - optional
     *          - Filter that restricts the search result to addresses that were created after a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *with* - string - optional
     *          - Includes the specified address information in the results. The following parameters are available: contactRelations, orderRelations. More than one parameter should be separated by commas.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Address
     */
    public function batchAccountsAddresses(array $query = []): Iterator
    {
        return $this->batchInternal('getAccountsAddresses', func_get_args());
    }
    
    /**
     * @description Get all available addresses
     * @tag Account
     * @param array $query
     *      - *updatedTo* - string - optional
     *          - Filter that restricts the search result to addresses that were updated before a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *updatedFrom* - string - optional
     *          - Filter that restricts the search result to addresses that were updated after a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *createdTo* - string - optional
     *          - Filter that restricts the search result to addresses that were created before a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *createdFrom* - string - optional
     *          - Filter that restricts the search result to addresses that were created after a specific date. Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *with* - string - optional
     *          - Includes the specified address information in the results. The following parameters are available: contactRelations, orderRelations. More than one parameter should be separated by commas.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Address
     */
    public function getAccountsAddresses(array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/addresses"], $query));
    }
                
    /**
     * @description Creates an address.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the address
     *      - *gender* - string
     *          - The gender ("female", "male" or "diverse")
     *      - *name1* - string
     *          - The name 1 field (defaults to: company name)
     *      - *name2* - string
     *          - The name 2 field (defaults to: first name)
     *      - *name3* - string
     *          - The name 3 field (defaults to: last name)
     *      - *name4* - string
     *          - The name 4 field (defaults to: c/o)
     *      - *address1* - string
     *          - The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *      - *address2* - string
     *          - The address 2 field (defaults to: houseNumber|packstationNo)
     *      - *address3* - string
     *          - The address 3 field (defaults to: additional)
     *      - *address4* - string
     *          - The address 4 field is currently undefined and can be freely used.
     *      - *postalCode* - string
     *          - The postcode
     *      - *town* - string
     *          - The town
     *      - *countryId* - integer
     *          - The ID of the country
     *      - *stateId* - integer
     *          - The ID of the state
     *      - *readOnly* - boolean
     *          - Flag that indicates if the data record is read only
     *      - *companyName* - string
     *          - The company name (alias for name1, <i>read only</i>)
     *      - *firstName* - string
     *          - The first name (alias for name2, <i>read only</i>)
     *      - *lastName* - string
     *          - The last name (alias for name3, <i>read only</i>)
     *      - *careOf* - string
     *          - The c/o (alias for name4, <i>read only</i>)
     *      - *street* - string
     *          - The street (alias for address1, <i>read only</i>)
     *      - *houseNumber* - string
     *          - The house number (alias for address2, <i>read only</i>)
     *      - *additional* - string
     *          - The additional address information (alias for address3, <i>read only</i>)
     *      - *checkedAt* - string
     *          - The time the address was checked as unix timestamp
     *      - *createdAt* - string
     *          - The time the address was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the address was last updated as unix timestamp
     *      - *taxIdNumber* - string
     *          - The taxIdNumber option (alias for option with typeId 1, <i>read only</i>)
     *      - *externalId* - string
     *          - The externalId option (alias for option with typeId 2, <i>read only</i>)
     *      - *entryCertificate* - boolean
     *          - The entryCertificate option (alias for option with typeId 3, <i>read only</i>)
     *      - *phone* - string
     *          - The phone option (alias for option with typeId 4, <i>read only</i>)
     *      - *email* - string
     *          - The email option (alias for option with typeId 5, <i>read only</i>)
     *      - *postident* - string
     *          - The PostIdent option (alias for option with typeId 6, <i>read only</i>)
     *      - *personalNumber* - string
     *          - The personal number option (alias for option with typeId 7, <i>read only</i>)
     *      - *fsk* - string
     *          - The age rating option (alias for option with typeId 8, <i>read only</i>)
     *      - *birthday* - string
     *          - The birthday option (alias for option with typeId 9, <i>read only</i>)
     *      - *title* - string
     *          - The title option (alias for option with typeId 11, <i>read only</i>)
     *      - *sessionId* - string
     *          - The fronetnd session ID that was used when the address was created (alias for option with typeId 10, <i>read only</i>)
     *      - *contactPerson* - string
     *          - The contact person option (alias for option with typeId 12, <i>read only</i>)
     *      - *externalCustomerId* - string
     *          - The external customer ID option (alias for option with typeId 13, <i>read only</i>)
     *      - *packstationNo* - string
     *          - The packstation number (alias for houseNumber and address2, <i>read only</i>)
     *      - *isPackstation* - boolean
     *          - Flag that indicates if the address is a packstation
     *      - *isPostfiliale* - boolean
     *          - Flag that indicates if the address is a postfiliale (post office)
     */
    public function createAccountsAddress(array $data): array
    {
        return $this->api("/rest/accounts/addresses", 'POST', $data);
    }
                
    /**
     * @description Lists the address contact relations.
     * @tag Account
     * @param array $query
     *      - *id* - int - optional
     *          - Filter that restricts the search result to address contact relations with a specific ID
     *      - *contactId* - int - optional
     *          - Filter that restricts the search result to contacts with a specific ID
     *      - *typeId* - int - optional
     *          - Filter that restricts the search result to address types with a specific ID
     *      - *addressId* - int - optional
     *          - Filter that restricts the search result to addresses with a specific ID
     *      - *isPrimary* - boolean - optional
     *          - Filter that restricts the search result depending on the flag used. If the flag isPrimary=true is set, the filter restricts the search result to addresses that are primary addresses. If the flag isPrimary=false is set, the filter restricts the search results to addresses that are not primary addresses. If no flag is set, both primary and non-primary addresses are listed.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *with* - string - optional
     *          - Includes the specified address contact relation information in the results. The following parameters are available: contact and address. More than one parameter should be separated by commas.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of AddressContactRelation
     */
    public function eachAccountsAddressesContactRelations(array $query = []): Iterator
    {
        return $this->eachInternal('getAccountsAddressesContactRelations', func_get_args());
    }
        
    /**
     * @description Lists the address contact relations.
     * @tag Account
     * @param array $query
     *      - *id* - int - optional
     *          - Filter that restricts the search result to address contact relations with a specific ID
     *      - *contactId* - int - optional
     *          - Filter that restricts the search result to contacts with a specific ID
     *      - *typeId* - int - optional
     *          - Filter that restricts the search result to address types with a specific ID
     *      - *addressId* - int - optional
     *          - Filter that restricts the search result to addresses with a specific ID
     *      - *isPrimary* - boolean - optional
     *          - Filter that restricts the search result depending on the flag used. If the flag isPrimary=true is set, the filter restricts the search result to addresses that are primary addresses. If the flag isPrimary=false is set, the filter restricts the search results to addresses that are not primary addresses. If no flag is set, both primary and non-primary addresses are listed.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *with* - string - optional
     *          - Includes the specified address contact relation information in the results. The following parameters are available: contact and address. More than one parameter should be separated by commas.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of AddressContactRelation
     */
    public function batchAccountsAddressesContactRelations(array $query = []): Iterator
    {
        return $this->batchInternal('getAccountsAddressesContactRelations', func_get_args());
    }
    
    /**
     * @description Lists the address contact relations.
     * @tag Account
     * @param array $query
     *      - *id* - int - optional
     *          - Filter that restricts the search result to address contact relations with a specific ID
     *      - *contactId* - int - optional
     *          - Filter that restricts the search result to contacts with a specific ID
     *      - *typeId* - int - optional
     *          - Filter that restricts the search result to address types with a specific ID
     *      - *addressId* - int - optional
     *          - Filter that restricts the search result to addresses with a specific ID
     *      - *isPrimary* - boolean - optional
     *          - Filter that restricts the search result depending on the flag used. If the flag isPrimary=true is set, the filter restricts the search result to addresses that are primary addresses. If the flag isPrimary=false is set, the filter restricts the search results to addresses that are not primary addresses. If no flag is set, both primary and non-primary addresses are listed.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *with* - string - optional
     *          - Includes the specified address contact relation information in the results. The following parameters are available: contact and address. More than one parameter should be separated by commas.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of AddressContactRelation
     */
    public function getAccountsAddressesContactRelations(array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/addresses/contact_relations"], $query));
    }
                
    /**
     * @description Creates an address contact relation.
     * @tag Account
     * @param array $data 
     * @return array
     */
    public function createAccountsAddressesContactRelation(array $data): array
    {
        return $this->api("/rest/accounts/addresses/contact_relations", 'POST', $data);
    }
                
    /**
     * @description Updates an address contact relation.
     * @tag Account
     * @param array $data 
     * @return array
     */
    public function updateAccountsAddressesContactRelation(array $data): array
    {
        return $this->api("/rest/accounts/addresses/contact_relations", 'PUT', $data);
    }
                    
    /**
     * @description Deletes an address contact relation. The ID of the address contact relation must be specified.
     * @tag Account
     * @param int $addressContactRelationId The ID of the address contact relation
     */
    public function deleteAccountsAddressesContactRelationByAddressContactRelationId(int $addressContactRelationId)
    {
        return $this->api("/rest/accounts/addresses/contact_relations/{$addressContactRelationId}", 'DELETE');
    }
                
    /**
     * @description Gets an address contact relation. The ID of the address contact relation must be specified.
     * @tag Account
     * @param int $addressContactRelationId The ID of the address contact relation
     * @return array
     *      - *id* - integer
     *          - The ID of the address contact relation
     *      - *contactId* - integer
     *          - The ID of the contact
     *      - *typeId* - integer
     *          - The type ID of the address. Possible values:
<ul>
<li>Invoice address = 1</li>
<li>Delivery address = 2</li>
</ul>
     *      - *addressId* - integer
     *          - The ID of the address
     *      - *isPrimary* - boolean
     *          - Flag that indicates if the address is primary
     */
    public function getAccountsAddressesContactRelationByAddressContactRelationId(int $addressContactRelationId): array
    {
        return $this->api("/rest/accounts/addresses/contact_relations/{$addressContactRelationId}");
    }
                    
    /**
     * @description Lists the address option types.
     * @tag Account
     * @return array
     */
    public function getAccountsAddressesOptionTypes(): array
    {
        return $this->api("/rest/accounts/addresses/option_types");
    }
                
    /**
     * @description Creates an address option type.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the address option type. It is possible to define individual types. The following types are available by default:
<ul>
<li>1 = VAT number</li>
<li>2 = External address ID</li>
<li>3 = Entry certificate</li>
<li>4 = Telephone</li>
<li>5 = Email</li>
<li>6 = Post number</li>
<li>7 = Personal id</li>
<li>8 = BBFC (age rating)</li>
<li>9 = Birthday</li>
<li>10 = Session ID</li>
<li>11 = Title</li>
<li>12 = Contact person</li>
<li>13 = External customer ID</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the type can be deleted
     */
    public function createAccountsAddressesOptionType(array $data): array
    {
        return $this->api("/rest/accounts/addresses/option_types", 'POST', $data);
    }
                    
    /**
     * @description Deletes an address option type. The ID of the option type must be specified.
     * @tag Account
     * @param int $optionTypeId The ID of the address option type
     */
    public function deleteAccountsAddressesOptionTypeByOptionTypeId(int $optionTypeId)
    {
        return $this->api("/rest/accounts/addresses/option_types/{$optionTypeId}", 'DELETE');
    }
                
    /**
     * @description Gets an address option type. The ID of the address option type must be specified.
     * @tag Account
     * @param int $optionTypeId The ID of the address option type
     * @return array
     *      - *id* - integer
     *          - The ID of the address option type. It is possible to define individual types. The following types are available by default:
<ul>
<li>1 = VAT number</li>
<li>2 = External address ID</li>
<li>3 = Entry certificate</li>
<li>4 = Telephone</li>
<li>5 = Email</li>
<li>6 = Post number</li>
<li>7 = Personal id</li>
<li>8 = BBFC (age rating)</li>
<li>9 = Birthday</li>
<li>10 = Session ID</li>
<li>11 = Title</li>
<li>12 = Contact person</li>
<li>13 = External customer ID</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the type can be deleted
     */
    public function getAccountsAddressesOptionTypeByOptionTypeId(int $optionTypeId): array
    {
        return $this->api("/rest/accounts/addresses/option_types/{$optionTypeId}");
    }
                
    /**
     * @description Updates an address option type. The ID of the option type must be specified.
     * @tag Account
     * @param int $optionTypeId The ID of the address option type
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the address option type. It is possible to define individual types. The following types are available by default:
<ul>
<li>1 = VAT number</li>
<li>2 = External address ID</li>
<li>3 = Entry certificate</li>
<li>4 = Telephone</li>
<li>5 = Email</li>
<li>6 = Post number</li>
<li>7 = Personal id</li>
<li>8 = BBFC (age rating)</li>
<li>9 = Birthday</li>
<li>10 = Session ID</li>
<li>11 = Title</li>
<li>12 = Contact person</li>
<li>13 = External customer ID</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the type can be deleted
     */
    public function updateAccountsAddressesOptionTypeByOptionTypeId(int $optionTypeId, array $data): array
    {
        return $this->api("/rest/accounts/addresses/option_types/{$optionTypeId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes an address option. The ID of the option must be specified.
     * @tag Account
     * @param int $optionId The ID of the address option
     */
    public function deleteAccountsAddressesOptionByOptionId(int $optionId)
    {
        return $this->api("/rest/accounts/addresses/options/{$optionId}", 'DELETE');
    }
                
    /**
     * @description Gets an address option. The ID of the option must be specified.
     * @tag Account
     * @param int $optionId The ID of the address option
     * @return array
     *      - *id* - integer
     *          - The ID of the address option
     *      - *addressId* - integer
     *          - The ID of the address
     *      - *typeId* - integer
     *          - The ID of the address option type
     *      - *value* - string
     *          - The option value
     *      - *position* - integer
     *          - The position for sorting
     *      - *createdAt* - string
     *          - The time the option was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the option was last updated as unix timestamp
     */
    public function getAccountsAddressesOptionByOptionId(int $optionId): array
    {
        return $this->api("/rest/accounts/addresses/options/{$optionId}");
    }
                
    /**
     * @description Updates an address option. The ID of the option must be specified.
     * @tag Account
     * @param int $optionId The ID of the address option
     * @return array
     *      - *id* - integer
     *          - The ID of the address option
     *      - *addressId* - integer
     *          - The ID of the address
     *      - *typeId* - integer
     *          - The ID of the address option type
     *      - *value* - string
     *          - The option value
     *      - *position* - integer
     *          - The position for sorting
     *      - *createdAt* - string
     *          - The time the option was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the option was last updated as unix timestamp
     */
    public function updateAccountsAddressesOptionByOptionId(int $optionId): array
    {
        return $this->api("/rest/accounts/addresses/options/{$optionId}", 'PUT');
    }
                
    /**
     * @description Lists the address POS relations.
     * @tag Account
     * @param array $query
     *      - *page* - int - optional
     *          - page
     *      - *itemsPerPage* - int - optional
     *          - items per page
     *      - *with* - string - optional
     *          - Includes the specified address pos relation information in the results. The following parameters are available: address and type. More than one parameter should be separated by commas.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of AddressPosRelation
     */
    public function eachAccountsAddressesPosRelations(array $query = []): Iterator
    {
        return $this->eachInternal('getAccountsAddressesPosRelations', func_get_args());
    }
        
    /**
     * @description Lists the address POS relations.
     * @tag Account
     * @param array $query
     *      - *page* - int - optional
     *          - page
     *      - *itemsPerPage* - int - optional
     *          - items per page
     *      - *with* - string - optional
     *          - Includes the specified address pos relation information in the results. The following parameters are available: address and type. More than one parameter should be separated by commas.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of AddressPosRelation
     */
    public function batchAccountsAddressesPosRelations(array $query = []): Iterator
    {
        return $this->batchInternal('getAccountsAddressesPosRelations', func_get_args());
    }
    
    /**
     * @description Lists the address POS relations.
     * @tag Account
     * @param array $query
     *      - *page* - int - optional
     *          - page
     *      - *itemsPerPage* - int - optional
     *          - items per page
     *      - *with* - string - optional
     *          - Includes the specified address pos relation information in the results. The following parameters are available: address and type. More than one parameter should be separated by commas.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of AddressPosRelation
     */
    public function getAccountsAddressesPosRelations(array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/addresses/pos_relations"], $query));
    }
                
    /**
     * @description Creates an address POS relation.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the address POS relation
     *      - *posBaseId* - string
     *          - The ID of the POS base
     *      - *addressId* - string
     *          - The ID of the address
     *      - *typeId* - integer
     *          - The ID of the relation type
     */
    public function createAccountsAddressesPosRelation(array $data): array
    {
        return $this->api("/rest/accounts/addresses/pos_relations", 'POST', $data);
    }
                    
    /**
     * @description Deletes an address POS relation. The ID of the address POS relation must be specified.
     * @tag Account
     * @param int $addressPosRelationId The ID of the address POS relation
     */
    public function deleteAccountsAddressesPosRelationByAddressPosRelationId(int $addressPosRelationId)
    {
        return $this->api("/rest/accounts/addresses/pos_relations/{$addressPosRelationId}", 'DELETE');
    }
                
    /**
     * @description Gets an address POS relation. The ID of the address POS relation must be specified.
     * @tag Account
     * @param int $addressPosRelationId The ID of the address POS relation
     * @return array
     *      - *id* - integer
     *          - The ID of the address POS relation
     *      - *posBaseId* - string
     *          - The ID of the POS base
     *      - *addressId* - string
     *          - The ID of the address
     *      - *typeId* - integer
     *          - The ID of the relation type
     */
    public function getAccountsAddressesPosRelationByAddressPosRelationId(int $addressPosRelationId): array
    {
        return $this->api("/rest/accounts/addresses/pos_relations/{$addressPosRelationId}");
    }
                
    /**
     * @description Updates an address POS relation. The ID of the address POS relation must be specified.
     * @tag Account
     * @param int $addressPosRelationId The ID of the address POS relation
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the address POS relation
     *      - *posBaseId* - string
     *          - The ID of the POS base
     *      - *addressId* - string
     *          - The ID of the address
     *      - *typeId* - integer
     *          - The ID of the relation type
     */
    public function updateAccountsAddressesPosRelationByAddressPosRelationId(int $addressPosRelationId, array $data): array
    {
        return $this->api("/rest/accounts/addresses/pos_relations/{$addressPosRelationId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists the address relation types.
     * @tag Account
     * @return array
     */
    public function getAccountsAddressesRelationTypes(): array
    {
        return $this->api("/rest/accounts/addresses/relation_types");
    }
                    
    /**
     * @description Lists address relation types. The application and the language must be specified.

<br>Possible applications:
<ul>
<li>contact</li>
<li>order</li>
<li>warehouse</li>
<li>pos</li>
</ul>
     * @tag Account
     * @param string $application The application type
     * @param string $lang The language as ISO 639-1 code (e.g. `en` for English)
     */
    public function getAccountsAddressesRelationsTypesApplicationByApplicationLang(string $application, string $lang)
    {
        return $this->api("/rest/accounts/addresses/relations/types/applications/{$application}/{$lang}");
    }
                    
    /**
     * @description Creates an address warehouse relation.
     * @tag Account
     * @return array
     *      - *id* - integer
     *          - The ID of the address warehouse relation
     *      - *warehouseId* - integer
     *          - The ID of the warehouse
     *      - *typeId* - integer
     *          - The ID of the type
     *      - *addressId* - integer
     *          - The ID of the address
     */
    public function createAccountsAddressesWarehouseRelation(): array
    {
        return $this->api("/rest/accounts/addresses/warehouse_relations", 'POST');
    }
                    
    /**
     * @description Deletes an address warehouse relation. The ID of the relation must be specified.
     * @tag Account
     * @param int $relationId The ID of the address warehouse relation
     */
    public function deleteAccountsAddressesWarehouseRelationByRelationId(int $relationId)
    {
        return $this->api("/rest/accounts/addresses/warehouse_relations/{$relationId}", 'DELETE');
    }
                
    /**
     * @description Updates an address warehouse relation. The ID of the relation must be specified.
     * @tag Account
     * @param int $relationId The ID of the address warehouse relation
     * @return array
     *      - *id* - integer
     *          - The ID of the address warehouse relation
     *      - *warehouseId* - integer
     *          - The ID of the warehouse
     *      - *typeId* - integer
     *          - The ID of the type
     *      - *addressId* - integer
     *          - The ID of the address
     */
    public function updateAccountsAddressesWarehouseRelationByRelationId(int $relationId): array
    {
        return $this->api("/rest/accounts/addresses/warehouse_relations/{$relationId}", 'PUT');
    }
                    
    /**
     * @description Deletes an address. The ID of the address must be specified.
     * @tag Account
     * @param int $addressId The ID of the address
     */
    public function deleteAccountsAddressByAddressId(int $addressId)
    {
        return $this->api("/rest/accounts/addresses/{$addressId}", 'DELETE');
    }
                
    /**
     * @description Gets an address. The ID of the address must be specified.
     * @tag Account
     * @param int $addressId The ID of the address
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified address information in the results. The following parameters are available: <code>options</code>, <code>contactRelations</code>, <code>orderRelations</code>, <code>warehouseRelations</code>, <code>schedulerRelations</code>, <code>reorderRelations</code>. More than one parameter should be separated by commas
     * @return array
     *      - *id* - integer
     *          - The ID of the address
     *      - *gender* - string
     *          - The gender ("female", "male" or "diverse")
     *      - *name1* - string
     *          - The name 1 field (defaults to: company name)
     *      - *name2* - string
     *          - The name 2 field (defaults to: first name)
     *      - *name3* - string
     *          - The name 3 field (defaults to: last name)
     *      - *name4* - string
     *          - The name 4 field (defaults to: c/o)
     *      - *address1* - string
     *          - The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *      - *address2* - string
     *          - The address 2 field (defaults to: houseNumber|packstationNo)
     *      - *address3* - string
     *          - The address 3 field (defaults to: additional)
     *      - *address4* - string
     *          - The address 4 field is currently undefined and can be freely used.
     *      - *postalCode* - string
     *          - The postcode
     *      - *town* - string
     *          - The town
     *      - *countryId* - integer
     *          - The ID of the country
     *      - *stateId* - integer
     *          - The ID of the state
     *      - *readOnly* - boolean
     *          - Flag that indicates if the data record is read only
     *      - *companyName* - string
     *          - The company name (alias for name1, <i>read only</i>)
     *      - *firstName* - string
     *          - The first name (alias for name2, <i>read only</i>)
     *      - *lastName* - string
     *          - The last name (alias for name3, <i>read only</i>)
     *      - *careOf* - string
     *          - The c/o (alias for name4, <i>read only</i>)
     *      - *street* - string
     *          - The street (alias for address1, <i>read only</i>)
     *      - *houseNumber* - string
     *          - The house number (alias for address2, <i>read only</i>)
     *      - *additional* - string
     *          - The additional address information (alias for address3, <i>read only</i>)
     *      - *checkedAt* - string
     *          - The time the address was checked as unix timestamp
     *      - *createdAt* - string
     *          - The time the address was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the address was last updated as unix timestamp
     *      - *taxIdNumber* - string
     *          - The taxIdNumber option (alias for option with typeId 1, <i>read only</i>)
     *      - *externalId* - string
     *          - The externalId option (alias for option with typeId 2, <i>read only</i>)
     *      - *entryCertificate* - boolean
     *          - The entryCertificate option (alias for option with typeId 3, <i>read only</i>)
     *      - *phone* - string
     *          - The phone option (alias for option with typeId 4, <i>read only</i>)
     *      - *email* - string
     *          - The email option (alias for option with typeId 5, <i>read only</i>)
     *      - *postident* - string
     *          - The PostIdent option (alias for option with typeId 6, <i>read only</i>)
     *      - *personalNumber* - string
     *          - The personal number option (alias for option with typeId 7, <i>read only</i>)
     *      - *fsk* - string
     *          - The age rating option (alias for option with typeId 8, <i>read only</i>)
     *      - *birthday* - string
     *          - The birthday option (alias for option with typeId 9, <i>read only</i>)
     *      - *title* - string
     *          - The title option (alias for option with typeId 11, <i>read only</i>)
     *      - *sessionId* - string
     *          - The fronetnd session ID that was used when the address was created (alias for option with typeId 10, <i>read only</i>)
     *      - *contactPerson* - string
     *          - The contact person option (alias for option with typeId 12, <i>read only</i>)
     *      - *externalCustomerId* - string
     *          - The external customer ID option (alias for option with typeId 13, <i>read only</i>)
     *      - *packstationNo* - string
     *          - The packstation number (alias for houseNumber and address2, <i>read only</i>)
     *      - *isPackstation* - boolean
     *          - Flag that indicates if the address is a packstation
     *      - *isPostfiliale* - boolean
     *          - Flag that indicates if the address is a postfiliale (post office)
     */
    public function getAccountsAddressByAddressId(int $addressId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/addresses/{$addressId}"], $query));
    }
                
    /**
     * @description Updates an address. The ID of the address must be specified.
     * @tag Account
     * @param int $addressId The ID of the address
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the address
     *      - *gender* - string
     *          - The gender ("female", "male" or "diverse")
     *      - *name1* - string
     *          - The name 1 field (defaults to: company name)
     *      - *name2* - string
     *          - The name 2 field (defaults to: first name)
     *      - *name3* - string
     *          - The name 3 field (defaults to: last name)
     *      - *name4* - string
     *          - The name 4 field (defaults to: c/o)
     *      - *address1* - string
     *          - The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *      - *address2* - string
     *          - The address 2 field (defaults to: houseNumber|packstationNo)
     *      - *address3* - string
     *          - The address 3 field (defaults to: additional)
     *      - *address4* - string
     *          - The address 4 field is currently undefined and can be freely used.
     *      - *postalCode* - string
     *          - The postcode
     *      - *town* - string
     *          - The town
     *      - *countryId* - integer
     *          - The ID of the country
     *      - *stateId* - integer
     *          - The ID of the state
     *      - *readOnly* - boolean
     *          - Flag that indicates if the data record is read only
     *      - *companyName* - string
     *          - The company name (alias for name1, <i>read only</i>)
     *      - *firstName* - string
     *          - The first name (alias for name2, <i>read only</i>)
     *      - *lastName* - string
     *          - The last name (alias for name3, <i>read only</i>)
     *      - *careOf* - string
     *          - The c/o (alias for name4, <i>read only</i>)
     *      - *street* - string
     *          - The street (alias for address1, <i>read only</i>)
     *      - *houseNumber* - string
     *          - The house number (alias for address2, <i>read only</i>)
     *      - *additional* - string
     *          - The additional address information (alias for address3, <i>read only</i>)
     *      - *checkedAt* - string
     *          - The time the address was checked as unix timestamp
     *      - *createdAt* - string
     *          - The time the address was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the address was last updated as unix timestamp
     *      - *taxIdNumber* - string
     *          - The taxIdNumber option (alias for option with typeId 1, <i>read only</i>)
     *      - *externalId* - string
     *          - The externalId option (alias for option with typeId 2, <i>read only</i>)
     *      - *entryCertificate* - boolean
     *          - The entryCertificate option (alias for option with typeId 3, <i>read only</i>)
     *      - *phone* - string
     *          - The phone option (alias for option with typeId 4, <i>read only</i>)
     *      - *email* - string
     *          - The email option (alias for option with typeId 5, <i>read only</i>)
     *      - *postident* - string
     *          - The PostIdent option (alias for option with typeId 6, <i>read only</i>)
     *      - *personalNumber* - string
     *          - The personal number option (alias for option with typeId 7, <i>read only</i>)
     *      - *fsk* - string
     *          - The age rating option (alias for option with typeId 8, <i>read only</i>)
     *      - *birthday* - string
     *          - The birthday option (alias for option with typeId 9, <i>read only</i>)
     *      - *title* - string
     *          - The title option (alias for option with typeId 11, <i>read only</i>)
     *      - *sessionId* - string
     *          - The fronetnd session ID that was used when the address was created (alias for option with typeId 10, <i>read only</i>)
     *      - *contactPerson* - string
     *          - The contact person option (alias for option with typeId 12, <i>read only</i>)
     *      - *externalCustomerId* - string
     *          - The external customer ID option (alias for option with typeId 13, <i>read only</i>)
     *      - *packstationNo* - string
     *          - The packstation number (alias for houseNumber and address2, <i>read only</i>)
     *      - *isPackstation* - boolean
     *          - Flag that indicates if the address is a packstation
     *      - *isPostfiliale* - boolean
     *          - Flag that indicates if the address is a postfiliale (post office)
     */
    public function updateAccountsAddressByAddressId(int $addressId, array $data): array
    {
        return $this->api("/rest/accounts/addresses/{$addressId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes an address option. The ID of the address must be specified.
     * @tag Account
     * @param int $addressId The ID of the address
     */
    public function deleteAccountsAddressesOptionByAddressId(int $addressId)
    {
        return $this->api("/rest/accounts/addresses/{$addressId}/options", 'DELETE');
    }
                
    /**
     * @description Lists address options. The ID of the address must be specified.
     * @tag Account
     * @param int $addressId The ID of the address
     * @return array
     */
    public function getAccountsAddressesOptionsByAddressId(int $addressId): array
    {
        return $this->api("/rest/accounts/addresses/{$addressId}/options");
    }
                
    /**
     * @description Creates an address option. The ID of the address must be specified.
     * @tag Account
     * @param int $addressId The ID of the address
     * @param array $data 
     * @return array
     */
    public function createAccountsAddressesOptionByAddressId(int $addressId, array $data): array
    {
        return $this->api("/rest/accounts/addresses/{$addressId}/options", 'POST', $data);
    }
                
    /**
     * @description Updates an address option. The ID of the address must be specified.
     * @tag Account
     * @param int $addressId The ID of the address
     * @param array $data 
     * @return array
     */
    public function updateAccountsAddressesOptionByAddressId(int $addressId, array $data): array
    {
        return $this->api("/rest/accounts/addresses/{$addressId}/options", 'PUT', $data);
    }
                    
    /**
     * @description Gets the address data by the address ID. The ID of the address must be specified.
     * @tag Account
     * @param int $addressId The ID of the address
     * @param array $query
     *      - *orderIds* - string - optional
     *          - The ID of the orders
     * @return array
     *      - *id* - integer
     *          - The ID of the address
     *      - *gender* - string
     *          - The gender ("female", "male" or "diverse")
     *      - *name1* - string
     *          - The name 1 field (defaults to: company name)
     *      - *name2* - string
     *          - The name 2 field (defaults to: first name)
     *      - *name3* - string
     *          - The name 3 field (defaults to: last name)
     *      - *name4* - string
     *          - The name 4 field (defaults to: c/o)
     *      - *address1* - string
     *          - The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *      - *address2* - string
     *          - The address 2 field (defaults to: houseNumber|packstationNo)
     *      - *address3* - string
     *          - The address 3 field (defaults to: additional)
     *      - *address4* - string
     *          - The address 4 field is currently undefined and can be freely used.
     *      - *postalCode* - string
     *          - The postcode
     *      - *town* - string
     *          - The town
     *      - *countryId* - integer
     *          - The ID of the country
     *      - *stateId* - integer
     *          - The ID of the state
     *      - *readOnly* - boolean
     *          - Flag that indicates if the data record is read only
     *      - *companyName* - string
     *          - The company name (alias for name1, <i>read only</i>)
     *      - *firstName* - string
     *          - The first name (alias for name2, <i>read only</i>)
     *      - *lastName* - string
     *          - The last name (alias for name3, <i>read only</i>)
     *      - *careOf* - string
     *          - The c/o (alias for name4, <i>read only</i>)
     *      - *street* - string
     *          - The street (alias for address1, <i>read only</i>)
     *      - *houseNumber* - string
     *          - The house number (alias for address2, <i>read only</i>)
     *      - *additional* - string
     *          - The additional address information (alias for address3, <i>read only</i>)
     *      - *checkedAt* - string
     *          - The time the address was checked as unix timestamp
     *      - *createdAt* - string
     *          - The time the address was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the address was last updated as unix timestamp
     *      - *taxIdNumber* - string
     *          - The taxIdNumber option (alias for option with typeId 1, <i>read only</i>)
     *      - *externalId* - string
     *          - The externalId option (alias for option with typeId 2, <i>read only</i>)
     *      - *entryCertificate* - boolean
     *          - The entryCertificate option (alias for option with typeId 3, <i>read only</i>)
     *      - *phone* - string
     *          - The phone option (alias for option with typeId 4, <i>read only</i>)
     *      - *email* - string
     *          - The email option (alias for option with typeId 5, <i>read only</i>)
     *      - *postident* - string
     *          - The PostIdent option (alias for option with typeId 6, <i>read only</i>)
     *      - *personalNumber* - string
     *          - The personal number option (alias for option with typeId 7, <i>read only</i>)
     *      - *fsk* - string
     *          - The age rating option (alias for option with typeId 8, <i>read only</i>)
     *      - *birthday* - string
     *          - The birthday option (alias for option with typeId 9, <i>read only</i>)
     *      - *title* - string
     *          - The title option (alias for option with typeId 11, <i>read only</i>)
     *      - *sessionId* - string
     *          - The fronetnd session ID that was used when the address was created (alias for option with typeId 10, <i>read only</i>)
     *      - *contactPerson* - string
     *          - The contact person option (alias for option with typeId 12, <i>read only</i>)
     *      - *externalCustomerId* - string
     *          - The external customer ID option (alias for option with typeId 13, <i>read only</i>)
     *      - *packstationNo* - string
     *          - The packstation number (alias for houseNumber and address2, <i>read only</i>)
     *      - *isPackstation* - boolean
     *          - Flag that indicates if the address is a packstation
     *      - *isPostfiliale* - boolean
     *          - Flag that indicates if the address is a postfiliale (post office)
     */
    public function getAccountsAddressesRelatedDataByAddressId(int $addressId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/addresses/{$addressId}/related_data"], $query));
    }
                    
    /**
     * @description Deletes multiple companies based on their IDs. The IDs of the companies must be specified.
     * @tag Account

     */
    public function deleteAccountsBatchDelete()
    {
        return $this->api("/rest/accounts/batchDelete", 'DELETE');
    }
                    
    /**
     * @description Create a company contact relation. The ID of the account contact relation must be specified.
An account is equivalent to a company.
     * @tag Account
     * @param array $query
     *      - *accountId* - int - required
     *          - The ID of the company. An account is equivalent to a company.
     *      - *contactId* - int - required
     *          - The ID of the contact.
     * @return array
     *      - *id* - integer
     *          - The ID of the account contact relation
     *      - *accountId* - integer
     *          - The ID of the foreign key account
     *      - *contactId* - integer
     *          - The ID of the foreign key contact
     */
    public function createAccountsContactRelation(array $query): array
    {
        return $this->api(array_merge(["/rest/accounts/contact_relations"], $query), 'POST');
    }
                    
    /**
     * @description Deletes a company contact relation. The ID of the account contact relation must be specified.
An account is equivalent to a company.
     * @tag Account
     * @param int $accountContactRelationId The ID of the company contact relation
     */
    public function deleteAccountsContactRelationByAccountContactRelationId(int $accountContactRelationId)
    {
        return $this->api("/rest/accounts/contact_relations/{$accountContactRelationId}", 'DELETE');
    }
                
    /**
     * @description Gets a company contact relation. The ID of the account contact relation must be specified.
An account is equivalent to a company.
     * @tag Account
     * @param int $accountContactRelationId The ID of the company contact relation
     * @return array
     *      - *id* - integer
     *          - The ID of the account contact relation
     *      - *accountId* - integer
     *          - The ID of the foreign key account
     *      - *contactId* - integer
     *          - The ID of the foreign key contact
     */
    public function getAccountsContactRelationByAccountContactRelationId(int $accountContactRelationId): array
    {
        return $this->api("/rest/accounts/contact_relations/{$accountContactRelationId}");
    }
                    
    /**
     * @description Update an account contact relation isPrimary field. The ID of the account contact relation must be specified.
An account is equivalent to a company.
     * @tag Account
     * @param int $accountContactRelationId The ID of the company contact relation
     * @param array $query
     *      - *isPrimary* - boolean - required
     *          - Sets one contact per account as the primary contact.
     * @return array
     *      - *id* - integer
     *          - The ID of the account contact relation
     *      - *accountId* - integer
     *          - The ID of the foreign key account
     *      - *contactId* - integer
     *          - The ID of the foreign key contact
     */
    public function updateAccountsContactRelationsPrimaryByAccountContactRelationId(int $accountContactRelationId, array $query): array
    {
        return $this->api(array_merge(["/rest/accounts/contact_relations/{$accountContactRelationId}/primary"], $query), 'PUT');
    }
                
    /**
     * @description Lists all contacts.
     * @tag Account
     * @param array $query
     *      - *fullText* - string - optional
     *          - Filter for a fulltext search
     *      - *contactEmail* - string - optional
     *          - Filter that restricts
     * the search result to contacts resembling to the given email address
     *      - *email* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific email address
     *      - *postalCode* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific postcode
     *      - *plentyId* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific plentyId
     *      - *externalId* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific externalId
     *      - *number* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific number
     *      - *typeId* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific contact type
     *      - *rating* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific rating
     *      - *createdAtBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were created before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *createdAtAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were created after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *updatedAtBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were updated before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *updatedAtAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were updated after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *lastOrderAtBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts whose last order was created before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *lastOrderAtAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts whose last order was created after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *with* - string - optional
     *          - Includes the specified contact information in the
     * results. The following parameters are available: addresses, accounts,
     * options, orderSummary, primaryBillingAddress,
     * contactOrders. More than one parameter should be separated by commas.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *newsletterAllowanceAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts who registered for the newsletter after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *newsletterAllowanceBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts who registered for the newsletter before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *newsletterAllowance* - string - optional
     *          - Filter that restricts the
     * search result to contacts who registered for the newsletter. Possible values: 'true' and 'false'.
     * True: newsletter registration was successful. False: newsletter registration was not successful.
     *      - *contactId* - int - optional
     *          - Filter that restricts the
     * search result to a specific contact
     *      - *contactAddress* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific address
     *      - *countryId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific country
     *      - *userId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific user
     *      - *referrerId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific referrer
     *      - *name* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific name
     *      - *nameOrId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific name or ID.
     *      - *town* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific town
     *      - *privatePhone* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a private phone number
     *      - *billingAddressId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a billing address with the ID provided
     *      - *deliveryAddressId* - string - optional
     *          - Filter that restricts
     * the search result to contacts with a delivery address with the ID provided
     *      - *tagIds* - array - optional
     *          - Filter restricts the list of
     * results to contacts with the specified tagIds. More than one ID should be separated by commas.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Contact
     */
    public function eachAccountsContacts(array $query = []): Iterator
    {
        return $this->eachInternal('getAccountsContacts', func_get_args());
    }
        
    /**
     * @description Lists all contacts.
     * @tag Account
     * @param array $query
     *      - *fullText* - string - optional
     *          - Filter for a fulltext search
     *      - *contactEmail* - string - optional
     *          - Filter that restricts
     * the search result to contacts resembling to the given email address
     *      - *email* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific email address
     *      - *postalCode* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific postcode
     *      - *plentyId* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific plentyId
     *      - *externalId* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific externalId
     *      - *number* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific number
     *      - *typeId* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific contact type
     *      - *rating* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific rating
     *      - *createdAtBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were created before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *createdAtAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were created after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *updatedAtBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were updated before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *updatedAtAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were updated after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *lastOrderAtBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts whose last order was created before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *lastOrderAtAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts whose last order was created after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *with* - string - optional
     *          - Includes the specified contact information in the
     * results. The following parameters are available: addresses, accounts,
     * options, orderSummary, primaryBillingAddress,
     * contactOrders. More than one parameter should be separated by commas.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *newsletterAllowanceAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts who registered for the newsletter after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *newsletterAllowanceBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts who registered for the newsletter before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *newsletterAllowance* - string - optional
     *          - Filter that restricts the
     * search result to contacts who registered for the newsletter. Possible values: 'true' and 'false'.
     * True: newsletter registration was successful. False: newsletter registration was not successful.
     *      - *contactId* - int - optional
     *          - Filter that restricts the
     * search result to a specific contact
     *      - *contactAddress* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific address
     *      - *countryId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific country
     *      - *userId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific user
     *      - *referrerId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific referrer
     *      - *name* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific name
     *      - *nameOrId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific name or ID.
     *      - *town* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific town
     *      - *privatePhone* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a private phone number
     *      - *billingAddressId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a billing address with the ID provided
     *      - *deliveryAddressId* - string - optional
     *          - Filter that restricts
     * the search result to contacts with a delivery address with the ID provided
     *      - *tagIds* - array - optional
     *          - Filter restricts the list of
     * results to contacts with the specified tagIds. More than one ID should be separated by commas.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Contact
     */
    public function batchAccountsContacts(array $query = []): Iterator
    {
        return $this->batchInternal('getAccountsContacts', func_get_args());
    }
    
    /**
     * @description Lists all contacts.
     * @tag Account
     * @param array $query
     *      - *fullText* - string - optional
     *          - Filter for a fulltext search
     *      - *contactEmail* - string - optional
     *          - Filter that restricts
     * the search result to contacts resembling to the given email address
     *      - *email* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific email address
     *      - *postalCode* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific postcode
     *      - *plentyId* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific plentyId
     *      - *externalId* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific externalId
     *      - *number* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific number
     *      - *typeId* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific contact type
     *      - *rating* - int - optional
     *          - Filter that restricts the
     * search result to contacts with a specific rating
     *      - *createdAtBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were created before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *createdAtAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were created after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *updatedAtBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were updated before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *updatedAtAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts that were updated after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *lastOrderAtBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts whose last order was created before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *lastOrderAtAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts whose last order was created after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *with* - string - optional
     *          - Includes the specified contact information in the
     * results. The following parameters are available: addresses, accounts,
     * options, orderSummary, primaryBillingAddress,
     * contactOrders. More than one parameter should be separated by commas.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *newsletterAllowanceAfter* - string - optional
     *          - Filter that restricts the
     * search result to contacts who registered for the newsletter after a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *newsletterAllowanceBefore* - string - optional
     *          - Filter that restricts the
     * search result to contacts who registered for the newsletter before a specific date.
     * Possible formats: yyyy-mm-dd, mm/dd/yyyy.
     *      - *newsletterAllowance* - string - optional
     *          - Filter that restricts the
     * search result to contacts who registered for the newsletter. Possible values: 'true' and 'false'.
     * True: newsletter registration was successful. False: newsletter registration was not successful.
     *      - *contactId* - int - optional
     *          - Filter that restricts the
     * search result to a specific contact
     *      - *contactAddress* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific address
     *      - *countryId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific country
     *      - *userId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific user
     *      - *referrerId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific referrer
     *      - *name* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific name
     *      - *nameOrId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific name or ID.
     *      - *town* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a specific town
     *      - *privatePhone* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a private phone number
     *      - *billingAddressId* - string - optional
     *          - Filter that restricts the
     * search result to contacts with a billing address with the ID provided
     *      - *deliveryAddressId* - string - optional
     *          - Filter that restricts
     * the search result to contacts with a delivery address with the ID provided
     *      - *tagIds* - array - optional
     *          - Filter restricts the list of
     * results to contacts with the specified tagIds. More than one ID should be separated by commas.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Contact
     */
    public function getAccountsContacts(array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts"], $query));
    }
                
    /**
     * @description Creates a contact.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact
     *      - *externalId* - string
     *          - The external ID of the contact
     *      - *number* - string
     *          - The number of the contact (previous customer number)
     *      - *typeId* - integer
     *          - The ID of the contact type
     *      - *firstName* - string
     *          - The first name of the contact
     *      - *lastName* - string
     *          - The last name of the contact
     *      - *fullName* - string
     *          - The full name of the contact. A concatenation of first and last name.
     *      - *email* - string
     *          - The private email address of the contact
     *      - *secondaryEmail* - string
     *          - The secondary private email address of the contact
     *      - *gender* - string
     *          - The gender of the contact ("female", "male" or "diverse")
     *      - *title* - string
     *          - The title of the contact, e.g. a doctorate
     *      - *formOfAddress* - string
     *          - The form of address for the contact
     *      - *newsletterAllowanceAt* - string
     *          - The time the contact registered for the newsletter as unix timestamp
     *      - *classId* - integer
     *          - The ID of the contact class
     *      - *blocked* - integer
     *          - The blocked status of the contact. Contacts can be blocked for a specific client (store). Possible values:
<ul>
<li> 0 = not blocked</li>
<li> 1 = blocked</li>
</ul>
     *      - *rating* - integer
     *          - The rating of the contact. This rating is for internal use only.
5 red stars are for the worst and 5 yellow stars for the best rating. Possible values:
<ul>
<li>-5 = 5 red stars (worst rating)</li>
<li>-4 = 4 red stars</li>
<li>-3 = 3 red stars</li>
<li>-2 = 2 red stars</li>
<li>-1 = 1 red star</li>
<li>0 = 5 grey stars, no rating saved for the contact</li>
<li>1 = 1 yellow star</li>
<li>2 = 2 yellow stars</li>
<li>3 = 3 yellow stars</li>
<li>4 = 4 yellow stars</li>
<li>5 = 5 yellow stars (best rating)</li>
</ul>
     *      - *bookAccount* - string
     *          - The book account (debtor account) of the contact.
An additional, separate number that generally corresponds to the customer number or
the debtor number in your financial accounting.
     *      - *lang* - string
     *          - The language of the contact
     *      - *referrerId* - number
     *          - The origin of the contact
     *      - *plentyId* - integer
     *          - The client (store) that is assigned to the contact
     *      - *userId* - integer
     *          - The owner ID of the contact
     *      - *birthdayAt* - string
     *          - The date of birth of the contact
     *      - *lastLoginAt* - string
     *          - The date of the last login of the contact
     *      - *lastLoginAtTimestamp* - string
     *          - The date of the last login of the contact
     *      - *lastOrderAt* - string
     *          - The date of the last order
     *      - *createdAt* - string
     *          - The date the contact was created
     *      - *updatedAt* - string
     *          - The date the contact was last updated
     *      - *privatePhone* - string
     *          - The private phone number of the contact
     *      - *privateFax* - string
     *          - The private fax number of the contact
     *      - *privateMobile* - string
     *          - The private mobile phone number of the contact
     *      - *ebayName* - string
     *          - The eBay account name of the contact
     *      - *paypalEmail* - string
     *          - The email address of the PayPal account of the contact
     *      - *paypalPayerId* - string
     *          - The PayPal payer id of the contact
     *      - *klarnaPersonalId* - string
     *          - The Klarna personal id of the contact
     *      - *dhlPostIdent* - string
     *          - The DHL PostIdent of the contact
     *      - *forumUsername* - string
     *          - The user name of the contact in the forum
     *      - *forumGroupId* - string
     *          - The ID of the forum group that is assigned to the contact
     *      - *singleAccess* - string
     *          - The access type of the contact
     *      - *contactPerson* - string
     *          - The contact person of the contact
     *      - *marketplacePartner* - string
     *          - The marketplace partner status of the contact
     *      - *valuta* - integer
     *          - The foreign currency of the contact
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The salesRepresentative ID of the contact
     *      - *anonymizeAt* - string
     *          - The date at which the contact will be anonymized.
     *      - *isLead* - boolean
     *          - Defines if contact is a lead.
     *      - *leadStatusKey* - string
     *          - The current lead status key
     *      - *inLeadStatusSince* - integer
     *          - The number of days since the current lead status has been set
     *      - *leadStatusUpdateAt* - string
     *          - DEPRECATED - See leadStatusUpdatedAt
     *      - *position_id* - integer
     *          - The job position ID of the contact
     */
    public function createAccountsContact(array $data): array
    {
        return $this->api("/rest/accounts/contacts", 'POST', $data);
    }
                    
    /**
     * @description Creates a bank account.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the bank account
     *      - *contactId* - integer
     *          - The ID of the contact the bank account belongs to
     *      - *orderId* - integer
     *          - The ID of the order the bank account belongs to
     *      - *accountOwner* - string
     *          - The owner of the bank account
     *      - *bankName* - string
     *          - The name of the bank
     *      - *bankAddress* - string
     *          - The address of the bank
     *      - *bankPostalCodeTown* - string
     *          - The postcode and town of the bank
     *      - *bankCountry* - string
     *          - The country of the bank
     *      - *iban* - string
     *          - The IBAN of the bank account
     *      - *bic* - string
     *          - The BIC of the bank account
     *      - *accountNumber* - string
     *          - The account number of the bank account
     *      - *sortCode* - string
     *          - The sort code of the bank account
     *      - *lastUpdateBy* - string
     *          - The source of the last change (possible values: `customer`, `backend`, `import`)
     *      - *directDebitMandateAvailable* - integer
     *          - Flag that indicates if a direct debit mandate is available
     *      - *directDebitMandateAt* - string
     *          - The time the direct debit mandate was created as unix timestamp
     *      - *directDebitMethod* - string
     *          - The direct debit method (possible values: `sepaDirectDebit`, `sepaB2bDirectDebit`)
     *      - *directDebitType* - string
     *          - The direct debit type (possible values: `first`, `next`)
     *      - *paymentMethod* - string
     *          - The payment method (possible values: `recurrent`, `onOff`)
     *      - *createdAt* - string
     *          - The time the bank account was created as  unix timestamp
     *      - *updatedAt* - string
     *          - The time the bank account was last updated as  unix timestamp
     */
    public function createAccountsContactsBank(array $data): array
    {
        return $this->api("/rest/accounts/contacts/banks", 'POST', $data);
    }
                    
    /**
     * @description Deletes a bank account. The ID of the bank account must be specified.
     * @tag Account
     * @param int $contactBankId The ID of the bank account
     */
    public function deleteAccountsContactsBankByContactBankId(int $contactBankId)
    {
        return $this->api("/rest/accounts/contacts/banks/{$contactBankId}", 'DELETE');
    }
                
    /**
     * @description Gets a bank account of the contact. The ID of the bank account must be specified.
     * @tag Account
     * @param int $contactBankId The ID of the bank account
     * @return array
     *      - *id* - integer
     *          - The ID of the bank account
     *      - *contactId* - integer
     *          - The ID of the contact the bank account belongs to
     *      - *orderId* - integer
     *          - The ID of the order the bank account belongs to
     *      - *accountOwner* - string
     *          - The owner of the bank account
     *      - *bankName* - string
     *          - The name of the bank
     *      - *bankAddress* - string
     *          - The address of the bank
     *      - *bankPostalCodeTown* - string
     *          - The postcode and town of the bank
     *      - *bankCountry* - string
     *          - The country of the bank
     *      - *iban* - string
     *          - The IBAN of the bank account
     *      - *bic* - string
     *          - The BIC of the bank account
     *      - *accountNumber* - string
     *          - The account number of the bank account
     *      - *sortCode* - string
     *          - The sort code of the bank account
     *      - *lastUpdateBy* - string
     *          - The source of the last change (possible values: `customer`, `backend`, `import`)
     *      - *directDebitMandateAvailable* - integer
     *          - Flag that indicates if a direct debit mandate is available
     *      - *directDebitMandateAt* - string
     *          - The time the direct debit mandate was created as unix timestamp
     *      - *directDebitMethod* - string
     *          - The direct debit method (possible values: `sepaDirectDebit`, `sepaB2bDirectDebit`)
     *      - *directDebitType* - string
     *          - The direct debit type (possible values: `first`, `next`)
     *      - *paymentMethod* - string
     *          - The payment method (possible values: `recurrent`, `onOff`)
     *      - *createdAt* - string
     *          - The time the bank account was created as  unix timestamp
     *      - *updatedAt* - string
     *          - The time the bank account was last updated as  unix timestamp
     */
    public function getAccountsContactsBankByContactBankId(int $contactBankId): array
    {
        return $this->api("/rest/accounts/contacts/banks/{$contactBankId}");
    }
                
    /**
     * @description Updates a bank account. The ID of the bank account must be specified.
     * @tag Account
     * @param int $contactBankId The ID of the bank account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the bank account
     *      - *contactId* - integer
     *          - The ID of the contact the bank account belongs to
     *      - *orderId* - integer
     *          - The ID of the order the bank account belongs to
     *      - *accountOwner* - string
     *          - The owner of the bank account
     *      - *bankName* - string
     *          - The name of the bank
     *      - *bankAddress* - string
     *          - The address of the bank
     *      - *bankPostalCodeTown* - string
     *          - The postcode and town of the bank
     *      - *bankCountry* - string
     *          - The country of the bank
     *      - *iban* - string
     *          - The IBAN of the bank account
     *      - *bic* - string
     *          - The BIC of the bank account
     *      - *accountNumber* - string
     *          - The account number of the bank account
     *      - *sortCode* - string
     *          - The sort code of the bank account
     *      - *lastUpdateBy* - string
     *          - The source of the last change (possible values: `customer`, `backend`, `import`)
     *      - *directDebitMandateAvailable* - integer
     *          - Flag that indicates if a direct debit mandate is available
     *      - *directDebitMandateAt* - string
     *          - The time the direct debit mandate was created as unix timestamp
     *      - *directDebitMethod* - string
     *          - The direct debit method (possible values: `sepaDirectDebit`, `sepaB2bDirectDebit`)
     *      - *directDebitType* - string
     *          - The direct debit type (possible values: `first`, `next`)
     *      - *paymentMethod* - string
     *          - The payment method (possible values: `recurrent`, `onOff`)
     *      - *createdAt* - string
     *          - The time the bank account was created as  unix timestamp
     *      - *updatedAt* - string
     *          - The time the bank account was last updated as  unix timestamp
     */
    public function updateAccountsContactsBankByContactBankId(int $contactBankId, array $data): array
    {
        return $this->api("/rest/accounts/contacts/banks/{$contactBankId}", 'PUT', $data);
    }
                    
    /**
     * @description Updates a batch of contacts.
     * @tag Account
     * @param array $query
     *      - *tagRelationships* - array - optional
     *          - When this parameter is used, the current relations between contacts and tags
     *     will be deleted and replaced by the given ones. If the parameter is not used, the current relations remain.
     */
    public function updateAccountsContactsBatchUpdate(array $query = [])
    {
        return $this->api(array_merge(["/rest/accounts/contacts/batch_update"], $query), 'PUT');
    }
                    
    /**
     * @description Lists the contact classes.
     * @tag Account
     * @return array
     */
    public function getAccountsContactsClasses(): array
    {
        return $this->api("/rest/accounts/contacts/classes");
    }
                
    /**
     * @description Creates a contact class
     * @tag Account
     * @return array
     *      - *id* - integer
     *          - The ID of the contact class
     *      - *name* - string
     *      - *priceColumn* - integer
     *      - *showPrice* - integer
     *          - Flag to display price in the online store as Gross(1) or Net(2)
     *      - *discountType* - integer
     *      - *position* - integer
     *      - *pqsQuantity1* - number
     *      - ** - number
     *          - pqsDiscount10
     *      - *pqsQuantity2* - number
     *      - *pqsQuantity3* - number
     *      - *pqsQuantity4* - number
     *      - *pqsQuantity5* - number
     *      - *pqsQuantity6* - number
     *      - *pqsQuantity7* - number
     *      - *pqsQuantity8* - number
     *      - *pqsQuantity9* - number
     *      - *pqsQuantity10* - number
     *      - *pnsQuantity1* - number
     *      - *pnsDiscount1* - number
     *      - *pnsQuantity2* - number
     *      - *pnsDiscount2* - number
     *      - *pnsQuantity3* - number
     *      - *pnsDiscount3* - number
     *      - *pnsQuantity4* - number
     *      - *pnsDiscount4* - number
     *      - *pnsQuantity5* - number
     *      - *pnsDiscount5* - number
     *      - *pmsMop* - string
     *      - *pmsDiscount* - number
     *      - *paqsDiscount* - number
     *      - *payableDueWithin* - integer
     *      - *minQuantity* - integer
     *      - *dontUseItemPriceRebates* - integer
     *      - *customerId* - integer
     *      - *allowedMops* - string
     *          - The list of allowed payment methods
     *      - *pdwQuantity1* - number
     *      - *pdwDays1* - integer
     *      - *pdwQuantity2* - number
     *      - *pdwDays2* - integer
     *      - *pdwQuantity3* - number
     *      - *pdwDays3* - integer
     *      - *pdwQuantity4* - number
     *      - *pdwDays4* - integer
     *      - *pdwQuantity5* - number
     *      - *pdwDays5* - integer
     *      - *customerGroupsPaymentNotice* - string
     *      - *earlyPaymentDiscount* - number
     *      - *earlyPaymentDiscountDays* - number
     *      - *valuta* - integer
     *      - *manualDiscount* - number
     *      - *allowedMethodOfPaymentIdsList* - array
     */
    public function createAccountsContactsClass(): array
    {
        return $this->api("/rest/accounts/contacts/classes", 'POST');
    }
                    
    /**
     * @description Lists the contact classes paginated
     * @tag Account
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getAccountsContactsClassesPaginated(): array
    {
        return $this->api("/rest/accounts/contacts/classes/paginated");
    }
                    
    /**
     * @description Deletes a contact class
     * @tag Account
     * @param int $contactClassId 
     */
    public function deleteAccountsContactsClassByContactClassId(int $contactClassId)
    {
        return $this->api("/rest/accounts/contacts/classes/{$contactClassId}", 'DELETE');
    }
                
    /**
     * @description Returns contact class model based on ID
     * @tag Account
     * @param int $contactClassId 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact class
     *      - *name* - string
     *      - *priceColumn* - integer
     *      - *showPrice* - integer
     *          - Flag to display price in the online store as Gross(1) or Net(2)
     *      - *discountType* - integer
     *      - *position* - integer
     *      - *pqsQuantity1* - number
     *      - ** - number
     *          - pqsDiscount10
     *      - *pqsQuantity2* - number
     *      - *pqsQuantity3* - number
     *      - *pqsQuantity4* - number
     *      - *pqsQuantity5* - number
     *      - *pqsQuantity6* - number
     *      - *pqsQuantity7* - number
     *      - *pqsQuantity8* - number
     *      - *pqsQuantity9* - number
     *      - *pqsQuantity10* - number
     *      - *pnsQuantity1* - number
     *      - *pnsDiscount1* - number
     *      - *pnsQuantity2* - number
     *      - *pnsDiscount2* - number
     *      - *pnsQuantity3* - number
     *      - *pnsDiscount3* - number
     *      - *pnsQuantity4* - number
     *      - *pnsDiscount4* - number
     *      - *pnsQuantity5* - number
     *      - *pnsDiscount5* - number
     *      - *pmsMop* - string
     *      - *pmsDiscount* - number
     *      - *paqsDiscount* - number
     *      - *payableDueWithin* - integer
     *      - *minQuantity* - integer
     *      - *dontUseItemPriceRebates* - integer
     *      - *customerId* - integer
     *      - *allowedMops* - string
     *          - The list of allowed payment methods
     *      - *pdwQuantity1* - number
     *      - *pdwDays1* - integer
     *      - *pdwQuantity2* - number
     *      - *pdwDays2* - integer
     *      - *pdwQuantity3* - number
     *      - *pdwDays3* - integer
     *      - *pdwQuantity4* - number
     *      - *pdwDays4* - integer
     *      - *pdwQuantity5* - number
     *      - *pdwDays5* - integer
     *      - *customerGroupsPaymentNotice* - string
     *      - *earlyPaymentDiscount* - number
     *      - *earlyPaymentDiscountDays* - number
     *      - *valuta* - integer
     *      - *manualDiscount* - number
     *      - *allowedMethodOfPaymentIdsList* - array
     */
    public function getAccountsContactsClassByContactClassId(int $contactClassId): array
    {
        return $this->api("/rest/accounts/contacts/classes/{$contactClassId}");
    }
                
    /**
     * @description Updates a contact class
     * @tag Account
     * @param int $contactClassId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact class
     *      - *name* - string
     *      - *priceColumn* - integer
     *      - *showPrice* - integer
     *          - Flag to display price in the online store as Gross(1) or Net(2)
     *      - *discountType* - integer
     *      - *position* - integer
     *      - *pqsQuantity1* - number
     *      - ** - number
     *          - pqsDiscount10
     *      - *pqsQuantity2* - number
     *      - *pqsQuantity3* - number
     *      - *pqsQuantity4* - number
     *      - *pqsQuantity5* - number
     *      - *pqsQuantity6* - number
     *      - *pqsQuantity7* - number
     *      - *pqsQuantity8* - number
     *      - *pqsQuantity9* - number
     *      - *pqsQuantity10* - number
     *      - *pnsQuantity1* - number
     *      - *pnsDiscount1* - number
     *      - *pnsQuantity2* - number
     *      - *pnsDiscount2* - number
     *      - *pnsQuantity3* - number
     *      - *pnsDiscount3* - number
     *      - *pnsQuantity4* - number
     *      - *pnsDiscount4* - number
     *      - *pnsQuantity5* - number
     *      - *pnsDiscount5* - number
     *      - *pmsMop* - string
     *      - *pmsDiscount* - number
     *      - *paqsDiscount* - number
     *      - *payableDueWithin* - integer
     *      - *minQuantity* - integer
     *      - *dontUseItemPriceRebates* - integer
     *      - *customerId* - integer
     *      - *allowedMops* - string
     *          - The list of allowed payment methods
     *      - *pdwQuantity1* - number
     *      - *pdwDays1* - integer
     *      - *pdwQuantity2* - number
     *      - *pdwDays2* - integer
     *      - *pdwQuantity3* - number
     *      - *pdwDays3* - integer
     *      - *pdwQuantity4* - number
     *      - *pdwDays4* - integer
     *      - *pdwQuantity5* - number
     *      - *pdwDays5* - integer
     *      - *customerGroupsPaymentNotice* - string
     *      - *earlyPaymentDiscount* - number
     *      - *earlyPaymentDiscountDays* - number
     *      - *valuta* - integer
     *      - *manualDiscount* - number
     *      - *allowedMethodOfPaymentIdsList* - array
     */
    public function updateAccountsContactsClassByContactClassId(int $contactClassId, array $data): array
    {
        return $this->api("/rest/accounts/contacts/classes/{$contactClassId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists the contact classes.
     * @tag Account
     * @return array
     */
    public function getAccountsContactsClassesWithData(): array
    {
        return $this->api("/rest/accounts/contacts/classesWithData");
    }
                
    /**
     * @description Lists contact events.
     * @tag Account
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ContactEvent
     */
    public function eachAccountsContactsContactEvents(array $query = []): Iterator
    {
        return $this->eachInternal('getAccountsContactsContactEvents', func_get_args());
    }
        
    /**
     * @description Lists contact events.
     * @tag Account
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ContactEvent
     */
    public function batchAccountsContactsContactEvents(array $query = []): Iterator
    {
        return $this->batchInternal('getAccountsContactsContactEvents', func_get_args());
    }
    
    /**
     * @description Lists contact events.
     * @tag Account
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ContactEvent
     */
    public function getAccountsContactsContactEvents(array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/contact_events"], $query));
    }
                
    /**
     * @description Creates a contact event.
     * @tag Account
     * @param array $data 
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return array
     *      - *eventId* - integer
     *          - The ID of the event
     *      - *contactId* - integer
     *          - The ID of the contact this event belongs to
     *      - *userId* - integer
     *          - The ID of the user this event belongs to
     *      - *eventDuration* - integer
     *          - The duration of the event in seconds
     *      - *eventType* - string
     *          - The type of the event. Possible values are call, ticket, email, meeting, webinar, development and design.
     *      - *orderRowId* - integer
     *      - *eventInfo* - string
     *          - Informational text about the event
     *      - *billable* - boolean
     *          - Billable if set to 1
     *      - *eventInsertedAt* - string
     *          - The date the event was created at as unix timestamp
     *      - *eventBilledAt* - string
     *          - The date the event was billed at as unix timestamp
     *      - *eventProvisionPaidAt* - string
     *          - The date the provision was paid at as unix timestamp
     *      - *eventCreditValue* - number
     *          - The credit value of the event
     */
    public function createAccountsContactsContactEvent(array $data, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/contact_events"], $query), 'POST', $data);
    }
                    
    /**
     * @description Get the contact event types as a key/value array.
     * @tag Account
     * @return array
     */
    public function getAccountsContactsContactEventsTypesPreview(): array
    {
        return $this->api("/rest/accounts/contacts/contact_events/types/preview");
    }
                    
    /**
     * @description Deletes a contact event. The ID of the contact event must be specified.
     * @tag Account
     * @param int $contactEventId The ID of the contact event
     */
    public function deleteAccountsContactsContactEventByContactEventId(int $contactEventId)
    {
        return $this->api("/rest/accounts/contacts/contact_events/{$contactEventId}", 'DELETE');
    }
                
    /**
     * @description Updates a contact event. The ID of the contact event must be specified.
     * @tag Account
     * @param int $contactEventId The ID of the contact event
     * @param array $data 
     * @return array
     *      - *eventId* - integer
     *          - The ID of the event
     *      - *contactId* - integer
     *          - The ID of the contact this event belongs to
     *      - *userId* - integer
     *          - The ID of the user this event belongs to
     *      - *eventDuration* - integer
     *          - The duration of the event in seconds
     *      - *eventType* - string
     *          - The type of the event. Possible values are call, ticket, email, meeting, webinar, development and design.
     *      - *orderRowId* - integer
     *      - *eventInfo* - string
     *          - Informational text about the event
     *      - *billable* - boolean
     *          - Billable if set to 1
     *      - *eventInsertedAt* - string
     *          - The date the event was created at as unix timestamp
     *      - *eventBilledAt* - string
     *          - The date the event was billed at as unix timestamp
     *      - *eventProvisionPaidAt* - string
     *          - The date the provision was paid at as unix timestamp
     *      - *eventCreditValue* - number
     *          - The credit value of the event
     */
    public function updateAccountsContactsContactEventByContactEventId(int $contactEventId, array $data): array
    {
        return $this->api("/rest/accounts/contacts/contact_events/{$contactEventId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all contact departments.
     * @tag Account
     * @return array
     */
    public function getAccountsContactsDepartments(): array
    {
        return $this->api("/rest/accounts/contacts/departments");
    }
                
    /**
     * @description Creates a contact department.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact department. It is possible to define individual departments. The following departments are available by default.
<ul>
<li>1 = Management</li>
<li>2 = Purchasing Department</li>
<li>3 = Sales Department</li>
<li>4 = Research & Development Team</li>
<li>5 = Production</li>
<li>6 = Quality Assurance</li>
<li>7 = Public Relations</li>
<li>8 = Marketing Department</li>
<li>9 = IT Department</li>
<li>10 = EDP Team</li>
<li>11 = Logistics</li>
<li>12 = Warehousing Department</li>
<li>13 = Export Department</li>
<li>14 = Import Department</li>
<li>15 = Customer Service</li>
<li>16 = Technical Support Team</li>
<li>17 = Human Resources</li>
<li>18 = Accounting Department</li>
<li>19 = Financial Department</li>
<li>20 = Legal Department</li>
<li>21 = Secretary's Office</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     */
    public function createAccountsContactsDepartment(array $data): array
    {
        return $this->api("/rest/accounts/contacts/departments", 'POST', $data);
    }
                    
    /**
     * @description Deletes a contact department. The ID of the department must be specified.
     * @tag Account
     * @param int $departmentId The ID of the department
     */
    public function deleteAccountsContactsDepartmentByDepartmentId(int $departmentId)
    {
        return $this->api("/rest/accounts/contacts/departments/{$departmentId}", 'DELETE');
    }
                
    /**
     * @description Gets a contact department. The ID of the department must be specified.
     * @tag Account
     * @param int $departmentId The ID of the department
     * @return array
     *      - *id* - integer
     *          - The ID of the contact department. It is possible to define individual departments. The following departments are available by default.
<ul>
<li>1 = Management</li>
<li>2 = Purchasing Department</li>
<li>3 = Sales Department</li>
<li>4 = Research & Development Team</li>
<li>5 = Production</li>
<li>6 = Quality Assurance</li>
<li>7 = Public Relations</li>
<li>8 = Marketing Department</li>
<li>9 = IT Department</li>
<li>10 = EDP Team</li>
<li>11 = Logistics</li>
<li>12 = Warehousing Department</li>
<li>13 = Export Department</li>
<li>14 = Import Department</li>
<li>15 = Customer Service</li>
<li>16 = Technical Support Team</li>
<li>17 = Human Resources</li>
<li>18 = Accounting Department</li>
<li>19 = Financial Department</li>
<li>20 = Legal Department</li>
<li>21 = Secretary's Office</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     */
    public function getAccountsContactsDepartmentByDepartmentId(int $departmentId): array
    {
        return $this->api("/rest/accounts/contacts/departments/{$departmentId}");
    }
                
    /**
     * @description Updates a contact department. The ID of the department must be specified.
     * @tag Account
     * @param int $departmentId The ID of the department
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact department. It is possible to define individual departments. The following departments are available by default.
<ul>
<li>1 = Management</li>
<li>2 = Purchasing Department</li>
<li>3 = Sales Department</li>
<li>4 = Research & Development Team</li>
<li>5 = Production</li>
<li>6 = Quality Assurance</li>
<li>7 = Public Relations</li>
<li>8 = Marketing Department</li>
<li>9 = IT Department</li>
<li>10 = EDP Team</li>
<li>11 = Logistics</li>
<li>12 = Warehousing Department</li>
<li>13 = Export Department</li>
<li>14 = Import Department</li>
<li>15 = Customer Service</li>
<li>16 = Technical Support Team</li>
<li>17 = Human Resources</li>
<li>18 = Accounting Department</li>
<li>19 = Financial Department</li>
<li>20 = Legal Department</li>
<li>21 = Secretary's Office</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     */
    public function updateAccountsContactsDepartmentByDepartmentId(int $departmentId, array $data): array
    {
        return $this->api("/rest/accounts/contacts/departments/{$departmentId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all data that is related to the contact group function contents.
     * @tag Account

     */
    public function getAccountsContactsGroupFunctions()
    {
        return $this->api("/rest/accounts/contacts/group_functions");
    }
                
    /**
     * @description Applies selected group function options for given contact IDs.
     * @tag Account
     * @param array $query
     *      - *contactList* - array - optional
     *          - A list of contact IDs
     *      - *emailTemplate* - int - optional
     *          - An email template ID
     *      - *newsletter* - int - optional
     *          - A newsletter folder ID
     *      - *addressLabelTemplate* - int - optional
     *          - An address label template ID
     */
    public function createAccountsContactsGroupFunction(array $query = [])
    {
        return $this->api(array_merge(["/rest/accounts/contacts/group_functions"], $query), 'POST');
    }
                    
    /**
     * @description Lists all contact option sub-types.
     * @tag Account
     * @return array
     */
    public function getAccountsContactsOptionSubTypes(): array
    {
        return $this->api("/rest/accounts/contacts/option_sub_types");
    }
                
    /**
     * @description Creates a contact option sub-type.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact option sub-type. It is possible to define individual option sub-types. The following types are available by default and cannot be deleted.
<ul>
<li>1 = Work</li>
<li>2 = Mobile private</li>
<li>3 = Mobile work</li>
<li>4 = Private</li>
<li>5 = PayPal</li>
<li>6 = Ebay</li>
<li>7 = Amazon</li>
<li>8 = Klarna</li>
<li>9 = DHL</li>
<li>10 = Forum</li>
<li>11 = Guest</li>
<li>12 = Contact person</li>
<li>13 = Marketplace partner</li>
<li>15 = User</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the option sub-type can be deleted
     */
    public function createAccountsContactsOptionSubType(array $data): array
    {
        return $this->api("/rest/accounts/contacts/option_sub_types", 'POST', $data);
    }
                    
    /**
     * @description Deletes a contact option sub-type. The ID of the contact option sub-type must be specified.
     * @tag Account
     * @param int $optionSubTypeId The ID of the contact option sub-type
     */
    public function deleteAccountsContactsOptionSubTypeByOptionSubTypeId(int $optionSubTypeId)
    {
        return $this->api("/rest/accounts/contacts/option_sub_types/{$optionSubTypeId}", 'DELETE');
    }
                
    /**
     * @description Gets a contact option sub-type. The ID of the contact option sub-type must be specified.
     * @tag Account
     * @param int $optionSubTypeId The ID of the contact option sub-type
     * @return array
     *      - *id* - integer
     *          - The ID of the contact option sub-type. It is possible to define individual option sub-types. The following types are available by default and cannot be deleted.
<ul>
<li>1 = Work</li>
<li>2 = Mobile private</li>
<li>3 = Mobile work</li>
<li>4 = Private</li>
<li>5 = PayPal</li>
<li>6 = Ebay</li>
<li>7 = Amazon</li>
<li>8 = Klarna</li>
<li>9 = DHL</li>
<li>10 = Forum</li>
<li>11 = Guest</li>
<li>12 = Contact person</li>
<li>13 = Marketplace partner</li>
<li>15 = User</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the option sub-type can be deleted
     */
    public function getAccountsContactsOptionSubTypeByOptionSubTypeId(int $optionSubTypeId): array
    {
        return $this->api("/rest/accounts/contacts/option_sub_types/{$optionSubTypeId}");
    }
                
    /**
     * @description Updates a contact option sub-type. The ID of the contact option sub-type must be specified.
     * @tag Account
     * @param int $optionSubTypeId The ID of the contact option sub-type
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact option sub-type. It is possible to define individual option sub-types. The following types are available by default and cannot be deleted.
<ul>
<li>1 = Work</li>
<li>2 = Mobile private</li>
<li>3 = Mobile work</li>
<li>4 = Private</li>
<li>5 = PayPal</li>
<li>6 = Ebay</li>
<li>7 = Amazon</li>
<li>8 = Klarna</li>
<li>9 = DHL</li>
<li>10 = Forum</li>
<li>11 = Guest</li>
<li>12 = Contact person</li>
<li>13 = Marketplace partner</li>
<li>15 = User</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the option sub-type can be deleted
     */
    public function updateAccountsContactsOptionSubTypeByOptionSubTypeId(int $optionSubTypeId, array $data): array
    {
        return $this->api("/rest/accounts/contacts/option_sub_types/{$optionSubTypeId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all contact option types.
     * @tag Account
     * @param array $query
     *      - *with* - string - optional
     *          - Lists possible option sub-types for each listed option if the parameter 'subTypes' is set.
     * @return array
     */
    public function getAccountsContactsOptionTypes(array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/option_types"], $query));
    }
                
    /**
     * @description Creates a contact option type.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact option type. It is possible to define individual option types. The following types are available by default and cannot be deleted.
<ul>
<li>1 = Telephone</li>
<li>2 = Email</li>
<li>3 = Telefax</li>
<li>4 = Web page</li>
<li>5 = Marketplace</li>
<li>6 = Identification number</li>
<li>7 = Payment</li>
<li>8 = User name</li>
<li>9 = Group</li>
<li>10 = Access</li>
<li>11 = Additional</li>
<li>13 = Converted by</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the option type can be deleted
     */
    public function createAccountsContactsOptionType(array $data): array
    {
        return $this->api("/rest/accounts/contacts/option_types", 'POST', $data);
    }
                    
    /**
     * @description Deletes a contact option type. The ID of the contact option type must be specified.
     * @tag Account
     * @param int $optionTypeId The ID of the contact option type
     */
    public function deleteAccountsContactsOptionTypeByOptionTypeId(int $optionTypeId)
    {
        return $this->api("/rest/accounts/contacts/option_types/{$optionTypeId}", 'DELETE');
    }
                
    /**
     * @description Gets a contact option type. The ID of the contact option type must be specified.
     * @tag Account
     * @param int $optionTypeId The ID of the contact option type
     * @return array
     *      - *id* - integer
     *          - The ID of the contact option type. It is possible to define individual option types. The following types are available by default and cannot be deleted.
<ul>
<li>1 = Telephone</li>
<li>2 = Email</li>
<li>3 = Telefax</li>
<li>4 = Web page</li>
<li>5 = Marketplace</li>
<li>6 = Identification number</li>
<li>7 = Payment</li>
<li>8 = User name</li>
<li>9 = Group</li>
<li>10 = Access</li>
<li>11 = Additional</li>
<li>13 = Converted by</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the option type can be deleted
     */
    public function getAccountsContactsOptionTypeByOptionTypeId(int $optionTypeId): array
    {
        return $this->api("/rest/accounts/contacts/option_types/{$optionTypeId}");
    }
                
    /**
     * @description Updates a contact option type. The ID of the contact option type must be specified.
     * @tag Account
     * @param int $optionTypeId The ID of the contact option type
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact option type. It is possible to define individual option types. The following types are available by default and cannot be deleted.
<ul>
<li>1 = Telephone</li>
<li>2 = Email</li>
<li>3 = Telefax</li>
<li>4 = Web page</li>
<li>5 = Marketplace</li>
<li>6 = Identification number</li>
<li>7 = Payment</li>
<li>8 = User name</li>
<li>9 = Group</li>
<li>10 = Access</li>
<li>11 = Additional</li>
<li>13 = Converted by</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the option type can be deleted
     */
    public function updateAccountsContactsOptionTypeByOptionTypeId(int $optionTypeId, array $data): array
    {
        return $this->api("/rest/accounts/contacts/option_types/{$optionTypeId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes a contact option. The ID of the option must be specified.
     * @tag Account
     * @param int $optionId The ID of the option
     */
    public function deleteAccountsContactsOptionByOptionId(int $optionId)
    {
        return $this->api("/rest/accounts/contacts/options/{$optionId}", 'DELETE');
    }
                
    /**
     * @description Gets a contact option. The ID of the option must be specified.
     * @tag Account
     * @param int $optionId The ID of the option
     * @return array
     *      - *id* - integer
     *          - The ID of the contact option
     *      - *contactId* - integer
     *          - The ID of the contact the option belongs to
     *      - *typeId* - integer
     *          - The type ID of the contact option.
It is possible to define individual contact option types.
The following types are available by default and cannot be deleted:
<ul>
<li>1 = Telephone</li>
<li>2 = Email</li>
<li>3 = Telefax</li>
<li>4 = Web page</li>
<li>5 = Marketplace</li>
<li>6 = Identification number</li>
<li>7 = Payment</li>
<li>8 = User name</li>
<li>9 = Group</li>
<li>10 = Access</li>
<li>11 = Additional</li>
<li>13 = Converted by</li>
</ul>
     *      - *subTypeId* - integer
     *          - The sub-type ID of the contact option.
It is possible to define individual contact option sub-types.
The following types are available by default and cannot be deleted:
<ul>
<li>1 = Work</li>
<li>2 = Mobile private</li>
<li>3 = Mobile work</li>
<li>4 = Private</li>
<li>5 = PayPal</li>
<li>6 = Ebay</li>
<li>7 = Amazon</li>
<li>8 = Klarna</li>
<li>9 = DHL</li>
<li>10 = Forum</li>
<li>11 = Guest</li>
<li>12 = Contact person</li>
<li>13 = Marketplace partner</li>
<li>15 = User</li>
</ul>
     *      - *value* - string
     *          - The value of the option. Depends on the type/sub-type.
     *      - *priority* - integer
     *          - The priority for sorting
     *      - *createdAt* - string
     *          - The time the option was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the option was last updated as unix timestamp
     */
    public function getAccountsContactsOptionByOptionId(int $optionId): array
    {
        return $this->api("/rest/accounts/contacts/options/{$optionId}");
    }
                
    /**
     * @description Updates a contact option. The ID of the option must be specified.
     * @tag Account
     * @param int $optionId The ID of the option
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact option
     *      - *contactId* - integer
     *          - The ID of the contact the option belongs to
     *      - *typeId* - integer
     *          - The type ID of the contact option.
It is possible to define individual contact option types.
The following types are available by default and cannot be deleted:
<ul>
<li>1 = Telephone</li>
<li>2 = Email</li>
<li>3 = Telefax</li>
<li>4 = Web page</li>
<li>5 = Marketplace</li>
<li>6 = Identification number</li>
<li>7 = Payment</li>
<li>8 = User name</li>
<li>9 = Group</li>
<li>10 = Access</li>
<li>11 = Additional</li>
<li>13 = Converted by</li>
</ul>
     *      - *subTypeId* - integer
     *          - The sub-type ID of the contact option.
It is possible to define individual contact option sub-types.
The following types are available by default and cannot be deleted:
<ul>
<li>1 = Work</li>
<li>2 = Mobile private</li>
<li>3 = Mobile work</li>
<li>4 = Private</li>
<li>5 = PayPal</li>
<li>6 = Ebay</li>
<li>7 = Amazon</li>
<li>8 = Klarna</li>
<li>9 = DHL</li>
<li>10 = Forum</li>
<li>11 = Guest</li>
<li>12 = Contact person</li>
<li>13 = Marketplace partner</li>
<li>15 = User</li>
</ul>
     *      - *value* - string
     *          - The value of the option. Depends on the type/sub-type.
     *      - *priority* - integer
     *          - The priority for sorting
     *      - *createdAt* - string
     *          - The time the option was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the option was last updated as unix timestamp
     */
    public function updateAccountsContactsOptionByOptionId(int $optionId, array $data): array
    {
        return $this->api("/rest/accounts/contacts/options/{$optionId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all contact positions.
     * @tag Account
     * @return array
     */
    public function getAccountsContactsPositions(): array
    {
        return $this->api("/rest/accounts/contacts/positions");
    }
                
    /**
     * @description Creates a contact position.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact position. It is possible to define individual contact positions. The following positions are available by default:
<ul>
<li>1 = Analyst</li>
<li>2 = Director of Boards</li>
<li>3 = CEO</li>
<li>4 = Buyer</li>
<li>5 = Purchasing Manager</li>
<li>6 = CFO</li>
<li>7 = Director General</li>
<li>8 = Managing Director</li>
<li>9 = Codirector</li>
<li>10 = Commercial Agent</li>
<li>11 = Assistant</li>
<li>12 = Service Engineer</li>
<li>13 = Warehouse Manager</li>
<li>14 = Warehouse Worker</li>
<li>15 = Senior Executive</li>
<li>16 = Assistent</li>
<li>17 = Purchasing Assistent</li>
<li>18 = Software Developer</li>
<li>19 = Sales Representative</li>
<li>20 = Sales Manager</li>
<li>21 = Export Sales Manager</li>
<li>22 = Wholesale Distributing Manager</li>
<li>23 = Secretary</li>
<li>24 = Economist</li>
<li>25 = Management Board</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     */
    public function createAccountsContactsPosition(array $data): array
    {
        return $this->api("/rest/accounts/contacts/positions", 'POST', $data);
    }
                    
    /**
     * @description Deletes a contact position. The ID of the position must be specified.
     * @tag Account
     * @param int $positionId The ID of the position
     */
    public function deleteAccountsContactsPositionByPositionId(int $positionId)
    {
        return $this->api("/rest/accounts/contacts/positions/{$positionId}", 'DELETE');
    }
                
    /**
     * @description Gets a contact position. The ID of the position must be specified.
     * @tag Account
     * @param int $positionId The ID of the position
     * @return array
     *      - *id* - integer
     *          - The ID of the contact position. It is possible to define individual contact positions. The following positions are available by default:
<ul>
<li>1 = Analyst</li>
<li>2 = Director of Boards</li>
<li>3 = CEO</li>
<li>4 = Buyer</li>
<li>5 = Purchasing Manager</li>
<li>6 = CFO</li>
<li>7 = Director General</li>
<li>8 = Managing Director</li>
<li>9 = Codirector</li>
<li>10 = Commercial Agent</li>
<li>11 = Assistant</li>
<li>12 = Service Engineer</li>
<li>13 = Warehouse Manager</li>
<li>14 = Warehouse Worker</li>
<li>15 = Senior Executive</li>
<li>16 = Assistent</li>
<li>17 = Purchasing Assistent</li>
<li>18 = Software Developer</li>
<li>19 = Sales Representative</li>
<li>20 = Sales Manager</li>
<li>21 = Export Sales Manager</li>
<li>22 = Wholesale Distributing Manager</li>
<li>23 = Secretary</li>
<li>24 = Economist</li>
<li>25 = Management Board</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     */
    public function getAccountsContactsPositionByPositionId(int $positionId): array
    {
        return $this->api("/rest/accounts/contacts/positions/{$positionId}");
    }
                
    /**
     * @description Updates a contact position. The ID of the position must be specified.
     * @tag Account
     * @param int $positionId The ID of the position
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact position. It is possible to define individual contact positions. The following positions are available by default:
<ul>
<li>1 = Analyst</li>
<li>2 = Director of Boards</li>
<li>3 = CEO</li>
<li>4 = Buyer</li>
<li>5 = Purchasing Manager</li>
<li>6 = CFO</li>
<li>7 = Director General</li>
<li>8 = Managing Director</li>
<li>9 = Codirector</li>
<li>10 = Commercial Agent</li>
<li>11 = Assistant</li>
<li>12 = Service Engineer</li>
<li>13 = Warehouse Manager</li>
<li>14 = Warehouse Worker</li>
<li>15 = Senior Executive</li>
<li>16 = Assistent</li>
<li>17 = Purchasing Assistent</li>
<li>18 = Software Developer</li>
<li>19 = Sales Representative</li>
<li>20 = Sales Manager</li>
<li>21 = Export Sales Manager</li>
<li>22 = Wholesale Distributing Manager</li>
<li>23 = Secretary</li>
<li>24 = Economist</li>
<li>25 = Management Board</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     */
    public function updateAccountsContactsPositionByPositionId(int $positionId, array $data): array
    {
        return $this->api("/rest/accounts/contacts/positions/{$positionId}", 'PUT', $data);
    }
                    
    /**
     * @description Gets the a sales representative of the region.
     * @tag Account
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getAccountsContactsSalesRepresentativeRegions(): array
    {
        return $this->api("/rest/accounts/contacts/sales_representative_regions");
    }
                    
    /**
     * @description Lists all contact types.
     * @tag Account

     */
    public function getAccountsContactsTypes()
    {
        return $this->api("/rest/accounts/contacts/types");
    }
                
    /**
     * @description Creates a contact type.
     * @tag Account
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact type. It is possible to define individual contact types. The following types are available by default and cannot be deleted.
<ul>
<li>1 = Customer</li>
<li>2 = Sales lead/Interested party</li>
<li>3 = Sales representative</li>
<li>4 = Supplier</li>
<li>5 = Producer/Manufacturer</li>
<li>6 = Partner</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the type can be deleted
     */
    public function createAccountsContactsType(array $data): array
    {
        return $this->api("/rest/accounts/contacts/types", 'POST', $data);
    }
                    
    /**
     * @description Deletes a contact type. The ID of the contact type must be specified.
     * @tag Account
     * @param int $typeId The ID of the contact type
     */
    public function deleteAccountsContactsTypeByTypeId(int $typeId)
    {
        return $this->api("/rest/accounts/contacts/types/{$typeId}", 'DELETE');
    }
                
    /**
     * @description Gets a contact type. The ID of the contact type must be specified.
     * @tag Account
     * @param int $typeId The ID of the contact type
     * @return array
     *      - *id* - integer
     *          - The ID of the contact type. It is possible to define individual contact types. The following types are available by default and cannot be deleted.
<ul>
<li>1 = Customer</li>
<li>2 = Sales lead/Interested party</li>
<li>3 = Sales representative</li>
<li>4 = Supplier</li>
<li>5 = Producer/Manufacturer</li>
<li>6 = Partner</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the type can be deleted
     */
    public function getAccountsContactsTypeByTypeId(int $typeId): array
    {
        return $this->api("/rest/accounts/contacts/types/{$typeId}");
    }
                
    /**
     * @description Updates a contact type. The ID of the contact type must be specified.
     * @tag Account
     * @param int $typeId The ID of the contact type
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the contact type. It is possible to define individual contact types. The following types are available by default and cannot be deleted.
<ul>
<li>1 = Customer</li>
<li>2 = Sales lead/Interested party</li>
<li>3 = Sales representative</li>
<li>4 = Supplier</li>
<li>5 = Producer/Manufacturer</li>
<li>6 = Partner</li>
</ul>
     *      - *position* - integer
     *          - The position for sorting
     *      - *nonErasable* - integer
     *          - Flag that indicates if the type can be deleted
     */
    public function updateAccountsContactsTypeByTypeId(int $typeId, array $data): array
    {
        return $this->api("/rest/accounts/contacts/types/{$typeId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes a contact. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *checkExistingOrders* - boolean - optional
     *          - Flag that checks if the contact is linked to orders.
     * If the contact is linked to orders, CustomerDeleteException is thrown
     * and the contact will not be deleted.
     */
    public function deleteAccountsContactByContactId(int $contactId, array $query = [])
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}"], $query), 'DELETE');
    }
                
    /**
     * @description Gets a contact. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified contact information in the results.
     *     The following parameters are available: addresses, accounts.
     *     More than one parameter should be separated by commas.
     * @return array
     *      - *id* - integer
     *          - The ID of the contact
     *      - *externalId* - string
     *          - The external ID of the contact
     *      - *number* - string
     *          - The number of the contact (previous customer number)
     *      - *typeId* - integer
     *          - The ID of the contact type
     *      - *firstName* - string
     *          - The first name of the contact
     *      - *lastName* - string
     *          - The last name of the contact
     *      - *fullName* - string
     *          - The full name of the contact. A concatenation of first and last name.
     *      - *email* - string
     *          - The private email address of the contact
     *      - *secondaryEmail* - string
     *          - The secondary private email address of the contact
     *      - *gender* - string
     *          - The gender of the contact ("female", "male" or "diverse")
     *      - *title* - string
     *          - The title of the contact, e.g. a doctorate
     *      - *formOfAddress* - string
     *          - The form of address for the contact
     *      - *newsletterAllowanceAt* - string
     *          - The time the contact registered for the newsletter as unix timestamp
     *      - *classId* - integer
     *          - The ID of the contact class
     *      - *blocked* - integer
     *          - The blocked status of the contact. Contacts can be blocked for a specific client (store). Possible values:
<ul>
<li> 0 = not blocked</li>
<li> 1 = blocked</li>
</ul>
     *      - *rating* - integer
     *          - The rating of the contact. This rating is for internal use only.
5 red stars are for the worst and 5 yellow stars for the best rating. Possible values:
<ul>
<li>-5 = 5 red stars (worst rating)</li>
<li>-4 = 4 red stars</li>
<li>-3 = 3 red stars</li>
<li>-2 = 2 red stars</li>
<li>-1 = 1 red star</li>
<li>0 = 5 grey stars, no rating saved for the contact</li>
<li>1 = 1 yellow star</li>
<li>2 = 2 yellow stars</li>
<li>3 = 3 yellow stars</li>
<li>4 = 4 yellow stars</li>
<li>5 = 5 yellow stars (best rating)</li>
</ul>
     *      - *bookAccount* - string
     *          - The book account (debtor account) of the contact.
An additional, separate number that generally corresponds to the customer number or
the debtor number in your financial accounting.
     *      - *lang* - string
     *          - The language of the contact
     *      - *referrerId* - number
     *          - The origin of the contact
     *      - *plentyId* - integer
     *          - The client (store) that is assigned to the contact
     *      - *userId* - integer
     *          - The owner ID of the contact
     *      - *birthdayAt* - string
     *          - The date of birth of the contact
     *      - *lastLoginAt* - string
     *          - The date of the last login of the contact
     *      - *lastLoginAtTimestamp* - string
     *          - The date of the last login of the contact
     *      - *lastOrderAt* - string
     *          - The date of the last order
     *      - *createdAt* - string
     *          - The date the contact was created
     *      - *updatedAt* - string
     *          - The date the contact was last updated
     *      - *privatePhone* - string
     *          - The private phone number of the contact
     *      - *privateFax* - string
     *          - The private fax number of the contact
     *      - *privateMobile* - string
     *          - The private mobile phone number of the contact
     *      - *ebayName* - string
     *          - The eBay account name of the contact
     *      - *paypalEmail* - string
     *          - The email address of the PayPal account of the contact
     *      - *paypalPayerId* - string
     *          - The PayPal payer id of the contact
     *      - *klarnaPersonalId* - string
     *          - The Klarna personal id of the contact
     *      - *dhlPostIdent* - string
     *          - The DHL PostIdent of the contact
     *      - *forumUsername* - string
     *          - The user name of the contact in the forum
     *      - *forumGroupId* - string
     *          - The ID of the forum group that is assigned to the contact
     *      - *singleAccess* - string
     *          - The access type of the contact
     *      - *contactPerson* - string
     *          - The contact person of the contact
     *      - *marketplacePartner* - string
     *          - The marketplace partner status of the contact
     *      - *valuta* - integer
     *          - The foreign currency of the contact
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The salesRepresentative ID of the contact
     *      - *anonymizeAt* - string
     *          - The date at which the contact will be anonymized.
     *      - *isLead* - boolean
     *          - Defines if contact is a lead.
     *      - *leadStatusKey* - string
     *          - The current lead status key
     *      - *inLeadStatusSince* - integer
     *          - The number of days since the current lead status has been set
     *      - *leadStatusUpdateAt* - string
     *          - DEPRECATED - See leadStatusUpdatedAt
     *      - *position_id* - integer
     *          - The job position ID of the contact
     */
    public function getAccountsContactByContactId(int $contactId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}"], $query));
    }
                
    /**
     * @description Updates a contact. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $data 
     * @param array $query
     *      - *tagRelationships* - array - optional
     *          - When this parameter is used, the current relations between contacts and tags
     *     will be deleted and replaced by the given ones. If the parameter is not used, the current relations remain.
     * @return array
     *      - *id* - integer
     *          - The ID of the contact
     *      - *externalId* - string
     *          - The external ID of the contact
     *      - *number* - string
     *          - The number of the contact (previous customer number)
     *      - *typeId* - integer
     *          - The ID of the contact type
     *      - *firstName* - string
     *          - The first name of the contact
     *      - *lastName* - string
     *          - The last name of the contact
     *      - *fullName* - string
     *          - The full name of the contact. A concatenation of first and last name.
     *      - *email* - string
     *          - The private email address of the contact
     *      - *secondaryEmail* - string
     *          - The secondary private email address of the contact
     *      - *gender* - string
     *          - The gender of the contact ("female", "male" or "diverse")
     *      - *title* - string
     *          - The title of the contact, e.g. a doctorate
     *      - *formOfAddress* - string
     *          - The form of address for the contact
     *      - *newsletterAllowanceAt* - string
     *          - The time the contact registered for the newsletter as unix timestamp
     *      - *classId* - integer
     *          - The ID of the contact class
     *      - *blocked* - integer
     *          - The blocked status of the contact. Contacts can be blocked for a specific client (store). Possible values:
<ul>
<li> 0 = not blocked</li>
<li> 1 = blocked</li>
</ul>
     *      - *rating* - integer
     *          - The rating of the contact. This rating is for internal use only.
5 red stars are for the worst and 5 yellow stars for the best rating. Possible values:
<ul>
<li>-5 = 5 red stars (worst rating)</li>
<li>-4 = 4 red stars</li>
<li>-3 = 3 red stars</li>
<li>-2 = 2 red stars</li>
<li>-1 = 1 red star</li>
<li>0 = 5 grey stars, no rating saved for the contact</li>
<li>1 = 1 yellow star</li>
<li>2 = 2 yellow stars</li>
<li>3 = 3 yellow stars</li>
<li>4 = 4 yellow stars</li>
<li>5 = 5 yellow stars (best rating)</li>
</ul>
     *      - *bookAccount* - string
     *          - The book account (debtor account) of the contact.
An additional, separate number that generally corresponds to the customer number or
the debtor number in your financial accounting.
     *      - *lang* - string
     *          - The language of the contact
     *      - *referrerId* - number
     *          - The origin of the contact
     *      - *plentyId* - integer
     *          - The client (store) that is assigned to the contact
     *      - *userId* - integer
     *          - The owner ID of the contact
     *      - *birthdayAt* - string
     *          - The date of birth of the contact
     *      - *lastLoginAt* - string
     *          - The date of the last login of the contact
     *      - *lastLoginAtTimestamp* - string
     *          - The date of the last login of the contact
     *      - *lastOrderAt* - string
     *          - The date of the last order
     *      - *createdAt* - string
     *          - The date the contact was created
     *      - *updatedAt* - string
     *          - The date the contact was last updated
     *      - *privatePhone* - string
     *          - The private phone number of the contact
     *      - *privateFax* - string
     *          - The private fax number of the contact
     *      - *privateMobile* - string
     *          - The private mobile phone number of the contact
     *      - *ebayName* - string
     *          - The eBay account name of the contact
     *      - *paypalEmail* - string
     *          - The email address of the PayPal account of the contact
     *      - *paypalPayerId* - string
     *          - The PayPal payer id of the contact
     *      - *klarnaPersonalId* - string
     *          - The Klarna personal id of the contact
     *      - *dhlPostIdent* - string
     *          - The DHL PostIdent of the contact
     *      - *forumUsername* - string
     *          - The user name of the contact in the forum
     *      - *forumGroupId* - string
     *          - The ID of the forum group that is assigned to the contact
     *      - *singleAccess* - string
     *          - The access type of the contact
     *      - *contactPerson* - string
     *          - The contact person of the contact
     *      - *marketplacePartner* - string
     *          - The marketplace partner status of the contact
     *      - *valuta* - integer
     *          - The foreign currency of the contact
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The salesRepresentative ID of the contact
     *      - *anonymizeAt* - string
     *          - The date at which the contact will be anonymized.
     *      - *isLead* - boolean
     *          - Defines if contact is a lead.
     *      - *leadStatusKey* - string
     *          - The current lead status key
     *      - *inLeadStatusSince* - integer
     *          - The number of days since the current lead status has been set
     *      - *leadStatusUpdateAt* - string
     *          - DEPRECATED - See leadStatusUpdatedAt
     *      - *position_id* - integer
     *          - The job position ID of the contact
     */
    public function updateAccountsContactByContactId(int $contactId, array $data, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}"], $query), 'PUT', $data);
    }
                    
    /**
     * @description Gets the URL to login as the given contact. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     */
    public function getAccountsContactsAccessDataLoginUrlByContactId(int $contactId)
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/access_data/login_url");
    }
                    
    /**
     * @description Sends an email to a contact with a link to change the password. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *password* - string - required
     *          - The new password
     */
    public function updateAccountsContactsAccessDataNewPasswordByContactId(int $contactId, array $query)
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/access_data/new_password"], $query), 'PUT');
    }
                    
    /**
     * @description Updates the password for a contact. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *password* - string - required
     *          - The new password
     */
    public function updateAccountsContactsAccessDataSetPasswordByContactId(int $contactId, array $query)
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/access_data/set_password"], $query), 'PUT');
    }
                    
    /**
     * @description Unblocks a contact to allow this contact to log in again. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     */
    public function updateAccountsContactsAccessDataUnblockUserByContactId(int $contactId)
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/access_data/unblock_user", 'PUT');
    }
                    
    /**
     * @description Creates a company for an existing contact. The ID of the company must be specified. An account is equivalent to a company.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the account
     *      - *number* - string
     *          - The number of the account
     *      - *companyName* - string
     *          - The company name
     *      - *taxIdNumber* - string
     *          - The ID of the tax number
     *      - *valuta* - integer
     *          - The valuta date in days specified for the account
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The contact ID of the sales representative
     *      - *userId* - integer
     *          - The ID of the account owner
     *      - *deliveryTime* - integer
     *          - The delivery time for the supplier
     *      - *dealerMinOrderValue* - number
     *          - The minimum order value for the supplier
     *      - *supplierCurrency* - string
     *          - The currency used by a supplier
     *      - *createdAt* - string
     *          - The time the account was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the account was last updated as unix timestamp
     */
    public function createAccountsContactsAccountByContactId(int $contactId, array $data): array
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/accounts", 'POST', $data);
    }
                    
    /**
     * @description Deletes a company of the contact. The ID of the contact and the ID of the company must be specified. An account is equivalent to a company.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param int $accountId The ID of the company
     */
    public function deleteAccountsContactsAccountByContactIdAccountId(int $contactId, int $accountId)
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/accounts/{$accountId}", 'DELETE');
    }
                
    /**
     * @description Gets a company of the contact. The ID of the contact and the ID of the company must be specified. An account is equivalent to a company.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param int $accountId The ID of the company
     * @return array
     *      - *id* - integer
     *          - The ID of the account
     *      - *number* - string
     *          - The number of the account
     *      - *companyName* - string
     *          - The company name
     *      - *taxIdNumber* - string
     *          - The ID of the tax number
     *      - *valuta* - integer
     *          - The valuta date in days specified for the account
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The contact ID of the sales representative
     *      - *userId* - integer
     *          - The ID of the account owner
     *      - *deliveryTime* - integer
     *          - The delivery time for the supplier
     *      - *dealerMinOrderValue* - number
     *          - The minimum order value for the supplier
     *      - *supplierCurrency* - string
     *          - The currency used by a supplier
     *      - *createdAt* - string
     *          - The time the account was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the account was last updated as unix timestamp
     */
    public function getAccountsContactsAccountByContactIdAccountId(int $contactId, int $accountId): array
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/accounts/{$accountId}");
    }
                
    /**
     * @description Updates a company. The ID of the contact and the ID of the company must be specified. An account is equivalent to a company.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param int $accountId The ID of the account
     * @return array
     *      - *id* - integer
     *          - The ID of the account
     *      - *number* - string
     *          - The number of the account
     *      - *companyName* - string
     *          - The company name
     *      - *taxIdNumber* - string
     *          - The ID of the tax number
     *      - *valuta* - integer
     *          - The valuta date in days specified for the account
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The contact ID of the sales representative
     *      - *userId* - integer
     *          - The ID of the account owner
     *      - *deliveryTime* - integer
     *          - The delivery time for the supplier
     *      - *dealerMinOrderValue* - number
     *          - The minimum order value for the supplier
     *      - *supplierCurrency* - string
     *          - The currency used by a supplier
     *      - *createdAt* - string
     *          - The time the account was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the account was last updated as unix timestamp
     */
    public function updateAccountsContactsAccountByContactIdAccountId(int $contactId, int $accountId): array
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/accounts/{$accountId}", 'PUT');
    }
                    
    /**
     * @description Creates an address for a specific contact. The ID of the contact must be specified.
<br>When creating an address, the system checks for duplicates. If the system finds a duplicate, this address will be assigned to the contact data record.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $data 
     * @param array $query
     *      - *isPrimary* - boolean - optional
     *          - Sets a contact address per address type as the primary address.
     *      - *typeId* - int - optional
     *          - The type ID of the address. Possible values: <ul><li>Invoice address = 1</li><li> Delivery address = 2</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the address
     *      - *gender* - string
     *          - The gender ("female", "male" or "diverse")
     *      - *name1* - string
     *          - The name 1 field (defaults to: company name)
     *      - *name2* - string
     *          - The name 2 field (defaults to: first name)
     *      - *name3* - string
     *          - The name 3 field (defaults to: last name)
     *      - *name4* - string
     *          - The name 4 field (defaults to: c/o)
     *      - *address1* - string
     *          - The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *      - *address2* - string
     *          - The address 2 field (defaults to: houseNumber|packstationNo)
     *      - *address3* - string
     *          - The address 3 field (defaults to: additional)
     *      - *address4* - string
     *          - The address 4 field is currently undefined and can be freely used.
     *      - *postalCode* - string
     *          - The postcode
     *      - *town* - string
     *          - The town
     *      - *countryId* - integer
     *          - The ID of the country
     *      - *stateId* - integer
     *          - The ID of the state
     *      - *readOnly* - boolean
     *          - Flag that indicates if the data record is read only
     *      - *companyName* - string
     *          - The company name (alias for name1, <i>read only</i>)
     *      - *firstName* - string
     *          - The first name (alias for name2, <i>read only</i>)
     *      - *lastName* - string
     *          - The last name (alias for name3, <i>read only</i>)
     *      - *careOf* - string
     *          - The c/o (alias for name4, <i>read only</i>)
     *      - *street* - string
     *          - The street (alias for address1, <i>read only</i>)
     *      - *houseNumber* - string
     *          - The house number (alias for address2, <i>read only</i>)
     *      - *additional* - string
     *          - The additional address information (alias for address3, <i>read only</i>)
     *      - *checkedAt* - string
     *          - The time the address was checked as unix timestamp
     *      - *createdAt* - string
     *          - The time the address was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the address was last updated as unix timestamp
     *      - *taxIdNumber* - string
     *          - The taxIdNumber option (alias for option with typeId 1, <i>read only</i>)
     *      - *externalId* - string
     *          - The externalId option (alias for option with typeId 2, <i>read only</i>)
     *      - *entryCertificate* - boolean
     *          - The entryCertificate option (alias for option with typeId 3, <i>read only</i>)
     *      - *phone* - string
     *          - The phone option (alias for option with typeId 4, <i>read only</i>)
     *      - *email* - string
     *          - The email option (alias for option with typeId 5, <i>read only</i>)
     *      - *postident* - string
     *          - The PostIdent option (alias for option with typeId 6, <i>read only</i>)
     *      - *personalNumber* - string
     *          - The personal number option (alias for option with typeId 7, <i>read only</i>)
     *      - *fsk* - string
     *          - The age rating option (alias for option with typeId 8, <i>read only</i>)
     *      - *birthday* - string
     *          - The birthday option (alias for option with typeId 9, <i>read only</i>)
     *      - *title* - string
     *          - The title option (alias for option with typeId 11, <i>read only</i>)
     *      - *sessionId* - string
     *          - The fronetnd session ID that was used when the address was created (alias for option with typeId 10, <i>read only</i>)
     *      - *contactPerson* - string
     *          - The contact person option (alias for option with typeId 12, <i>read only</i>)
     *      - *externalCustomerId* - string
     *          - The external customer ID option (alias for option with typeId 13, <i>read only</i>)
     *      - *packstationNo* - string
     *          - The packstation number (alias for houseNumber and address2, <i>read only</i>)
     *      - *isPackstation* - boolean
     *          - Flag that indicates if the address is a packstation
     *      - *isPostfiliale* - boolean
     *          - Flag that indicates if the address is a postfiliale (post office)
     */
    public function createAccountsContactsAddressByContactId(int $contactId, array $data, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/addresses"], $query), 'POST', $data);
    }
                    
    /**
     * @description Gets primary or last created addresses of the contact. The ID of contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     */
    public function getAccountsContactsAddressesPrimaryByContactId(int $contactId)
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/addresses/primary");
    }
                    
    /**
     * @description Deletes an address of the contact. The ID of the contact and the ID of the address must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param int $addressId The ID of the address
     * @param array $query
     *      - *typeId* - int - optional
     *          - The type ID of the address. Possible values: <ul><li>Invoice address = 1</li><li> Delivery address = 2</li></ul>
     */
    public function deleteAccountsContactsAddressByContactIdAddressId(int $contactId, int $addressId, array $query = [])
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/addresses/{$addressId}"], $query), 'DELETE');
    }
                
    /**
     * @description Updates an address of the contact. The ID of the contact and the ID of the address must be specified.
<br>When updating an address, the system checks for duplicates if the address has more than one relation. If the system finds a duplicate, this address will be assigned to the contact data record.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param int $addressId The ID of the address
     * @param array $query
     *      - *isPrimary* - boolean - optional
     *          - Sets a contact address per address type as the primary address.
     *      - *typeId* - int - optional
     *          - The type ID of the address. Possible values: <ul><li>Invoice address = 1</li><li> Delivery address = 2</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the address
     *      - *gender* - string
     *          - The gender ("female", "male" or "diverse")
     *      - *name1* - string
     *          - The name 1 field (defaults to: company name)
     *      - *name2* - string
     *          - The name 2 field (defaults to: first name)
     *      - *name3* - string
     *          - The name 3 field (defaults to: last name)
     *      - *name4* - string
     *          - The name 4 field (defaults to: c/o)
     *      - *address1* - string
     *          - The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *      - *address2* - string
     *          - The address 2 field (defaults to: houseNumber|packstationNo)
     *      - *address3* - string
     *          - The address 3 field (defaults to: additional)
     *      - *address4* - string
     *          - The address 4 field is currently undefined and can be freely used.
     *      - *postalCode* - string
     *          - The postcode
     *      - *town* - string
     *          - The town
     *      - *countryId* - integer
     *          - The ID of the country
     *      - *stateId* - integer
     *          - The ID of the state
     *      - *readOnly* - boolean
     *          - Flag that indicates if the data record is read only
     *      - *companyName* - string
     *          - The company name (alias for name1, <i>read only</i>)
     *      - *firstName* - string
     *          - The first name (alias for name2, <i>read only</i>)
     *      - *lastName* - string
     *          - The last name (alias for name3, <i>read only</i>)
     *      - *careOf* - string
     *          - The c/o (alias for name4, <i>read only</i>)
     *      - *street* - string
     *          - The street (alias for address1, <i>read only</i>)
     *      - *houseNumber* - string
     *          - The house number (alias for address2, <i>read only</i>)
     *      - *additional* - string
     *          - The additional address information (alias for address3, <i>read only</i>)
     *      - *checkedAt* - string
     *          - The time the address was checked as unix timestamp
     *      - *createdAt* - string
     *          - The time the address was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the address was last updated as unix timestamp
     *      - *taxIdNumber* - string
     *          - The taxIdNumber option (alias for option with typeId 1, <i>read only</i>)
     *      - *externalId* - string
     *          - The externalId option (alias for option with typeId 2, <i>read only</i>)
     *      - *entryCertificate* - boolean
     *          - The entryCertificate option (alias for option with typeId 3, <i>read only</i>)
     *      - *phone* - string
     *          - The phone option (alias for option with typeId 4, <i>read only</i>)
     *      - *email* - string
     *          - The email option (alias for option with typeId 5, <i>read only</i>)
     *      - *postident* - string
     *          - The PostIdent option (alias for option with typeId 6, <i>read only</i>)
     *      - *personalNumber* - string
     *          - The personal number option (alias for option with typeId 7, <i>read only</i>)
     *      - *fsk* - string
     *          - The age rating option (alias for option with typeId 8, <i>read only</i>)
     *      - *birthday* - string
     *          - The birthday option (alias for option with typeId 9, <i>read only</i>)
     *      - *title* - string
     *          - The title option (alias for option with typeId 11, <i>read only</i>)
     *      - *sessionId* - string
     *          - The fronetnd session ID that was used when the address was created (alias for option with typeId 10, <i>read only</i>)
     *      - *contactPerson* - string
     *          - The contact person option (alias for option with typeId 12, <i>read only</i>)
     *      - *externalCustomerId* - string
     *          - The external customer ID option (alias for option with typeId 13, <i>read only</i>)
     *      - *packstationNo* - string
     *          - The packstation number (alias for houseNumber and address2, <i>read only</i>)
     *      - *isPackstation* - boolean
     *          - Flag that indicates if the address is a packstation
     *      - *isPostfiliale* - boolean
     *          - Flag that indicates if the address is a postfiliale (post office)
     */
    public function updateAccountsContactsAddressByContactIdAddressId(int $contactId, int $addressId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/addresses/{$addressId}"], $query), 'PUT');
    }
                    
    /**
     * @description Sets a contact address per address type as the primary address. The ID of the contact, the ID of the address and the ID of the address type must be specified. A primary address can also be defined when you create or update a contact address.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param int $addressId The ID of the address
     * @param int $addressTypeId The ID of the address type
     * @return array
     *      - *id* - integer
     *          - The ID of the address contact relation
     *      - *contactId* - integer
     *          - The ID of the contact
     *      - *typeId* - integer
     *          - The type ID of the address. Possible values:
<ul>
<li>Invoice address = 1</li>
<li>Delivery address = 2</li>
</ul>
     *      - *addressId* - integer
     *          - The ID of the address
     *      - *isPrimary* - boolean
     *          - Flag that indicates if the address is primary
     */
    public function updateAccountsContactsAddressesTypesPrimaryByContactIdAddressIdAddressTypeId(int $contactId, int $addressId, int $addressTypeId): array
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/addresses/{$addressId}/types/{$addressTypeId}/primary", 'PUT');
    }
                    
    /**
     * @description Resets the primary address of the contact. The ID of the contact, the ID of the address and the ID of the address type must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param int $addressId The ID of the address
     * @param int $addressTypeId The ID of the address type
     * @return array
     *      - *id* - integer
     *          - The ID of the address contact relation
     *      - *contactId* - integer
     *          - The ID of the contact
     *      - *typeId* - integer
     *          - The type ID of the address. Possible values:
<ul>
<li>Invoice address = 1</li>
<li>Delivery address = 2</li>
</ul>
     *      - *addressId* - integer
     *          - The ID of the address
     *      - *isPrimary* - boolean
     *          - Flag that indicates if the address is primary
     */
    public function updateAccountsContactsAddressesTypesResetPrimaryByContactIdAddressIdAddressTypeId(int $contactId, int $addressId, int $addressTypeId): array
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/addresses/{$addressId}/types/{$addressTypeId}/reset_primary", 'PUT');
    }
                    
    /**
     * @description Lists addresses of the contact. The ID of the contact must be specified. If you specify page and itemsPerPage, you will get a paginated result. Otherwise you will get an array.
     * @tag Account
     * @param int $contactId 
     * @param int $addressTypeId 
     * @param array $query
     *      - *page* - int - optional
     *          - The requested page. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of addresses to list per page. The default number is 1000.
     * @return array
     */
    public function getAccountsContactsAddressesAddressTypeIdByContactIdAddressTypeId(int $contactId, int $addressTypeId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/addresses/{$addressTypeId}"], $query));
    }
                    
    /**
     * @description Anonymizes the contact by the given ID.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @return array
     *      - *id* - integer
     *          - The ID of the contact
     *      - *externalId* - string
     *          - The external ID of the contact
     *      - *number* - string
     *          - The number of the contact (previous customer number)
     *      - *typeId* - integer
     *          - The ID of the contact type
     *      - *firstName* - string
     *          - The first name of the contact
     *      - *lastName* - string
     *          - The last name of the contact
     *      - *fullName* - string
     *          - The full name of the contact. A concatenation of first and last name.
     *      - *email* - string
     *          - The private email address of the contact
     *      - *secondaryEmail* - string
     *          - The secondary private email address of the contact
     *      - *gender* - string
     *          - The gender of the contact ("female", "male" or "diverse")
     *      - *title* - string
     *          - The title of the contact, e.g. a doctorate
     *      - *formOfAddress* - string
     *          - The form of address for the contact
     *      - *newsletterAllowanceAt* - string
     *          - The time the contact registered for the newsletter as unix timestamp
     *      - *classId* - integer
     *          - The ID of the contact class
     *      - *blocked* - integer
     *          - The blocked status of the contact. Contacts can be blocked for a specific client (store). Possible values:
<ul>
<li> 0 = not blocked</li>
<li> 1 = blocked</li>
</ul>
     *      - *rating* - integer
     *          - The rating of the contact. This rating is for internal use only.
5 red stars are for the worst and 5 yellow stars for the best rating. Possible values:
<ul>
<li>-5 = 5 red stars (worst rating)</li>
<li>-4 = 4 red stars</li>
<li>-3 = 3 red stars</li>
<li>-2 = 2 red stars</li>
<li>-1 = 1 red star</li>
<li>0 = 5 grey stars, no rating saved for the contact</li>
<li>1 = 1 yellow star</li>
<li>2 = 2 yellow stars</li>
<li>3 = 3 yellow stars</li>
<li>4 = 4 yellow stars</li>
<li>5 = 5 yellow stars (best rating)</li>
</ul>
     *      - *bookAccount* - string
     *          - The book account (debtor account) of the contact.
An additional, separate number that generally corresponds to the customer number or
the debtor number in your financial accounting.
     *      - *lang* - string
     *          - The language of the contact
     *      - *referrerId* - number
     *          - The origin of the contact
     *      - *plentyId* - integer
     *          - The client (store) that is assigned to the contact
     *      - *userId* - integer
     *          - The owner ID of the contact
     *      - *birthdayAt* - string
     *          - The date of birth of the contact
     *      - *lastLoginAt* - string
     *          - The date of the last login of the contact
     *      - *lastLoginAtTimestamp* - string
     *          - The date of the last login of the contact
     *      - *lastOrderAt* - string
     *          - The date of the last order
     *      - *createdAt* - string
     *          - The date the contact was created
     *      - *updatedAt* - string
     *          - The date the contact was last updated
     *      - *privatePhone* - string
     *          - The private phone number of the contact
     *      - *privateFax* - string
     *          - The private fax number of the contact
     *      - *privateMobile* - string
     *          - The private mobile phone number of the contact
     *      - *ebayName* - string
     *          - The eBay account name of the contact
     *      - *paypalEmail* - string
     *          - The email address of the PayPal account of the contact
     *      - *paypalPayerId* - string
     *          - The PayPal payer id of the contact
     *      - *klarnaPersonalId* - string
     *          - The Klarna personal id of the contact
     *      - *dhlPostIdent* - string
     *          - The DHL PostIdent of the contact
     *      - *forumUsername* - string
     *          - The user name of the contact in the forum
     *      - *forumGroupId* - string
     *          - The ID of the forum group that is assigned to the contact
     *      - *singleAccess* - string
     *          - The access type of the contact
     *      - *contactPerson* - string
     *          - The contact person of the contact
     *      - *marketplacePartner* - string
     *          - The marketplace partner status of the contact
     *      - *valuta* - integer
     *          - The foreign currency of the contact
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The salesRepresentative ID of the contact
     *      - *anonymizeAt* - string
     *          - The date at which the contact will be anonymized.
     *      - *isLead* - boolean
     *          - Defines if contact is a lead.
     *      - *leadStatusKey* - string
     *          - The current lead status key
     *      - *inLeadStatusSince* - integer
     *          - The number of days since the current lead status has been set
     *      - *leadStatusUpdateAt* - string
     *          - DEPRECATED - See leadStatusUpdatedAt
     *      - *position_id* - integer
     *          - The job position ID of the contact
     */
    public function updateAccountsContactsAnonymizeByContactId(int $contactId): array
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/anonymize", 'PUT');
    }
                    
    /**
     * @description Lists all bank accounts of the contact. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page
     * @return array
     */
    public function getAccountsContactsBanksByContactId(int $contactId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/banks"], $query));
    }
                    
    /**
     * @description Lists all bank accounts of the contact. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getAccountsContactsBanksPaginatedByContactId(int $contactId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/banksPaginated"], $query));
    }
                
    /**
     * @description Lists contact events by the contact ID. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ContactEvent
     */
    public function eachAccountsContactsContactEventsByContactId(int $contactId, array $query = []): Iterator
    {
        return $this->eachInternal('getAccountsContactsContactEventsByContactId', func_get_args());
    }
        
    /**
     * @description Lists contact events by the contact ID. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ContactEvent
     */
    public function batchAccountsContactsContactEventsByContactId(int $contactId, array $query = []): Iterator
    {
        return $this->batchInternal('getAccountsContactsContactEventsByContactId', func_get_args());
    }
    
    /**
     * @description Lists contact events by the contact ID. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ContactEvent
     */
    public function getAccountsContactsContactEventsByContactId(int $contactId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/contact_events"], $query));
    }
                    
    /**
     * @description Gets a storage object from contact documents. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *key* - string - required
     *          - The storage key of the object to get from contact documents.
     * @return array
     *      - *key* - string
     *      - *path* - string
     *      - *lastModified* - string
     *      - *metaData* - array
     *      - *eTag* - string
     *      - *size* - integer
     *      - *storageClass* - string
     *      - *body* - string
     *      - *contentType* - string
     *      - *contentLength* - string
     */
    public function getAccountsContactsDocumentByContactId(int $contactId, array $query): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/document"], $query));
    }
                
    /**
     * @description Uploads a document to the contact directory. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *key* - string - required
     *          - The storage key for the file to upload
     * @return array
     *      - *key* - string
     *      - *path* - string
     *      - *lastModified* - string
     *      - *metaData* - array
     *      - *eTag* - string
     *      - *size* - integer
     *      - *storageClass* - string
     *      - *body* - string
     *      - *contentType* - string
     *      - *contentLength* - string
     */
    public function createAccountsContactsDocumentByContactId(int $contactId, array $query): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/document"], $query), 'POST');
    }
                    
    /**
     * @description Uploads a document to the contact directory. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId 
     * @param array $query
     *      - *link* - string - required
     *          - The external link
     *      - *title* - string - optional
     *          - An alternative title for the link
     * @return array
     *      - *key* - string
     *      - *path* - string
     *      - *lastModified* - string
     *      - *metaData* - array
     *      - *eTag* - string
     *      - *size* - integer
     *      - *storageClass* - string
     *      - *body* - string
     *      - *contentType* - string
     *      - *contentLength* - string
     */
    public function createAccountsContactsDocumentLinkByContactId(int $contactId, array $query): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/document/link"], $query), 'POST');
    }
                    
    /**
     * @description Update an existing document link. The ID of the contact must be specified also the document id.
     * @tag Account
     * @param string $documentId The ID of the document link
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *link* - string - required
     *          - The external link
     *      - *title* - string - optional
     *          - An alternative title for the link
     * @return array
     *      - *key* - string
     *      - *path* - string
     *      - *lastModified* - string
     *      - *metaData* - array
     *      - *eTag* - string
     *      - *size* - integer
     *      - *storageClass* - string
     *      - *body* - string
     *      - *contentType* - string
     *      - *contentLength* - string
     */
    public function updateAccountsContactsDocumentLinkByDocumentIdContactId(string $documentId, int $contactId, array $query): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/document/link/{$documentId}"], $query), 'PUT');
    }
                    
    /**
     * @description Gets a temporary url for a document. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *key* - string - required
     *          - The storage key to get temporary url for
     */
    public function getAccountsContactsDocumentUrlByContactId(int $contactId, array $query)
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/document/url"], $query));
    }
                    
    /**
     * @description Deletes files from contact documents. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *keyList* - array - required
     *          - List of storage keys to delete
     */
    public function deleteAccountsContactsDocumentByContactId(int $contactId, array $query)
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/documents"], $query), 'DELETE');
    }
                
    /**
     * @description Lists all documents that are saved for a contact. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *continuationToken* - string - optional
     *          - token from previous request to continue listing documents
     * @return array
     *      - *isTruncated* - boolean
     *      - *nextContinuationToken* - string
     *      - *commonPrefixes* - array
     */
    public function getAccountsContactsDocumentsByContactId(int $contactId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/documents"], $query));
    }
                    
    /**
     * @description Deletes a contact option for an existing contact. The ID of the option must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     */
    public function deleteAccountsContactsOptionByContactId(int $contactId)
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/options", 'DELETE');
    }
                
    /**
     * @description Lists contact options. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *typeId* - int - optional
     *          - The ID of the type
     *      - *subTypeId* - int - optional
     *          - The ID of the sub type
     * @return array
     */
    public function getAccountsContactsOptionsByContactId(int $contactId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/contacts/{$contactId}/options"], $query));
    }
                
    /**
     * @description Creates a contact option for an existing contact. The ID of the contact option must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @return array
     */
    public function createAccountsContactsOptionByContactId(int $contactId): array
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/options", 'POST');
    }
                
    /**
     * @description Updates a contact option for an existing contact. The ID of the contact option must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @return array
     */
    public function updateAccountsContactsOptionByContactId(int $contactId): array
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/options", 'PUT');
    }
                    
    /**
     * @description Validates a contact option by a given value. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     */
    public function getAccountsContactsOptionsValidateByContactId(int $contactId)
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/options/validate");
    }
                    
    /**
     * @description Lists all contact related data. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     * @return array
     *      - *id* - integer
     *          - The ID of the contact
     *      - *externalId* - string
     *          - The external ID of the contact
     *      - *number* - string
     *          - The number of the contact (previous customer number)
     *      - *typeId* - integer
     *          - The ID of the contact type
     *      - *firstName* - string
     *          - The first name of the contact
     *      - *lastName* - string
     *          - The last name of the contact
     *      - *fullName* - string
     *          - The full name of the contact. A concatenation of first and last name.
     *      - *email* - string
     *          - The private email address of the contact
     *      - *secondaryEmail* - string
     *          - The secondary private email address of the contact
     *      - *gender* - string
     *          - The gender of the contact ("female", "male" or "diverse")
     *      - *title* - string
     *          - The title of the contact, e.g. a doctorate
     *      - *formOfAddress* - string
     *          - The form of address for the contact
     *      - *newsletterAllowanceAt* - string
     *          - The time the contact registered for the newsletter as unix timestamp
     *      - *classId* - integer
     *          - The ID of the contact class
     *      - *blocked* - integer
     *          - The blocked status of the contact. Contacts can be blocked for a specific client (store). Possible values:
<ul>
<li> 0 = not blocked</li>
<li> 1 = blocked</li>
</ul>
     *      - *rating* - integer
     *          - The rating of the contact. This rating is for internal use only.
5 red stars are for the worst and 5 yellow stars for the best rating. Possible values:
<ul>
<li>-5 = 5 red stars (worst rating)</li>
<li>-4 = 4 red stars</li>
<li>-3 = 3 red stars</li>
<li>-2 = 2 red stars</li>
<li>-1 = 1 red star</li>
<li>0 = 5 grey stars, no rating saved for the contact</li>
<li>1 = 1 yellow star</li>
<li>2 = 2 yellow stars</li>
<li>3 = 3 yellow stars</li>
<li>4 = 4 yellow stars</li>
<li>5 = 5 yellow stars (best rating)</li>
</ul>
     *      - *bookAccount* - string
     *          - The book account (debtor account) of the contact.
An additional, separate number that generally corresponds to the customer number or
the debtor number in your financial accounting.
     *      - *lang* - string
     *          - The language of the contact
     *      - *referrerId* - number
     *          - The origin of the contact
     *      - *plentyId* - integer
     *          - The client (store) that is assigned to the contact
     *      - *userId* - integer
     *          - The owner ID of the contact
     *      - *birthdayAt* - string
     *          - The date of birth of the contact
     *      - *lastLoginAt* - string
     *          - The date of the last login of the contact
     *      - *lastLoginAtTimestamp* - string
     *          - The date of the last login of the contact
     *      - *lastOrderAt* - string
     *          - The date of the last order
     *      - *createdAt* - string
     *          - The date the contact was created
     *      - *updatedAt* - string
     *          - The date the contact was last updated
     *      - *privatePhone* - string
     *          - The private phone number of the contact
     *      - *privateFax* - string
     *          - The private fax number of the contact
     *      - *privateMobile* - string
     *          - The private mobile phone number of the contact
     *      - *ebayName* - string
     *          - The eBay account name of the contact
     *      - *paypalEmail* - string
     *          - The email address of the PayPal account of the contact
     *      - *paypalPayerId* - string
     *          - The PayPal payer id of the contact
     *      - *klarnaPersonalId* - string
     *          - The Klarna personal id of the contact
     *      - *dhlPostIdent* - string
     *          - The DHL PostIdent of the contact
     *      - *forumUsername* - string
     *          - The user name of the contact in the forum
     *      - *forumGroupId* - string
     *          - The ID of the forum group that is assigned to the contact
     *      - *singleAccess* - string
     *          - The access type of the contact
     *      - *contactPerson* - string
     *          - The contact person of the contact
     *      - *marketplacePartner* - string
     *          - The marketplace partner status of the contact
     *      - *valuta* - integer
     *          - The foreign currency of the contact
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The salesRepresentative ID of the contact
     *      - *anonymizeAt* - string
     *          - The date at which the contact will be anonymized.
     *      - *isLead* - boolean
     *          - Defines if contact is a lead.
     *      - *leadStatusKey* - string
     *          - The current lead status key
     *      - *inLeadStatusSince* - integer
     *          - The number of days since the current lead status has been set
     *      - *leadStatusUpdateAt* - string
     *          - DEPRECATED - See leadStatusUpdatedAt
     *      - *position_id* - integer
     *          - The job position ID of the contact
     */
    public function getAccountsContactsRelatedDataByContactId(int $contactId): array
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/related_data");
    }
                    
    /**
     * @description Lists the regions. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     */
    public function getAccountsContactsSalesRepresentativeRegionsByContactId(int $contactId)
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/sales_representative_regions");
    }
                    
    /**
     * @description Gets a filestream of the vcard of a contact. The ID of the contact must be specified.
     * @tag Account
     * @param int $contactId The ID of the contact
     */
    public function getAccountsContactsVcardByContactId(int $contactId)
    {
        return $this->api("/rest/accounts/contacts/{$contactId}/vcard");
    }
                    
    /**
     * @description Converts a guest account into a regular account.
     * @tag Account
     * @param array $query
     *      - *contactId* - int - optional
     *          - The ID of the contact
     * @return array
     *      - *id* - integer
     *          - The ID of the contact
     *      - *externalId* - string
     *          - The external ID of the contact
     *      - *number* - string
     *          - The number of the contact (previous customer number)
     *      - *typeId* - integer
     *          - The ID of the contact type
     *      - *firstName* - string
     *          - The first name of the contact
     *      - *lastName* - string
     *          - The last name of the contact
     *      - *fullName* - string
     *          - The full name of the contact. A concatenation of first and last name.
     *      - *email* - string
     *          - The private email address of the contact
     *      - *secondaryEmail* - string
     *          - The secondary private email address of the contact
     *      - *gender* - string
     *          - The gender of the contact ("female", "male" or "diverse")
     *      - *title* - string
     *          - The title of the contact, e.g. a doctorate
     *      - *formOfAddress* - string
     *          - The form of address for the contact
     *      - *newsletterAllowanceAt* - string
     *          - The time the contact registered for the newsletter as unix timestamp
     *      - *classId* - integer
     *          - The ID of the contact class
     *      - *blocked* - integer
     *          - The blocked status of the contact. Contacts can be blocked for a specific client (store). Possible values:
<ul>
<li> 0 = not blocked</li>
<li> 1 = blocked</li>
</ul>
     *      - *rating* - integer
     *          - The rating of the contact. This rating is for internal use only.
5 red stars are for the worst and 5 yellow stars for the best rating. Possible values:
<ul>
<li>-5 = 5 red stars (worst rating)</li>
<li>-4 = 4 red stars</li>
<li>-3 = 3 red stars</li>
<li>-2 = 2 red stars</li>
<li>-1 = 1 red star</li>
<li>0 = 5 grey stars, no rating saved for the contact</li>
<li>1 = 1 yellow star</li>
<li>2 = 2 yellow stars</li>
<li>3 = 3 yellow stars</li>
<li>4 = 4 yellow stars</li>
<li>5 = 5 yellow stars (best rating)</li>
</ul>
     *      - *bookAccount* - string
     *          - The book account (debtor account) of the contact.
An additional, separate number that generally corresponds to the customer number or
the debtor number in your financial accounting.
     *      - *lang* - string
     *          - The language of the contact
     *      - *referrerId* - number
     *          - The origin of the contact
     *      - *plentyId* - integer
     *          - The client (store) that is assigned to the contact
     *      - *userId* - integer
     *          - The owner ID of the contact
     *      - *birthdayAt* - string
     *          - The date of birth of the contact
     *      - *lastLoginAt* - string
     *          - The date of the last login of the contact
     *      - *lastLoginAtTimestamp* - string
     *          - The date of the last login of the contact
     *      - *lastOrderAt* - string
     *          - The date of the last order
     *      - *createdAt* - string
     *          - The date the contact was created
     *      - *updatedAt* - string
     *          - The date the contact was last updated
     *      - *privatePhone* - string
     *          - The private phone number of the contact
     *      - *privateFax* - string
     *          - The private fax number of the contact
     *      - *privateMobile* - string
     *          - The private mobile phone number of the contact
     *      - *ebayName* - string
     *          - The eBay account name of the contact
     *      - *paypalEmail* - string
     *          - The email address of the PayPal account of the contact
     *      - *paypalPayerId* - string
     *          - The PayPal payer id of the contact
     *      - *klarnaPersonalId* - string
     *          - The Klarna personal id of the contact
     *      - *dhlPostIdent* - string
     *          - The DHL PostIdent of the contact
     *      - *forumUsername* - string
     *          - The user name of the contact in the forum
     *      - *forumGroupId* - string
     *          - The ID of the forum group that is assigned to the contact
     *      - *singleAccess* - string
     *          - The access type of the contact
     *      - *contactPerson* - string
     *          - The contact person of the contact
     *      - *marketplacePartner* - string
     *          - The marketplace partner status of the contact
     *      - *valuta* - integer
     *          - The foreign currency of the contact
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The salesRepresentative ID of the contact
     *      - *anonymizeAt* - string
     *          - The date at which the contact will be anonymized.
     *      - *isLead* - boolean
     *          - Defines if contact is a lead.
     *      - *leadStatusKey* - string
     *          - The current lead status key
     *      - *inLeadStatusSince* - integer
     *          - The number of days since the current lead status has been set
     *      - *leadStatusUpdateAt* - string
     *          - DEPRECATED - See leadStatusUpdatedAt
     *      - *position_id* - integer
     *          - The job position ID of the contact
     */
    public function createAccountsGuestsConvert(array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/guests/convert"], $query), 'POST');
    }
                
    /**
     * @description Get paginated list of jobs based on provided parameters
     * @tag Account
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to createdAt).
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to desc).
     *      - *id* - int - optional
     *          - Filter results by job id.
     *      - *name* - string - optional
     *          - Filter results by job name.
     *      - *with* - array - optional
     *          - Job relations, array or string (comma separated)
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Job
     */
    public function eachAccountsJobs(array $query = []): Iterator
    {
        return $this->eachInternal('getAccountsJobs', func_get_args());
    }
        
    /**
     * @description Get paginated list of jobs based on provided parameters
     * @tag Account
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to createdAt).
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to desc).
     *      - *id* - int - optional
     *          - Filter results by job id.
     *      - *name* - string - optional
     *          - Filter results by job name.
     *      - *with* - array - optional
     *          - Job relations, array or string (comma separated)
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Job
     */
    public function batchAccountsJobs(array $query = []): Iterator
    {
        return $this->batchInternal('getAccountsJobs', func_get_args());
    }
    
    /**
     * @description Get paginated list of jobs based on provided parameters
     * @tag Account
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to createdAt).
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to desc).
     *      - *id* - int - optional
     *          - Filter results by job id.
     *      - *name* - string - optional
     *          - Filter results by job name.
     *      - *with* - array - optional
     *          - Job relations, array or string (comma separated)
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Job
     */
    public function getAccountsJobs(array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounts/jobs"], $query));
    }
                
    /**
     * @description Create a job with given data
     * @tag Account
     * @return array
     *      - *id* - integer
     *          - The ID of the job
     *      - *position* - integer
     *          - The position ID
     *      - *createdAt* - string
     *          - The date the contact was created
     *      - *updatedAt* - string
     *          - The date the contact was last updated
     */
    public function createAccountsJob(): array
    {
        return $this->api("/rest/accounts/jobs", 'POST');
    }
                    
    /**
     * @description Delete a job by a given id. Hard delete, it will be entirely removed.
     * @tag Account
     * @param int $jobId 
     */
    public function deleteAccountsJobByJobId(int $jobId)
    {
        return $this->api("/rest/accounts/jobs/{$jobId}", 'DELETE');
    }
                
    /**
     * @description Get single job by id
     * @tag Account
     * @param int $jobId 
     * @return array
     *      - *id* - integer
     *          - The ID of the job
     *      - *position* - integer
     *          - The position ID
     *      - *createdAt* - string
     *          - The date the contact was created
     *      - *updatedAt* - string
     *          - The date the contact was last updated
     */
    public function getAccountsJobByJobId(int $jobId): array
    {
        return $this->api("/rest/accounts/jobs/{$jobId}");
    }
                
    /**
     * @description Update a job names with given data. The id of the job must be specified.
     * @tag Account
     * @param int $jobId 
     * @return array
     *      - *id* - integer
     *          - The ID of the job
     *      - *position* - integer
     *          - The position ID
     *      - *createdAt* - string
     *          - The date the contact was created
     *      - *updatedAt* - string
     *          - The date the contact was last updated
     */
    public function updateAccountsJobByJobId(int $jobId): array
    {
        return $this->api("/rest/accounts/jobs/{$jobId}", 'PUT');
    }
                    
    /**
     * @description Deletes a region. The ID of the sales representative`s region must be specified.
     * @tag Account
     * @param int $salesRepresentativeRegionId The ID of the account contact relation
     */
    public function deleteAccountsSalesRepresentativeRegionBySalesRepresentativeRegionId(int $salesRepresentativeRegionId)
    {
        return $this->api("/rest/accounts/sales_representative_regions/{$salesRepresentativeRegionId}", 'DELETE');
    }
                
    /**
     * @description Gets the region of the sales representative. The ID of the sales representative`s region must be specified.
     * @tag Account
     * @param int $salesRepresentativeRegionId The ID of the account contact relation
     * @return array
     *      - *id* - integer
     *          - The ID of the account contact sales representative relation
     *      - *accountContactRelationId* - integer
     *          - The ID of the foreign key account contact relation
     *      - *postalCodeArea* - string
     *      - *countryId* - integer
     */
    public function getAccountsSalesRepresentativeRegionBySalesRepresentativeRegionId(int $salesRepresentativeRegionId): array
    {
        return $this->api("/rest/accounts/sales_representative_regions/{$salesRepresentativeRegionId}");
    }
                
    /**
     * @description Updates the region. The ID of the sales representative`s region must be specified.
     * @tag Account
     * @param int $salesRepresentativeRegionId The ID of the account contact relation
     * @return array
     *      - *id* - integer
     *          - The ID of the account contact sales representative relation
     *      - *accountContactRelationId* - integer
     *          - The ID of the foreign key account contact relation
     *      - *postalCodeArea* - string
     *      - *countryId* - integer
     */
    public function updateAccountsSalesRepresentativeRegionBySalesRepresentativeRegionId(int $salesRepresentativeRegionId): array
    {
        return $this->api("/rest/accounts/sales_representative_regions/{$salesRepresentativeRegionId}", 'PUT');
    }
                    
    /**
     * @description Deletes a company. The ID of the company must be specified. An account is equivalent to a company.
     * @tag Account
     * @param int $accountId The ID of the company
     */
    public function deleteAccountByAccountId(int $accountId)
    {
        return $this->api("/rest/accounts/{$accountId}", 'DELETE');
    }
                
    /**
     * @description Gets a company. The ID of the account must be specified. An account is equivalent to a company.
     * @tag Account
     * @param int $accountId The ID of the company
     * @return array
     *      - *id* - integer
     *          - The ID of the account
     *      - *number* - string
     *          - The number of the account
     *      - *companyName* - string
     *          - The company name
     *      - *taxIdNumber* - string
     *          - The ID of the tax number
     *      - *valuta* - integer
     *          - The valuta date in days specified for the account
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The contact ID of the sales representative
     *      - *userId* - integer
     *          - The ID of the account owner
     *      - *deliveryTime* - integer
     *          - The delivery time for the supplier
     *      - *dealerMinOrderValue* - number
     *          - The minimum order value for the supplier
     *      - *supplierCurrency* - string
     *          - The currency used by a supplier
     *      - *createdAt* - string
     *          - The time the account was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the account was last updated as unix timestamp
     */
    public function getAccountByAccountId(int $accountId): array
    {
        return $this->api("/rest/accounts/{$accountId}");
    }
                
    /**
     * @description Updates a company. The ID of the company must be specified. An account is equivalent to a company.
     * @tag Account
     * @param int $accountId The ID of the company
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the account
     *      - *number* - string
     *          - The number of the account
     *      - *companyName* - string
     *          - The company name
     *      - *taxIdNumber* - string
     *          - The ID of the tax number
     *      - *valuta* - integer
     *          - The valuta date in days specified for the account
     *      - *discountDays* - integer
     *          - The early payment discount period in days specified for the account
     *      - *discountPercent* - number
     *          - The early payment discount in percent specified for the account
     *      - *timeForPaymentAllowedDays* - integer
     *          - The payment due date in days specified for the account
     *      - *salesRepresentativeContactId* - integer
     *          - The contact ID of the sales representative
     *      - *userId* - integer
     *          - The ID of the account owner
     *      - *deliveryTime* - integer
     *          - The delivery time for the supplier
     *      - *dealerMinOrderValue* - number
     *          - The minimum order value for the supplier
     *      - *supplierCurrency* - string
     *          - The currency used by a supplier
     *      - *createdAt* - string
     *          - The time the account was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the account was last updated as unix timestamp
     */
    public function updateAccountByAccountId(int $accountId, array $data): array
    {
        return $this->api("/rest/accounts/{$accountId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all contacts of the company. The ID of the company must be specified. An account is equivalent to a company
     * @tag Account
     * @param int $accountId The ID of the company
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *sortBy* - string - optional
     *          - Enables the sort of fields. SortBy has as parameter.
     *      The name of the contact field will also be sorted.
     *      - *sortOrder* - string - optional
     *          - Enables to sort the result in an ascending and descending order.
     *      When you want to sort the results in ascending order, use <code>asc</code>.
     *      When you want to sort the result in descending order, use <code>desc</code>.
     */
    public function getAccountsContactsByAccountId(int $accountId, array $query = [])
    {
        return $this->api(array_merge(["/rest/accounts/{$accountId}/contacts"], $query));
    }
                    
    /**
     * @description Gets a region. The ID of the contact and the ID of the account must be specified.
     * @tag Account
     * @param int $accountId The ID of the account
     * @param int $contactId The ID of the contact
     * @return array
     *      - *id* - integer
     *          - The ID of the account contact sales representative relation
     *      - *accountContactRelationId* - integer
     *          - The ID of the foreign key account contact relation
     *      - *postalCodeArea* - string
     *      - *countryId* - integer
     */
    public function getAccountsContactsSalesRepresentativeRegionsByAccountIdContactId(int $accountId, int $contactId): array
    {
        return $this->api("/rest/accounts/{$accountId}/contacts/{$contactId}/sales_representative_regions");
    }
                
    /**
     * @description Creates a region for the sales representative. The ID of the company and the ID of the sales representative (contactId) must be specified. An account is equivalent to a company.
     * @tag Account
     * @param int $accountId The ID of the company
     * @param int $contactId The ID of the contact
     * @return array
     *      - *id* - integer
     *          - The ID of the account contact sales representative relation
     *      - *accountContactRelationId* - integer
     *          - The ID of the foreign key account contact relation
     *      - *postalCodeArea* - string
     *      - *countryId* - integer
     */
    public function createAccountsContactsSalesRepresentativeRegionByAccountIdContactId(int $accountId, int $contactId): array
    {
        return $this->api("/rest/accounts/{$accountId}/contacts/{$contactId}/sales_representative_regions", 'POST');
    }
                    
    /**
     * @description Creates an address for an existing order.
     * @tag Account
     * @return array
     *      - *id* - integer
     *          - The ID of the address order relation
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the address type
<ul>
     <li>Billing address = 1</li>
     <li>Delivery address = 2</li>
     <li>Sender address = 3</li>
     <li>Return address = 4</li>
     <li>Client address = 5</li>
     <li>Contractor address = 6</li>
     <li>Warehouse address = 7</li>
 </ul>
     *      - *addressId* - integer
     *          - The ID of the address
     */
    public function createOrdersAddress(): array
    {
        return $this->api("/rest/orders/addresses", 'POST');
    }
                    
    /**
     * @description Updates an address for an existing order and update the relation.
     * @tag Account
     * @param int $orderId 
     * @param int $addressId 
     * @param int $relationTypeId 
     * @return array
     *      - *id* - integer
     *          - The ID of the address
     *      - *gender* - string
     *          - The gender ("female", "male" or "diverse")
     *      - *name1* - string
     *          - The name 1 field (defaults to: company name)
     *      - *name2* - string
     *          - The name 2 field (defaults to: first name)
     *      - *name3* - string
     *          - The name 3 field (defaults to: last name)
     *      - *name4* - string
     *          - The name 4 field (defaults to: c/o)
     *      - *address1* - string
     *          - The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *      - *address2* - string
     *          - The address 2 field (defaults to: houseNumber|packstationNo)
     *      - *address3* - string
     *          - The address 3 field (defaults to: additional)
     *      - *address4* - string
     *          - The address 4 field is currently undefined and can be freely used.
     *      - *postalCode* - string
     *          - The postcode
     *      - *town* - string
     *          - The town
     *      - *countryId* - integer
     *          - The ID of the country
     *      - *stateId* - integer
     *          - The ID of the state
     *      - *readOnly* - boolean
     *          - Flag that indicates if the data record is read only
     *      - *companyName* - string
     *          - The company name (alias for name1, <i>read only</i>)
     *      - *firstName* - string
     *          - The first name (alias for name2, <i>read only</i>)
     *      - *lastName* - string
     *          - The last name (alias for name3, <i>read only</i>)
     *      - *careOf* - string
     *          - The c/o (alias for name4, <i>read only</i>)
     *      - *street* - string
     *          - The street (alias for address1, <i>read only</i>)
     *      - *houseNumber* - string
     *          - The house number (alias for address2, <i>read only</i>)
     *      - *additional* - string
     *          - The additional address information (alias for address3, <i>read only</i>)
     *      - *checkedAt* - string
     *          - The time the address was checked as unix timestamp
     *      - *createdAt* - string
     *          - The time the address was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the address was last updated as unix timestamp
     *      - *taxIdNumber* - string
     *          - The taxIdNumber option (alias for option with typeId 1, <i>read only</i>)
     *      - *externalId* - string
     *          - The externalId option (alias for option with typeId 2, <i>read only</i>)
     *      - *entryCertificate* - boolean
     *          - The entryCertificate option (alias for option with typeId 3, <i>read only</i>)
     *      - *phone* - string
     *          - The phone option (alias for option with typeId 4, <i>read only</i>)
     *      - *email* - string
     *          - The email option (alias for option with typeId 5, <i>read only</i>)
     *      - *postident* - string
     *          - The PostIdent option (alias for option with typeId 6, <i>read only</i>)
     *      - *personalNumber* - string
     *          - The personal number option (alias for option with typeId 7, <i>read only</i>)
     *      - *fsk* - string
     *          - The age rating option (alias for option with typeId 8, <i>read only</i>)
     *      - *birthday* - string
     *          - The birthday option (alias for option with typeId 9, <i>read only</i>)
     *      - *title* - string
     *          - The title option (alias for option with typeId 11, <i>read only</i>)
     *      - *sessionId* - string
     *          - The fronetnd session ID that was used when the address was created (alias for option with typeId 10, <i>read only</i>)
     *      - *contactPerson* - string
     *          - The contact person option (alias for option with typeId 12, <i>read only</i>)
     *      - *externalCustomerId* - string
     *          - The external customer ID option (alias for option with typeId 13, <i>read only</i>)
     *      - *packstationNo* - string
     *          - The packstation number (alias for houseNumber and address2, <i>read only</i>)
     *      - *isPackstation* - boolean
     *          - Flag that indicates if the address is a packstation
     *      - *isPostfiliale* - boolean
     *          - Flag that indicates if the address is a postfiliale (post office)
     */
    public function updateOrdersAddressByOrderIdAddressIdRelationTypeId(int $orderId, int $addressId, int $relationTypeId): array
    {
        return $this->api("/rest/orders/{$orderId}/addresses/{$addressId}/{$relationTypeId}", 'PUT');
    }
                    
    /**
     * @description Lists order addresses. The ID of the order and the ID of the relation type must be specified.
     * @tag Account
     * @param int $orderId 
     * @param int $relationTypeId 
     * @return array
     *      - *id* - integer
     *          - The ID of the address order relation
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the address type
<ul>
     <li>Billing address = 1</li>
     <li>Delivery address = 2</li>
     <li>Sender address = 3</li>
     <li>Return address = 4</li>
     <li>Client address = 5</li>
     <li>Contractor address = 6</li>
     <li>Warehouse address = 7</li>
 </ul>
     *      - *addressId* - integer
     *          - The ID of the address
     */
    public function getOrdersAddressesRelationTypeIdByOrderIdRelationTypeId(int $orderId, int $relationTypeId): array
    {
        return $this->api("/rest/orders/{$orderId}/addresses/{$relationTypeId}");
    }
                    
    /**
     * @description Creates an address for an existing order and update the relation.
     * @tag Account
     * @param int $orderId 
     * @param int $relationTypeId 
     * @return array
     *      - *id* - integer
     *          - The ID of the address
     *      - *gender* - string
     *          - The gender ("female", "male" or "diverse")
     *      - *name1* - string
     *          - The name 1 field (defaults to: company name)
     *      - *name2* - string
     *          - The name 2 field (defaults to: first name)
     *      - *name3* - string
     *          - The name 3 field (defaults to: last name)
     *      - *name4* - string
     *          - The name 4 field (defaults to: c/o)
     *      - *address1* - string
     *          - The address 1 field (defaults to: street|'PACKSTATION'|'POSTFILIALE')
     *      - *address2* - string
     *          - The address 2 field (defaults to: houseNumber|packstationNo)
     *      - *address3* - string
     *          - The address 3 field (defaults to: additional)
     *      - *address4* - string
     *          - The address 4 field is currently undefined and can be freely used.
     *      - *postalCode* - string
     *          - The postcode
     *      - *town* - string
     *          - The town
     *      - *countryId* - integer
     *          - The ID of the country
     *      - *stateId* - integer
     *          - The ID of the state
     *      - *readOnly* - boolean
     *          - Flag that indicates if the data record is read only
     *      - *companyName* - string
     *          - The company name (alias for name1, <i>read only</i>)
     *      - *firstName* - string
     *          - The first name (alias for name2, <i>read only</i>)
     *      - *lastName* - string
     *          - The last name (alias for name3, <i>read only</i>)
     *      - *careOf* - string
     *          - The c/o (alias for name4, <i>read only</i>)
     *      - *street* - string
     *          - The street (alias for address1, <i>read only</i>)
     *      - *houseNumber* - string
     *          - The house number (alias for address2, <i>read only</i>)
     *      - *additional* - string
     *          - The additional address information (alias for address3, <i>read only</i>)
     *      - *checkedAt* - string
     *          - The time the address was checked as unix timestamp
     *      - *createdAt* - string
     *          - The time the address was created as unix timestamp
     *      - *updatedAt* - string
     *          - The time the address was last updated as unix timestamp
     *      - *taxIdNumber* - string
     *          - The taxIdNumber option (alias for option with typeId 1, <i>read only</i>)
     *      - *externalId* - string
     *          - The externalId option (alias for option with typeId 2, <i>read only</i>)
     *      - *entryCertificate* - boolean
     *          - The entryCertificate option (alias for option with typeId 3, <i>read only</i>)
     *      - *phone* - string
     *          - The phone option (alias for option with typeId 4, <i>read only</i>)
     *      - *email* - string
     *          - The email option (alias for option with typeId 5, <i>read only</i>)
     *      - *postident* - string
     *          - The PostIdent option (alias for option with typeId 6, <i>read only</i>)
     *      - *personalNumber* - string
     *          - The personal number option (alias for option with typeId 7, <i>read only</i>)
     *      - *fsk* - string
     *          - The age rating option (alias for option with typeId 8, <i>read only</i>)
     *      - *birthday* - string
     *          - The birthday option (alias for option with typeId 9, <i>read only</i>)
     *      - *title* - string
     *          - The title option (alias for option with typeId 11, <i>read only</i>)
     *      - *sessionId* - string
     *          - The fronetnd session ID that was used when the address was created (alias for option with typeId 10, <i>read only</i>)
     *      - *contactPerson* - string
     *          - The contact person option (alias for option with typeId 12, <i>read only</i>)
     *      - *externalCustomerId* - string
     *          - The external customer ID option (alias for option with typeId 13, <i>read only</i>)
     *      - *packstationNo* - string
     *          - The packstation number (alias for houseNumber and address2, <i>read only</i>)
     *      - *isPackstation* - boolean
     *          - Flag that indicates if the address is a packstation
     *      - *isPostfiliale* - boolean
     *          - Flag that indicates if the address is a postfiliale (post office)
     */
    public function createOrdersAddressByOrderIdRelationTypeId(int $orderId, int $relationTypeId): array
    {
        return $this->api("/rest/orders/{$orderId}/addresses/{$relationTypeId}", 'POST');
    }
                    
    /**
     * @description Creates an address for an existing warehouse.
     * @tag Account
     * @return array
     *      - *id* - integer
     *          - The ID of the address warehouse relation
     *      - *warehouseId* - integer
     *          - The ID of the warehouse
     *      - *typeId* - integer
     *          - The ID of the type
     *      - *addressId* - integer
     *          - The ID of the address
     */
    public function createStockmanagementWarehousesAddress(): array
    {
        return $this->api("/rest/stockmanagement/warehouses/addresses", 'POST');
    }
                    
    /**
     * @description List warehouse addresses. The ID of the warehouse, the address and the ID of the relation type must be specified.
     * @tag Account
     * @param int $warehouseId 
     * @param int $relationTypeId 
     * @return array
     *      - *id* - integer
     *          - The ID of the address warehouse relation
     *      - *warehouseId* - integer
     *          - The ID of the warehouse
     *      - *typeId* - integer
     *          - The ID of the type
     *      - *addressId* - integer
     *          - The ID of the address
     */
    public function getStockmanagementWarehousesAddressesRelationTypeIdByWarehouseIdRelationTypeId(int $warehouseId, int $relationTypeId): array
    {
        return $this->api("/rest/stockmanagement/warehouses/{$warehouseId}/addresses/{$relationTypeId}");
    }
    
}
