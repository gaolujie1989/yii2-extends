<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class BI extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Return a list of key figure classes with items <caption, value>
     * @tag BI
     * @return array
     */
    public function getBiKeyFigures(): array
    {
        return $this->api("/rest/bi/key-figures");
    }
                
    /**
     * @description Returns all key figure configs paginated, by default as 25 per page.
Can be called with optional param ‘with’ that loads additional relations for key figure
as filter, targets, dimensions, dimensionsValues
     * @tag BI
     * @param array $query
     *      - *page* - int - required
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of key figure configurations to be displayed per page. The default number of key figure configurations per page is 25.
     *      - *keyFigure* - string - optional
     *          - Filter that restricts the search result to key figure configurations of a key figure.
     *      - *ids* - array - optional
     *          - Optional list of IDs that limit the search query
     *      - *with* - array - optional
     *          - Load additional relations for a key figure. The following relations are available:
     * <ul>
    <li>'filter' = Filter options of this key figure.</li>
    <li>'targets' = Target values of this key figure.</li>
    <li>'dimensions' = Available dimensions of this key figure.</li>
    <li>'dimensionValues' = Available dimension values of this key figure.</li>
    </ul>
    Example: <code>?with[]=dimension&with[]=dimensionValues</code>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of KeyFigureConfig
     */
    public function eachBiKeyFiguresConfig(array $query): Iterator
    {
        return $this->eachInternal('getBiKeyFiguresConfig', func_get_args());
    }
        
    /**
     * @description Returns all key figure configs paginated, by default as 25 per page.
Can be called with optional param ‘with’ that loads additional relations for key figure
as filter, targets, dimensions, dimensionsValues
     * @tag BI
     * @param array $query
     *      - *page* - int - required
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of key figure configurations to be displayed per page. The default number of key figure configurations per page is 25.
     *      - *keyFigure* - string - optional
     *          - Filter that restricts the search result to key figure configurations of a key figure.
     *      - *ids* - array - optional
     *          - Optional list of IDs that limit the search query
     *      - *with* - array - optional
     *          - Load additional relations for a key figure. The following relations are available:
     * <ul>
    <li>'filter' = Filter options of this key figure.</li>
    <li>'targets' = Target values of this key figure.</li>
    <li>'dimensions' = Available dimensions of this key figure.</li>
    <li>'dimensionValues' = Available dimension values of this key figure.</li>
    </ul>
    Example: <code>?with[]=dimension&with[]=dimensionValues</code>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of KeyFigureConfig
     */
    public function batchBiKeyFiguresConfig(array $query): Iterator
    {
        return $this->batchInternal('getBiKeyFiguresConfig', func_get_args());
    }
    
    /**
     * @description Returns all key figure configs paginated, by default as 25 per page.
Can be called with optional param ‘with’ that loads additional relations for key figure
as filter, targets, dimensions, dimensionsValues
     * @tag BI
     * @param array $query
     *      - *page* - int - required
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of key figure configurations to be displayed per page. The default number of key figure configurations per page is 25.
     *      - *keyFigure* - string - optional
     *          - Filter that restricts the search result to key figure configurations of a key figure.
     *      - *ids* - array - optional
     *          - Optional list of IDs that limit the search query
     *      - *with* - array - optional
     *          - Load additional relations for a key figure. The following relations are available:
     * <ul>
    <li>'filter' = Filter options of this key figure.</li>
    <li>'targets' = Target values of this key figure.</li>
    <li>'dimensions' = Available dimensions of this key figure.</li>
    <li>'dimensionValues' = Available dimension values of this key figure.</li>
    </ul>
    Example: <code>?with[]=dimension&with[]=dimensionValues</code>
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of KeyFigureConfig
     */
    public function getBiKeyFiguresConfig(array $query): array
    {
        return $this->api(array_merge(["/rest/bi/key-figures/config"], $query));
    }
                
    /**
     * @description Add key figure configuration with filters, targets, dimensions, dimensionsValues
     * @tag BI
     * @return array
     *      - *id* - string
     *          - Id of this configuration
     *      - *hash* - string
     *          - Hash value to check for updates and avoid duplicate key figures with the same filters
     *      - *plentyId* - integer
     *          - The plentymarkets system id
     *      - *plentyIdHash* - string
     *          - The plentymarkets system id hash
     *      - *keyFigure* - string
     *          - Key figure identifier
     *      - *keyFigureCaption* - string
     *          - Key figure caption
     *      - *keyFigureName* - string
     *          - User defined name
     *      - *direct* - boolean
     *          - This key figure triggers a direct calculation without saving the result
     *      - *freeOfCharge* - boolean
     *          - Is this key figure free of charge
     *      - *isGlobal* - boolean
     *      - *updatedAt* - string
     *          - Time of last change
     *      - *createdAt* - string
     *          - Time of creation
     *      - *externalId* - string
     *          - Identifier to assign the model
     *      - *dimensions* - array
     *          - List of existing dimensions
     *      - *dimensionValues* - array
     *          - List of dimension values
     *      - *category* - string
     *          - The translated category text of the keyfigure
     *      - *aggregateFunctions* - array
     *          - List of supported SQL aggregate functions
     */
    public function createBiKeyFiguresConfig(): array
    {
        return $this->api("/rest/bi/key-figures/config", 'POST');
    }
                    
    /**
     * @description Based on selected template a key figure configuration is generated
     * @tag BI
     * @param array $query
     *      - *keyFigureClass* - string - required
     *          - Template class name
     *      - *externalId* - string - optional
     *          - Identifier to assign the result
     * @return array
     *      - *id* - string
     *          - Id of this configuration
     *      - *hash* - string
     *          - Hash value to check for updates and avoid duplicate key figures with the same filters
     *      - *plentyId* - integer
     *          - The plentymarkets system id
     *      - *plentyIdHash* - string
     *          - The plentymarkets system id hash
     *      - *keyFigure* - string
     *          - Key figure identifier
     *      - *keyFigureCaption* - string
     *          - Key figure caption
     *      - *keyFigureName* - string
     *          - User defined name
     *      - *direct* - boolean
     *          - This key figure triggers a direct calculation without saving the result
     *      - *freeOfCharge* - boolean
     *          - Is this key figure free of charge
     *      - *isGlobal* - boolean
     *      - *updatedAt* - string
     *          - Time of last change
     *      - *createdAt* - string
     *          - Time of creation
     *      - *externalId* - string
     *          - Identifier to assign the model
     *      - *dimensions* - array
     *          - List of existing dimensions
     *      - *dimensionValues* - array
     *          - List of dimension values
     *      - *category* - string
     *          - The translated category text of the keyfigure
     *      - *aggregateFunctions* - array
     *          - List of supported SQL aggregate functions
     */
    public function createBiKeyFiguresConfigTemplate(array $query): array
    {
        return $this->api(array_merge(["/rest/bi/key-figures/config/template"], $query), 'POST');
    }
                    
    /**
     * @description Return list of templates available from configurations
     * @tag BI
     * @return array
     */
    public function getBiKeyFiguresConfigTemplates(): array
    {
        return $this->api("/rest/bi/key-figures/config/templates");
    }
                    
    /**
     * @description Delete a key figure configuration with a specified configuration id
     * @tag BI
     * @param int $keyFigureConfigId 
     */
    public function deleteBiKeyFiguresConfigByKeyFigureConfigId(int $keyFigureConfigId)
    {
        return $this->api("/rest/bi/key-figures/config/{$keyFigureConfigId}", 'DELETE');
    }
                
    /**
     * @description Get key figure configuration including filters, targets, dimensions, dimensionsValues
     * @tag BI
     * @param int $keyFigureConfigId 
     * @param array $query
     *      - *with* - array - optional
     *          - Load additional relations for a key figure. The following relations are available:
     * <ul>
    <li>'dimensions' = Available dimensions of this key figure.</li>
    <li>'dimensionValues' = Available dimension values of this key figure.</li>
    </ul>
    Example: <code>?with[]=dimension&with[]=dimensionValues</code>
     * @return array
     *      - *id* - string
     *          - Id of this configuration
     *      - *hash* - string
     *          - Hash value to check for updates and avoid duplicate key figures with the same filters
     *      - *plentyId* - integer
     *          - The plentymarkets system id
     *      - *plentyIdHash* - string
     *          - The plentymarkets system id hash
     *      - *keyFigure* - string
     *          - Key figure identifier
     *      - *keyFigureCaption* - string
     *          - Key figure caption
     *      - *keyFigureName* - string
     *          - User defined name
     *      - *direct* - boolean
     *          - This key figure triggers a direct calculation without saving the result
     *      - *freeOfCharge* - boolean
     *          - Is this key figure free of charge
     *      - *isGlobal* - boolean
     *      - *updatedAt* - string
     *          - Time of last change
     *      - *createdAt* - string
     *          - Time of creation
     *      - *externalId* - string
     *          - Identifier to assign the model
     *      - *dimensions* - array
     *          - List of existing dimensions
     *      - *dimensionValues* - array
     *          - List of dimension values
     *      - *category* - string
     *          - The translated category text of the keyfigure
     *      - *aggregateFunctions* - array
     *          - List of supported SQL aggregate functions
     */
    public function getBiKeyFiguresConfigByKeyFigureConfigId(int $keyFigureConfigId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/bi/key-figures/config/{$keyFigureConfigId}"], $query));
    }
                
    /**
     * @description Update key figure configuration including filters, targets, dimensions, dimensionsValues
     * @tag BI
     * @param int $keyFigureConfigId 
     * @return array
     *      - *id* - string
     *          - Id of this configuration
     *      - *hash* - string
     *          - Hash value to check for updates and avoid duplicate key figures with the same filters
     *      - *plentyId* - integer
     *          - The plentymarkets system id
     *      - *plentyIdHash* - string
     *          - The plentymarkets system id hash
     *      - *keyFigure* - string
     *          - Key figure identifier
     *      - *keyFigureCaption* - string
     *          - Key figure caption
     *      - *keyFigureName* - string
     *          - User defined name
     *      - *direct* - boolean
     *          - This key figure triggers a direct calculation without saving the result
     *      - *freeOfCharge* - boolean
     *          - Is this key figure free of charge
     *      - *isGlobal* - boolean
     *      - *updatedAt* - string
     *          - Time of last change
     *      - *createdAt* - string
     *          - Time of creation
     *      - *externalId* - string
     *          - Identifier to assign the model
     *      - *dimensions* - array
     *          - List of existing dimensions
     *      - *dimensionValues* - array
     *          - List of dimension values
     *      - *category* - string
     *          - The translated category text of the keyfigure
     *      - *aggregateFunctions* - array
     *          - List of supported SQL aggregate functions
     */
    public function updateBiKeyFiguresConfigByKeyFigureConfigId(int $keyFigureConfigId): array
    {
        return $this->api("/rest/bi/key-figures/config/{$keyFigureConfigId}", 'PUT');
    }
                    
    /**
     * @description Delete multiple key figure configurations given on array of configurations ids
     * @tag BI

     */
    public function deleteBiKeyFiguresConfig()
    {
        return $this->api("/rest/bi/key-figures/configs", 'DELETE');
    }
                    
    /**
     * @description return key figure filled with calculation details:
dimensions, rawDataColumns, filters, aggregate functions
     * @tag BI
     * @param int $keyFigureName 
     * @return array
     *      - *title* - string
     *      - *description* - string
     *      - *category* - string
     *          - Key figure category name
     *      - *keyFigure* - string
     *      - *dataSeries* - boolean
     *      - *resultFields* - array
     *      - *primaryResultField* - string
     *      - *rawDataDeleteAble* - boolean
     *          - Raw data should be deleted from the data warehouse
     *      - *freeOfCharge* - boolean
     *          - Is this key figure free of charge
     *      - *rawDataColumns* - array
     *      - *resultExportColumns* - array
     *      - *calculation* - array
     *      - *dimensions* - array
     *      - *dataFilters* - array
     *      - *aggregateFunctions* - array
     *          - List of allowed sql aggregate functions. The user can select a value for the display of the calculation results.
     *      - *resultUnitsList* - array
     *          - List of possible result units. [ ['calculation' => 'exampleCalculation', 'unit' => 'exampleUnit'], [...] ]
     */
    public function getBiKeyFiguresDetailByKeyFigureName(int $keyFigureName): array
    {
        return $this->api("/rest/bi/key-figures/details/{$keyFigureName}");
    }
                    
    /**
     * @description Returns the list of dimensions and dimensions values for a specific key figure
     * @tag BI
     * @param int $keyFigure 
     * @param array $query
     *      - *with* - array - optional
     *          - Load additional relations for a key figure. The following relations are available:
     * <ul>
    <li>'dimensions' = Available dimensions of this key figure.</li>
    <li>'dimensionValues' = Available dimension values of this key figure.</li>
    </ul>
    Example: <code>?with[]=dimension&with[]=dimensionValues</code>
     *      - *dimension* - string - optional
     *          - The specification of a dimension enables the return of the appropriate dimension values.
     * @return array
     *      - *id* - string
     *          - Id of this configuration
     *      - *hash* - string
     *          - Hash value to check for updates and avoid duplicate key figures with the same filters
     *      - *plentyId* - integer
     *          - The plentymarkets system id
     *      - *plentyIdHash* - string
     *          - The plentymarkets system id hash
     *      - *keyFigure* - string
     *          - Key figure identifier
     *      - *keyFigureCaption* - string
     *          - Key figure caption
     *      - *keyFigureName* - string
     *          - User defined name
     *      - *direct* - boolean
     *          - This key figure triggers a direct calculation without saving the result
     *      - *freeOfCharge* - boolean
     *          - Is this key figure free of charge
     *      - *isGlobal* - boolean
     *      - *updatedAt* - string
     *          - Time of last change
     *      - *createdAt* - string
     *          - Time of creation
     *      - *externalId* - string
     *          - Identifier to assign the model
     *      - *dimensions* - array
     *          - List of existing dimensions
     *      - *dimensionValues* - array
     *          - List of dimension values
     *      - *category* - string
     *          - The translated category text of the keyfigure
     *      - *aggregateFunctions* - array
     *          - List of supported SQL aggregate functions
     */
    public function getBiKeyFiguresDimensionByKeyFigure(int $keyFigure, array $query = []): array
    {
        return $this->api(array_merge(["/rest/bi/key-figures/dimensions/{$keyFigure}"], $query));
    }
                    
    /**
     * @description Return global filters by given key figure identifiers param: identifiers
     * @tag BI
     * @return array
     */
    public function createBiKeyFiguresGlobalFilter(): array
    {
        return $this->api("/rest/bi/key-figures/global-filters", 'POST');
    }
                    
    /**
     * @description Return global filter values by given criteria identifiers param: identifiers
     * @tag BI
     * @return array
     */
    public function createBiKeyFiguresGlobalFiltersValue(): array
    {
        return $this->api("/rest/bi/key-figures/global-filters/values", 'POST');
    }
                
    /**
     * @description Returns a paginated result of raw data items.
Can add page - int ,itemsPerPage - int or filters - array as parameters
     * @tag BI
     * @param int $keyFigureConfigId 
     * @param array $query
     *      - *page* - int - optional
     *          - Page
     *      - *itemsPerPage* - int - optional
     *          - The number of raw data items to be returned. The default number of files is 50 and the maximum is 250.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function eachBiKeyFiguresRawDatumByKeyFigureConfigId(int $keyFigureConfigId, array $query = []): Iterator
    {
        return $this->eachInternal('getBiKeyFiguresRawDatumByKeyFigureConfigId', func_get_args());
    }
        
    /**
     * @description Returns a paginated result of raw data items.
Can add page - int ,itemsPerPage - int or filters - array as parameters
     * @tag BI
     * @param int $keyFigureConfigId 
     * @param array $query
     *      - *page* - int - optional
     *          - Page
     *      - *itemsPerPage* - int - optional
     *          - The number of raw data items to be returned. The default number of files is 50 and the maximum is 250.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function batchBiKeyFiguresRawDatumByKeyFigureConfigId(int $keyFigureConfigId, array $query = []): Iterator
    {
        return $this->batchInternal('getBiKeyFiguresRawDatumByKeyFigureConfigId', func_get_args());
    }
    
    /**
     * @description Returns a paginated result of raw data items.
Can add page - int ,itemsPerPage - int or filters - array as parameters
     * @tag BI
     * @param int $keyFigureConfigId 
     * @param array $query
     *      - *page* - int - optional
     *          - Page
     *      - *itemsPerPage* - int - optional
     *          - The number of raw data items to be returned. The default number of files is 50 and the maximum is 250.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getBiKeyFiguresRawDatumByKeyFigureConfigId(int $keyFigureConfigId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/bi/key-figures/raw-data/{$keyFigureConfigId}"], $query));
    }
                
    /**
     * @description Returns a paginated result of raw data items.
Can add page - int ,itemsPerPage - int or filters - array as parameters
     * @tag BI
     * @param int $keyFigureConfigId 
     * @param array $query
     *      - *page* - int - optional
     *          - Page
     *      - *itemsPerPage* - int - optional
     *          - The number of raw data items to be returned. The default number of files is 50 and the maximum is 250.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function createBiKeyFiguresRawDatumByKeyFigureConfigId(int $keyFigureConfigId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/bi/key-figures/raw-data/{$keyFigureConfigId}"], $query), 'POST');
    }
                    
    /**
     * @description Returns <string>"true" if operation has been completed successfully, or <string>"false" otherwise
     * @tag BI
     * @param int $keyFigureConfigId 
     * @param array $query
     *      - *spreadsheetURL* - string - required
     *          - The URL pointing to the spreadsheet
     *      - *columnsToExport* - array - required
     *          - An array containing the columns from raw data which will be exported
     *      - *startingCell* - string - required
     *          - The top-left cell inside the spreadsheet from which the export will fill data
     */
    public function createBiKeyFiguresRawDataExportSpreadsheetByKeyFigureConfigId(int $keyFigureConfigId, array $query)
    {
        return $this->api(array_merge(["/rest/bi/key-figures/raw-data/{$keyFigureConfigId}/export-spreadsheet"], $query), 'POST');
    }
                    
    /**
     * @description Returns "1" if recalculations were queued, or "0" otherwise
     * @tag BI

     */
    public function createBiKeyFiguresRecalculate()
    {
        return $this->api("/rest/bi/key-figures/recalculate", 'POST');
    }
                    
    /**
     * @description Search for key figure calculation results,
returns KeyFigureResultSearchResponse including KeyFigureResultSearchResult children
     * @tag BI
     * @param array $data 
     */
    public function createBiKeyFiguresResult(array $data)
    {
        return $this->api("/rest/bi/key-figures/results", 'POST', $data);
    }
                    
    /**
     * @description Returns a list of order types in string format <caption,value>
     * @tag BI
     * @return array
     */
    public function getBiOrderTypes(): array
    {
        return $this->api("/rest/bi/order-types");
    }
                
    /**
     * @description Get list of raw data files. Valid filter combinations: (dataName), (dataName & processStatus), (createdAtTimestamp)
     * @tag BI
     * @param array $query
     *      - *dataName* - string - optional
     *          - Filter that restricts the search result to raw data files e.g. orders,orderItems.
     *      - *processStatus* - string - optional
     *          - Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value.
     *      - *createdAtTimestamp* - int - optional
     *          - Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus
     *      - *itemsPerPage* - int - optional
     *          - The number of raw data files to be returned. The default number of files is 20 and the maximum is 100.
     *      - *sortOrder* - string - optional
     *          - Defines the sort order, possible values are: asc, desc
     *      - *page* - int - optional
     *          - Page
     * @return Iterator
     *      - *after* - string
     *          - The last evaluated key as base64, provide that as the starting point for the next query (pagination).
     */
    public function eachBiRawData(array $query = []): Iterator
    {
        return $this->eachInternal('getBiRawData', func_get_args());
    }
        
    /**
     * @description Get list of raw data files. Valid filter combinations: (dataName), (dataName & processStatus), (createdAtTimestamp)
     * @tag BI
     * @param array $query
     *      - *dataName* - string - optional
     *          - Filter that restricts the search result to raw data files e.g. orders,orderItems.
     *      - *processStatus* - string - optional
     *          - Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value.
     *      - *createdAtTimestamp* - int - optional
     *          - Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus
     *      - *itemsPerPage* - int - optional
     *          - The number of raw data files to be returned. The default number of files is 20 and the maximum is 100.
     *      - *sortOrder* - string - optional
     *          - Defines the sort order, possible values are: asc, desc
     *      - *page* - int - optional
     *          - Page
     * @return Iterator
     *      - *after* - string
     *          - The last evaluated key as base64, provide that as the starting point for the next query (pagination).
     */
    public function batchBiRawData(array $query = []): Iterator
    {
        return $this->batchInternal('getBiRawData', func_get_args());
    }
    
    /**
     * @description Get list of raw data files. Valid filter combinations: (dataName), (dataName & processStatus), (createdAtTimestamp)
     * @tag BI
     * @param array $query
     *      - *dataName* - string - optional
     *          - Filter that restricts the search result to raw data files e.g. orders,orderItems.
     *      - *processStatus* - string - optional
     *          - Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value.
     *      - *createdAtTimestamp* - int - optional
     *          - Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus
     *      - *itemsPerPage* - int - optional
     *          - The number of raw data files to be returned. The default number of files is 20 and the maximum is 100.
     *      - *sortOrder* - string - optional
     *          - Defines the sort order, possible values are: asc, desc
     *      - *page* - int - optional
     *          - Page
     * @return array
     *      - *after* - string
     *          - The last evaluated key as base64, provide that as the starting point for the next query (pagination).
     */
    public function getBiRawData(array $query = []): array
    {
        return $this->api(array_merge(["/rest/bi/raw-data"], $query));
    }
                    
    /**
     * @description Returns a list of raw data configurations including their children
     * @tag BI
     * @return array
     *      - *plentyIdHash* - string
     *          - The plentymarkets system id hash
     */
    public function getBiRawDataConfig(): array
    {
        return $this->api("/rest/bi/raw-data/config");
    }
                
    /**
     * @description Reset all raw data configurations and their children with provided data from the Request
     * @tag BI
     * @param array $query
     *      - *configs* - array - required
     *          - Resets all saved raw data configurations with given configs
     * @return array
     *      - *plentyIdHash* - string
     *          - The plentymarkets system id hash
     */
    public function updateBiRawDataConfig(array $query): array
    {
        return $this->api(array_merge(["/rest/bi/raw-data/config"], $query), 'PUT');
    }
                    
    /**
     * @description returns list of raw data creators from plenty modules that were not set hidden (by default)
     * @tag BI
     * @return array
     */
    public function getBiRawDataCreators(): array
    {
        return $this->api("/rest/bi/raw-data/creators");
    }
                    
    /**
     * @description Returns list of paginated raw data creators with their configurations, by default itemsPerPage=50
     * @tag BI
     * @param array $query
     *      - *page* - int - required
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of raw data creators to be displayed per page. The default number of raw data creators per page is 50.
     */
    public function getBiRawDataCreatorsConfigs(array $query)
    {
        return $this->api(array_merge(["/rest/bi/raw-data/creators-configs"], $query));
    }
                    
    /**
     * @description Get a raw data file from the storage, the storage path of the file must be specified.
     * @tag BI
     * @param array $query
     *      - *path* - string - required
     *          - The raw data file path
     */
    public function getBiRawDataFile(array $query)
    {
        return $this->api(array_merge(["/rest/bi/raw-data/file"], $query));
    }
                    
    /**
     * @description Deletes RawData\Models that are deletable if these are not deletable
the method will return a json response with the message:
'Deleting raw data is not allowed for this format'
     * @tag BI
     * @param int $dataName 
     * @param array $query
     *      - *path* - array - required
     *          - List of primary keys of the records to be deleted
     */
    public function deleteBiRawDatumByDataName(int $dataName, array $query)
    {
        return $this->api(array_merge(["/rest/bi/raw-data/{$dataName}"], $query), 'DELETE');
    }
                
    /**
     * @description Get list of raw data files. Valid filter combinations: (dataName), (dataName & processStatus), (createdAtTimestamp)
     * @tag BI
     * @param array $query
     *      - *dataName* - string - optional
     *          - Filter that restricts the search result to raw data files e.g. orders,orderItems.
     *      - *processStatus* - string - optional
     *          - Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value.
     *      - *createdAtTimestamp* - int - optional
     *          - Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus
     *      - *itemsPerPage* - int - optional
     *          - The number of raw data files to be returned. The default number of files is 20 and the maximum is 100.
     *      - *sortOrder* - string - optional
     *          - Defines the sort order, possible values are: asc, desc
     *      - *page* - int - optional
     *          - Page
     * @return Iterator
     *      - *after* - string
     *          - The last evaluated key as base64, provide that as the starting point for the next query (pagination).
     */
    public function eachReportsRawData(array $query = []): Iterator
    {
        return $this->eachInternal('getReportsRawData', func_get_args());
    }
        
    /**
     * @description Get list of raw data files. Valid filter combinations: (dataName), (dataName & processStatus), (createdAtTimestamp)
     * @tag BI
     * @param array $query
     *      - *dataName* - string - optional
     *          - Filter that restricts the search result to raw data files e.g. orders,orderItems.
     *      - *processStatus* - string - optional
     *          - Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value.
     *      - *createdAtTimestamp* - int - optional
     *          - Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus
     *      - *itemsPerPage* - int - optional
     *          - The number of raw data files to be returned. The default number of files is 20 and the maximum is 100.
     *      - *sortOrder* - string - optional
     *          - Defines the sort order, possible values are: asc, desc
     *      - *page* - int - optional
     *          - Page
     * @return Iterator
     *      - *after* - string
     *          - The last evaluated key as base64, provide that as the starting point for the next query (pagination).
     */
    public function batchReportsRawData(array $query = []): Iterator
    {
        return $this->batchInternal('getReportsRawData', func_get_args());
    }
    
    /**
     * @description Get list of raw data files. Valid filter combinations: (dataName), (dataName & processStatus), (createdAtTimestamp)
     * @tag BI
     * @param array $query
     *      - *dataName* - string - optional
     *          - Filter that restricts the search result to raw data files e.g. orders,orderItems.
     *      - *processStatus* - string - optional
     *          - Current process status, the status is only changed by internal processing. If this filter is used, the filter dataNames may only contain one value.
     *      - *createdAtTimestamp* - int - optional
     *          - Timestamp from when daily generated raw data are to be filtered. This filter cannot be combined with the following filters: dataNames, processStatus
     *      - *itemsPerPage* - int - optional
     *          - The number of raw data files to be returned. The default number of files is 20 and the maximum is 100.
     *      - *sortOrder* - string - optional
     *          - Defines the sort order, possible values are: asc, desc
     *      - *page* - int - optional
     *          - Page
     * @return array
     *      - *after* - string
     *          - The last evaluated key as base64, provide that as the starting point for the next query (pagination).
     */
    public function getReportsRawData(array $query = []): array
    {
        return $this->api(array_merge(["/rest/reports/raw-data"], $query));
    }
                    
    /**
     * @description Reset all raw data configurations and their children with provided data from the Request
     * @tag BI
     * @param array $query
     *      - *configs* - array - required
     *          - Resets all saved raw data configurations with given configs
     * @return array
     *      - *plentyIdHash* - string
     *          - The plentymarkets system id hash
     */
    public function updateReportsRawDataConfig(array $query): array
    {
        return $this->api(array_merge(["/rest/reports/raw-data/config"], $query), 'PUT');
    }
                    
    /**
     * @description returns list of raw data creators from plenty modules that were not set hidden (by default)
     * @tag BI
     * @return array
     */
    public function getReportsRawDataCreators(): array
    {
        return $this->api("/rest/reports/raw-data/creators");
    }
                    
    /**
     * @description Returns list of paginated raw data creators with their configurations, by default itemsPerPage=50
     * @tag BI
     * @param array $query
     *      - *page* - int - required
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of raw data creators to be displayed per page. The default number of raw data creators per page is 50.
     */
    public function getReportsRawDataCreatorsConfigs(array $query)
    {
        return $this->api(array_merge(["/rest/reports/raw-data/creators-configs"], $query));
    }
                    
    /**
     * @description Get a raw data file from the storage, the storage path of the file must be specified.
     * @tag BI
     * @param array $query
     *      - *path* - string - required
     *          - The raw data file path
     */
    public function getReportsRawDataFile(array $query)
    {
        return $this->api(array_merge(["/rest/reports/raw-data/file"], $query));
    }
    
}
