<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class ElasticSync extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{


    /**
     * @description Gets the csv rows. Sync ID is required.
     * @tag ElasticSync
     * @param int $syncId The id of the sync
     * @return array
     */
    public function getElasticSyncMappingCsvRowBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/mapping/csv-rows/{$syncId}");
    }

    /**
     * @description Gets the plenty fields value map for a particular sync type. Sync type is required.
     * @tag ElasticSync
     * @param string $syncType The sync type
     * @return array
     */
    public function getElasticSyncMappingFieldBySyncType(string $syncType): array
    {
        return $this->api("/rest/elastic-sync/mapping/fields/{$syncType}");
    }

    /**
     * @description Gets the label list for mapping filtration.
     * @tag ElasticSync
     * @return array
     */
    public function getElasticSyncMappingFilterLabels(): array
    {
        return $this->api("/rest/elastic-sync/mapping/filter/labels");
    }

    /**
     * @description Gets the csv columns of a sync. Sync ID is required.
     * @tag ElasticSync
     * @param int $syncId The sync id of the mapping
     * @return array
     */
    public function getElasticSyncMappingMapCsvColumnBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/mapping/map/csv-columns/{$syncId}");
    }

    /**
     * @description Gets the mapping values. Sync data type is required.
     * @tag ElasticSync
     * @return array
     */
    public function getElasticSyncMappingMapTree(): array
    {
        return $this->api("/rest/elastic-sync/mapping/map/tree");
    }

    /**
     * @description Gets the model key to field value key. Sync type is required.
     * @tag ElasticSync
     * @param string $syncType The sync type
     * @return array
     */
    public function getElasticSyncMappingModelBySyncType(string $syncType): array
    {
        return $this->api("/rest/elastic-sync/mapping/model/{$syncType}");
    }

    /**
     * @description Gets the mapping values. Sync data type is required.
     * @tag ElasticSync
     * @param int $syncType
     * @param array $query
     *      - *sync_type* - string - required
     *          - The sync type
     * @return array
     */
    public function getElasticSyncMappingValueBySyncType(int $syncType, array $query): array
    {
        return $this->api(array_merge(["/rest/elastic-sync/mapping/values/{$syncType}"], $query));
    }

    /**
     * @description Get a list with variation matches.
     * @tag ElasticSync
     * @return array
     */
    public function getElasticSyncMappingVariation(): array
    {
        return $this->api("/rest/elastic-sync/mapping/variation");
    }

    /**
     * @description Creates a sync. The name, sync type, source type and source data type must be specified.
     * @tag ElasticSync
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync sync
     *      - *syncType* - string
     *          - The type of the elastic sync sync
     *      - *sourceType* - string
     *          - The source type of the elastic sync sync
     *      - *sourceDataType* - string
     *          - The source data type of the elastic sync sync
     */
    public function createElasticSyncSync(): array
    {
        return $this->api("/rest/elastic-sync/sync", 'POST');
    }

    /**
     * @description Update the Csv of a Sync. The ID of the sync must be specified.
     * @tag ElasticSync
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync sync
     *      - *syncType* - string
     *          - The type of the elastic sync sync
     *      - *sourceType* - string
     *          - The source type of the elastic sync sync
     *      - *sourceDataType* - string
     *          - The source data type of the elastic sync sync
     */
    public function updateElasticSyncSyncChangeCsv(): array
    {
        return $this->api("/rest/elastic-sync/sync/change-csv", 'PUT');
    }

    /**
     * @description Saves the CSV on S3.
     * @tag ElasticSync
     * @param array $query
     *      - *file* - array - required
     *          - The file data
     */
    public function createElasticSyncSyncImport(array $query)
    {
        return $this->api(array_merge(["/rest/elastic-sync/sync/import"], $query), 'POST');
    }

    /**
     * @description Imports the sync with different plentyId.
     * @tag ElasticSync
     * @param array $query
     *      - *file* - array - required
     *          - The file data
     */
    public function createElasticSyncSyncImportDifferent(array $query)
    {
        return $this->api(array_merge(["/rest/elastic-sync/sync/import-different"], $query), 'POST');
    }

    /**
     * @description Saves the CSV on S3.
     * @tag ElasticSync
     * @param array $query
     *      - *file* - array - required
     *          - The file data
     */
    public function createElasticSyncSyncImportFilePublicUrl(array $query)
    {
        return $this->api(array_merge(["/rest/elastic-sync/sync/import/file/public-url"], $query), 'POST');
    }

    /**
     * @description Imports the sync with different plentyId.
     * @tag ElasticSync
     * @param array $query
     *      - *file* - array - required
     *          - The file data
     */
    public function createElasticSyncSyncImportFilePublicUrlDifferent(array $query)
    {
        return $this->api(array_merge(["/rest/elastic-sync/sync/import/file/public-url/different"], $query), 'POST');
    }

    /**
     * @description Gets list of sync intervals.
     * @tag ElasticSync
     * @return array
     */
    public function getElasticSyncSyncIntervals(): array
    {
        return $this->api("/rest/elastic-sync/sync/intervals");
    }

    /**
     * @description Deletes a sync mapping. The ID of the sync mapping must be specified.
     * @tag ElasticSync
     * @param int $filterId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping filter
     *      - *mappingId* - integer
     *          - The ID of the elastic sync mapping
     *      - *type* - string
     *          - The type of the elastic sync mapping filter
     *      - *operator* - string
     *          - The operator of the elastic sync mapping filter
     *      - *source* - string
     *          - The source of the elastic sync mapping filter
     *      - *value* - string
     *          - The value of the elastic sync mapping filter
     */
    public function deleteElasticSyncSyncMappingFilterByFilterId(int $filterId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/filter/{$filterId}", 'DELETE');
    }

    /**
     * @description Gets a sync mapping. The ID of the sync mapping must be specified.
     * @tag ElasticSync
     * @param int $filterId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping filter
     *      - *mappingId* - integer
     *          - The ID of the elastic sync mapping
     *      - *type* - string
     *          - The type of the elastic sync mapping filter
     *      - *operator* - string
     *          - The operator of the elastic sync mapping filter
     *      - *source* - string
     *          - The source of the elastic sync mapping filter
     *      - *value* - string
     *          - The value of the elastic sync mapping filter
     */
    public function getElasticSyncSyncMappingFilterByFilterId(int $filterId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/filter/{$filterId}");
    }

    /**
     * @description Updates a sync mapping filter. The ID of the sync mapping must be specified.
     * @tag ElasticSync
     * @param int $filterId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping filter
     *      - *mappingId* - integer
     *          - The ID of the elastic sync mapping
     *      - *type* - string
     *          - The type of the elastic sync mapping filter
     *      - *operator* - string
     *          - The operator of the elastic sync mapping filter
     *      - *source* - string
     *          - The source of the elastic sync mapping filter
     *      - *value* - string
     *          - The value of the elastic sync mapping filter
     */
    public function updateElasticSyncSyncMappingFilterByFilterId(int $filterId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/filter/{$filterId}", 'PUT');
    }

    /**
     * @description Deletes a sync mapping row. The ID of the sync mapping row must be specified.
     * @tag ElasticSync
     * @param int $rowId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping row
     *      - *mappingId* - integer
     *          - The ID of the elastic sync mapping
     *      - *targetModel* - string
     *          - The target model of the elastic sync mapping row
     *      - *targetAttribute* - string
     *          - The target attribute of the elastic sync mapping row
     *      - *active* - boolean
     *          - The state of the elastic sync mapping row
     *      - *entityType* - string
     *          - The entity type of the elastic sync mapping row (array values: 'ownValue', 'ownAssignment', 'regularExpression', 'csvColumn')
     *      - *value* - string
     *          - The value of the elastic sync mapping row
     *      - *settings* - string
     *          - The settings of the elastic sync mapping row
     *      - *identifiers* - string
     *          - The identifiers of the elastic sync mapping row
     */
    public function deleteElasticSyncSyncMappingRowByRowId(int $rowId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/row/{$rowId}", 'DELETE');
    }

    /**
     * @description Gets a sync mapping row. The ID of the sync mapping row must be specified.
     * @tag ElasticSync
     * @param int $rowId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping row
     *      - *mappingId* - integer
     *          - The ID of the elastic sync mapping
     *      - *targetModel* - string
     *          - The target model of the elastic sync mapping row
     *      - *targetAttribute* - string
     *          - The target attribute of the elastic sync mapping row
     *      - *active* - boolean
     *          - The state of the elastic sync mapping row
     *      - *entityType* - string
     *          - The entity type of the elastic sync mapping row (array values: 'ownValue', 'ownAssignment', 'regularExpression', 'csvColumn')
     *      - *value* - string
     *          - The value of the elastic sync mapping row
     *      - *settings* - string
     *          - The settings of the elastic sync mapping row
     *      - *identifiers* - string
     *          - The identifiers of the elastic sync mapping row
     */
    public function getElasticSyncSyncMappingRowByRowId(int $rowId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/row/{$rowId}");
    }

    /**
     * @description Updates a sync mapping row. The ID of the sync mapping row must be specified.
     * @tag ElasticSync
     * @param int $rowId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping row
     *      - *mappingId* - integer
     *          - The ID of the elastic sync mapping
     *      - *targetModel* - string
     *          - The target model of the elastic sync mapping row
     *      - *targetAttribute* - string
     *          - The target attribute of the elastic sync mapping row
     *      - *active* - boolean
     *          - The state of the elastic sync mapping row
     *      - *entityType* - string
     *          - The entity type of the elastic sync mapping row (array values: 'ownValue', 'ownAssignment', 'regularExpression', 'csvColumn')
     *      - *value* - string
     *          - The value of the elastic sync mapping row
     *      - *settings* - string
     *          - The settings of the elastic sync mapping row
     *      - *identifiers* - string
     *          - The identifiers of the elastic sync mapping row
     */
    public function updateElasticSyncSyncMappingRowByRowId(int $rowId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/row/{$rowId}", 'PUT');
    }

    /**
     * @description Deletes a sync mapping. The ID of the sync mapping must be specified.
     * @tag ElasticSync
     * @param int $mappingId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync mapping
     *      - *position* - integer
     *          - The position of the elastic sync mapping
     *      - *active* - boolean
     *          - The state of the elastic sync mapping
     */
    public function deleteElasticSyncSyncMappingByMappingId(int $mappingId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/{$mappingId}", 'DELETE');
    }

    /**
     * @description Gets a sync mapping. The ID of the sync mapping must be specified.
     * @tag ElasticSync
     * @param int $mappingId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync mapping
     *      - *position* - integer
     *          - The position of the elastic sync mapping
     *      - *active* - boolean
     *          - The state of the elastic sync mapping
     */
    public function getElasticSyncSyncMappingByMappingId(int $mappingId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/{$mappingId}");
    }

    /**
     * @description Updates a sync mapping. The ID of the sync mapping must be specified.
     * @tag ElasticSync
     * @param int $mappingId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync mapping
     *      - *position* - integer
     *          - The position of the elastic sync mapping
     *      - *active* - boolean
     *          - The state of the elastic sync mapping
     */
    public function updateElasticSyncSyncMappingByMappingId(int $mappingId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/{$mappingId}", 'PUT');
    }

    /**
     * @description Lists sync mappings.
     * @tag ElasticSync
     * @param int $mappingId
     */
    public function getElasticSyncSyncMappingFiltersByMappingId(int $mappingId)
    {
        return $this->api("/rest/elastic-sync/sync/mapping/{$mappingId}/filters");
    }

    /**
     * @description Creates sync mapping filters.
     * @tag ElasticSync
     * @param int $mappingId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping filter
     *      - *mappingId* - integer
     *          - The ID of the elastic sync mapping
     *      - *type* - string
     *          - The type of the elastic sync mapping filter
     *      - *operator* - string
     *          - The operator of the elastic sync mapping filter
     *      - *source* - string
     *          - The source of the elastic sync mapping filter
     *      - *value* - string
     *          - The value of the elastic sync mapping filter
     */
    public function createElasticSyncSyncMappingFilterByMappingId(int $mappingId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/{$mappingId}/filters", 'POST');
    }

    /**
     * @description Updates sync mapping filters. The ID of the sync mapping must be specified.
     * @tag ElasticSync
     * @param int $mappingId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping filter
     *      - *mappingId* - integer
     *          - The ID of the elastic sync mapping
     *      - *type* - string
     *          - The type of the elastic sync mapping filter
     *      - *operator* - string
     *          - The operator of the elastic sync mapping filter
     *      - *source* - string
     *          - The source of the elastic sync mapping filter
     *      - *value* - string
     *          - The value of the elastic sync mapping filter
     */
    public function updateElasticSyncSyncMappingFilterByMappingId(int $mappingId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/{$mappingId}/filters", 'PUT');
    }

    /**
     * @description Lists sync mapping rows.
     * @tag ElasticSync
     * @param int $mappingId
     */
    public function getElasticSyncSyncMappingRowsByMappingId(int $mappingId)
    {
        return $this->api("/rest/elastic-sync/sync/mapping/{$mappingId}/rows");
    }

    /**
     * @description Creates sync mapping rows.
     * @tag ElasticSync
     * @param int $mappingId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping row
     *      - *mappingId* - integer
     *          - The ID of the elastic sync mapping
     *      - *targetModel* - string
     *          - The target model of the elastic sync mapping row
     *      - *targetAttribute* - string
     *          - The target attribute of the elastic sync mapping row
     *      - *active* - boolean
     *          - The state of the elastic sync mapping row
     *      - *entityType* - string
     *          - The entity type of the elastic sync mapping row (array values: 'ownValue', 'ownAssignment', 'regularExpression', 'csvColumn')
     *      - *value* - string
     *          - The value of the elastic sync mapping row
     *      - *settings* - string
     *          - The settings of the elastic sync mapping row
     *      - *identifiers* - string
     *          - The identifiers of the elastic sync mapping row
     */
    public function createElasticSyncSyncMappingRowByMappingId(int $mappingId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/{$mappingId}/rows", 'POST');
    }

    /**
     * @description Updates sync mapping rows. The ID of the sync mapping row must be specified.
     * @tag ElasticSync
     * @param int $mappingId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping row
     *      - *mappingId* - integer
     *          - The ID of the elastic sync mapping
     *      - *targetModel* - string
     *          - The target model of the elastic sync mapping row
     *      - *targetAttribute* - string
     *          - The target attribute of the elastic sync mapping row
     *      - *active* - boolean
     *          - The state of the elastic sync mapping row
     *      - *entityType* - string
     *          - The entity type of the elastic sync mapping row (array values: 'ownValue', 'ownAssignment', 'regularExpression', 'csvColumn')
     *      - *value* - string
     *          - The value of the elastic sync mapping row
     *      - *settings* - string
     *          - The settings of the elastic sync mapping row
     *      - *identifiers* - string
     *          - The identifiers of the elastic sync mapping row
     */
    public function updateElasticSyncSyncMappingRowByMappingId(int $mappingId): array
    {
        return $this->api("/rest/elastic-sync/sync/mapping/{$mappingId}/rows", 'PUT');
    }

    /**
     * @description Deletes one or multiple mappings. The mapping ID must be specified.
     * @tag ElasticSync

     */
    public function deleteElasticSyncSyncMapping()
    {
        return $this->api("/rest/elastic-sync/sync/mappings", 'DELETE');
    }

    /**
     * @description Copies one or multiple mappings. The mapping ID must be specified.
     * @tag ElasticSync
     * @return array
     */
    public function createElasticSyncSyncMappingsCopy(): array
    {
        return $this->api("/rest/elastic-sync/sync/mappings/copy", 'POST');
    }

    /**
     * @description Gets list of decimals.
     * @tag ElasticSync
     * @return array
     */
    public function getElasticSyncSyncMatchingDecimals(): array
    {
        return $this->api("/rest/elastic-sync/sync/matching/decimals");
    }

    /**
     * @description Deletes a sync matching. The ID of the sync matching must be specified.
     * @tag ElasticSync
     * @param int $matchingId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync matching
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *target* - string
     *          - The target of the elastic sync matching
     *      - *source* - string
     *          - The source of the elastic sync matching
     *      - *additionalValue* - string
     *          - The additional value of the elastic sync matching
     */
    public function deleteElasticSyncSyncMatchingByMatchingId(int $matchingId): array
    {
        return $this->api("/rest/elastic-sync/sync/matching/{$matchingId}", 'DELETE');
    }

    /**
     * @description Gets a sync matching. The ID of the sync matching must be specified.
     * @tag ElasticSync
     * @param int $matchingId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync matching
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *target* - string
     *          - The target of the elastic sync matching
     *      - *source* - string
     *          - The source of the elastic sync matching
     *      - *additionalValue* - string
     *          - The additional value of the elastic sync matching
     */
    public function getElasticSyncSyncMatchingByMatchingId(int $matchingId): array
    {
        return $this->api("/rest/elastic-sync/sync/matching/{$matchingId}");
    }

    /**
     * @description Updates a sync matching. The ID of the sync matching must be specified.
     * @tag ElasticSync
     * @param int $matchingId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync matching
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *target* - string
     *          - The target of the elastic sync matching
     *      - *source* - string
     *          - The source of the elastic sync matching
     *      - *additionalValue* - string
     *          - The additional value of the elastic sync matching
     */
    public function updateElasticSyncSyncMatchingByMatchingId(int $matchingId): array
    {
        return $this->api("/rest/elastic-sync/sync/matching/{$matchingId}", 'PUT');
    }

    /**
     * @description Deletes a sync. The ID of the sync must be specified.
     * @tag ElasticSync
     * @param int $optionId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync sync
     *      - *syncType* - string
     *          - The type of the elastic sync sync
     *      - *sourceType* - string
     *          - The source type of the elastic sync sync
     *      - *sourceDataType* - string
     *          - The source data type of the elastic sync sync
     */
    public function deleteElasticSyncSyncOptionByOptionId(int $optionId): array
    {
        return $this->api("/rest/elastic-sync/sync/option/{$optionId}", 'DELETE');
    }

    /**
     * @description Gets a sync. The ID of the sync must be specified.
     * @tag ElasticSync
     * @param int $optionId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync sync
     *      - *syncType* - string
     *          - The type of the elastic sync sync
     *      - *sourceType* - string
     *          - The source type of the elastic sync sync
     *      - *sourceDataType* - string
     *          - The source data type of the elastic sync sync
     */
    public function getElasticSyncSyncOptionByOptionId(int $optionId): array
    {
        return $this->api("/rest/elastic-sync/sync/option/{$optionId}");
    }

    /**
     * @description Updates a sync option. The ID of the sync must be specified.
     * @tag ElasticSync
     * @param int $optionId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync sync
     *      - *syncType* - string
     *          - The type of the elastic sync sync
     *      - *sourceType* - string
     *          - The source type of the elastic sync sync
     *      - *sourceDataType* - string
     *          - The source data type of the elastic sync sync
     */
    public function updateElasticSyncSyncOptionByOptionId(int $optionId): array
    {
        return $this->api("/rest/elastic-sync/sync/option/{$optionId}", 'PUT');
    }

    /**
     * @description Gets Log ID. The id of the report must be specified.
     * @tag ElasticSync
     * @param int $id
     */
    public function getElasticSyncSyncReportById(int $id)
    {
        return $this->api("/rest/elastic-sync/sync/report/{$id}");
    }

    /**
     * @description Check Report Log. Filters like sync id, row id, identifier, from date, to date, id, level can be provided.
     * @tag ElasticSync
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* -
     */
    public function getElasticSyncSyncReports(): array
    {
        return $this->api("/rest/elastic-sync/sync/reports");
    }

    /**
     * @description Check Report Log.
     * @tag ElasticSync
     * @return array
     */
    public function getElasticSyncSyncReportsAvailability(): array
    {
        return $this->api("/rest/elastic-sync/sync/reports/availability");
    }

    /**
     * @description Resets the cache.
     * @tag ElasticSync
     * @return array
     */
    public function getElasticSyncSyncResetCache(): array
    {
        return $this->api("/rest/elastic-sync/sync/reset-cache");
    }

    /**
     * @description Gets schedule times.
     * @tag ElasticSync

     */
    public function getElasticSyncSyncScheduleTimes()
    {
        return $this->api("/rest/elastic-sync/sync/schedule/times");
    }

    /**
     * @description Get syncs status.
     * @tag ElasticSync
     * @return array
     */
    public function getElasticSyncSyncStatus(): array
    {
        return $this->api("/rest/elastic-sync/sync/status");
    }

    /**
     * @description Gets list of sync types.
     * @tag ElasticSync
     * @return array
     */
    public function getElasticSyncSyncTypes(): array
    {
        return $this->api("/rest/elastic-sync/sync/types");
    }

    /**
     * @description Imports and processes every page.
     * @tag ElasticSync
     * @param int $statusId
     * @param int $syncId
     * @param int $page
     */
    public function createElasticSyncSyncLiveProcessingByStatusIdSyncIdPage(int $statusId, int $syncId, int $page)
    {
        return $this->api("/rest/elastic-sync/sync/{$statusId}/live/processing/{$syncId}/{$page}", 'POST');
    }

    /**
     * @description Gets the list of jobs for Live Import
     * @tag ElasticSync
     * @param int $statusId
     * @return array
     */
    public function createElasticSyncSyncLiveQueueingByStatusId(int $statusId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$statusId}/live/queueing", 'POST');
    }

    /**
     * @description Deletes a sync. The ID of the sync must be specified.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync sync
     *      - *syncType* - string
     *          - The type of the elastic sync sync
     *      - *sourceType* - string
     *          - The source type of the elastic sync sync
     *      - *sourceDataType* - string
     *          - The source data type of the elastic sync sync
     */
    public function deleteElasticSyncSyncBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}", 'DELETE');
    }

    /**
     * @description Gets a sync. The ID of the sync must be specified.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     */
    public function getElasticSyncSyncBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}");
    }

    /**
     * @description Updates a sync. The ID of the sync must be specified.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync sync
     *      - *syncType* - string
     *          - The type of the elastic sync sync
     *      - *sourceType* - string
     *          - The source type of the elastic sync sync
     *      - *sourceDataType* - string
     *          - The source data type of the elastic sync sync
     */
    public function updateElasticSyncSyncBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}", 'PUT');
    }

    /**
     * @description Initiates + queueing the jobs for Live Import
     * @tag ElasticSync
     * @param int $syncId
     */
    public function createElasticSyncSyncLiveInitiateBySyncId(int $syncId)
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/live/initiate", 'POST');
    }

    /**
     * @description Creates a sync mapping.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync mapping
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync mapping
     *      - *position* - integer
     *          - The position of the elastic sync mapping
     *      - *active* - boolean
     *          - The state of the elastic sync mapping
     */
    public function createElasticSyncSyncMappingBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/mapping", 'POST');
    }

    /**
     * @description Lists sync mappings.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* -
     */
    public function getElasticSyncSyncMappingsBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/mappings");
    }

    /**
     * @description Lists sync matches.
     * @tag ElasticSync
     * @param int $syncId
     */
    public function getElasticSyncSyncMatchesBySyncId(int $syncId)
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/matches");
    }

    /**
     * @description Creates sync matches.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync matching
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *target* - string
     *          - The target of the elastic sync matching
     *      - *source* - string
     *          - The source of the elastic sync matching
     *      - *additionalValue* - string
     *          - The additional value of the elastic sync matching
     */
    public function createElasticSyncSyncMatchBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/matches", 'POST');
    }

    /**
     * @description Updates sync matches. The ID of the sync matching must be specified.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync matching
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *target* - string
     *          - The target of the elastic sync matching
     *      - *source* - string
     *          - The source of the elastic sync matching
     *      - *additionalValue* - string
     *          - The additional value of the elastic sync matching
     */
    public function updateElasticSyncSyncMatchBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/matches", 'PUT');
    }

    /**
     * @description Creates a sync matching.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync matching
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *target* - string
     *          - The target of the elastic sync matching
     *      - *source* - string
     *          - The source of the elastic sync matching
     *      - *additionalValue* - string
     *          - The additional value of the elastic sync matching
     */
    public function createElasticSyncSyncMatchingBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/matching", 'POST');
    }

    /**
     * @description Gets an entity by sync ID. The sync ID is required.
     * @tag ElasticSync
     * @param int $syncId The sync ID of the mapping
     * @return array
     */
    public function getElasticSyncSyncMatchingEntityBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/matching/entity");
    }

    /**
     * @description Lists syncs.
     * @tag ElasticSync
     * @param int $syncId
     */
    public function getElasticSyncSyncOptionsBySyncId(int $syncId)
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/options");
    }

    /**
     * @description Creates sync options.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync option
     *      - *syncId* - integer
     *          - The ID of the elastic sync sync
     *      - *optionIdentifier* - string
     *          - The option identifier of the elastic sync option
     *      - *key* - string
     *          - The key of the elastic sync option
     *      - *value* - string
     *          - The value of the elastic sync option
     */
    public function createElasticSyncSyncOptionBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/options", 'POST');
    }

    /**
     * @description Updates sync options. The ID of the sync must be specified.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync sync
     *      - *syncType* - string
     *          - The type of the elastic sync sync
     *      - *sourceType* - string
     *          - The source type of the elastic sync sync
     *      - *sourceDataType* - string
     *          - The source data type of the elastic sync sync
     */
    public function updateElasticSyncSyncOptionBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/options", 'PUT');
    }

    /**
     * @description Gets a computed preview of the mapped targets.
     * @tag ElasticSync
     * @param int $syncId
     */
    public function getElasticSyncSyncPreviewComputedBySyncId(int $syncId)
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/preview-computed");
    }

    /**
     * @description Gets preview of csv values. The sync ID is required.
     * @tag ElasticSync
     * @param int $syncId The id of the sync
     * @return array
     */
    public function getElasticSyncSyncPreviewValuesBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/preview-values");
    }

    /**
     * @description Executes the run procedure. Data with sync ID must be specified.
     * @tag ElasticSync
     * @param int $syncId The ID of the sync
     * @param array $query
     *      - *testrun* - int - required
     *          - The test run variable
     */
    public function createElasticSyncSyncRunBySyncId(int $syncId, array $query)
    {
        return $this->api(array_merge(["/rest/elastic-sync/sync/{$syncId}/run"], $query), 'POST');
    }

    /**
     * @description Previews the syncs. The sync ID is required.
     * @tag ElasticSync
     * @param int $syncId
     * @return array
     */
    public function getElasticSyncSyncSourcePreviewBySyncId(int $syncId): array
    {
        return $this->api("/rest/elastic-sync/sync/{$syncId}/source-preview");
    }

    /**
     * @description Gets a list of all mappings for a particular sync type.
     * @tag ElasticSync
     * @param int $syncType
     * @param array $query
     *      - *$syncType* - string - required
     *          - The sync type of the matching
     * @return array
     */
    public function getElasticSyncSyncMatchingFieldsBySyncType(int $syncType, array $query): array
    {
        return $this->api(array_merge(["/rest/elastic-sync/sync/{$syncType}/matching/fields"], $query));
    }

    /**
     * @description Deletes syncs. The IDs of the syncs must be specified.
     * @tag ElasticSync
     * @return array
     *      - *id* - integer
     *          - The ID of the elastic sync sync
     *      - *name* - string
     *          - The name of the elastic sync sync
     *      - *syncType* - string
     *          - The type of the elastic sync sync
     *      - *sourceType* - string
     *          - The source type of the elastic sync sync
     *      - *sourceDataType* - string
     *          - The source data type of the elastic sync sync
     */
    public function deleteElasticSyncSync(): array
    {
        return $this->api("/rest/elastic-sync/syncs", 'DELETE');
    }

    /**
     * @description Get all Syncs. Filters like id, name, sync type and interval can be provided.
     * @tag ElasticSync
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* -
     */
    public function getElasticSyncSyncs(): array
    {
        return $this->api("/rest/elastic-sync/syncs");
    }

    /**
     * @description Copies the syncs. The sync ID is required.
     * @tag ElasticSync

     */
    public function createElasticSyncSyncsCopy()
    {
        return $this->api("/rest/elastic-sync/syncs/copy", 'POST');
    }

    /**
     * @description Exports the syncs. The sync ID is required.
     * @tag ElasticSync
     * @param array $query
     *      - *syncIds* - int - required
     *          - The ID of the sync
     * @return array
     */
    public function createElasticSyncSyncsExport(array $query): array
    {
        return $this->api(array_merge(["/rest/elastic-sync/syncs/export"], $query), 'POST');
    }

    /**
     * @description Exports the sync. The sync ID is required.
     * @tag ElasticSync
     * @param int $syncId
     * @param array $query
     *      - *syncIds* - int - required
     *          - The ID of the sync
     * @return array
     */
    public function getElasticSyncSyncsExportBySyncId(int $syncId, array $query): array
    {
        return $this->api(array_merge(["/rest/elastic-sync/syncs/export/{$syncId}"], $query));
    }

}
