<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Listing extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

            
    /**
     * @description Lists listings by filter options.
     * @tag Listing
     * @param array $query
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listings with specific listing ID. Several IDs can be entered as array.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listings with specific item ID. Several IDs can be entered as array.
     *      - *typeId* - int - optional
     *          - Filter that restricts the search result to listings with specific type ID. Several IDs can be entered as array.
     *      - *stockDependenceTypeId* - int - optional
     *          - Filter that restricts the search result to listings with specific stock dependence type ID. Several IDs can be entered as array.
     *      - *unitCombinationId* - int - optional
     *          - Filter that restricts the search result to listings with specific unit combination ID. Several IDs can be entered as array.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. One of 'stockDependenceType', 'type', 'markets', 'properties'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Listing
     */
    public function eachListings(array $query = []): Iterator
    {
        return $this->eachInternal('getListings', func_get_args());
    }
        
    /**
     * @description Lists listings by filter options.
     * @tag Listing
     * @param array $query
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listings with specific listing ID. Several IDs can be entered as array.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listings with specific item ID. Several IDs can be entered as array.
     *      - *typeId* - int - optional
     *          - Filter that restricts the search result to listings with specific type ID. Several IDs can be entered as array.
     *      - *stockDependenceTypeId* - int - optional
     *          - Filter that restricts the search result to listings with specific stock dependence type ID. Several IDs can be entered as array.
     *      - *unitCombinationId* - int - optional
     *          - Filter that restricts the search result to listings with specific unit combination ID. Several IDs can be entered as array.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. One of 'stockDependenceType', 'type', 'markets', 'properties'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Listing
     */
    public function batchListings(array $query = []): Iterator
    {
        return $this->batchInternal('getListings', func_get_args());
    }
    
    /**
     * @description Lists listings by filter options.
     * @tag Listing
     * @param array $query
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listings with specific listing ID. Several IDs can be entered as array.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listings with specific item ID. Several IDs can be entered as array.
     *      - *typeId* - int - optional
     *          - Filter that restricts the search result to listings with specific type ID. Several IDs can be entered as array.
     *      - *stockDependenceTypeId* - int - optional
     *          - Filter that restricts the search result to listings with specific stock dependence type ID. Several IDs can be entered as array.
     *      - *unitCombinationId* - int - optional
     *          - Filter that restricts the search result to listings with specific unit combination ID. Several IDs can be entered as array.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. One of 'stockDependenceType', 'type', 'markets', 'properties'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Listing
     */
    public function getListings(array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings"], $query));
    }
                
    /**
     * @description Creates a new listing.
     * @tag Listing
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the listing.
     *      - *itemId* - integer
     *          - The ID of the item.
     *      - *typeId* - integer
     *          - The ID of the listing type. Possible types are:
<ul>
    <li>1 = Auction</li>
    <li>2 = Fixed</li>
    <li>3 = Shop item</li>
</ul>
     *      - *stockDependenceTypeId* - integer
     *          - The ID of the listing stock dependence. Possible stock dependence types are:
<ul>
    <li>1 = Unlimited with sync</li>
    <li>2 = Limited with reservation</li>
    <li>3 = Limited without reservation</li>
    <li>4 = Unlimited without sync</li>
</ul>
     *      - *unitCombinationId* - integer
     *          - The ID of the unit combination.
     */
    public function createListing(array $data): array
    {
        return $this->api("/rest/listings", 'POST', $data);
    }
                    
    /**
     * @description Creates a new layout template.
     * @tag Listing
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the layout template.
     *      - *name* - string
     *          - The name of the layout template.
     *      - *css* - string
     *          - The css of the layout template.
     *      - *htmlStructure* - string
     *          - The html structure of the layout template.
     *      - *mainFrame* - string
     *          - The main frame of the layout template.
     *      - *additionalContent* - array
     *          - The additional content of the layout template.
     *      - *appendixType* - string
     *          - The appendix type of the layout template.
     */
    public function createListingsLayoutTemplate(array $data): array
    {
        return $this->api("/rest/listings/layout_templates", 'POST', $data);
    }
                    
    /**
     * @description Deletes a layout template by ID.
     * @tag Listing
     * @param int $id The layout template ID.
     */
    public function deleteListingsLayoutTemplateById(int $id)
    {
        return $this->api("/rest/listings/layout_templates/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a layout template by providing its ID.
     * @tag Listing
     * @param int $id The ID of the layout template entry.
     * @return array
     *      - *id* - integer
     *          - The ID of the layout template.
     *      - *name* - string
     *          - The name of the layout template.
     *      - *css* - string
     *          - The css of the layout template.
     *      - *htmlStructure* - string
     *          - The html structure of the layout template.
     *      - *mainFrame* - string
     *          - The main frame of the layout template.
     *      - *additionalContent* - array
     *          - The additional content of the layout template.
     *      - *appendixType* - string
     *          - The appendix type of the layout template.
     */
    public function getListingsLayoutTemplateById(int $id): array
    {
        return $this->api("/rest/listings/layout_templates/{$id}");
    }
                
    /**
     * @description Lists listing market by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing markets that match the given ID(s).
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to listing markets that match the given variation ID(s).
     *      - *variations* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom variation condition. Available values are 'all', 'fixed'.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing markets with given referrer ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing markets with given credential ID.
     *      - *directoryId* - int - optional
     *          - Filter that restricts the search result to listing markets with a given directory ID.
     *      - *verified* - string - optional
     *          - Filter that restricts the search result to listing markets that are verified. Available values are 'succeeded','unknown' or 'failed'.
     *      - *duration* - string - optional
     *          - Filter that restricts the search result to listing markets with given duration.
     *      - *listingId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given listing ID.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given item ID.
     *      - *listingTypeId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a listing of a custom type ID. Available values are:
    <ul>
    <li>1 - Auction</li>
    <li>2 - Fixed price</li>
    <li>3 - Shop (only for Hood listings)</li>
    </ul>
     *      - *stockDependenceTypeId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a listing with a custom stock dependence type ID. Available values are:
    <ul>
    <li>1 - Unlimited stock with automatic synchronisation</li>
    <li>2 - Limited and reserved stock</li>
    <li>3 - Limited and unreserved stock</li>
    <li>4 - Unlimited stock without automatich synchronisation</li>
    </ul>
     *      - *status* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom status condition. Available values are 'enabled', 'disabled', 'online', 'offline'
     *      - *stockCondition* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom stock condition. Available values are 'stockNetLessEqualZero', 'stockNetLessZero', 'stockNetGreaterZero', 'stockGrossLessEqualZero', 'stockGrossLessZero', 'stockGrossGreaterZero', 'stockNetTotalLessEqualZero', 'stockNetTotalLessZero', 'stockNetTotalGreaterZero'
     *      - *shippingProfileId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given shipping profile ID
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Valid instances are 'listing', 'texts', 'properties', 'prices', 'dates', 'infos'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarket
     */
    public function eachListingsMarkets(array $query = []): Iterator
    {
        return $this->eachInternal('getListingsMarkets', func_get_args());
    }
        
    /**
     * @description Lists listing market by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing markets that match the given ID(s).
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to listing markets that match the given variation ID(s).
     *      - *variations* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom variation condition. Available values are 'all', 'fixed'.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing markets with given referrer ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing markets with given credential ID.
     *      - *directoryId* - int - optional
     *          - Filter that restricts the search result to listing markets with a given directory ID.
     *      - *verified* - string - optional
     *          - Filter that restricts the search result to listing markets that are verified. Available values are 'succeeded','unknown' or 'failed'.
     *      - *duration* - string - optional
     *          - Filter that restricts the search result to listing markets with given duration.
     *      - *listingId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given listing ID.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given item ID.
     *      - *listingTypeId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a listing of a custom type ID. Available values are:
    <ul>
    <li>1 - Auction</li>
    <li>2 - Fixed price</li>
    <li>3 - Shop (only for Hood listings)</li>
    </ul>
     *      - *stockDependenceTypeId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a listing with a custom stock dependence type ID. Available values are:
    <ul>
    <li>1 - Unlimited stock with automatic synchronisation</li>
    <li>2 - Limited and reserved stock</li>
    <li>3 - Limited and unreserved stock</li>
    <li>4 - Unlimited stock without automatich synchronisation</li>
    </ul>
     *      - *status* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom status condition. Available values are 'enabled', 'disabled', 'online', 'offline'
     *      - *stockCondition* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom stock condition. Available values are 'stockNetLessEqualZero', 'stockNetLessZero', 'stockNetGreaterZero', 'stockGrossLessEqualZero', 'stockGrossLessZero', 'stockGrossGreaterZero', 'stockNetTotalLessEqualZero', 'stockNetTotalLessZero', 'stockNetTotalGreaterZero'
     *      - *shippingProfileId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given shipping profile ID
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Valid instances are 'listing', 'texts', 'properties', 'prices', 'dates', 'infos'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarket
     */
    public function batchListingsMarkets(array $query = []): Iterator
    {
        return $this->batchInternal('getListingsMarkets', func_get_args());
    }
    
    /**
     * @description Lists listing market by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing markets that match the given ID(s).
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to listing markets that match the given variation ID(s).
     *      - *variations* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom variation condition. Available values are 'all', 'fixed'.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing markets with given referrer ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing markets with given credential ID.
     *      - *directoryId* - int - optional
     *          - Filter that restricts the search result to listing markets with a given directory ID.
     *      - *verified* - string - optional
     *          - Filter that restricts the search result to listing markets that are verified. Available values are 'succeeded','unknown' or 'failed'.
     *      - *duration* - string - optional
     *          - Filter that restricts the search result to listing markets with given duration.
     *      - *listingId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given listing ID.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given item ID.
     *      - *listingTypeId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a listing of a custom type ID. Available values are:
    <ul>
    <li>1 - Auction</li>
    <li>2 - Fixed price</li>
    <li>3 - Shop (only for Hood listings)</li>
    </ul>
     *      - *stockDependenceTypeId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a listing with a custom stock dependence type ID. Available values are:
    <ul>
    <li>1 - Unlimited stock with automatic synchronisation</li>
    <li>2 - Limited and reserved stock</li>
    <li>3 - Limited and unreserved stock</li>
    <li>4 - Unlimited stock without automatich synchronisation</li>
    </ul>
     *      - *status* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom status condition. Available values are 'enabled', 'disabled', 'online', 'offline'
     *      - *stockCondition* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom stock condition. Available values are 'stockNetLessEqualZero', 'stockNetLessZero', 'stockNetGreaterZero', 'stockGrossLessEqualZero', 'stockGrossLessZero', 'stockGrossGreaterZero', 'stockNetTotalLessEqualZero', 'stockNetTotalLessZero', 'stockNetTotalGreaterZero'
     *      - *shippingProfileId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given shipping profile ID
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Valid instances are 'listing', 'texts', 'properties', 'prices', 'dates', 'infos'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarket
     */
    public function getListingsMarkets(array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/markets"], $query));
    }
                
    /**
     * @description Creates a new listing market. Based on the given options this call can create multiple listing markets. If the
'optionTemplateId' parameter is provided and the listing option template includes options for different markets
than one listing market will be created for each market.
     * @tag Listing
     * @param array $data 
     * @return array
     */
    public function createListingsMarket(array $data): array
    {
        return $this->api("/rest/listings/markets", 'POST', $data);
    }
                    
    /**
     * @description Gets all listing market directories.
     * @tag Listing
     * @return array
     */
    public function getListingsMarketsDirectories(): array
    {
        return $this->api("/rest/listings/markets/directories");
    }
                
    /**
     * @description Creates a listing market directory.
     * @tag Listing
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the listing market directory.
     *      - *name* - string
     *          - The name of the listing market directory.
     *      - *parentId* - integer
     *          - The parent ID of the listing market directory.
     *      - *level* - integer
     *          - The level of the directory.
     */
    public function createListingsMarketsDirectory(array $data): array
    {
        return $this->api("/rest/listings/markets/directories", 'POST', $data);
    }
                    
    /**
     * @description Deletes a listing market directory by ID.
     * @tag Listing
     * @param int $id The listing market directory ID.
     */
    public function deleteListingsMarketsDirectoryById(int $id)
    {
        return $this->api("/rest/listings/markets/directories/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a listing market directory by ID.
     * @tag Listing
     * @param int $id The ID of the listing market directory entry.
     * @return array
     *      - *id* - integer
     *          - The ID of the listing market directory.
     *      - *name* - string
     *          - The name of the listing market directory.
     *      - *parentId* - integer
     *          - The parent ID of the listing market directory.
     *      - *level* - integer
     *          - The level of the directory.
     */
    public function getListingsMarketsDirectoryById(int $id): array
    {
        return $this->api("/rest/listings/markets/directories/{$id}");
    }
                
    /**
     * @description Updates a listing market directory by ID.
     * @tag Listing
     * @param int $id The listing market directory ID.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the listing market directory.
     *      - *name* - string
     *          - The name of the listing market directory.
     *      - *parentId* - integer
     *          - The parent ID of the listing market directory.
     *      - *level* - integer
     *          - The level of the directory.
     */
    public function updateListingsMarketsDirectoryById(int $id, array $data): array
    {
        return $this->api("/rest/listings/markets/directories/{$id}", 'PUT', $data);
    }
                
    /**
     * @description Lists listing market by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing markets that match the given ID(s).
     *      - *variations* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom variation condition. Available values are 'all', 'fixed'.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing markets with given referrer ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing markets with given credential ID.
     *      - *directoryId* - int - optional
     *          - Filter that restricts the search result to listing markets with a given directory ID.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given item ID.
     *      - *shippingProfileId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given shipping profile ID
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Valid instances are 'listing', 'texts', 'properties', 'prices', 'dates', 'infos'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarket
     */
    public function eachListingsMarketsFind(array $query = []): Iterator
    {
        return $this->eachInternal('getListingsMarketsFind', func_get_args());
    }
        
    /**
     * @description Lists listing market by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing markets that match the given ID(s).
     *      - *variations* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom variation condition. Available values are 'all', 'fixed'.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing markets with given referrer ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing markets with given credential ID.
     *      - *directoryId* - int - optional
     *          - Filter that restricts the search result to listing markets with a given directory ID.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given item ID.
     *      - *shippingProfileId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given shipping profile ID
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Valid instances are 'listing', 'texts', 'properties', 'prices', 'dates', 'infos'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarket
     */
    public function batchListingsMarketsFind(array $query = []): Iterator
    {
        return $this->batchInternal('getListingsMarketsFind', func_get_args());
    }
    
    /**
     * @description Lists listing market by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing markets that match the given ID(s).
     *      - *variations* - string - optional
     *          - Filter that restricts the search result to listing markets with a custom variation condition. Available values are 'all', 'fixed'.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing markets with given referrer ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing markets with given credential ID.
     *      - *directoryId* - int - optional
     *          - Filter that restricts the search result to listing markets with a given directory ID.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given item ID.
     *      - *shippingProfileId* - int - optional
     *          - Filter that restricts the search result to listing markets that belong to a given shipping profile ID
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Valid instances are 'listing', 'texts', 'properties', 'prices', 'dates', 'infos'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarket
     */
    public function getListingsMarketsFind(array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/markets/find"], $query));
    }
                
    /**
     * @description Lists listing market history by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *listingMarketId* - int - optional
     *          - Filter that restricts the search result to listing market histories that match the given listing market ID(s).
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to listing market histories that match the given variation ID(s).
     *      - *variations* - string - optional
     *          - Filter that restricts the search result to listing market histories with a custom variation condition. Available values are 'all', 'fixed'.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing market histories with given referrer ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing market histories with given credential ID.
     *      - *directoryId* - int - optional
     *          - Filter that restricts the search result to listing market histories with a given directory ID.
     *      - *verified* - string - optional
     *          - Filter that restricts the search result to listing market histories that are verified. Available values are 'succeeded','unknown' or 'failed'.
     *      - *duration* - string - optional
     *          - Filter that restricts the search result to listing market histories with given duration.
     *      - *externalId* - string - optional
     *          - Filter that restricts the search result to listing market histories with given external id.
     *      - *listingId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a given listing ID.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a given item ID.
     *      - *listingTypeId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a listing of a custom type ID. Available values are:
    <ul>
    <li>1 - Auction</li>
    <li>2 - Fixed price</li>
    <li>3 - Shop (only for Hood listings)</li>
    </ul>
     *      - *stockDependenceTypeId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a listing with a custom stock dependence type ID. Available values are:
    <ul>
    <li>1 - Unlimited stock with automatic synchronisation</li>
    <li>2 - Limited and reserved stock</li>
    <li>3 - Limited and unreserved stock</li>
    <li>4 - Unlimited stock without automatich synchronisation</li>
    </ul>
     *      - *statusId* - int - optional
     *          - Filter that restricts the search result to listing market histories with a custom status status ID. Available values are:
    <ul>
    <li>1 - Active listing market histories</li>
    <li>2 - Ended listing market histories</li>
    <li>3 - Relisted listing market histories</li>
    <li>4 - Hidden listing market histories</li>
    </ul>
     *      - *stockCondition* - string - optional
     *          - Filter that restricts the search result to listing market histories with a custom stock condition. Available values are 'stockNetLessEqualZero', 'stockNetLessZero', 'stockNetGreaterZero', 'stockGrossLessEqualZero', 'stockGrossLessZero', 'stockGrossGreaterZero', 'stockNetTotalLessEqualZero', 'stockNetTotalLessZero', 'stockNetTotalGreaterZero'
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to listing market histories that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to listing market histories that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *textData* - string - optional
     *          - Filter that restricts the search result to listing market histories that match given text in listing title or description.
     *      - *firstPlatformCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with first platform category ID equal to the given ID.
     *      - *secondPlatformCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with second platform category ID equal to the given ID.
     *      - *firstShopCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with first shop category ID equal to the given ID.
     *      - *secondShopCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with second shop category ID equal to the given ID.
     *      - *thirdShopCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with third shop category ID equal to the given ID.
     *      - *shippingProfileId* - string - optional
     *          - Filter that restricts the search result to listing market histories that belong to a given shipping profile.
     *      - *lastSale* - string - optional
     *          - Filter that restricts the search result to listing market histories with last sale before given date.The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *isEbayPlus* - string - optional
     *          - Filter that restricts the search result to listing market histories that belong to eBay Plus.
     *      - *isClickAndCollect* - string - optional
     *          - Filter that restricts the search result to listing market histories that belong to eBay Click & Collect.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Valid instances are 'listingMarket', 'texts', 'properties', 'prices', 'dates'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarketHistory
     */
    public function eachListingsMarketsHistories(array $query = []): Iterator
    {
        return $this->eachInternal('getListingsMarketsHistories', func_get_args());
    }
        
    /**
     * @description Lists listing market history by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *listingMarketId* - int - optional
     *          - Filter that restricts the search result to listing market histories that match the given listing market ID(s).
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to listing market histories that match the given variation ID(s).
     *      - *variations* - string - optional
     *          - Filter that restricts the search result to listing market histories with a custom variation condition. Available values are 'all', 'fixed'.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing market histories with given referrer ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing market histories with given credential ID.
     *      - *directoryId* - int - optional
     *          - Filter that restricts the search result to listing market histories with a given directory ID.
     *      - *verified* - string - optional
     *          - Filter that restricts the search result to listing market histories that are verified. Available values are 'succeeded','unknown' or 'failed'.
     *      - *duration* - string - optional
     *          - Filter that restricts the search result to listing market histories with given duration.
     *      - *externalId* - string - optional
     *          - Filter that restricts the search result to listing market histories with given external id.
     *      - *listingId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a given listing ID.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a given item ID.
     *      - *listingTypeId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a listing of a custom type ID. Available values are:
    <ul>
    <li>1 - Auction</li>
    <li>2 - Fixed price</li>
    <li>3 - Shop (only for Hood listings)</li>
    </ul>
     *      - *stockDependenceTypeId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a listing with a custom stock dependence type ID. Available values are:
    <ul>
    <li>1 - Unlimited stock with automatic synchronisation</li>
    <li>2 - Limited and reserved stock</li>
    <li>3 - Limited and unreserved stock</li>
    <li>4 - Unlimited stock without automatich synchronisation</li>
    </ul>
     *      - *statusId* - int - optional
     *          - Filter that restricts the search result to listing market histories with a custom status status ID. Available values are:
    <ul>
    <li>1 - Active listing market histories</li>
    <li>2 - Ended listing market histories</li>
    <li>3 - Relisted listing market histories</li>
    <li>4 - Hidden listing market histories</li>
    </ul>
     *      - *stockCondition* - string - optional
     *          - Filter that restricts the search result to listing market histories with a custom stock condition. Available values are 'stockNetLessEqualZero', 'stockNetLessZero', 'stockNetGreaterZero', 'stockGrossLessEqualZero', 'stockGrossLessZero', 'stockGrossGreaterZero', 'stockNetTotalLessEqualZero', 'stockNetTotalLessZero', 'stockNetTotalGreaterZero'
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to listing market histories that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to listing market histories that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *textData* - string - optional
     *          - Filter that restricts the search result to listing market histories that match given text in listing title or description.
     *      - *firstPlatformCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with first platform category ID equal to the given ID.
     *      - *secondPlatformCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with second platform category ID equal to the given ID.
     *      - *firstShopCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with first shop category ID equal to the given ID.
     *      - *secondShopCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with second shop category ID equal to the given ID.
     *      - *thirdShopCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with third shop category ID equal to the given ID.
     *      - *shippingProfileId* - string - optional
     *          - Filter that restricts the search result to listing market histories that belong to a given shipping profile.
     *      - *lastSale* - string - optional
     *          - Filter that restricts the search result to listing market histories with last sale before given date.The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *isEbayPlus* - string - optional
     *          - Filter that restricts the search result to listing market histories that belong to eBay Plus.
     *      - *isClickAndCollect* - string - optional
     *          - Filter that restricts the search result to listing market histories that belong to eBay Click & Collect.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Valid instances are 'listingMarket', 'texts', 'properties', 'prices', 'dates'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarketHistory
     */
    public function batchListingsMarketsHistories(array $query = []): Iterator
    {
        return $this->batchInternal('getListingsMarketsHistories', func_get_args());
    }
    
    /**
     * @description Lists listing market history by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *listingMarketId* - int - optional
     *          - Filter that restricts the search result to listing market histories that match the given listing market ID(s).
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to listing market histories that match the given variation ID(s).
     *      - *variations* - string - optional
     *          - Filter that restricts the search result to listing market histories with a custom variation condition. Available values are 'all', 'fixed'.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing market histories with given referrer ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing market histories with given credential ID.
     *      - *directoryId* - int - optional
     *          - Filter that restricts the search result to listing market histories with a given directory ID.
     *      - *verified* - string - optional
     *          - Filter that restricts the search result to listing market histories that are verified. Available values are 'succeeded','unknown' or 'failed'.
     *      - *duration* - string - optional
     *          - Filter that restricts the search result to listing market histories with given duration.
     *      - *externalId* - string - optional
     *          - Filter that restricts the search result to listing market histories with given external id.
     *      - *listingId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a given listing ID.
     *      - *itemId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a given item ID.
     *      - *listingTypeId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a listing of a custom type ID. Available values are:
    <ul>
    <li>1 - Auction</li>
    <li>2 - Fixed price</li>
    <li>3 - Shop (only for Hood listings)</li>
    </ul>
     *      - *stockDependenceTypeId* - int - optional
     *          - Filter that restricts the search result to listing market histories that belong to a listing with a custom stock dependence type ID. Available values are:
    <ul>
    <li>1 - Unlimited stock with automatic synchronisation</li>
    <li>2 - Limited and reserved stock</li>
    <li>3 - Limited and unreserved stock</li>
    <li>4 - Unlimited stock without automatich synchronisation</li>
    </ul>
     *      - *statusId* - int - optional
     *          - Filter that restricts the search result to listing market histories with a custom status status ID. Available values are:
    <ul>
    <li>1 - Active listing market histories</li>
    <li>2 - Ended listing market histories</li>
    <li>3 - Relisted listing market histories</li>
    <li>4 - Hidden listing market histories</li>
    </ul>
     *      - *stockCondition* - string - optional
     *          - Filter that restricts the search result to listing market histories with a custom stock condition. Available values are 'stockNetLessEqualZero', 'stockNetLessZero', 'stockNetGreaterZero', 'stockGrossLessEqualZero', 'stockGrossLessZero', 'stockGrossGreaterZero', 'stockNetTotalLessEqualZero', 'stockNetTotalLessZero', 'stockNetTotalGreaterZero'
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to listing market histories that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to listing market histories that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *textData* - string - optional
     *          - Filter that restricts the search result to listing market histories that match given text in listing title or description.
     *      - *firstPlatformCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with first platform category ID equal to the given ID.
     *      - *secondPlatformCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with second platform category ID equal to the given ID.
     *      - *firstShopCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with first shop category ID equal to the given ID.
     *      - *secondShopCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with second shop category ID equal to the given ID.
     *      - *thirdShopCategoryId* - string - optional
     *          - Filter that restricts the search result to listing market histories with third shop category ID equal to the given ID.
     *      - *shippingProfileId* - string - optional
     *          - Filter that restricts the search result to listing market histories that belong to a given shipping profile.
     *      - *lastSale* - string - optional
     *          - Filter that restricts the search result to listing market histories with last sale before given date.The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *isEbayPlus* - string - optional
     *          - Filter that restricts the search result to listing market histories that belong to eBay Plus.
     *      - *isClickAndCollect* - string - optional
     *          - Filter that restricts the search result to listing market histories that belong to eBay Click & Collect.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Valid instances are 'listingMarket', 'texts', 'properties', 'prices', 'dates'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarketHistory
     */
    public function getListingsMarketsHistories(array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/markets/histories"], $query));
    }
                    
    /**
     * @description Ends the listing on the designated market.
     * @tag Listing
     * @param int $id The ID of the listing market history that needs to be ended. This must be passed as an array. This parameter is only needed if more than one listing market history should be ended.
     * @param array $query
     *      - *deleteOnSuccess* - boolean - optional
     *          - Tells if the listing market history should also be deleted from the database.
     * @return array
     */
    public function deleteListingsMarketsHistoriesEndIdById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/markets/histories/end/{id?}"], $query), 'DELETE');
    }
                    
    /**
     * @description Relists the listing on the designated market.
     * @tag Listing
     * @param int $id The ID of the listing market history that needs to be relisted. This must be passed as an array. This parameter is only needed if more than one listing market history should be relisted.
     * @return array
     */
    public function createListingsMarketsHistoriesRelistIdById(int $id): array
    {
        return $this->api("/rest/listings/markets/histories/relist/{id?}", 'POST');
    }
                    
    /**
     * @description Updates listing market histories by given update options. The listing market histories are not directly revised,
they are added to the batch processing lists, waiting to be revised by automated background processes.
     * @tag Listing
     * @param array $id The ID of the listing market history that needs to be updated. This must be passed as an array. This parameter is only needed if more than one listing market history should be updated.
     * @param array $query
     *      - *options* - array - optional
     *          - Multiple update options. Available values are:
    <ul>
    <li>all - Updates everything
    <li>title - Updates the title
    <li>subtitle - Updates the subtitle</li></li>
    <li>itemSpecifics - Updates the item specifics</li>
    <li>category - Updates the platform and shop category</li>
    <li>listingDetails - Updates listing details</li>
    <li>enhancements - Updates the enhancements information</li>
    <li>duration - Updates the duration</li>
    <li>shipping - Updates the shipping information</li>
    <li>description - Updates the description</li>
    <li>pictures - Updates the entry pictures</li>
    <li>quantityAndPrice - Updates the quantity and price (also for variations)</li>
    <li>resetVariations - Reset the variations. The variations from the item are transmitted again</li>
    <li>partsFitmentList - Updates the parts fitment information (only available for eBay)</li>
    <li>loyaltyProgram - Updates the listing loyalty program information (only available for eBay Plus)</li>
    <li>resetRrp - Reset the recommended retail price information (only available for eBay)</li>
    <li>payment - Updates payment information (only available for Hood)</li>
    </ul>
     * @return array
     */
    public function updateListingsMarketsHistoriesUpdateIdById(array $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/markets/histories/update/{id?}"], $query), 'PUT');
    }
                    
    /**
     * @description Gets a listing market history by given ID.
     * @tag Listing
     * @param int $id The ID of the listing market history entry.
     * @param array $query
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. One of 'listingMarket', 'texts', 'properties', 'dates', 'variations'.
     * @return array
     *      - *id* - integer
     *          - The listing market history ID.
     *      - *listingMarketId* - integer
     *          - The listing market ID of the current listing market history.
     *      - *referrerId* - integer
     *          - The referrer ID.
     *      - *externalId* - string
     *          - The external ID of the listing market history.
     *      - *statusId* - integer
     *          - The status ID of the current listing market history. The following properties are available:
<ul>
<li>1 = Active</li>
<li>2 = Ended</li>
<li>3 = Relisted</li>
<li>4 = Hidden</li>
</ul>
     *      - *quantity* - integer
     *          - The quantity available for sale on the marketplace.
     *      - *quantitySold* - integer
     *          - The quantity sold currently on the marketplace.
     *      - *quantitySoldDelta* - integer
     *          - The difference between the sold quantity and orders imported for this listing market history.
     *      - *quantityRemain* - integer
     *          - The quantity remaining on the marketplace.
     *      - *price* - number
     *          - The price offered for this listing market. @see ListingMarketHistoryVariation if the listing market history contains variations.
     *      - *currency* - string
     *          - The currency for the price of this listing market.
     *      - *sku* - string
     *          - The stock keeping unit of this listing market history.
     *      - *createdAt* - string
     *          - The date that the entry was created.
     *      - *updatedAt* - string
     *          - The date that the entry was updated last.
     *      - *hasStockReservationForEbay* - boolean
     *          - The flag which indicates if we have an active stock reservations for this listing
     */
    public function getListingsMarketsHistoryById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/markets/histories/{$id}"], $query));
    }
                
    /**
     * @description Search listing market info by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing market info that match the given ID(s).
     *      - *listingMarketId* - int - optional
     *          - Filter that restricts the search result to listing market info that match the given listing market ID(s).
     *      - *type* - string - optional
     *          - Filter that restricts the search result to listing market info with a custom type. Available values are 'warning', 'error', 'info'.
     *      - *code* - int - optional
     *          - Filter that restricts the search result to listing market info with given codes.
     *      - *createdAtFrom* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *createdAtTo* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarketInfo
     */
    public function eachListingsMarketsInfos(array $query = []): Iterator
    {
        return $this->eachInternal('getListingsMarketsInfos', func_get_args());
    }
        
    /**
     * @description Search listing market info by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing market info that match the given ID(s).
     *      - *listingMarketId* - int - optional
     *          - Filter that restricts the search result to listing market info that match the given listing market ID(s).
     *      - *type* - string - optional
     *          - Filter that restricts the search result to listing market info with a custom type. Available values are 'warning', 'error', 'info'.
     *      - *code* - int - optional
     *          - Filter that restricts the search result to listing market info with given codes.
     *      - *createdAtFrom* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *createdAtTo* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarketInfo
     */
    public function batchListingsMarketsInfos(array $query = []): Iterator
    {
        return $this->batchInternal('getListingsMarketsInfos', func_get_args());
    }
    
    /**
     * @description Search listing market info by filter options.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing market info that match the given ID(s).
     *      - *listingMarketId* - int - optional
     *          - Filter that restricts the search result to listing market info that match the given listing market ID(s).
     *      - *type* - string - optional
     *          - Filter that restricts the search result to listing market info with a custom type. Available values are 'warning', 'error', 'info'.
     *      - *code* - int - optional
     *          - Filter that restricts the search result to listing market info with given codes.
     *      - *createdAtFrom* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *createdAtTo* - string - optional
     *          - Filter that restricts the search result to listing markets that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarketInfo
     */
    public function getListingsMarketsInfos(array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/markets/infos"], $query));
    }
                    
    /**
     * @description Can be filtered by ID, listingMarketId, name and value.
     * @tag Listing
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the item specific.
     *      - *listingMarketId* - integer
     *          - The LMID which belongs to the item specific ID.
     *      - *name* - string
     *          - The name of the item specific.
     *      - *value* - string
     *          - The value of the item specific.
     */
    public function getListingsMarketsItemSpecifics(array $data): array
    {
        return $this->api("/rest/listings/markets/item_specifics", 'GET', $data);
    }
                    
    /**
     * @description Can be filtered by ID, listingMarketId, name and value.
     * @tag Listing
     * @param array $data 
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarketItemSpecific
     */
    public function getListingsMarketsItemSpecificsFind(array $data): array
    {
        return $this->api("/rest/listings/markets/item_specifics/find", 'GET', $data);
    }
                    
    /**
     * @description The ID has to be specified.
     * @tag Listing
     * @param int $id 
     */
    public function deleteListingsMarketsItemSpecificById(int $id)
    {
        return $this->api("/rest/listings/markets/item_specifics/{$id}", 'DELETE');
    }
                
    /**
     * @description The ID has to be specified.
     * @tag Listing
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The ID of the item specific.
     *      - *listingMarketId* - integer
     *          - The LMID which belongs to the item specific ID.
     *      - *name* - string
     *          - The name of the item specific.
     *      - *value* - string
     *          - The value of the item specific.
     */
    public function getListingsMarketsItemSpecificById(int $id): array
    {
        return $this->api("/rest/listings/markets/item_specifics/{$id}");
    }
                
    /**
     * @description The ID has to be specified.
     * @tag Listing
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the item specific.
     *      - *listingMarketId* - integer
     *          - The LMID which belongs to the item specific ID.
     *      - *name* - string
     *          - The name of the item specific.
     *      - *value* - string
     *          - The value of the item specific.
     */
    public function updateListingsMarketsItemSpecificById(int $id, array $data): array
    {
        return $this->api("/rest/listings/markets/item_specifics/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description Starts the market listing on the designated markets.
     * @tag Listing
     * @param int $id The ID of the listing market that needs to be started. This can also be passed as an array.
     * @param array $query
     *      - *startAt* - string - optional
     *          - When should the listings be started. The date has to be in the format, e.g. '2019-04-04 12:40:00'.
     *      - *distribution* - int - optional
     *          - The number of minutes that the listing should be started.
     * @return array
     */
    public function createListingsMarketsStartIdById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/markets/start/{id?}"], $query), 'POST');
    }
                
    /**
     * @description Lists listing market texts by filter options.
     * @tag Listing
     * @param array $query
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing market texts with specific ID. Several IDs can be entered as array.
     *      - *listingMarketId* - int - optional
     *          - Filter that restricts the search result to listing market texts with specific listing market IDs. Several IDs can be entered as array.
     *      - *language* - string - optional
     *          - Filter that restricts the search result to listing market texts for a specific language. @see listing market text model language for the complete available list of language types.
     *      - *contains* - string - optional
     *          - Filter that restricts the search result to listing market texts which title, subtitle or description contain the given value.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarketText
     */
    public function eachListingsMarketsTexts(array $query = []): Iterator
    {
        return $this->eachInternal('getListingsMarketsTexts', func_get_args());
    }
        
    /**
     * @description Lists listing market texts by filter options.
     * @tag Listing
     * @param array $query
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing market texts with specific ID. Several IDs can be entered as array.
     *      - *listingMarketId* - int - optional
     *          - Filter that restricts the search result to listing market texts with specific listing market IDs. Several IDs can be entered as array.
     *      - *language* - string - optional
     *          - Filter that restricts the search result to listing market texts for a specific language. @see listing market text model language for the complete available list of language types.
     *      - *contains* - string - optional
     *          - Filter that restricts the search result to listing market texts which title, subtitle or description contain the given value.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarketText
     */
    public function batchListingsMarketsTexts(array $query = []): Iterator
    {
        return $this->batchInternal('getListingsMarketsTexts', func_get_args());
    }
    
    /**
     * @description Lists listing market texts by filter options.
     * @tag Listing
     * @param array $query
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing market texts with specific ID. Several IDs can be entered as array.
     *      - *listingMarketId* - int - optional
     *          - Filter that restricts the search result to listing market texts with specific listing market IDs. Several IDs can be entered as array.
     *      - *language* - string - optional
     *          - Filter that restricts the search result to listing market texts for a specific language. @see listing market text model language for the complete available list of language types.
     *      - *contains* - string - optional
     *          - Filter that restricts the search result to listing market texts which title, subtitle or description contain the given value.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingMarketText
     */
    public function getListingsMarketsTexts(array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/markets/texts"], $query));
    }
                
    /**
     * @description Creates a listing market text for a given listing market ID. If an entry with same data already exists the request will be ignored and the old entry will be returned.
     * @tag Listing
     * @param array $data 
     * @param array $query
     *      - *listingMarketId* - int - required
     *          - The listing market ID this text belongs to.
     * @return array
     *      - *id* - integer
     *          - The ID of the listing market text.
     *      - *listingMarketId* - integer
     *          - The ID of the listing market the text belongs to.
     *      - *lang* - string
     *          - The language of the listing market text. Available values: 'de', 'en', 'fr', 'it', 'es', 'tr', 'nl', 'pl', 'nn', 'da', 'se', 'cz', 'ru', 'sk', 'cn', 'vn', 'pt', 'bg', 'ro'.
     *      - *title* - string
     *          - The title of the listing market text.
     *      - *subtitle* - string
     *          - The subtitle of the listing market text.
     *      - *description* - string
     *          - The description of the listing market text.
     */
    public function createListingsMarketsText(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/listings/markets/texts"], $query), 'POST', $data);
    }
                    
    /**
     * @description Deletes a listing market text for a given listing market text ID.
     * @tag Listing
     * @param int $id 
     * @param array $query
     *      - *lang* - string - required
     *          - The listing market text language that should be updated.
     *      - *listingMarketId* - int - required
     *          - The listing market ID this text belongs to.
     */
    public function deleteListingsMarketsTextById(int $id, array $query)
    {
        return $this->api(array_merge(["/rest/listings/markets/texts/{$id}"], $query), 'DELETE');
    }
                
    /**
     * @description Gets a listing market text by providing its ID.
     * @tag Listing
     * @param int $id The ID of the listing market text entry.
     * @return array
     *      - *id* - integer
     *          - The ID of the listing market text.
     *      - *listingMarketId* - integer
     *          - The ID of the listing market the text belongs to.
     *      - *lang* - string
     *          - The language of the listing market text. Available values: 'de', 'en', 'fr', 'it', 'es', 'tr', 'nl', 'pl', 'nn', 'da', 'se', 'cz', 'ru', 'sk', 'cn', 'vn', 'pt', 'bg', 'ro'.
     *      - *title* - string
     *          - The title of the listing market text.
     *      - *subtitle* - string
     *          - The subtitle of the listing market text.
     *      - *description* - string
     *          - The description of the listing market text.
     */
    public function getListingsMarketsTextById(int $id): array
    {
        return $this->api("/rest/listings/markets/texts/{$id}");
    }
                    
    /**
     * @description Updates a listing market text for a given listing market ID and language.
     * @tag Listing
     * @param int $listingMarketId The listing market ID this text belongs to.
     * @param string $lang The listing market text language that should be updated.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the listing market text.
     *      - *listingMarketId* - integer
     *          - The ID of the listing market the text belongs to.
     *      - *lang* - string
     *          - The language of the listing market text. Available values: 'de', 'en', 'fr', 'it', 'es', 'tr', 'nl', 'pl', 'nn', 'da', 'se', 'cz', 'ru', 'sk', 'cn', 'vn', 'pt', 'bg', 'ro'.
     *      - *title* - string
     *          - The title of the listing market text.
     *      - *subtitle* - string
     *          - The subtitle of the listing market text.
     *      - *description* - string
     *          - The description of the listing market text.
     */
    public function updateListingsMarketsTextByListingMarketIdLang(int $listingMarketId, string $lang, array $data): array
    {
        return $this->api("/rest/listings/markets/texts/{$listingMarketId}/{$lang}", 'PUT', $data);
    }
                    
    /**
     * @description Verifies the listing markets.
     * @tag Listing
     * @param int $id The ID of the listing market that need to be verified. This can also be passed as an array.
     * @return array
     */
    public function createListingsMarketsVerifyIdById(int $id): array
    {
        return $this->api("/rest/listings/markets/verify/{id?}", 'POST');
    }
                    
    /**
     * @description Deletes a listing market by ID.
     * @tag Listing
     * @param int $id The listing market ID.
     */
    public function deleteListingsMarketById(int $id)
    {
        return $this->api("/rest/listings/markets/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a listing market by given ID.
     * @tag Listing
     * @param int $id The ID of the listing market entry.
     * @param array $query
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. One of 'listing', 'texts', 'properties', 'itemSpecifics', 'prices', 'dates', 'infos'.
     * @return array
     *      - *id* - integer
     *          - The ID of the listing market.
     *      - *listingId* - integer
     *          - The listing ID of the current listing market.
     *      - *variationId* - integer
     *          - The variation ID for this listing market.
     *      - *referrerId* - integer
     *          - The ID of the referrer.
     *      - *credentialsId* - integer
     *          - The credentials ID that this listing market belongs to.
     *      - *directoryId* - integer
     *          - The directory ID of the listing market.
     *      - *enabled* - boolean
     *          - Indicates if the listing market is enabled.
     *      - *duration* - string
     *          - The duration of the listing market.
     *      - *verified* - string
     *          - Indicates if the listing market has been verified. Possible values are: 'succeeded', 'failed', 'unknown'.
     *      - *quantity* - integer
     *          - The quantity set for this listing market.
     *      - *allVariations* - boolean
     *          - Indicates if all variations should be included.
     *      - *createdAt* - string
     *          - The date that the listing was created.
     *      - *updatedAt* - string
     *          - The date that the listing was last updated.
     */
    public function getListingsMarketById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/markets/{$id}"], $query));
    }
                
    /**
     * @description Updates a listing market by ID.
     * @tag Listing
     * @param int $id The listing market ID.
     * @param array $data 
     * @param array $query
     *      - *referrerId* - number - required
     *          - The referrer ID.
     * @return array
     *      - *id* - integer
     *          - The ID of the listing market.
     *      - *listingId* - integer
     *          - The listing ID of the current listing market.
     *      - *variationId* - integer
     *          - The variation ID for this listing market.
     *      - *referrerId* - integer
     *          - The ID of the referrer.
     *      - *credentialsId* - integer
     *          - The credentials ID that this listing market belongs to.
     *      - *directoryId* - integer
     *          - The directory ID of the listing market.
     *      - *enabled* - boolean
     *          - Indicates if the listing market is enabled.
     *      - *duration* - string
     *          - The duration of the listing market.
     *      - *verified* - string
     *          - Indicates if the listing market has been verified. Possible values are: 'succeeded', 'failed', 'unknown'.
     *      - *quantity* - integer
     *          - The quantity set for this listing market.
     *      - *allVariations* - boolean
     *          - Indicates if all variations should be included.
     *      - *createdAt* - string
     *          - The date that the listing was created.
     *      - *updatedAt* - string
     *          - The date that the listing was last updated.
     */
    public function updateListingsMarketById(int $id, array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/listings/markets/{$id}"], $query), 'PUT', $data);
    }
                    
    /**
     * @description Creates an option template.
     * @tag Listing
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the option template.
     *      - *name* - string
     *          - The name of the option template.
     *      - *listing* - array
     *          - The listing options of the option template.
     *      - *listingMarket* - array
     *          - The listing market options of the option template.
     *      - *marketOptions* - array
     *          - The market options of the option template.
     */
    public function createListingsOptionTemplate(array $data): array
    {
        return $this->api("/rest/listings/option_templates", 'POST', $data);
    }
                    
    /**
     * @description Gets a preview list of all available listing option templates.
     * @tag Listing
     * @return array
     */
    public function getListingsOptionTemplatesPreview(): array
    {
        return $this->api("/rest/listings/option_templates/preview");
    }
                    
    /**
     * @description Deletes an option template by ID.
     * @tag Listing
     * @param int $id The option template ID.
     */
    public function deleteListingsOptionTemplateById(int $id)
    {
        return $this->api("/rest/listings/option_templates/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets an option template by ID.
     * @tag Listing
     * @param int $id The ID of the option template entry.
     * @return array
     *      - *id* - integer
     *          - The ID of the option template.
     *      - *name* - string
     *          - The name of the option template.
     *      - *listing* - array
     *          - The listing options of the option template.
     *      - *listingMarket* - array
     *          - The listing market options of the option template.
     *      - *marketOptions* - array
     *          - The market options of the option template.
     */
    public function getListingsOptionTemplateById(int $id): array
    {
        return $this->api("/rest/listings/option_templates/{$id}");
    }
                
    /**
     * @description Updates an option template by ID.
     * @tag Listing
     * @param int $id The option template ID.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the option template.
     *      - *name* - string
     *          - The name of the option template.
     *      - *listing* - array
     *          - The listing options of the option template.
     *      - *listingMarket* - array
     *          - The listing market options of the option template.
     *      - *marketOptions* - array
     *          - The market options of the option template.
     */
    public function updateListingsOptionTemplateById(int $id, array $data): array
    {
        return $this->api("/rest/listings/option_templates/{$id}", 'PUT', $data);
    }
                
    /**
     * @description Lists listing shipping profiles.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing shipping profiles that match the given ID(s).
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing shipping profiles with given referrer ID(s).
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing shipping profiles with given credential ID(s).
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ShippingProfile
     */
    public function eachListingsShippingProfiles(array $query = []): Iterator
    {
        return $this->eachInternal('getListingsShippingProfiles', func_get_args());
    }
        
    /**
     * @description Lists listing shipping profiles.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing shipping profiles that match the given ID(s).
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing shipping profiles with given referrer ID(s).
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing shipping profiles with given credential ID(s).
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ShippingProfile
     */
    public function batchListingsShippingProfiles(array $query = []): Iterator
    {
        return $this->batchInternal('getListingsShippingProfiles', func_get_args());
    }
    
    /**
     * @description Lists listing shipping profiles.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to listing shipping profiles that match the given ID(s).
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to listing shipping profiles with given referrer ID(s).
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to listing shipping profiles with given credential ID(s).
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ShippingProfile
     */
    public function getListingsShippingProfiles(array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/shipping_profiles"], $query));
    }
                    
    /**
     * @description Gets a shipping profile by providing its ID.
     * @tag Listing
     * @param int $id The ID of the listing shipping profile entry.
     * @param array $query
     *      - *with* - array - optional
     *          - An array with child instances to be loaded.
     * @return array
     *      - *id* - integer
     *          - The listing shipping profile ID.
     *      - *name* - string
     *          - The listing shipping profile name.
     *      - *credentialsId* - integer
     *          - The credentials ID that this listing shipping profile belongs to.
     *      - *referrerId* - integer
     *          - The referrer ID.
     *      - *createdBy* - string
     *          - Who created the shipping profile. Possible values: 'migration','customer','external'.
     *      - *isDefault* - boolean
     *          - Tells if the current listing shipping profile is set as default.
     *      - *extendedData* - array
     *          - Extended data that defines the current shipping profile.
     */
    public function getListingsShippingProfileById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/shipping_profiles/{$id}"], $query));
    }
                
    /**
     * @description Lists listing stock dependence types.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Available values: 'names'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockDependenceType
     */
    public function eachListingsStockDependenceTypes(array $query = []): Iterator
    {
        return $this->eachInternal('getListingsStockDependenceTypes', func_get_args());
    }
        
    /**
     * @description Lists listing stock dependence types.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Available values: 'names'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockDependenceType
     */
    public function batchListingsStockDependenceTypes(array $query = []): Iterator
    {
        return $this->batchInternal('getListingsStockDependenceTypes', func_get_args());
    }
    
    /**
     * @description Lists listing stock dependence types.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Available values: 'names'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockDependenceType
     */
    public function getListingsStockDependenceTypes(array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/stock_dependence_types"], $query));
    }
                    
    /**
     * @description Gets a listing stock dependence type by given ID.
     * @tag Listing
     * @param int $id The ID of the listing stock dependence type entry.
     * @param array $query
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Available values: 'names'.
     * @return array
     *      - *id* - integer
     *          - The ID of the listing stock dependence type.
     *      - *isErasable* - integer
     *          - Flag that indicates if the type can be deleted.
     *      - *position* - integer
     *          - The position for sorting.
     */
    public function getListingsStockDependenceTypeById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/stock_dependence_types/{$id}"], $query));
    }
                
    /**
     * @description Lists all listing types.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingType
     */
    public function eachListingsTypes(array $query = []): Iterator
    {
        return $this->eachInternal('getListingsTypes', func_get_args());
    }
        
    /**
     * @description Lists all listing types.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingType
     */
    public function batchListingsTypes(array $query = []): Iterator
    {
        return $this->batchInternal('getListingsTypes', func_get_args());
    }
    
    /**
     * @description Lists all listing types.
     * @tag Listing
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ListingType
     */
    public function getListingsTypes(array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/types"], $query));
    }
                    
    /**
     * @description Gets a listing type by given ID.
     * @tag Listing
     * @param int $id The ID of the listing type entry.
     * @param array $query
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Available values: 'names'.
     * @return array
     *      - *id* - integer
     *          - The ID of the listing type.
     *      - *isErasable* - integer
     *          - Flag that indicates if the type can be deleted.
     *      - *position* - integer
     *          - The position for sorting.
     */
    public function getListingsTypeById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/types/{$id}"], $query));
    }
                    
    /**
     * @description Deletes a listing by given ID.
     * @tag Listing
     * @param int $id The listing ID.
     */
    public function deleteListingById(int $id)
    {
        return $this->api("/rest/listings/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a listing by given ID.
     * @tag Listing
     * @param int $id The ID of the listing entry.
     * @param array $query
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. One of 'stockDependenceType', 'type', 'markets', 'properties'.
     * @return array
     *      - *id* - integer
     *          - The ID of the listing.
     *      - *itemId* - integer
     *          - The ID of the item.
     *      - *typeId* - integer
     *          - The ID of the listing type. Possible types are:
<ul>
    <li>1 = Auction</li>
    <li>2 = Fixed</li>
    <li>3 = Shop item</li>
</ul>
     *      - *stockDependenceTypeId* - integer
     *          - The ID of the listing stock dependence. Possible stock dependence types are:
<ul>
    <li>1 = Unlimited with sync</li>
    <li>2 = Limited with reservation</li>
    <li>3 = Limited without reservation</li>
    <li>4 = Unlimited without sync</li>
</ul>
     *      - *unitCombinationId* - integer
     *          - The ID of the unit combination.
     */
    public function getListingById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/listings/{$id}"], $query));
    }
                
    /**
     * @description Updates a listing by given ID.
     * @tag Listing
     * @param int $id The ID of the listing.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the listing.
     *      - *itemId* - integer
     *          - The ID of the item.
     *      - *typeId* - integer
     *          - The ID of the listing type. Possible types are:
<ul>
    <li>1 = Auction</li>
    <li>2 = Fixed</li>
    <li>3 = Shop item</li>
</ul>
     *      - *stockDependenceTypeId* - integer
     *          - The ID of the listing stock dependence. Possible stock dependence types are:
<ul>
    <li>1 = Unlimited with sync</li>
    <li>2 = Limited with reservation</li>
    <li>3 = Limited without reservation</li>
    <li>4 = Unlimited without sync</li>
</ul>
     *      - *unitCombinationId* - integer
     *          - The ID of the unit combination.
     */
    public function updateListingById(int $id, array $data): array
    {
        return $this->api("/rest/listings/{$id}", 'PUT', $data);
    }
    
}
