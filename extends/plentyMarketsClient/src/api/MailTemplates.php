<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class MailTemplates extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description List all email accounts that can be used to send emails (e.g. Webstore or Messenger inboxes)
     * @tag MailTemplates
     * @param array $query
     *      - *accountType* - string - required
     *          - Values: webstore OR messenger_inbox.
     * @return array
     */
    public function getMailTemplatesEmailServiceAccounts(array $query): array
    {
        return $this->api(array_merge(["/rest/mail_templates/email_service/accounts"], $query));
    }
                    
    /**
     * @description Add template to favourites for current user
     * @tag MailTemplates
     * @param int $templateId Template id that will be a favourite
     */
    public function createMailTemplatesEmailServiceAddToFavouriteByTemplateId(int $templateId)
    {
        return $this->api("/rest/mail_templates/email_service/addToFavourites/{$templateId}", 'POST');
    }
                    
    /**
     * @description Get the email of a contact or order based on the receiver type
     * @tag MailTemplates
     * @return array
     */
    public function getMailTemplatesEmailServiceGetRecipient(): array
    {
        return $this->api("/rest/mail_templates/email_service/getRecipient");
    }
                    
    /**
     * @description List all sent email for a specific entity (e.g order, contact, etc.)
     * @tag MailTemplates
     * @param array $query
     *      - *type* - string - required
     *          - History type: of order or contact
     *      - *id* - int - required
     *          - Search for a specific template
     * @return array
     */
    public function getMailTemplatesEmailServiceHistory(array $query): array
    {
        return $this->api(array_merge(["/rest/mail_templates/email_service/history"], $query));
    }
                    
    /**
     * @description Generates a render preview of a specific template (including attachments)
     * @tag MailTemplates
     * @param int $templateId Template id that will be previewed
     * @param array $query
     *      - *accountType* - string - required
     *          - Values: webstore OR messenger_inbox.
     *      - *conversationId* - string - optional
     *          - Conversation id
     *      - *whisperMode* - boolean - optional
     *          - Whisper mode
     *      - *categoryId* - int - optional
     *          - Conversation category id
     *      - *loadAttachments* - boolean - optional
     *          - Load the attachments in the response
     *      - *inboxId* - int - optional
     *          - Conversation inbox id
     *      - *contacts* - string - optional
     *          - List of contacts ids separated by comma
     *      - *orders* - string - optional
     *          - List of orders ids separated by comma
     *      - *emails* - string - optional
     *          - List of emails separated by comma
     *      - *lang* - string - optional
     *          - Language of template
     *      - *receiver* - int - optional
     *          - Reveceiver for email: DEFAULT = 0, CONTACT = 1,
     *     INVOICE_ADDRESS = 2, DELIVERY_ADDRESS = 3, WAREHOUSE = 4, CONTACT_EMAIL_PRIVATE = 5, CONTACT_EMAIL_WORK = 6,
     *     CONTACT_EMAIL_PAYPAL = 7,
     * @return array
     */
    public function getMailTemplatesEmailServiceLoadPreviewByTemplateId(int $templateId, array $query): array
    {
        return $this->api(array_merge(["/rest/mail_templates/email_service/loadPreview/{$templateId}"], $query));
    }
                    
    /**
     * @description Remove template from favourites for current user
     * @tag MailTemplates
     * @param int $templateId Template id that will be removed from favourite
     */
    public function createMailTemplatesEmailServiceRemoveFromFavouriteByTemplateId(int $templateId)
    {
        return $this->api("/rest/mail_templates/email_service/removeFromFavourites/{$templateId}", 'POST');
    }
                    
    /**
     * @description Renders a template and sends an email to the specified recipients
     * @tag MailTemplates
     * @param int $templateId Template id that will be sent
     * @param array $query
     *      - *conversationId* - string - optional
     *          - Conversation id
     *      - *contacts* - array - optional
     *          - List of contacts ids
     *      - *orders* - array - optional
     *          - List of orders ids
     *      - *emails* - array - optional
     *          - List of emails
     *      - *lang* - string - optional
     *          - Language of template
     *      - *receiver* - int - optional
     *          - Reveceiver for email: DEFAULT = 0, CONTACT = 1,
     *     INVOICE_ADDRESS = 2, DELIVERY_ADDRESS = 3, WAREHOUSE = 4, CONTACT_EMAIL_PRIVATE = 5, CONTACT_EMAIL_WORK = 6,
     *     CONTACT_EMAIL_PAYPAL = 7,
     * @return array
     */
    public function createMailTemplatesEmailServiceSendEmailByTemplateId(int $templateId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/mail_templates/email_service/sendEmail/{$templateId}"], $query), 'POST');
    }
                    
    /**
     * @description Sends a direct email to the specified recipients (a preview of a template or any other custom content email)
     * @tag MailTemplates
     * @param array $query
     *      - *account* - array - required
     *          - Contains all account details:
     *          type = string (webstore/messenger_inbox)
     *          id = int (the id of the webStore or de inbox id)
     *          name = string (the name of the webStore or de inbox name)
     *          from = array ('name': string - the from name, 'address': string - the from email)
     *          
     *      - *to* - array - required
     *          - Array with emails and names for to receivers,
     *      [{'name': string, 'address': string}]
     *      - *cc* - array - optional
     *          - Array with emails and names for cc receivers,
     *      [{'name': string, 'address': string}]
     *      - *bcc* - array - optional
     *          - Array with emails and names for bcc receivers,
     *      [{'name': string, 'address': string}]
     *      - *subject* - string - required
     *          - The subject of the email
     *      - *body* - string - required
     *          - The content of the email
     *      - *attachments* - array - optional
     *          - Array that contains the multipel attachments details:
     *      [
     *           {
     *           'name': string (File name),
     *           'body': string (File content),
     *           'size': int (File size in kb),
     *           'contentType': string (File content type)
     *           }
     *       ]
     *     
     * @return array
     */
    public function createMailTemplatesEmailServiceSendPreview(array $query): array
    {
        return $this->api(array_merge(["/rest/mail_templates/email_service/sendPreview"], $query), 'POST');
    }
                    
    /**
     * @description List all EmailBuilder templates and folders structured as a nested tree
     * @tag MailTemplates
     * @param array $query
     *      - *showFavorites* - boolean - optional
     *          - Show favorites;
     *      Favourites response folder ID: -1
     *      - *showOldTemplates* - boolean - optional
     *          - Show old templates;
     *      Old templates response folder ID = -2 
     *      - *id* - int - optional
     *          - Search for a specific template
     *      - *name* - string - optional
     *          - Search for a specific template name
     *      - *client* - int - optional
     *          - Search for a specific client
     *      - *owner* - int - optional
     *          - Search for a specific owner
     *      - *lang* - int - optional
     *          - Search for a lang (iso code)
     *      - *sortBy* - string - optional
     *          - Sort by id/name/createdAt
     *      - *sortOrder* - string - optional
     *          - Sort order asc/desc
     * @return array
     */
    public function getMailTemplatesEmailServiceTemplatesTree(array $query = []): array
    {
        return $this->api(array_merge(["/rest/mail_templates/email_service/templatesTree"], $query));
    }
    
}
