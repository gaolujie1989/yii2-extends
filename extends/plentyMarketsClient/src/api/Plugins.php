<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Plugins extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Updates the dependencies that's needed for the plugin
     * @tag Plugins
     * @param int $pluginSetId 
     */
    public function getPluginSetsUpdateReversedDependenciesByPluginSetId(int $pluginSetId)
    {
        return $this->api("/rest/plugin_sets/{$pluginSetId}/updateReversedDependencies");
    }
                    
    /**
     * @description Lists all plugins saved in the inbox folder. Plugins that have not been provisioned to Stage or Productive will
also be shown.
     * @tag Plugins
     * @return array
     */
    public function getPlugins(): array
    {
        return $this->api("/rest/plugins");
    }
                
    /**
     * @description Creates a plugin with empty plugin folders and a plugin.json file.
     * @tag Plugins
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the plugin
     *      - *name* - string
     *          - The name of the plugin
     *      - *position* - integer
     *          - The position of the plugin. The position is used to determine the plugin
order.
     *      - *activeStage* - boolean
     *          - Shows whether the plugin is active in Stage. Inactive plugins will not
be provisioned in Stage.
     *      - *activeProductive* - boolean
     *          - Shows whether the plugin is active in Productive. Inactive plugins will
not be provisioned in Productive.
     *      - *created_at* - string
     *          - The date that the plugin was created.
     *      - *updated_at* - string
     *          - The date that the plugin was updated last.
     *      - *inStage* - boolean
     *          - Shows whether the plugin is provisioned in Stage.
     *      - *inProductive* - boolean
     *          - Shows whether the plugin is provisioned in Productive.
     *      - *isConnectedWithGit* - boolean
     *      - *updateInformation* - array
     *      - *type* - string
     *          - The type of the plugin. The following plugin types are available:
<ul>
    <li>Template</li>
    <li>Export</li>
</ul>
     *      - *installed* - boolean
     *          - Whether or not the plugin is installed. This will be false for plugins
that have been purchased from the marketplace but have not yet been installed in any set.
     *      - *version* - string
     *          - The version of the plugin
     *      - *versionStage* - string
     *          - The version of the plugin in stage
     *      - *versionProductive* - string
     *          - The version of the plugin in productive
     *      - *description* - string
     *          - The description text of the plugin
     *      - *namespace* - string
     *          - The namespace of the plugin
     *      - *dependencies* - array
     *          - A list of plugins with dependencies to the plugin
     *      - *author* - string
     *          - The name of the plugin author
     *      - *price* - number
     *          - The price of the plugin
     *      - *keywords* - array
     *          - A list of plugin keywords
     *      - *require* - array
     *          - A list of plugins that are required by the plugin
     *      - *platform* - array
     *          - Details about what platform does the plugin support.
     *      - *notInstalledRequirements* - array
     *          - A list of required plugins that are not installed
     *      - *notActiveStageRequirements* - array
     *          - A list of required plugins that are not active in stage
     *      - *notActiveProductiveRequirements* - array
     *          - A list of required plugins that are not active in productive
     *      - *runOnBuild* - array
     *          - The list of classes to execute once on plugin build
     *      - *checkOnBuild* - array
     *          - The list of classes to execute on every plugin build
     *      - *authorIcon* - string
     *          - The author icon
     *      - *pluginIcon* - string
     *          - The plugin icon
     *      - *license* - string
     *          - The plugin license
     *      - *shortDescription* - array
     *      - *isClosedSource* - boolean
     *          - is closed source
     *      - *inboxPath* - string
     *          - path in the inbox (closed source, open source)
     *      - *marketplaceName* - array
     *          - The plugin name displayed in marketplace
     *      - *source* - string
     *          - Whether this plugin was installed from marketplace, git or local
     *      - *javaScriptFiles* - array
     *          - A list of included javascript files
     *      - *containers* - array
     *          - A list of provided containers with name and description
     *      - *dataProviders* - array
     *          - A list of data providers with name and description
     *      - *categories* - array
     *      - *webhookUrl* - string
     *          - webhookUrl
     *      - *isExternalTool* - boolean
     *          - is external tool
     *      - *directDownloadLinks* - array
     *          - A list of urls for the external tool
     *      - *forwardLink* - string
     *          - A forward link to the external tool developers page
     *      - *branch* - string
     *          - The branch to checkout for this particular Plugin
     *      - *commit* - string
     *          - The commit to checkout for this particular Plugin
     *      - *offerTrial* - boolean
     *          - Determines if the plugin offers a trial period for plentyMarketplace
     *      - *offerFreemium* - boolean
     *          - Determines if the plugin offers freemium functionality
     *      - *pluginSetIds* - array
     *          - Array of PluginSet Ids where this plugin is contained.
     */
    public function createPlugin(array $data): array
    {
        return $this->api("/rest/plugins", 'POST', $data);
    }
                    
    /**
     * @description Checks if the plugin is compatible with the requirements
     * @tag Plugins
     * @return array
     */
    public function createPluginsConstraintVersion(): array
    {
        return $this->api("/rest/plugins/constraint/version", 'POST');
    }
                    
    /**
     * @description Lists all plugins saved in the inbox folder. Plugins that have not been provisioned to Stage or Productive will
also be shown.
     * @tag Plugins
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Plugin
     */
    public function getPluginsSearch(): array
    {
        return $this->api("/rest/plugins/search");
    }
                    
    /**
     * @description Loads all given sitemap patterns from booted plugins.
     * @tag Plugins
     * @return array
     */
    public function getPluginsSeoSitemap(): array
    {
        return $this->api("/rest/plugins/seo/sitemap");
    }
                    
    /**
     * @description Lists all plugins provisioned in Stage or Productive that contain a plugin.js file.
     * @tag Plugins
     * @return array
     */
    public function getPluginsUi(): array
    {
        return $this->api("/rest/plugins/ui");
    }
                    
    /**
     * @description Deletes a plugin. This call also deletes all plugin files in the inbox folder! To commit the deletion, the
plugin must be provisioned in Stage or Productive. The ID of the plugin must be specified.
     * @tag Plugins
     * @param int $pluginId 
     */
    public function deletePluginByPluginId(int $pluginId)
    {
        return $this->api("/rest/plugins/{$pluginId}", 'DELETE');
    }
                
    /**
     * @description Gets a plugin. The ID of the plugin must be specified.
     * @tag Plugins
     * @param int $pluginId 
     * @return array
     *      - *id* - integer
     *          - The ID of the plugin
     *      - *name* - string
     *          - The name of the plugin
     *      - *position* - integer
     *          - The position of the plugin. The position is used to determine the plugin
order.
     *      - *activeStage* - boolean
     *          - Shows whether the plugin is active in Stage. Inactive plugins will not
be provisioned in Stage.
     *      - *activeProductive* - boolean
     *          - Shows whether the plugin is active in Productive. Inactive plugins will
not be provisioned in Productive.
     *      - *created_at* - string
     *          - The date that the plugin was created.
     *      - *updated_at* - string
     *          - The date that the plugin was updated last.
     *      - *inStage* - boolean
     *          - Shows whether the plugin is provisioned in Stage.
     *      - *inProductive* - boolean
     *          - Shows whether the plugin is provisioned in Productive.
     *      - *isConnectedWithGit* - boolean
     *      - *updateInformation* - array
     *      - *type* - string
     *          - The type of the plugin. The following plugin types are available:
<ul>
    <li>Template</li>
    <li>Export</li>
</ul>
     *      - *installed* - boolean
     *          - Whether or not the plugin is installed. This will be false for plugins
that have been purchased from the marketplace but have not yet been installed in any set.
     *      - *version* - string
     *          - The version of the plugin
     *      - *versionStage* - string
     *          - The version of the plugin in stage
     *      - *versionProductive* - string
     *          - The version of the plugin in productive
     *      - *description* - string
     *          - The description text of the plugin
     *      - *namespace* - string
     *          - The namespace of the plugin
     *      - *dependencies* - array
     *          - A list of plugins with dependencies to the plugin
     *      - *author* - string
     *          - The name of the plugin author
     *      - *price* - number
     *          - The price of the plugin
     *      - *keywords* - array
     *          - A list of plugin keywords
     *      - *require* - array
     *          - A list of plugins that are required by the plugin
     *      - *platform* - array
     *          - Details about what platform does the plugin support.
     *      - *notInstalledRequirements* - array
     *          - A list of required plugins that are not installed
     *      - *notActiveStageRequirements* - array
     *          - A list of required plugins that are not active in stage
     *      - *notActiveProductiveRequirements* - array
     *          - A list of required plugins that are not active in productive
     *      - *runOnBuild* - array
     *          - The list of classes to execute once on plugin build
     *      - *checkOnBuild* - array
     *          - The list of classes to execute on every plugin build
     *      - *authorIcon* - string
     *          - The author icon
     *      - *pluginIcon* - string
     *          - The plugin icon
     *      - *license* - string
     *          - The plugin license
     *      - *shortDescription* - array
     *      - *isClosedSource* - boolean
     *          - is closed source
     *      - *inboxPath* - string
     *          - path in the inbox (closed source, open source)
     *      - *marketplaceName* - array
     *          - The plugin name displayed in marketplace
     *      - *source* - string
     *          - Whether this plugin was installed from marketplace, git or local
     *      - *javaScriptFiles* - array
     *          - A list of included javascript files
     *      - *containers* - array
     *          - A list of provided containers with name and description
     *      - *dataProviders* - array
     *          - A list of data providers with name and description
     *      - *categories* - array
     *      - *webhookUrl* - string
     *          - webhookUrl
     *      - *isExternalTool* - boolean
     *          - is external tool
     *      - *directDownloadLinks* - array
     *          - A list of urls for the external tool
     *      - *forwardLink* - string
     *          - A forward link to the external tool developers page
     *      - *branch* - string
     *          - The branch to checkout for this particular Plugin
     *      - *commit* - string
     *          - The commit to checkout for this particular Plugin
     *      - *offerTrial* - boolean
     *          - Determines if the plugin offers a trial period for plentyMarketplace
     *      - *offerFreemium* - boolean
     *          - Determines if the plugin offers freemium functionality
     *      - *pluginSetIds* - array
     *          - Array of PluginSet Ids where this plugin is contained.
     */
    public function getPluginByPluginId(int $pluginId): array
    {
        return $this->api("/rest/plugins/{$pluginId}");
    }
                
    /**
     * @description Updates a plugin. The plugin position can be changed. The plugin can be activated or deactivated for Stage or
Productive. The plugin can be activated or deactivated for online stores. The ID of the plugin must be
specified.
     * @tag Plugins
     * @param int $pluginId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the plugin
     *      - *name* - string
     *          - The name of the plugin
     *      - *position* - integer
     *          - The position of the plugin. The position is used to determine the plugin
order.
     *      - *activeStage* - boolean
     *          - Shows whether the plugin is active in Stage. Inactive plugins will not
be provisioned in Stage.
     *      - *activeProductive* - boolean
     *          - Shows whether the plugin is active in Productive. Inactive plugins will
not be provisioned in Productive.
     *      - *created_at* - string
     *          - The date that the plugin was created.
     *      - *updated_at* - string
     *          - The date that the plugin was updated last.
     *      - *inStage* - boolean
     *          - Shows whether the plugin is provisioned in Stage.
     *      - *inProductive* - boolean
     *          - Shows whether the plugin is provisioned in Productive.
     *      - *isConnectedWithGit* - boolean
     *      - *updateInformation* - array
     *      - *type* - string
     *          - The type of the plugin. The following plugin types are available:
<ul>
    <li>Template</li>
    <li>Export</li>
</ul>
     *      - *installed* - boolean
     *          - Whether or not the plugin is installed. This will be false for plugins
that have been purchased from the marketplace but have not yet been installed in any set.
     *      - *version* - string
     *          - The version of the plugin
     *      - *versionStage* - string
     *          - The version of the plugin in stage
     *      - *versionProductive* - string
     *          - The version of the plugin in productive
     *      - *description* - string
     *          - The description text of the plugin
     *      - *namespace* - string
     *          - The namespace of the plugin
     *      - *dependencies* - array
     *          - A list of plugins with dependencies to the plugin
     *      - *author* - string
     *          - The name of the plugin author
     *      - *price* - number
     *          - The price of the plugin
     *      - *keywords* - array
     *          - A list of plugin keywords
     *      - *require* - array
     *          - A list of plugins that are required by the plugin
     *      - *platform* - array
     *          - Details about what platform does the plugin support.
     *      - *notInstalledRequirements* - array
     *          - A list of required plugins that are not installed
     *      - *notActiveStageRequirements* - array
     *          - A list of required plugins that are not active in stage
     *      - *notActiveProductiveRequirements* - array
     *          - A list of required plugins that are not active in productive
     *      - *runOnBuild* - array
     *          - The list of classes to execute once on plugin build
     *      - *checkOnBuild* - array
     *          - The list of classes to execute on every plugin build
     *      - *authorIcon* - string
     *          - The author icon
     *      - *pluginIcon* - string
     *          - The plugin icon
     *      - *license* - string
     *          - The plugin license
     *      - *shortDescription* - array
     *      - *isClosedSource* - boolean
     *          - is closed source
     *      - *inboxPath* - string
     *          - path in the inbox (closed source, open source)
     *      - *marketplaceName* - array
     *          - The plugin name displayed in marketplace
     *      - *source* - string
     *          - Whether this plugin was installed from marketplace, git or local
     *      - *javaScriptFiles* - array
     *          - A list of included javascript files
     *      - *containers* - array
     *          - A list of provided containers with name and description
     *      - *dataProviders* - array
     *          - A list of data providers with name and description
     *      - *categories* - array
     *      - *webhookUrl* - string
     *          - webhookUrl
     *      - *isExternalTool* - boolean
     *          - is external tool
     *      - *directDownloadLinks* - array
     *          - A list of urls for the external tool
     *      - *forwardLink* - string
     *          - A forward link to the external tool developers page
     *      - *branch* - string
     *          - The branch to checkout for this particular Plugin
     *      - *commit* - string
     *          - The commit to checkout for this particular Plugin
     *      - *offerTrial* - boolean
     *          - Determines if the plugin offers a trial period for plentyMarketplace
     *      - *offerFreemium* - boolean
     *          - Determines if the plugin offers freemium functionality
     *      - *pluginSetIds* - array
     *          - Array of PluginSet Ids where this plugin is contained.
     */
    public function updatePluginByPluginId(int $pluginId, array $data): array
    {
        return $this->api("/rest/plugins/{$pluginId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes a plugin. This call also deletes all plugin files in the inbox folder! To commit the deletion, the
plugin must be provisioned in Stage or Productive. The ID of the plugin must be specified.
     * @tag Plugins
     * @param int $pluginId 
     * @param int $pluginSetId 
     */
    public function deletePluginsPluginSetByPluginIdPluginSetId(int $pluginId, int $pluginSetId)
    {
        return $this->api("/rest/plugins/{$pluginId}/plugin_sets/{$pluginSetId}", 'DELETE');
    }
                    
    /**
     * @description Gets the requirements based on the plugin name and the plugin set ID.
     * @tag Plugins
     * @param int $pluginName 
     * @param int $pluginSetId 
     */
    public function createPluginsPluginSetsReversedDependencyByPluginNamePluginSetId(int $pluginName, int $pluginSetId)
    {
        return $this->api("/rest/plugins/{$pluginName}/plugin_sets/{$pluginSetId}/reversedDependencies", 'POST');
    }
                    
    /**
     * @description Sends a mail from booted plugins.
     * @tag Plugins
     * @return array
     */
    public function createPluginsMail(): array
    {
        return $this->api("/rest/plugins_mail", 'POST');
    }
    
}
