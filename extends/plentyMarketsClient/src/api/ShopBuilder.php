<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class ShopBuilder extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description List all content links for a given plugin set.
     * @tag ShopBuilder
     * @return array
     */
    public function getShopBuilderContentLinks(): array
    {
        return $this->api("/rest/shop_builder/content_links");
    }
                
    /**
     * @description Link a content to a layout container of a frontend plugin.
     * @tag ShopBuilder
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the content link
     *      - *contentId* - integer
     *          - The ID of the content
     *      - *containerName* - string
     *          - The name of the container
     *      - *pluginSetId* - integer
     *          - The Id of the plugin set
     *      - *language* - string
     *          - The language where the content is linked to.
     *      - *active* - boolean
     *          - Indicates if the link is active and the content should be visible for the frontend.
     *      - *relatedContentType* - string
     *          - The content type the content is linked to
     *      - *relatedContainerName* - string
     *          - The container name the content is linked to
     *      - *inherit* - boolean
     *          - Indicates if this content should be inherited to child contents.
     *      - *invalid* - boolean
     *          - Indicate if the content is invalid and should be regenerated on next request.
     */
    public function createShopBuilderContentLink(array $data): array
    {
        return $this->api("/rest/shop_builder/content_links", 'POST', $data);
    }
                    
    /**
     * @description Delete a content link.
     * @tag ShopBuilder
     * @param int $contentLinkId 
     */
    public function deleteShopBuilderContentLinkByContentLinkId(int $contentLinkId)
    {
        return $this->api("/rest/shop_builder/content_links/{$contentLinkId}", 'DELETE');
    }
                
    /**
     * @description Get a content link by ID.
     * @tag ShopBuilder
     * @param int $contentLinkId 
     * @return array
     *      - *id* - integer
     *          - The ID of the content link
     *      - *contentId* - integer
     *          - The ID of the content
     *      - *containerName* - string
     *          - The name of the container
     *      - *pluginSetId* - integer
     *          - The Id of the plugin set
     *      - *language* - string
     *          - The language where the content is linked to.
     *      - *active* - boolean
     *          - Indicates if the link is active and the content should be visible for the frontend.
     *      - *relatedContentType* - string
     *          - The content type the content is linked to
     *      - *relatedContainerName* - string
     *          - The container name the content is linked to
     *      - *inherit* - boolean
     *          - Indicates if this content should be inherited to child contents.
     *      - *invalid* - boolean
     *          - Indicate if the content is invalid and should be regenerated on next request.
     */
    public function getShopBuilderContentLinkByContentLinkId(int $contentLinkId): array
    {
        return $this->api("/rest/shop_builder/content_links/{$contentLinkId}");
    }
                
    /**
     * @description Update a content link.
     * @tag ShopBuilder
     * @param int $contentLinkId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the content link
     *      - *contentId* - integer
     *          - The ID of the content
     *      - *containerName* - string
     *          - The name of the container
     *      - *pluginSetId* - integer
     *          - The Id of the plugin set
     *      - *language* - string
     *          - The language where the content is linked to.
     *      - *active* - boolean
     *          - Indicates if the link is active and the content should be visible for the frontend.
     *      - *relatedContentType* - string
     *          - The content type the content is linked to
     *      - *relatedContainerName* - string
     *          - The container name the content is linked to
     *      - *inherit* - boolean
     *          - Indicates if this content should be inherited to child contents.
     *      - *invalid* - boolean
     *          - Indicate if the content is invalid and should be regenerated on next request.
     */
    public function updateShopBuilderContentLinkByContentLinkId(int $contentLinkId, array $data): array
    {
        return $this->api("/rest/shop_builder/content_links/{$contentLinkId}", 'PUT', $data);
    }
                    
    /**
     * @description Generate a preview link for a contentLink.
     * @tag ShopBuilder
     * @param int $contentLinkId 
     * @return array
     */
    public function getShopBuilderContentLinksPreviewUrlByContentLinkId(int $contentLinkId): array
    {
        return $this->api("/rest/shop_builder/content_links/{$contentLinkId}/preview_url");
    }
                    
    /**
     * @description Lists all available ShopBuilder contents.
     * @tag ShopBuilder
     * @return array
     */
    public function getShopBuilderContents(): array
    {
        return $this->api("/rest/shop_builder/contents");
    }
                
    /**
     * @description Creates a new ShopBuilder content.
     * @tag ShopBuilder
     * @param array $data 
     * @param array $query
     *      - *frontendLang* - string - optional
     *          - Language to be used when rendering frontend widgets.
     * @return array
     *      - *id* - integer
     *          - The ID of the content
     *      - *dataProviderName* - string
     *          - The name of the data provider
     *      - *type* - string
     *          - The type of the content
     *      - *widgets* - string
     *          - The configured widgets of the content. This attribute is deprecated. Use $dropzones instead.
     *      - *dropzones* - array
     *          - Dropzones of the content
     */
    public function createShopBuilderContent(array $data, array $query = []): array
    {
        return $this->api(array_merge(["/rest/shop_builder/contents"], $query), 'POST', $data);
    }
                
    /**
     * @description Mark contents to be regenerated. Active contents will be regenerated on next frontend request.
Inactive contents will be regenerated when opening them in the editor or after activating.
     * @tag ShopBuilder
     * @param array $query
     *      - *containerName* - string - optional
     *          - The ID of the plugin set to rebuild contents for.
     *      - *pluginSetId* - int - optional
     *          - Layout container to regenerate contents for.
     */
    public function updateShopBuilderContent(array $query = [])
    {
        return $this->api(array_merge(["/rest/shop_builder/contents"], $query), 'PUT');
    }
                
    /**
     * @description Searches for specific contents based on the provided parameters.
     * @tag ShopBuilder
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *dataProviderName* - string - optional
     *          - Name of the content
     *      - *type* - string - optional
     *          - Type of the content
     *      - *containerName* - string - optional
     *          - Name of the linked container
     *      - *pluginSetId* - int - optional
     *          - Id of the linked plugin set
     *      - *language* - string - optional
     *          - Language of the content link
     *      - *active* - int - optional
     *          - Active state of the content link
     *      - *contentLinkId* - int - optional
     *          - IDs of the related content link
     *      - *relatedContentType* - int - optional
     *          - Filter contents related to a specific type
     *      - *relatedContainerName* - int - optional
     *          - Filter contents related to a specific container
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function eachShopBuilderContentsSearch(array $query = []): Iterator
    {
        return $this->eachInternal('getShopBuilderContentsSearch', func_get_args());
    }
        
    /**
     * @description Searches for specific contents based on the provided parameters.
     * @tag ShopBuilder
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *dataProviderName* - string - optional
     *          - Name of the content
     *      - *type* - string - optional
     *          - Type of the content
     *      - *containerName* - string - optional
     *          - Name of the linked container
     *      - *pluginSetId* - int - optional
     *          - Id of the linked plugin set
     *      - *language* - string - optional
     *          - Language of the content link
     *      - *active* - int - optional
     *          - Active state of the content link
     *      - *contentLinkId* - int - optional
     *          - IDs of the related content link
     *      - *relatedContentType* - int - optional
     *          - Filter contents related to a specific type
     *      - *relatedContainerName* - int - optional
     *          - Filter contents related to a specific container
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function batchShopBuilderContentsSearch(array $query = []): Iterator
    {
        return $this->batchInternal('getShopBuilderContentsSearch', func_get_args());
    }
    
    /**
     * @description Searches for specific contents based on the provided parameters.
     * @tag ShopBuilder
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *dataProviderName* - string - optional
     *          - Name of the content
     *      - *type* - string - optional
     *          - Type of the content
     *      - *containerName* - string - optional
     *          - Name of the linked container
     *      - *pluginSetId* - int - optional
     *          - Id of the linked plugin set
     *      - *language* - string - optional
     *          - Language of the content link
     *      - *active* - int - optional
     *          - Active state of the content link
     *      - *contentLinkId* - int - optional
     *          - IDs of the related content link
     *      - *relatedContentType* - int - optional
     *          - Filter contents related to a specific type
     *      - *relatedContainerName* - int - optional
     *          - Filter contents related to a specific container
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getShopBuilderContentsSearch(array $query = []): array
    {
        return $this->api(array_merge(["/rest/shop_builder/contents/search"], $query));
    }
                    
    /**
     * @description Deletes a ShopBuilder content.
     * @tag ShopBuilder
     * @param int $contentId The ID of the content to delete.
     */
    public function deleteShopBuilderContentByContentId(int $contentId)
    {
        return $this->api("/rest/shop_builder/contents/{$contentId}", 'DELETE');
    }
                
    /**
     * @description Finds a ShopBuilder content by its ID.
     * @tag ShopBuilder
     * @param int $contentId ID of the content to get data for.
     * @param array $query
     *      - *frontendLang* - string - optional
     *          - Language to be used when rendering frontend widgets.
     */
    public function getShopBuilderContentByContentId(int $contentId, array $query = [])
    {
        return $this->api(array_merge(["/rest/shop_builder/contents/{$contentId}"], $query));
    }
                
    /**
     * @description Get cross origin headers.
     * @tag ShopBuilder
     * @param int $contentId 
     */
    public function optionsShopBuilderContentByContentId(int $contentId)
    {
        return $this->api("/rest/shop_builder/contents/{$contentId}", 'OPTIONS');
    }
                
    /**
     * @description Duplicates a ShopBuilder content by ID.
     * @tag ShopBuilder
     * @param int $contentId The ID of the content to duplicate.
     * @param array $query
     *      - *targetPluginSetId* - int - optional
     *          - ID of the plugin set to link the duplicate to.
     *      - *language* - string - optional
     *          - Language to link the duplicate to.
     *      - *containerName* - string - optional
     *          - Layout container to link the duplicate to.
     *      - *contentName* - string - optional
     *          - Name of the duplicted content.
     * @return array
     *      - *id* - integer
     *          - The ID of the content
     *      - *dataProviderName* - string
     *          - The name of the data provider
     *      - *type* - string
     *          - The type of the content
     *      - *widgets* - string
     *          - The configured widgets of the content. This attribute is deprecated. Use $dropzones instead.
     *      - *dropzones* - array
     *          - Dropzones of the content
     */
    public function createShopBuilderContentByContentId(int $contentId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/shop_builder/contents/{$contentId}"], $query), 'POST');
    }
                
    /**
     * @description Updates a ShopBuilder content. If not data are provided, content will be rebuilt.
     * @tag ShopBuilder
     * @param int $contentId The ID of the content to update.
     * @param array $data 
     * @param array $query
     *      - *frontendLang* - string - optional
     *          - Language to be used when rendering frontend widgets.
     */
    public function updateShopBuilderContentByContentId(int $contentId, array $data, array $query = [])
    {
        return $this->api(array_merge(["/rest/shop_builder/contents/{$contentId}"], $query), 'PUT', $data);
    }
                    
    /**
     * @description List versions of a specified content.
     * @tag ShopBuilder
     * @param int $contentId ID of the content to get versions for.
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *versionIdMarker* - string - optional
     *          - ID of a version to get subsequent versions from.
     */
    public function getShopBuilderContentsVersionsByContentId(int $contentId, array $query = [])
    {
        return $this->api(array_merge(["/rest/shop_builder/contents/{$contentId}/versions"], $query));
    }
                    
    /**
     * @description Restore a specific content version.
     * @tag ShopBuilder
     * @param int $contentId The ID of the content to be restored to a previous version.
     * @param string $versionId ID of the version to restore the content to.
     */
    public function updateShopBuilderContentsVersionByContentIdVersionId(int $contentId, string $versionId)
    {
        return $this->api("/rest/shop_builder/contents/{$contentId}/versions/{$versionId}", 'PUT');
    }
                    
    /**
     * @description Resolve a data field provider class and return all registered entries and child providers.
     * @tag ShopBuilder
     * @param array $query
     *      - *providerClass* - string - optional
     *          - Class name of the data field provider to resolve.
     */
    public function getShopBuilderDataFields(array $query = [])
    {
        return $this->api(array_merge(["/rest/shop_builder/data_fields"], $query));
    }
                
    /**
     * @description Get cross origin headers.
     * @tag ShopBuilder

     */
    public function optionsShopBuilderDataField()
    {
        return $this->api("/rest/shop_builder/data_fields", 'OPTIONS');
    }
                    
    /**
     * @description Get contents of all shopBuilder.json files from all frontend plugins.
     * @tag ShopBuilder
     * @param array $query
     *      - *pluginSetId* - int - optional
     *          - Id of the plugin set to read frontend configurations for.
     * @return array
     */
    public function getShopBuilderFrontend(array $query = []): array
    {
        return $this->api(array_merge(["/rest/shop_builder/frontend"], $query));
    }
                    
    /**
     * @description Get global settings defined by frontend plugins in shopBuilder.json files.
     * @tag ShopBuilder

     */
    public function getShopBuilderGlobalSettings()
    {
        return $this->api("/rest/shop_builder/global_settings");
    }
                
    /**
     * @description Update global settings by calling registered settings handler for each frontend plugin.
     * @tag ShopBuilder

     */
    public function updateShopBuilderGlobalSetting()
    {
        return $this->api("/rest/shop_builder/global_settings", 'PUT');
    }
                    
    /**
     * @description List content pages from all plugins in a given plugin set.
     * @tag ShopBuilder
     * @return array
     */
    public function getShopBuilderPages(): array
    {
        return $this->api("/rest/shop_builder/pages");
    }
                    
    /**
     * @description Compile a single sass file. Optionally prepend variables.
     * @tag ShopBuilder
     * @param array $query
     *      - *path* - string - optional
     *          - The path to the sass file to be compiled.
     *      - *variables* - string - optional
     *          - An optional sass formatted string to be prepended to the file content.
     */
    public function getShopBuilderSassCompile(array $query = [])
    {
        return $this->api(array_merge(["/rest/shop_builder/sass/compile"], $query));
    }
                    
    /**
     * @description Search in multiple sources.
     * @tag ShopBuilder
     * @param array $query
     *      - *query* - string - optional
     *          - The query to search for.
     *      - *maxPerSource* - int - optional
     *          - Maximum number of results per search source.
     *      - *sources* - array - optional
     *          - Sources to consider during search.
     */
    public function getShopBuilderSearch(array $query = [])
    {
        return $this->api(array_merge(["/rest/shop_builder/search"], $query));
    }
                    
    /**
     * @description Get a single entity from a specified source.
     * @tag ShopBuilder
     * @param string $source The source to get the entry for.
     * @param int $id 
     * @return array
     *      - *value* - string
     *      - *label* - string
     *      - *source* - string
     */
    public function getShopBuilderSearchBySourceId(string $source, int $id): array
    {
        return $this->api("/rest/shop_builder/search/{$source}/{$id}");
    }
                    
    /**
     * @description List all widgets provided by all frontend plugins of a given plugin set.
     * @tag ShopBuilder
     * @param array $query
     *      - *identifier* - string - optional
     *          - Filter results by widget identifier.
     *      - *contentType* - string - optional
     *          - Filter results that are allowed for the given content type.
     */
    public function getShopBuilderWidgets(array $query = [])
    {
        return $this->api(array_merge(["/rest/shop_builder/widgets"], $query));
    }
                
    /**
     * @description Get cross origin headers.
     * @tag ShopBuilder

     */
    public function optionsShopBuilderWidget()
    {
        return $this->api("/rest/shop_builder/widgets", 'OPTIONS');
    }
                
    /**
     * @description Render the preview for widgets
     * @tag ShopBuilder
     * @param array $query
     *      - *frontendLang* - string - optional
     *          - Language to be used when rendering frontend widgets.
     *      - *contentType* - string - optional
     *          - Provide a content type to widgets should be rendered within.
     */
    public function createShopBuilderWidget(array $query = [])
    {
        return $this->api(array_merge(["/rest/shop_builder/widgets"], $query), 'POST');
    }
    
}
