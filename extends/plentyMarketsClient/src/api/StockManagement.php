<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class StockManagement extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

            
    /**
     * @description Lists stock of all warehouses.
     * @tag StockManagement
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation. The id of the variation must be specified.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Stock
     */
    public function eachStockmanagementStock(array $query = []): Iterator
    {
        return $this->eachInternal('getStockmanagementStock', func_get_args());
    }
        
    /**
     * @description Lists stock of all warehouses.
     * @tag StockManagement
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation. The id of the variation must be specified.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Stock
     */
    public function batchStockmanagementStock(array $query = []): Iterator
    {
        return $this->batchInternal('getStockmanagementStock', func_get_args());
    }
    
    /**
     * @description Lists stock of all warehouses.
     * @tag StockManagement
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation. The id of the variation must be specified.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Stock
     */
    public function getStockmanagementStock(array $query = []): array
    {
        return $this->api(array_merge(["/rest/stockmanagement/stock"], $query));
    }
                    
    /**
     * @description Retrieves a list of years of archives for the stock movements.
     * @tag StockManagement
     * @return array
     */
    public function getStockmanagementStockArchives(): array
    {
        return $this->api("/rest/stockmanagement/stock/archives");
    }
                    
    /**
     * @description Redistributes stock of one storage location among one or more storage locations.
Note: If variation has Batch or BBD, they need to be included in the redistribution object.
     * @tag StockManagement
     * @param array $data 
     */
    public function updateStockmanagementStockRedistribute(array $data)
    {
        return $this->api("/rest/stockmanagement/stock/redistribute", 'PUT', $data);
    }
                
    /**
     * @description Lists stock for all warehouses of the same warehouse type. The name of the type must be specified. Currently the only type available is 'sales'.
     * @tag StockManagement
     * @param string $type The name of the warehouse type. Currently only 'sales' is available.
     * @param array $query
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation. The id of the variation must be specified.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Stock
     */
    public function eachStockmanagementStockTypeByType(string $type, array $query = []): Iterator
    {
        return $this->eachInternal('getStockmanagementStockTypeByType', func_get_args());
    }
        
    /**
     * @description Lists stock for all warehouses of the same warehouse type. The name of the type must be specified. Currently the only type available is 'sales'.
     * @tag StockManagement
     * @param string $type The name of the warehouse type. Currently only 'sales' is available.
     * @param array $query
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation. The id of the variation must be specified.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Stock
     */
    public function batchStockmanagementStockTypeByType(string $type, array $query = []): Iterator
    {
        return $this->batchInternal('getStockmanagementStockTypeByType', func_get_args());
    }
    
    /**
     * @description Lists stock for all warehouses of the same warehouse type. The name of the type must be specified. Currently the only type available is 'sales'.
     * @tag StockManagement
     * @param string $type The name of the warehouse type. Currently only 'sales' is available.
     * @param array $query
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation. The id of the variation must be specified.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Stock
     */
    public function getStockmanagementStockTypeByType(string $type, array $query = []): array
    {
        return $this->api(array_merge(["/rest/stockmanagement/stock/types/{$type}"], $query));
    }
                    
    /**
     * @description Lists warehouses without applying any filters.
     * @tag StockManagement
     * @param array $query
     *      - *with* - array - optional
     *          - Related objects to be loaded. repairWarehouse is the only relation currently available.
     */
    public function getStockmanagementWarehouses(array $query = [])
    {
        return $this->api(array_merge(["/rest/stockmanagement/warehouses"], $query));
    }
                
    /**
     * @description Creates a warehouse.
     * @tag StockManagement
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The id of the warehouse
     *      - *name* - string
     *          - The name of the warehouse
     *      - *note* - string
     *          - A note for this warehouse
     *      - *typeId* - integer
     *          - The id of the warehouse type. The following types are available:
<ul>
    <li>0 = Sales warehouse</li>
    <li>1 = Repair warehouse</li>
    <li>4 = Storage warehouse</li>
    <li>5 = Transit warehouse</li>
    <li>6 = Distribution warehouse</li>
    <li>7 = Other</li>
</ul>
     *      - *priority* - integer
     *          - The priority of the warehouse. The higher the priority, the more important the warehouse is. The priority is used for automatic warehouse detection.
     *      - *allocationReferrerIds* - array
     *          - Allocation Referrer Ids by automatic warehouse detection
     *      - *onStockAvailability* - integer
     *          - Displayed availability of a variation if stock is available
     *      - *outOfStockAvailability* - integer
     *          - Displayed availability of a variation if no stock is available
     *      - *splitByShippingProfile* - boolean
     *          - Flag that indicates if for this warehouse orders are split by shipping profiles or not. <ul><li>True = Orders are split by shipping profiles</li> <li>False = Orders will not be split by shipping profiles</li></ul>
     *      - *storageLocationType* - string
     *          - The storage location type. The following types are available: <ul><li>none</li> <li>small</li><li>medium</li> <li>large</li> <li>europallet</li></ul>
     *      - *storageLocationZone* - integer
     *          - The zone that the storage location is in
     *      - *repairWarehouseId* - integer
     *          - The id of the associated repair warehouse
     *      - *isInventoryModeActive* - boolean
     *          - Flag that indicates if the stocktaking mode for this warehouse is active or not. <ul><li>True = active</li> <li>False = inactive</li></ul>
     *      - *logisticsType* - string
     *          - The id of the logistics type of the warehouse. The logistics type states which service provider fulfills the storage and shipping. The following logistics types are available:
<ul>
<li>own</li>
<li>amazon</li>
<li>dhlFulfillment</li>
</ul>
     *      - *updatedAt* - string
     *          - The updated at timestamp of the warehouse
     *      - *createdAt* - string
     *          - The created at timestamp of the warehouse
     */
    public function createStockmanagementWarehouse(array $data): array
    {
        return $this->api("/rest/stockmanagement/warehouses", 'POST', $data);
    }
                    
    /**
     * @description Gets a warehouse. The id of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId The id of the warehouse to be loaded
     * @param array $query
     *      - *with* - array - optional
     *          - Related objects to be loaded. 'repairWarehouse' is the only relation currently available.
     * @return array
     *      - *id* - integer
     *          - The id of the warehouse
     *      - *name* - string
     *          - The name of the warehouse
     *      - *note* - string
     *          - A note for this warehouse
     *      - *typeId* - integer
     *          - The id of the warehouse type. The following types are available:
<ul>
    <li>0 = Sales warehouse</li>
    <li>1 = Repair warehouse</li>
    <li>4 = Storage warehouse</li>
    <li>5 = Transit warehouse</li>
    <li>6 = Distribution warehouse</li>
    <li>7 = Other</li>
</ul>
     *      - *priority* - integer
     *          - The priority of the warehouse. The higher the priority, the more important the warehouse is. The priority is used for automatic warehouse detection.
     *      - *allocationReferrerIds* - array
     *          - Allocation Referrer Ids by automatic warehouse detection
     *      - *onStockAvailability* - integer
     *          - Displayed availability of a variation if stock is available
     *      - *outOfStockAvailability* - integer
     *          - Displayed availability of a variation if no stock is available
     *      - *splitByShippingProfile* - boolean
     *          - Flag that indicates if for this warehouse orders are split by shipping profiles or not. <ul><li>True = Orders are split by shipping profiles</li> <li>False = Orders will not be split by shipping profiles</li></ul>
     *      - *storageLocationType* - string
     *          - The storage location type. The following types are available: <ul><li>none</li> <li>small</li><li>medium</li> <li>large</li> <li>europallet</li></ul>
     *      - *storageLocationZone* - integer
     *          - The zone that the storage location is in
     *      - *repairWarehouseId* - integer
     *          - The id of the associated repair warehouse
     *      - *isInventoryModeActive* - boolean
     *          - Flag that indicates if the stocktaking mode for this warehouse is active or not. <ul><li>True = active</li> <li>False = inactive</li></ul>
     *      - *logisticsType* - string
     *          - The id of the logistics type of the warehouse. The logistics type states which service provider fulfills the storage and shipping. The following logistics types are available:
<ul>
<li>own</li>
<li>amazon</li>
<li>dhlFulfillment</li>
</ul>
     *      - *updatedAt* - string
     *          - The updated at timestamp of the warehouse
     *      - *createdAt* - string
     *          - The created at timestamp of the warehouse
     */
    public function getStockmanagementWarehouseByWarehouseId(int $warehouseId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/stockmanagement/warehouses/{$warehouseId}"], $query));
    }
                    
    /**
     * @description Gets a storage location. The id of the storage location and the id of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId The id of the warehouse.
     * @param int $storageLocationId The id of the storage location.
     * @param array $query
     *      - *columns* - array - optional
     *          - The attributes to be loaded.
     *      - *with* - array - optional
     *          - The relations to be loaded. Possible values are 'warehouse', 'rack' and 'shelf'.
     * @return array
     *      - *id* - integer
     *          - The id of the storage location.
     *      - *warehouseId* - integer
     *          - The id of the warehouse the storage location belongs to.
     *      - *rackId* - integer
     *          - The id of the rack the storage location belongs to.
     *      - *shelfId* - integer
     *          - The id of the shelf the storage location belongs to.
     *      - *name* - string
     *          - The name of the storage location.
     *      - *type* - integer
     *          - The type of the storage location. Valid strings are: 'small', 'medium', 'large', 'europallet'.
     *      - *position* - integer
     *          - The position of the storage location.
     */
    public function getStockmanagementWarehousesManagementStorageLocationByWarehouseIdStorageLocationId(int $warehouseId, int $storageLocationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/stockmanagement/warehouses/{$warehouseId}/management/storageLocations/{$storageLocationId}"], $query));
    }
                
    /**
     * @description Lists stock for a warehouse. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId The ID of the warehouse.
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation. The id of the variation must be specified.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *reasonId* - int - optional
     *          - The ID of the reason
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Stock
     */
    public function eachStockmanagementWarehousesStockByWarehouseId(int $warehouseId, array $query = []): Iterator
    {
        return $this->eachInternal('getStockmanagementWarehousesStockByWarehouseId', func_get_args());
    }
        
    /**
     * @description Lists stock for a warehouse. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId The ID of the warehouse.
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation. The id of the variation must be specified.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *reasonId* - int - optional
     *          - The ID of the reason
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Stock
     */
    public function batchStockmanagementWarehousesStockByWarehouseId(int $warehouseId, array $query = []): Iterator
    {
        return $this->batchInternal('getStockmanagementWarehousesStockByWarehouseId', func_get_args());
    }
    
    /**
     * @description Lists stock for a warehouse. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId The ID of the warehouse.
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation. The id of the variation must be specified.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *reasonId* - int - optional
     *          - The ID of the reason
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Stock
     */
    public function getStockmanagementWarehousesStockByWarehouseId(int $warehouseId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/stockmanagement/warehouses/{$warehouseId}/stock"], $query));
    }
                    
    /**
     * @description Books incoming stock for multiple variations. The incoming stock will be added to the existing stock. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId The ID of the warehouse.
     * @param array $data 
     */
    public function updateStockmanagementWarehousesStockBookIncomingItemByWarehouseId(int $warehouseId, array $data)
    {
        return $this->api("/rest/stockmanagement/warehouses/{$warehouseId}/stock/bookIncomingItems", 'PUT', $data);
    }
                    
    /**
     * @description Books outgoing stock for multiple variations. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId The ID of the warehouse.
     * @param array $data 
     */
    public function updateStockmanagementWarehousesStockBookOutgoingItemByWarehouseId(int $warehouseId, array $data)
    {
        return $this->api("/rest/stockmanagement/warehouses/{$warehouseId}/stock/bookOutgoingItems", 'PUT', $data);
    }
                    
    /**
     * @description Corrects stock. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId The ID of the warehouse.
     * @param array $data 
     */
    public function updateStockmanagementWarehousesStockCorrectionByWarehouseId(int $warehouseId, array $data)
    {
        return $this->api("/rest/stockmanagement/warehouses/{$warehouseId}/stock/correction", 'PUT', $data);
    }
                
    /**
     * @description Lists stock movements for a warehouse. The ID of the warehouse must be specified. To get movements older than 3 months, set the 'year' parameter.
NOTE: You can either get archive entries or non-archive entries. You can not get entries for the current year that are younger and older than 3 months with one request. You need separate requests to get entries older and younger than 3 months. To get all entries younger than 3 month you do not need to specify a year or any createdAt parameter.
     * @tag StockManagement
     * @param int $warehouseId The ID of the warehouse
     * @param array $query
     *      - *variationId* - int - optional
     *          - The ID of the variation
     *      - *reasonGroup* - int - optional
     *          - The ID of the reason
     *      - *itemId* - int - optional
     *          - The ID of the item
     *      - *createdAtFrom* - string - optional
     *          - Get entries with createdAt date after this date
     *      - *createdAtTo* - string - optional
     *          - Get entries with createdAt date before this date
     *      - *year* - int - optional
     *          - Get entries from the archive for the given year. All movements older than 3 months are stored in the archive.
     *      - *page* - int - required
     *          - The requested page. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of items per page. The default number per page is 50.
     *      - *columns* - array - optional
     *          - The properties to be loaded
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of VariationStockMovement
     */
    public function eachStockmanagementWarehousesStockMovementsByWarehouseId(int $warehouseId, array $query): Iterator
    {
        return $this->eachInternal('getStockmanagementWarehousesStockMovementsByWarehouseId', func_get_args());
    }
        
    /**
     * @description Lists stock movements for a warehouse. The ID of the warehouse must be specified. To get movements older than 3 months, set the 'year' parameter.
NOTE: You can either get archive entries or non-archive entries. You can not get entries for the current year that are younger and older than 3 months with one request. You need separate requests to get entries older and younger than 3 months. To get all entries younger than 3 month you do not need to specify a year or any createdAt parameter.
     * @tag StockManagement
     * @param int $warehouseId The ID of the warehouse
     * @param array $query
     *      - *variationId* - int - optional
     *          - The ID of the variation
     *      - *reasonGroup* - int - optional
     *          - The ID of the reason
     *      - *itemId* - int - optional
     *          - The ID of the item
     *      - *createdAtFrom* - string - optional
     *          - Get entries with createdAt date after this date
     *      - *createdAtTo* - string - optional
     *          - Get entries with createdAt date before this date
     *      - *year* - int - optional
     *          - Get entries from the archive for the given year. All movements older than 3 months are stored in the archive.
     *      - *page* - int - required
     *          - The requested page. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of items per page. The default number per page is 50.
     *      - *columns* - array - optional
     *          - The properties to be loaded
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of VariationStockMovement
     */
    public function batchStockmanagementWarehousesStockMovementsByWarehouseId(int $warehouseId, array $query): Iterator
    {
        return $this->batchInternal('getStockmanagementWarehousesStockMovementsByWarehouseId', func_get_args());
    }
    
    /**
     * @description Lists stock movements for a warehouse. The ID of the warehouse must be specified. To get movements older than 3 months, set the 'year' parameter.
NOTE: You can either get archive entries or non-archive entries. You can not get entries for the current year that are younger and older than 3 months with one request. You need separate requests to get entries older and younger than 3 months. To get all entries younger than 3 month you do not need to specify a year or any createdAt parameter.
     * @tag StockManagement
     * @param int $warehouseId The ID of the warehouse
     * @param array $query
     *      - *variationId* - int - optional
     *          - The ID of the variation
     *      - *reasonGroup* - int - optional
     *          - The ID of the reason
     *      - *itemId* - int - optional
     *          - The ID of the item
     *      - *createdAtFrom* - string - optional
     *          - Get entries with createdAt date after this date
     *      - *createdAtTo* - string - optional
     *          - Get entries with createdAt date before this date
     *      - *year* - int - optional
     *          - Get entries from the archive for the given year. All movements older than 3 months are stored in the archive.
     *      - *page* - int - required
     *          - The requested page. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of items per page. The default number per page is 50.
     *      - *columns* - array - optional
     *          - The properties to be loaded
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of VariationStockMovement
     */
    public function getStockmanagementWarehousesStockMovementsByWarehouseId(int $warehouseId, array $query): array
    {
        return $this->api(array_merge(["/rest/stockmanagement/warehouses/{$warehouseId}/stock/movements"], $query));
    }
                
    /**
     * @description Lists stock of a warehouse for each variation and storage location. The stock will only be listed if the stock is positive. Negative stock will not be listed. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId 
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation.
     *      - *storageLocationId* - int - optional
     *          - Filter that restricts the search result to stock of a storage location.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *with* - array - optional
     *          - Load additional relations for a StockStorageLocation. Possible values:
    <ul>
    <li>'storageLocation' = The storageLocation this stock information belongs to.</li>
    </ul>
    Example: <code>?with[]=storageLocation</code>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockStorageLocation
     */
    public function eachStockmanagementWarehousesStockStorageLocationsByWarehouseId(int $warehouseId, array $query = []): Iterator
    {
        return $this->eachInternal('getStockmanagementWarehousesStockStorageLocationsByWarehouseId', func_get_args());
    }
        
    /**
     * @description Lists stock of a warehouse for each variation and storage location. The stock will only be listed if the stock is positive. Negative stock will not be listed. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId 
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation.
     *      - *storageLocationId* - int - optional
     *          - Filter that restricts the search result to stock of a storage location.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *with* - array - optional
     *          - Load additional relations for a StockStorageLocation. Possible values:
    <ul>
    <li>'storageLocation' = The storageLocation this stock information belongs to.</li>
    </ul>
    Example: <code>?with[]=storageLocation</code>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockStorageLocation
     */
    public function batchStockmanagementWarehousesStockStorageLocationsByWarehouseId(int $warehouseId, array $query = []): Iterator
    {
        return $this->batchInternal('getStockmanagementWarehousesStockStorageLocationsByWarehouseId', func_get_args());
    }
    
    /**
     * @description Lists stock of a warehouse for each variation and storage location. The stock will only be listed if the stock is positive. Negative stock will not be listed. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId 
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation.
     *      - *storageLocationId* - int - optional
     *          - Filter that restricts the search result to stock of a storage location.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *with* - array - optional
     *          - Load additional relations for a StockStorageLocation. Possible values:
    <ul>
    <li>'storageLocation' = The storageLocation this stock information belongs to.</li>
    </ul>
    Example: <code>?with[]=storageLocation</code>
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockStorageLocation
     */
    public function getStockmanagementWarehousesStockStorageLocationsByWarehouseId(int $warehouseId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/stockmanagement/warehouses/{$warehouseId}/stock/storageLocations"], $query));
    }
                
    /**
     * @description Lists stock of a warehouse for each variation and storage location with pim entry. The stock will only be listed if the stock is positive. Negative stock will not be listed. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId 
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation.
     *      - *storageLocationId* - int - optional
     *          - Filter that restricts the search result to stock of a storage location.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *with* - array - optional
     *          - Load additional relations for a StockStorageLocation. Possible values:
    <ul>
    <li>'storageLocation' = The storageLocation this stock information belongs to.</li>
    </ul>
    Example: <code>?with[]=storageLocation</code>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockStorageLocation
     */
    public function eachStockmanagementWarehousesStockStorageLocationsPimByWarehouseId(int $warehouseId, array $query = []): Iterator
    {
        return $this->eachInternal('getStockmanagementWarehousesStockStorageLocationsPimByWarehouseId', func_get_args());
    }
        
    /**
     * @description Lists stock of a warehouse for each variation and storage location with pim entry. The stock will only be listed if the stock is positive. Negative stock will not be listed. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId 
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation.
     *      - *storageLocationId* - int - optional
     *          - Filter that restricts the search result to stock of a storage location.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *with* - array - optional
     *          - Load additional relations for a StockStorageLocation. Possible values:
    <ul>
    <li>'storageLocation' = The storageLocation this stock information belongs to.</li>
    </ul>
    Example: <code>?with[]=storageLocation</code>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockStorageLocation
     */
    public function batchStockmanagementWarehousesStockStorageLocationsPimByWarehouseId(int $warehouseId, array $query = []): Iterator
    {
        return $this->batchInternal('getStockmanagementWarehousesStockStorageLocationsPimByWarehouseId', func_get_args());
    }
    
    /**
     * @description Lists stock of a warehouse for each variation and storage location with pim entry. The stock will only be listed if the stock is positive. Negative stock will not be listed. The ID of the warehouse must be specified.
     * @tag StockManagement
     * @param int $warehouseId 
     * @param array $query
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to stock that were last updated on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to stock that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to stock with a variation.
     *      - *storageLocationId* - int - optional
     *          - Filter that restricts the search result to stock of a storage location.
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     *      - *with* - array - optional
     *          - Load additional relations for a StockStorageLocation. Possible values:
    <ul>
    <li>'storageLocation' = The storageLocation this stock information belongs to.</li>
    </ul>
    Example: <code>?with[]=storageLocation</code>
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockStorageLocation
     */
    public function getStockmanagementWarehousesStockStorageLocationsPimByWarehouseId(int $warehouseId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/stockmanagement/warehouses/{$warehouseId}/stock/storageLocationsPim"], $query));
    }
                    
    /**
     * @description Unpacks a variation.
     * @tag StockManagement
     * @param int $warehouseId 
     * @param array $query
     *      - *VariationStockIntake* - array - required
     *          - The new item that will be booked in as result of the unpacking
     *      - *VariationStockCorrection* - array - required
     *          - The item that is unpacked
     * @return array
     *      - *id* - integer
     *          - The id of the warehouse
     *      - *name* - string
     *          - The name of the warehouse
     *      - *note* - string
     *          - A note for this warehouse
     *      - *typeId* - integer
     *          - The id of the warehouse type. The following types are available:
<ul>
    <li>0 = Sales warehouse</li>
    <li>1 = Repair warehouse</li>
    <li>4 = Storage warehouse</li>
    <li>5 = Transit warehouse</li>
    <li>6 = Distribution warehouse</li>
    <li>7 = Other</li>
</ul>
     *      - *priority* - integer
     *          - The priority of the warehouse. The higher the priority, the more important the warehouse is. The priority is used for automatic warehouse detection.
     *      - *allocationReferrerIds* - array
     *          - Allocation Referrer Ids by automatic warehouse detection
     *      - *onStockAvailability* - integer
     *          - Displayed availability of a variation if stock is available
     *      - *outOfStockAvailability* - integer
     *          - Displayed availability of a variation if no stock is available
     *      - *splitByShippingProfile* - boolean
     *          - Flag that indicates if for this warehouse orders are split by shipping profiles or not. <ul><li>True = Orders are split by shipping profiles</li> <li>False = Orders will not be split by shipping profiles</li></ul>
     *      - *storageLocationType* - string
     *          - The storage location type. The following types are available: <ul><li>none</li> <li>small</li><li>medium</li> <li>large</li> <li>europallet</li></ul>
     *      - *storageLocationZone* - integer
     *          - The zone that the storage location is in
     *      - *repairWarehouseId* - integer
     *          - The id of the associated repair warehouse
     *      - *isInventoryModeActive* - boolean
     *          - Flag that indicates if the stocktaking mode for this warehouse is active or not. <ul><li>True = active</li> <li>False = inactive</li></ul>
     *      - *logisticsType* - string
     *          - The id of the logistics type of the warehouse. The logistics type states which service provider fulfills the storage and shipping. The following logistics types are available:
<ul>
<li>own</li>
<li>amazon</li>
<li>dhlFulfillment</li>
</ul>
     *      - *updatedAt* - string
     *          - The updated at timestamp of the warehouse
     *      - *createdAt* - string
     *          - The created at timestamp of the warehouse
     */
    public function updateStockmanagementWarehousesStockUnpackVariationByWarehouseId(int $warehouseId, array $query): array
    {
        return $this->api(array_merge(["/rest/stockmanagement/warehouses/{$warehouseId}/stock/unpackVariation"], $query), 'PUT');
    }
                    
    /**
     * @description Corrects stock of a storage location. Every variation that is currently present on the provided storageLocation and is not provided
in the request will be set to quantity 0.
     * @tag StockManagement
     * @param int $warehouseId The ID of the warehouse.
     * @param int $warehouseLocationId 
     * @param array $data 
     * @param array $query
     *      - *$warehouseLocationId* - int - required
     *          - The ID of the warehouseLocation.
     */
    public function updateStockmanagementWarehousesStockBookStocktakingByWarehouseIdWarehouseLocationId(int $warehouseId, int $warehouseLocationId, array $data, array $query)
    {
        return $this->api(array_merge(["/rest/stockmanagement/warehouses/{$warehouseId}/{$warehouseLocationId}/stock/bookStocktaking"], $query), 'PUT', $data);
    }
    
}
