<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Sync extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Gets a single storage object from sync documents
     * @tag Sync
     * @param array $query
     *      - *key* - string - required
     *          - The storage key of the object to get from sync documents.
     * @return array
     *      - *key* - string
     *      - *path* - string
     *      - *lastModified* - string
     *      - *metaData* - array
     *      - *eTag* - string
     *      - *size* - integer
     *      - *storageClass* - string
     *      - *body* - string
     *      - *contentType* - string
     *      - *contentLength* - string
     */
    public function getElasticSyncDocument(array $query): array
    {
        return $this->api(array_merge(["/rest/elastic-sync/document"], $query));
    }
                
    /**
     * @description Uploads a document to sync directory
     * @tag Sync
     * @param array $query
     *      - *key* - string - required
     *          - The storage key for the file to upload
     * @return array
     *      - *key* - string
     *      - *path* - string
     *      - *lastModified* - string
     *      - *metaData* - array
     *      - *eTag* - string
     *      - *size* - integer
     *      - *storageClass* - string
     *      - *body* - string
     *      - *contentType* - string
     *      - *contentLength* - string
     */
    public function createElasticSyncDocument(array $query): array
    {
        return $this->api(array_merge(["/rest/elastic-sync/document"], $query), 'POST');
    }
                    
    /**
     * @description Gets a temporary url for a single document
     * @tag Sync
     * @param array $query
     *      - *key* - string - required
     *          - The storage key to get temporary url for
     */
    public function getElasticSyncDocumentUrl(array $query)
    {
        return $this->api(array_merge(["/rest/elastic-sync/document/url"], $query));
    }
                    
    /**
     * @description Deletes files from sync documents
     * @tag Sync
     * @param array $query
     *      - *keyList* - array - required
     *          - List of storage keys to delete
     */
    public function deleteElasticSyncDocument(array $query)
    {
        return $this->api(array_merge(["/rest/elastic-sync/documents"], $query), 'DELETE');
    }
                
    /**
     * @description Lists documents for a single sync
     * @tag Sync
     * @param array $query
     *      - *continuationToken* - string - optional
     *          - token from previous request to continue listing documents
     * @return array
     *      - *isTruncated* - boolean
     *      - *nextContinuationToken* - string
     *      - *commonPrefixes* - array
     */
    public function getElasticSyncDocuments(array $query = []): array
    {
        return $this->api(array_merge(["/rest/elastic-sync/documents"], $query));
    }
    
}
