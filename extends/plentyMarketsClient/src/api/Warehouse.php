<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Warehouse extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Lists all warehouses. The results can be filtered.
     * @tag Warehouse
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'repairWarehouse' = Associated repair warehouse.</li><li>'storageLocations' = The storage locations of the warehouse.</li><li>'dimensions' = The dimensions of the warehouse</li></ul>
     *      - *id* - int - optional
     *          - The ID of the warehouse. Allowed operators: `eq`, `not`, `in`, `nin`
     *      - *name* - string - optional
     *          - The name of the warehouse. Allowed operators: `eq`, `not`, `in`, `nin`, `like`
     *      - *priority* - int - optional
     *          - The priority of the warehouse. Allowed operators: `eq`, `not`, `in`, `nin`, `lt`, `lte`, `gt`, `gte`, `between`
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Warehouse
     */
    public function getWarehouses(array $query = []): array
    {
        return $this->api(array_merge(["/rest/warehouses"], $query));
    }
                
    /**
     * @description Creates a new warehouse.
     * @tag Warehouse
     * @return array
     *      - *id* - integer
     *          - The id of the warehouse
     *      - *name* - string
     *          - The name of the warehouse
     *      - *note* - string
     *          - A note for this warehouse
     *      - *typeId* - integer
     *          - The id of the warehouse type. The following types are available:
<ul>
    <li>0 = Sales warehouse</li>
    <li>1 = Repair warehouse</li>
    <li>4 = Storage warehouse</li>
    <li>5 = Transit warehouse</li>
    <li>6 = Distribution warehouse</li>
    <li>7 = Other</li>
</ul>
     *      - *priority* - integer
     *          - The priority of the warehouse. The higher the priority, the more important the warehouse is. The priority is used for automatic warehouse detection.
     *      - *allocationReferrerIds* - array
     *          - Allocation Referrer Ids by automatic warehouse detection
     *      - *onStockAvailability* - integer
     *          - Displayed availability of a variation if stock is available
     *      - *outOfStockAvailability* - integer
     *          - Displayed availability of a variation if no stock is available
     *      - *splitByShippingProfile* - boolean
     *          - Flag that indicates if for this warehouse orders are split by shipping profiles or not. <ul><li>True = Orders are split by shipping profiles</li> <li>False = Orders will not be split by shipping profiles</li></ul>
     *      - *storageLocationType* - string
     *          - The storage location type. The following types are available: <ul><li>none</li> <li>small</li><li>medium</li> <li>large</li> <li>europallet</li></ul>
     *      - *storageLocationZone* - integer
     *          - The zone that the storage location is in
     *      - *repairWarehouseId* - integer
     *          - The id of the associated repair warehouse
     *      - *isInventoryModeActive* - boolean
     *          - Flag that indicates if the stocktaking mode for this warehouse is active or not. <ul><li>True = active</li> <li>False = inactive</li></ul>
     *      - *logisticsType* - string
     *          - The id of the logistics type of the warehouse. The logistics type states which service provider fulfills the storage and shipping. The following logistics types are available:
<ul>
<li>own</li>
<li>amazon</li>
<li>dhlFulfillment</li>
</ul>
     *      - *updatedAt* - string
     *          - The updated at timestamp of the warehouse
     *      - *createdAt* - string
     *          - The created at timestamp of the warehouse
     */
    public function createWarehouse(): array
    {
        return $this->api("/rest/warehouses", 'POST');
    }
                    
    /**
     * @description Creates a storage location layout
     * @tag Warehouse
     * @param array $query
     *      - *parentId* - int - required
     *          - The parent ID of the storage location dimension
     *      - *warehouseId* - int - required
     *          - The warehouse ID of the storage location dimension
     *      - *level* - int - required
     *          - The level of the storage location dimension
     *      - *name* - string - required
     *          - The name of the storage location dimension
     *      - *shortcut* - string - required
     *          - The shortcut of the storage location dimension
     *      - *separator* - string - required
     *          - The separator of the storage location dimension
     *      - *isActiveForPickupPath* - int - required
     *          - Active flag for pickup path of the storage location dimension
     *      - *dimensionId* - int - required
     *          - The storage location dimension ID of the storage location level
     *      - *position* - int - required
     *          - The position of the storage location level
     *      - *levelId* - int - required
     *          - The storage location level ID of the storage location
     *      - *label* - string - required
     *          - The label of the storage location
     *      - *purposeKey* - string - required
     *          - The location type key of the storage location
     *      - *statusKey* - string - required
     *          - The location status key of the storage location
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location dimension
     *      - *parentId* - integer
     *          - The parent ID of the storage location dimension
     *      - *warehouseId* - integer
     *          - The warehouse ID of the storage location dimension
     *      - *level* - integer
     *          - The level of the storage location dimension
     *      - *name* - string
     *          - The name of the storage location dimension
     *      - *shortcut* - string
     *          - The shortcut of the storage location dimension
     *      - *separator* - string
     *          - The separator of the storage location dimension
     *      - *displayInName* - integer
     *          - If true, the dimension prefix will be shown in the storage location name
     *      - *isActiveForPickupPath* - integer
     *          - Active flag for pickup path of the storage location dimension
     */
    public function createWarehousesLayout(array $query): array
    {
        return $this->api(array_merge(["/rest/warehouses/layouts"], $query), 'POST');
    }
                    
    /**
     * @description Deletes multiple storage locations
     * @tag Warehouse
     * @param array $query
     *      - *warehouseLocationIds* - array - required
     *          - An array containing all the ID's for the storage locations that need to be deleted
     */
    public function deleteWarehousesLocation(array $query)
    {
        return $this->api(array_merge(["/rest/warehouses/locations"], $query), 'DELETE');
    }
                
    /**
     * @description Lists all storage locations.
     * @tag Warehouse
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of WarehouseLocation
     */
    public function getWarehousesLocations(): array
    {
        return $this->api("/rest/warehouses/locations");
    }
                
    /**
     * @description Creates a storage location.
     * @tag Warehouse
     * @param array $query
     *      - *levelId* - int - required
     *          - The storage location level ID of the storage location
     *      - *label* - string - required
     *          - The label of the storage location
     *      - *purposeKey* - string - required
     *          - The location type key of the storage location
     *      - *statusKey* - string - required
     *          - The location status key of the storage location
     *      - *position* - int - required
     *          - The position of the storage location
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location
     *      - *levelId* - integer
     *          - The level ID of the storage location
     *      - *label* - string
     *          - The label of the storage location
     *      - *purposeKey* - string
     *          - The purpose key of the storage location
     *      - *statusKey* - string
     *          - The status key of the storage location
     *      - *position* - integer
     *          - The position of the storage location
     *      - *fullLabel* - string
     *          - The label with level path name
     *      - *type* - string
     *          - The type of the storage location (array values: 'small','medium','large','europallet')
     *      - *notes* - string
     *          - The notes of the storage location
     */
    public function createWarehousesLocation(array $query): array
    {
        return $this->api(array_merge(["/rest/warehouses/locations"], $query), 'POST');
    }
                    
    /**
     * @description Gets availability for storage location
     * @tag Warehouse
     * @param int $warehouseLocationId The ID of the storage location
     * @return array
     */
    public function getWarehousesLocationsAvailabilityByWarehouseLocationId(int $warehouseLocationId): array
    {
        return $this->api("/rest/warehouses/locations/availability/{$warehouseLocationId}");
    }
                    
    /**
     * @description Gets storage location details
     * @tag Warehouse

     */
    public function getWarehousesLocationsDetails()
    {
        return $this->api("/rest/warehouses/locations/details");
    }
                    
    /**
     * @description Creates a storage location dimension.
     * @tag Warehouse
     * @param array $query
     *      - *parentId* - int - required
     *          - The parent ID of the storage location dimension
     *      - *warehouseId* - int - required
     *          - The warehouse ID of the storage location dimension
     *      - *level* - int - required
     *          - The level of the storage location dimension
     *      - *name* - string - required
     *          - The name of the storage location dimension
     *      - *shortcut* - string - required
     *          - The shortcut of the storage location dimension
     *      - *separator* - string - required
     *          - The separator of the storage location dimension
     *      - *isActiveForPickupPath* - int - required
     *          - Active flag for pickup path of the storage location dimension
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location dimension
     *      - *parentId* - integer
     *          - The parent ID of the storage location dimension
     *      - *warehouseId* - integer
     *          - The warehouse ID of the storage location dimension
     *      - *level* - integer
     *          - The level of the storage location dimension
     *      - *name* - string
     *          - The name of the storage location dimension
     *      - *shortcut* - string
     *          - The shortcut of the storage location dimension
     *      - *separator* - string
     *          - The separator of the storage location dimension
     *      - *displayInName* - integer
     *          - If true, the dimension prefix will be shown in the storage location name
     *      - *isActiveForPickupPath* - integer
     *          - Active flag for pickup path of the storage location dimension
     */
    public function createWarehousesLocationsDimension(array $query): array
    {
        return $this->api(array_merge(["/rest/warehouses/locations/dimensions"], $query), 'POST');
    }
                    
    /**
     * @description Deletes a storage location dimension
     * @tag Warehouse
     * @param int $warehouseLocationDimensionId The ID of the storage location dimension
     */
    public function deleteWarehousesLocationsDimensionByWarehouseLocationDimensionId(int $warehouseLocationDimensionId)
    {
        return $this->api("/rest/warehouses/locations/dimensions/{$warehouseLocationDimensionId}", 'DELETE');
    }
                
    /**
     * @description Gets a storage location dimension by ID. The storage location ID is required.
     * @tag Warehouse
     * @param int $warehouseLocationDimensionId The ID of the storage location dimension
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location dimension
     *      - *parentId* - integer
     *          - The parent ID of the storage location dimension
     *      - *warehouseId* - integer
     *          - The warehouse ID of the storage location dimension
     *      - *level* - integer
     *          - The level of the storage location dimension
     *      - *name* - string
     *          - The name of the storage location dimension
     *      - *shortcut* - string
     *          - The shortcut of the storage location dimension
     *      - *separator* - string
     *          - The separator of the storage location dimension
     *      - *displayInName* - integer
     *          - If true, the dimension prefix will be shown in the storage location name
     *      - *isActiveForPickupPath* - integer
     *          - Active flag for pickup path of the storage location dimension
     */
    public function getWarehousesLocationsDimensionByWarehouseLocationDimensionId(int $warehouseLocationDimensionId): array
    {
        return $this->api("/rest/warehouses/locations/dimensions/{$warehouseLocationDimensionId}");
    }
                
    /**
     * @description Updates a storage location dimension
     * @tag Warehouse
     * @param int $warehouseLocationDimensionId The ID of the storage location dimension
     * @param array $query
     *      - *name* - string - optional
     *          - The name of the storage location dimension
     *      - *displayInName* - boolean - optional
     *          - The display in name flag of the storage location dimension
     *      - *shortcut* - string - optional
     *          - The shortcut of the storage location dimension
     *      - *separator* - string - optional
     *          - The separator of the storage location dimension
     *      - *isActiveForPickupPath* - boolean - optional
     *          - Active flag for pickup path of the storage location dimension
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location dimension
     *      - *parentId* - integer
     *          - The parent ID of the storage location dimension
     *      - *warehouseId* - integer
     *          - The warehouse ID of the storage location dimension
     *      - *level* - integer
     *          - The level of the storage location dimension
     *      - *name* - string
     *          - The name of the storage location dimension
     *      - *shortcut* - string
     *          - The shortcut of the storage location dimension
     *      - *separator* - string
     *          - The separator of the storage location dimension
     *      - *displayInName* - integer
     *          - If true, the dimension prefix will be shown in the storage location name
     *      - *isActiveForPickupPath* - integer
     *          - Active flag for pickup path of the storage location dimension
     */
    public function updateWarehousesLocationsDimensionByWarehouseLocationDimensionId(int $warehouseLocationDimensionId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/warehouses/locations/dimensions/{$warehouseLocationDimensionId}"], $query), 'PUT');
    }
                    
    /**
     * @description Edits the purpose and status for a group of storage locations by passing the group storage location ID (can be sent as mass assignment)
     * @tag Warehouse
     * @param array $query
     *      - *purpose* - string - required
     *          - The purpose key value for storage location purposeKey field
     *      - *status* - string - required
     *          - The status key value for storage location status field
     * @return array
     */
    public function updateWarehousesLocationsGroup(array $query): array
    {
        return $this->api(array_merge(["/rest/warehouses/locations/group"], $query), 'PUT');
    }
                    
    /**
     * @description Creates a storage location inventory.
     * @tag Warehouse
     * @param array $query
     *      - *status* - int - required
     *          - The storage location inventory status
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location
     *      - *userId* - integer
     *          - The user ID of the storage location
     *      - *user_id* - integer
     *          - deprecated - use userID instead
     *      - *status* - integer
     *          - The status of the storage location stocktaking
     *      - *warehouseLocationId* - integer
     *          - The  storage location ID
     *      - *warehouse_location* - integer
     *          - deprecated - use WarehouseLocationId
     */
    public function createWarehousesLocationsInventory(array $query): array
    {
        return $this->api(array_merge(["/rest/warehouses/locations/inventory"], $query), 'POST');
    }
                    
    /**
     * @description Gets a storage location list of inventories by storage location id. The storage location ID is required.
     * @tag Warehouse
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of WarehouseLocationInventory
     */
    public function getWarehousesLocationsInventoryList(): array
    {
        return $this->api("/rest/warehouses/locations/inventory/list");
    }
                    
    /**
     * @description Gets a storage location inventory by ID. The storage location inventory ID is required.
     * @tag Warehouse
     * @param int $warehouseLocationInventoryId 
     * @param array $query
     *      - *warehouseLocationId* - int - required
     *          - The ID of the storage location
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location
     *      - *userId* - integer
     *          - The user ID of the storage location
     *      - *user_id* - integer
     *          - deprecated - use userID instead
     *      - *status* - integer
     *          - The status of the storage location stocktaking
     *      - *warehouseLocationId* - integer
     *          - The  storage location ID
     *      - *warehouse_location* - integer
     *          - deprecated - use WarehouseLocationId
     */
    public function getWarehousesLocationsInventoryByWarehouseLocationInventoryId(int $warehouseLocationInventoryId, array $query): array
    {
        return $this->api(array_merge(["/rest/warehouses/locations/inventory/{$warehouseLocationInventoryId}"], $query));
    }
                    
    /**
     * @description Creates a storage location level.
     * @tag Warehouse
     * @param array $query
     *      - *parentId* - int - required
     *          - The parent ID of the storage location level
     *      - *dimensionId* - int - required
     *          - The storage location dimension ID of the storage location level
     *      - *position* - int - required
     *          - The position of the storage location level
     *      - *name* - string - required
     *          - The name of the storage location level
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location level
     *      - *parentId* - integer
     *          - The parent ID of the storage location level
     *      - *dimensionId* - integer
     *          - The storage location dimension id of the storage location level
     *      - *position* - integer
     *          - The position of the storage location level
     *      - *name* - string
     *          - The name of the storage location level
     *      - *type* - string
     *          - The type of the storage location ['small','medium','large','europallet']
     *      - *pathName* - string
     *          - The complete path name from the level
     */
    public function createWarehousesLocationsLevel(array $query): array
    {
        return $this->api(array_merge(["/rest/warehouses/locations/levels"], $query), 'POST');
    }
                    
    /**
     * @description Moves a storage location level position
     * @tag Warehouse
     * @param array $query
     *      - *toMove* - int - required
     *          - The storage location level ID that needs needs to be moved
     *      - *target* - int - required
     *          - The storage location level ID that stands as position for the storage location level that needs to be moved
     *      - *side* - string - required
     *          - The actual position from the left or right side of target
     */
    public function createWarehousesLocationsLevelsPosition(array $query)
    {
        return $this->api(array_merge(["/rest/warehouses/locations/levels/positions"], $query), 'POST');
    }
                    
    /**
     * @description Deletes a storage location level
     * @tag Warehouse
     * @param int $warehouseLocationLevelId The ID of the storage location level
     */
    public function deleteWarehousesLocationsLevelByWarehouseLocationLevelId(int $warehouseLocationLevelId)
    {
        return $this->api("/rest/warehouses/locations/levels/{$warehouseLocationLevelId}", 'DELETE');
    }
                
    /**
     * @description Gets a storage location level by ID. The storage location ID is required.
     * @tag Warehouse
     * @param int $warehouseLocationLevelId The ID of the storage location level
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location level
     *      - *parentId* - integer
     *          - The parent ID of the storage location level
     *      - *dimensionId* - integer
     *          - The storage location dimension id of the storage location level
     *      - *position* - integer
     *          - The position of the storage location level
     *      - *name* - string
     *          - The name of the storage location level
     *      - *type* - string
     *          - The type of the storage location ['small','medium','large','europallet']
     *      - *pathName* - string
     *          - The complete path name from the level
     */
    public function getWarehousesLocationsLevelByWarehouseLocationLevelId(int $warehouseLocationLevelId): array
    {
        return $this->api("/rest/warehouses/locations/levels/{$warehouseLocationLevelId}");
    }
                
    /**
     * @description Updates a storage location level
     * @tag Warehouse
     * @param int $warehouseLocationLevelId The ID of the storage location level
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location level
     *      - *parentId* - integer
     *          - The parent ID of the storage location level
     *      - *dimensionId* - integer
     *          - The storage location dimension id of the storage location level
     *      - *position* - integer
     *          - The position of the storage location level
     *      - *name* - string
     *          - The name of the storage location level
     *      - *type* - string
     *          - The type of the storage location ['small','medium','large','europallet']
     *      - *pathName* - string
     *          - The complete path name from the level
     */
    public function updateWarehousesLocationsLevelByWarehouseLocationLevelId(int $warehouseLocationLevelId): array
    {
        return $this->api("/rest/warehouses/locations/levels/{$warehouseLocationLevelId}", 'PUT');
    }
                    
    /**
     * @description Creates multiple storage location dimension.
     * @tag Warehouse
     * @param array $query
     *      - *dimensions* - array - required
     *          - The dimensions array that contains data for creating multiple dimensions
     * @return array
     */
    public function createWarehousesLocationsMultipleDimension(array $query): array
    {
        return $this->api(array_merge(["/rest/warehouses/locations/multiple_dimensions"], $query), 'POST');
    }
                    
    /**
     * @description Moves a storage location position
     * @tag Warehouse
     * @param array $query
     *      - *toMove* - int - required
     *          - The storage location ID that needs needs to be moved
     *      - *target* - int - required
     *          - The storage location ID that stands as position for the storage location that needs to be moved
     *      - *side* - string - required
     *          - The actual position from the left or right side of target
     */
    public function createWarehousesLocationsPosition(array $query)
    {
        return $this->api(array_merge(["/rest/warehouses/locations/positions"], $query), 'POST');
    }
                    
    /**
     * @description Generates storage location preview and saves it
     * @tag Warehouse
     * @param array $query
     *      - *dimensions* - array - required
     *          - The storage location dimensions used by the generator
     *      - *storageLocationData* - array - required
     *          - The storage location data used by the generator
     *      - *levelData* - array - required
     *          - The storage location level data used by the generator
     *      - *save* - int - required
     *          - The save parameter that triggers the preview method or the process save method
     */
    public function createWarehousesLocationsPreview(array $query)
    {
        return $this->api(array_merge(["/rest/warehouses/locations/previews"], $query), 'POST');
    }
                    
    /**
     * @description Lists all storage locations stock.
     * @tag Warehouse
     * @param int $warehouseLocationId 
     * @param array $query
     *      - *$warehouseLocationId* - int - required
     *          - The ID of the warehouse
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of WarehouseLocation
     */
    public function getWarehousesLocationsStockByWarehouseLocationId(int $warehouseLocationId, array $query): array
    {
        return $this->api(array_merge(["/rest/warehouses/locations/stock/{$warehouseLocationId}"], $query));
    }
                    
    /**
     * @description Generates the storage location label
     * @tag Warehouse
     * @param int $warehouseId The actual warehouse ID
     * @param array $query
     *      - *warehouseLocationIds* - string - required
     *          - A string with all storage location ID's for which a label needs to be generated
     */
    public function createWarehousesLocationsLabelByWarehouseId(int $warehouseId, array $query)
    {
        return $this->api(array_merge(["/rest/warehouses/locations/{$warehouseId}/label"], $query), 'POST');
    }
                    
    /**
     * @description Deletes a storage location
     * @tag Warehouse
     * @param int $warehouseLocationId The ID of the storage location
     */
    public function deleteWarehousesLocationByWarehouseLocationId(int $warehouseLocationId)
    {
        return $this->api("/rest/warehouses/locations/{$warehouseLocationId}", 'DELETE');
    }
                
    /**
     * @description Gets a storage location by ID. The storage location ID is required.
     * @tag Warehouse
     * @param int $warehouseLocationId The ID of the storage location
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location
     *      - *levelId* - integer
     *          - The level ID of the storage location
     *      - *label* - string
     *          - The label of the storage location
     *      - *purposeKey* - string
     *          - The purpose key of the storage location
     *      - *statusKey* - string
     *          - The status key of the storage location
     *      - *position* - integer
     *          - The position of the storage location
     *      - *fullLabel* - string
     *          - The label with level path name
     *      - *type* - string
     *          - The type of the storage location (array values: 'small','medium','large','europallet')
     *      - *notes* - string
     *          - The notes of the storage location
     */
    public function getWarehousesLocationByWarehouseLocationId(int $warehouseLocationId): array
    {
        return $this->api("/rest/warehouses/locations/{$warehouseLocationId}");
    }
                
    /**
     * @description Updates a storage location
     * @tag Warehouse
     * @param int $warehouseLocationId The ID of the storage location
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location
     *      - *levelId* - integer
     *          - The level ID of the storage location
     *      - *label* - string
     *          - The label of the storage location
     *      - *purposeKey* - string
     *          - The purpose key of the storage location
     *      - *statusKey* - string
     *          - The status key of the storage location
     *      - *position* - integer
     *          - The position of the storage location
     *      - *fullLabel* - string
     *          - The label with level path name
     *      - *type* - string
     *          - The type of the storage location (array values: 'small','medium','large','europallet')
     *      - *notes* - string
     *          - The notes of the storage location
     */
    public function updateWarehousesLocationByWarehouseLocationId(int $warehouseLocationId): array
    {
        return $this->api("/rest/warehouses/locations/{$warehouseLocationId}", 'PUT');
    }
                    
    /**
     * @description Gets a storage location structure by warehouse ID. The warehouse ID is required.
     * @tag Warehouse
     * @param int $warehouseId The actual warehouse ID
     */
    public function getWarehousesStructureByWarehouseId(int $warehouseId)
    {
        return $this->api("/rest/warehouses/structure/{$warehouseId}");
    }
                    
    /**
     * @description Gets a storage location structure moving by warehouse ID. The warehouse ID is required.
     * @tag Warehouse
     * @param int $warehouseId The actual warehouse ID
     */
    public function getWarehousesStructureMovingByWarehouseId(int $warehouseId)
    {
        return $this->api("/rest/warehouses/structure/{$warehouseId}/moving");
    }
                    
    /**
     * @description Deletes a warehouse. The ID of the warehouse must be specified.
     * @tag Warehouse
     * @param int $id The ID of the warehouse
     * @param array $query
     *      - *newWarehouseId* - int - optional
     *          - The ID of the warehouse to which the orders should be transferred
     */
    public function deleteWarehouseById(int $id, array $query = [])
    {
        return $this->api(array_merge(["/rest/warehouses/{$id}"], $query), 'DELETE');
    }
                
    /**
     * @description Updates an existing warehouse. The ID of the warehouse must be specified.
     * @tag Warehouse
     * @param int $id The ID of the warehouse
     * @return array
     *      - *id* - integer
     *          - The id of the warehouse
     *      - *name* - string
     *          - The name of the warehouse
     *      - *note* - string
     *          - A note for this warehouse
     *      - *typeId* - integer
     *          - The id of the warehouse type. The following types are available:
<ul>
    <li>0 = Sales warehouse</li>
    <li>1 = Repair warehouse</li>
    <li>4 = Storage warehouse</li>
    <li>5 = Transit warehouse</li>
    <li>6 = Distribution warehouse</li>
    <li>7 = Other</li>
</ul>
     *      - *priority* - integer
     *          - The priority of the warehouse. The higher the priority, the more important the warehouse is. The priority is used for automatic warehouse detection.
     *      - *allocationReferrerIds* - array
     *          - Allocation Referrer Ids by automatic warehouse detection
     *      - *onStockAvailability* - integer
     *          - Displayed availability of a variation if stock is available
     *      - *outOfStockAvailability* - integer
     *          - Displayed availability of a variation if no stock is available
     *      - *splitByShippingProfile* - boolean
     *          - Flag that indicates if for this warehouse orders are split by shipping profiles or not. <ul><li>True = Orders are split by shipping profiles</li> <li>False = Orders will not be split by shipping profiles</li></ul>
     *      - *storageLocationType* - string
     *          - The storage location type. The following types are available: <ul><li>none</li> <li>small</li><li>medium</li> <li>large</li> <li>europallet</li></ul>
     *      - *storageLocationZone* - integer
     *          - The zone that the storage location is in
     *      - *repairWarehouseId* - integer
     *          - The id of the associated repair warehouse
     *      - *isInventoryModeActive* - boolean
     *          - Flag that indicates if the stocktaking mode for this warehouse is active or not. <ul><li>True = active</li> <li>False = inactive</li></ul>
     *      - *logisticsType* - string
     *          - The id of the logistics type of the warehouse. The logistics type states which service provider fulfills the storage and shipping. The following logistics types are available:
<ul>
<li>own</li>
<li>amazon</li>
<li>dhlFulfillment</li>
</ul>
     *      - *updatedAt* - string
     *          - The updated at timestamp of the warehouse
     *      - *createdAt* - string
     *          - The created at timestamp of the warehouse
     */
    public function updateWarehouseById(int $id): array
    {
        return $this->api("/rest/warehouses/{$id}", 'PUT');
    }
                    
    /**
     * @description Lists all storage locations for the specified warehouse.
     * @tag Warehouse
     * @param int $warehouseId The ID of the warehouse
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of WarehouseLocation
     */
    public function getWarehousesLocationsByWarehouseId(int $warehouseId): array
    {
        return $this->api("/rest/warehouses/{$warehouseId}/locations");
    }
                    
    /**
     * @description Lists all storage location dimensions.
     * @tag Warehouse
     * @param int $warehouseId The ID of the warehouse
     * @return array
     *      - *id* - integer
     *          - The ID of the storage location dimension
     *      - *parentId* - integer
     *          - The parent ID of the storage location dimension
     *      - *warehouseId* - integer
     *          - The warehouse ID of the storage location dimension
     *      - *level* - integer
     *          - The level of the storage location dimension
     *      - *name* - string
     *          - The name of the storage location dimension
     *      - *shortcut* - string
     *          - The shortcut of the storage location dimension
     *      - *separator* - string
     *          - The separator of the storage location dimension
     *      - *displayInName* - integer
     *          - If true, the dimension prefix will be shown in the storage location name
     *      - *isActiveForPickupPath* - integer
     *          - Active flag for pickup path of the storage location dimension
     */
    public function getWarehousesLocationsDimensionsByWarehouseId(int $warehouseId): array
    {
        return $this->api("/rest/warehouses/{$warehouseId}/locations/dimensions");
    }
                    
    /**
     * @description Lists all storage locations by levelId.
     * @tag Warehouse
     * @param int $warehouseId The ID of the warehouse
     * @param int $warehouseLocationLevelId 
     * @param array $query
     *      - *levelId* - int - required
     *          - The ID of the storage location level
     */
    public function getWarehousesLocationsLevelByWarehouseIdWarehouseLocationLevelId(int $warehouseId, int $warehouseLocationLevelId, array $query)
    {
        return $this->api(array_merge(["/rest/warehouses/{$warehouseId}/locations/level/{$warehouseLocationLevelId}"], $query));
    }
                    
    /**
     * @description Lists all storage location levels.
     * @tag Warehouse
     * @param int $warehouseId The ID of the warehouse
     * @return array
     */
    public function getWarehousesLocationsLevelsByWarehouseId(int $warehouseId): array
    {
        return $this->api("/rest/warehouses/{$warehouseId}/locations/levels");
    }
    
}
