<?php

namespace lujie\amazon\sp;

use DoubleBreak\Spapi\Credentials;
use DoubleBreak\Spapi\Signer;
use lujie\amazon\sp\api\AplusContent20201101;
use lujie\amazon\sp\api\Authorization;
use lujie\amazon\sp\api\CatalogItems20201201;
use lujie\amazon\sp\api\CatalogItems20220401;
use lujie\amazon\sp\api\CatalogItemsV0;
use lujie\amazon\sp\api\DefinitionsProductTypes20200901;
use lujie\amazon\sp\api\EasyShip20220323;
use lujie\amazon\sp\api\FbaInbound;
use lujie\amazon\sp\api\FbaInventory;
use lujie\amazon\sp\api\FbaSmallandLight;
use lujie\amazon\sp\api\Feeds20200904;
use lujie\amazon\sp\api\Feeds20210630;
use lujie\amazon\sp\api\FinancesV0;
use lujie\amazon\sp\api\FulfillmentInboundV0;
use lujie\amazon\sp\api\FulfillmentOutbound20200701;
use lujie\amazon\sp\api\ListingsItems20200901;
use lujie\amazon\sp\api\ListingsItems20210801;
use lujie\amazon\sp\api\ListingsRestrictions20210801;
use lujie\amazon\sp\api\MerchantFulfillmentV0;
use lujie\amazon\sp\api\Messaging;
use lujie\amazon\sp\api\Notifications;
use lujie\amazon\sp\api\OrdersV0;
use lujie\amazon\sp\api\ProductFeesV0;
use lujie\amazon\sp\api\ProductPricing20220501;
use lujie\amazon\sp\api\ProductPricingV0;
use lujie\amazon\sp\api\Replenishment20221107;
use lujie\amazon\sp\api\Reports20200904;
use lujie\amazon\sp\api\Reports20210630;
use lujie\amazon\sp\api\Sales;
use lujie\amazon\sp\api\Sellers;
use lujie\amazon\sp\api\Services;
use lujie\amazon\sp\api\ShipmentInvoicingV0;
use lujie\amazon\sp\api\Shipping;
use lujie\amazon\sp\api\Solicitations;
use lujie\amazon\sp\api\Tokens20210301;
use lujie\amazon\sp\api\Uploads20201101;
use lujie\amazon\sp\api\VendorDirectFulfillmentInventoryV1;
use lujie\amazon\sp\api\VendorDirectFulfillmentOrders20211228;
use lujie\amazon\sp\api\VendorDirectFulfillmentOrdersV1;
use lujie\amazon\sp\api\VendorDirectFulfillmentPaymentsV1;
use lujie\amazon\sp\api\VendorDirectFulfillmentSandboxData20211028;
use lujie\amazon\sp\api\VendorDirectFulfillmentShipping20211228;
use lujie\amazon\sp\api\VendorDirectFulfillmentShippingV1;
use lujie\amazon\sp\api\VendorDirectFulfillmentTransactions20211228;
use lujie\amazon\sp\api\VendorDirectFulfillmentTransactionsV1;
use lujie\amazon\sp\api\VendorInvoices;
use lujie\amazon\sp\api\VendorOrders;
use lujie\amazon\sp\api\VendorShipments;
use lujie\amazon\sp\api\VendorTransactionStatus;
use lujie\common\account\models\Account;
use lujie\common\oauth\models\AuthToken;
use lujie\common\oauth\OAuthClientFactory;
use lujie\data\loader\DataLoaderInterface;
use lujie\extend\authclient\RestOAuth2;
use lujie\extend\psr\http\Yii2HttpHandler;
use Yii;
use yii\authclient\CacheStateStorage;
use yii\authclient\InvalidResponseException;
use yii\authclient\OAuth2;
use yii\authclient\StateStorageInterface;
use yii\base\BaseObject;
use yii\di\Instance;
use yii\helpers\Inflector;
use yii\helpers\StringHelper;
use yii\httpclient\Exception;

/**
* This class is autogenerated by the OpenAPI gii generator
*/
class BaseAmazonSPClientFactory extends BaseObject
{
    public $clientId;
    public $clientSecret;
    public $accessKey;
    public $accessSecret;
    public $roleARN;
    public $region = AmazonSPConst::REGION_EU_WEST_1;
    public $host = AmazonSPConst::HOST_EU_WEST_1;

    /**
     * @var DataLoaderInterface
     */
    public $configLoader;

    /**
     * @var CacheStateStorage
     */
    public $stateStorage = [
        'class' => CacheStateStorage::class,
    ];

    /**
     * @var Yii2HttpHandler
     */
    public $httpHandler = [];

    /**
     * @var Signer
     */
    protected $signer;

    /**
     * @var array
     */
    private static $_clients = [];

    /**
     * @throws \yii\base\InvalidConfigException
     * @inheritdoc
     */
    public function init(): void
    {
        parent::init();
        $this->stateStorage = Instance::ensure($this->stateStorage, StateStorageInterface::class);
        $this->httpHandler = Instance::ensure($this->httpHandler, Yii2HttpHandler::class);
        $this->signer = new Signer();
        if ($this->configLoader) {
            $this->configLoader = Instance::ensure($this->configLoader, DataLoaderInterface::class);
        }
    }

    /*
     * @param Account $account
     */
    protected function getConfig(Account $account): array
    {
        $config = [
            //Guzzle configuration
            'http' => ['handler' => [$this->httpHandler, 'sendAsync']],

            //LWA: Keys needed to obtain access token from Login With Amazon Service
            'refresh_token' => null,
            'client_id' => $this->clientId,
            'client_secret' => $this->clientSecret,

            //STS: Keys of the IAM role which are needed to generate Secure Session
            // (a.k.a Secure token) for accessing and assuming the IAM role
            'access_key' => $this->accessKey,
            'secret_key' => $this->accessSecret,
            'role_arn' => $this->roleARN,

            //API: Actual configuration related to the SP API :)
            'region' => $this->region,
            'host' => $this->host
        ];
        if ($this->configLoader) {
            return array_merge($config, $this->configLoader->get($account) ?: []);
        }
        return $config;
    }

    /**
     * @param string $clientClass
     * @param Account $account
     * @param array $config
     * @param string|null $authService
     * @return BaseAmazonSPClient|null
     * @throws \yii\base\InvalidConfigException
     * @inheritdoc
     */
    protected function createClient(string $clientClass, Account $account, ?string $authService = null): ?BaseAmazonSPClient
    {
        $accountId = $account->account_id;
        $key = $clientClass . '-' . $account::class . '-' . $accountId;
        if (empty(self::$_clients[$key])) {
            $authService = $authService ?: $account->type;
            $authToken = AuthToken::find()->userId($accountId)->authService($authService)->one();
            if ($authToken === null) {
                Yii::error("Account {$account->name} is not authed", __METHOD__);
                return null;
            }
            if ($authToken->refresh_token_expires_at && $authToken->refresh_token_expires_at < time()) {
                Yii::error("Refresh token of account {$account->name} is expired", __METHOD__);
                return null;
            }
            $config = $this->getConfig($account);
            $config['refresh_token'] = $authToken->refresh_token;

            $id = Inflector::camel2id(StringHelper::basename(get_class($this))) . '-' . $accountId;
            $tokenStorage = new StateTokenStorage($this->stateStorage, ['keyPrefix' => $id]);
            $credentials = new Credentials($tokenStorage, $this->signer, $config);

            /** @var BaseAmazonSPClient $client */
            $client = new $clientClass($credentials, $config);
            self::$_clients[$key] = $client;
        }
        return self::$_clients[$key];
    }
}
