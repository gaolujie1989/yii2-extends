<?php

namespace lujie\ebay;

use lujie\common\account\models\Account;
use lujie\common\oauth\OAuthClientFactory;
use lujie\ebay\api\BuyBrowseV1;
use lujie\ebay\api\BuyDealV1;
use lujie\ebay\api\BuyFeedV1;
use lujie\ebay\api\BuyFeedV1Beta;
use lujie\ebay\api\BuyMarketingV1Beta;
use lujie\ebay\api\BuyMarketplaceInsightsV1Beta;
use lujie\ebay\api\BuyOfferV1Beta;
use lujie\ebay\api\BuyOrderV2;
use lujie\ebay\api\CommerceCatalogV1Beta;
use lujie\ebay\api\CommerceCharityV1;
use lujie\ebay\api\CommerceIdentityV1;
use lujie\ebay\api\CommerceMediaV1Beta;
use lujie\ebay\api\CommerceNotificationV1;
use lujie\ebay\api\CommerceTaxonomyV1;
use lujie\ebay\api\CommerceTranslationV1Beta;
use lujie\ebay\api\DeveloperAnalyticsV1Beta;
use lujie\ebay\api\DeveloperClientRegistrationV1;
use lujie\ebay\api\DeveloperKeyManagementV1;
use lujie\ebay\api\SellAccountV1;
use lujie\ebay\api\SellAccountV2;
use lujie\ebay\api\SellAnalyticsV1;
use lujie\ebay\api\SellComplianceV1;
use lujie\ebay\api\SellFeedV1;
use lujie\ebay\api\SellFinancesV1;
use lujie\ebay\api\SellFulfillmentV1;
use lujie\ebay\api\SellFulfillmentV1Dispute;
use lujie\ebay\api\SellInventoryV1;
use lujie\ebay\api\SellLogisticsV1;
use lujie\ebay\api\SellMarketingV1;
use lujie\ebay\api\SellMetadataV1;
use lujie\ebay\api\SellNegotiationV1;
use lujie\ebay\api\SellRecommendationV1;
use yii\authclient\InvalidResponseException;
use yii\authclient\OAuth2;
use yii\base\BaseObject;
use yii\httpclient\Exception;

/**
* This class is autogenerated by the OpenAPI gii generator
*/
class BaseEbayRestClientFactory extends BaseObject
{

    public $clientId;
    public $clientSecret;
    public $requestOptions = [];

    /**
     * @return array
     */
    protected function getConfig(): array
    {
        return [
            'clientId' => $this->clientId,
            'clientSecret' => $this->clientSecret,
            'requestOptions' => $this->requestOptions,
        ];
    }

    /**
     * @param Account $account
     * @return SellFulfillmentV1Dispute|OAuth2|null
     * @throws InvalidResponseException
     * @throws Exception
     */
    public function getSellFulfillmentV1Dispute(Account $account): SellFulfillmentV1Dispute|OAuth2|null
    {
        return OAuthClientFactory::createClient(SellFulfillmentV1Dispute::class, $account, $this->getConfig());
    }
}
