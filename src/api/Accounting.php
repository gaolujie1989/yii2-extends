<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Accounting extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Creates an accounting location for a client. The plenty ID of the client must be specified.
     * @tag Accounting
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the accounting location
     *      - *countryId* - integer
     *          - The ID of the country of the accounting location
     *      - *name* - string
     *          - The name of the accounting location
     *      - *clientId* - integer
     *          - The ID of the client that the accounting location belongs to
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the accounting location belongs to
     */
    public function createAccountingLocation(array $data): array
    {
        return $this->api("/rest/accounting/locations", 'POST', $data);
    }
                    
    /**
     * @description Get all unique posting accounts from the PostingAccountRepositoryContract.
     * @tag Accounting
     * @return array
     */
    public function getAccountingLocationsExistingAccounts(): array
    {
        return $this->api("/rest/accounting/locations/existing_accounts");
    }
                    
    /**
     * @description Get all posting accounts from the PostingAccountRepositoryContract.
     * @tag Accounting
     * @return array
     */
    public function getAccountingLocationsPostingAccounts(): array
    {
        return $this->api("/rest/accounting/locations/posting_accounts");
    }
                
    /**
     * @description Save all posting accounts.
     * @tag Accounting
     * @return array
     */
    public function createAccountingLocationsPostingAccount(): array
    {
        return $this->api("/rest/accounting/locations/posting_accounts", 'POST');
    }
                    
    /**
     * @description Delete a posting account specified by the id.
     * @tag Accounting
     * @param int $id The ID of the posting account
     */
    public function deleteAccountingLocationsPostingAccountById(int $id)
    {
        return $this->api("/rest/accounting/locations/posting_accounts/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets posting account by the unique id
     * @tag Accounting
     * @param int $id 
     * @return array
     *      - *id* - integer
     *      - *locationId* - integer
     *      - *type* - string
     *      - *position* - integer
     *      - *subtype* - string
     *      - *name* - string
     *      - *account* - string
     */
    public function getAccountingLocationsPostingAccountById(int $id): array
    {
        return $this->api("/rest/accounting/locations/posting_accounts/{$id}");
    }
                
    /**
     * @description Lists revenue account configurations of a system. The revenue accounts are returned as paginated result. By default 50 revenue accounts are on one page.
     * @tag Accounting
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of revenue accounts to be displayed per page. The default number of orders per page is 50.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of RevenueAccountLocationConfiguration
     */
    public function eachAccountingLocationsRevenueAccountConfigurations(array $query = []): Iterator
    {
        return $this->eachInternal('getAccountingLocationsRevenueAccountConfigurations', func_get_args());
    }
        
    /**
     * @description Lists revenue account configurations of a system. The revenue accounts are returned as paginated result. By default 50 revenue accounts are on one page.
     * @tag Accounting
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of revenue accounts to be displayed per page. The default number of orders per page is 50.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of RevenueAccountLocationConfiguration
     */
    public function batchAccountingLocationsRevenueAccountConfigurations(array $query = []): Iterator
    {
        return $this->batchInternal('getAccountingLocationsRevenueAccountConfigurations', func_get_args());
    }
    
    /**
     * @description Lists revenue account configurations of a system. The revenue accounts are returned as paginated result. By default 50 revenue accounts are on one page.
     * @tag Accounting
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of revenue accounts to be displayed per page. The default number of orders per page is 50.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of RevenueAccountLocationConfiguration
     */
    public function getAccountingLocationsRevenueAccountConfigurations(array $query = []): array
    {
        return $this->api(array_merge(["/rest/accounting/locations/revenue_account_configurations"], $query));
    }
                    
    /**
     * @description Deletes an accounting location. The ID of the accounting location must be specified. Standard accounting locations can not be deleted.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location
     */
    public function deleteAccountingLocationByLocationId(int $locationId)
    {
        return $this->api("/rest/accounting/locations/{$locationId}", 'DELETE');
    }
                
    /**
     * @description Gets an accounting location. The ID of the accounting location must be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location
     * @return array
     *      - *id* - integer
     *          - The ID of the accounting location
     *      - *countryId* - integer
     *          - The ID of the country of the accounting location
     *      - *name* - string
     *          - The name of the accounting location
     *      - *clientId* - integer
     *          - The ID of the client that the accounting location belongs to
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the accounting location belongs to
     */
    public function getAccountingLocationByLocationId(int $locationId): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}");
    }
                
    /**
     * @description Updates an accounting location. The ID of the accounting location must be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the accounting location
     *      - *countryId* - integer
     *          - The ID of the country of the accounting location
     *      - *name* - string
     *          - The name of the accounting location
     *      - *clientId* - integer
     *          - The ID of the client that the accounting location belongs to
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the accounting location belongs to
     */
    public function updateAccountingLocationByLocationId(int $locationId, array $data): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}", 'PUT', $data);
    }
                    
    /**
     * @description Get the revenue account configuration of a country. The ID of the accounting location that the country is associated with as well as the ID of the country must be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location.
     * @param int $countryId The ID of the country.
     * @return array
     *      - *countryId* - integer
     *          - The ID of the country that the account configuration belongs to
     *      - *revenueAccountLocationId* - integer
     *          - The ID configuration of the revenue account that these accounts are for.
     */
    public function getAccountingLocationsCountriesRevenueAccountsByLocationIdCountryId(int $locationId, int $countryId): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/countries/{$countryId}/revenue_accounts");
    }
                    
    /**
     * @description Gets the debtor account configuration of an accounting location. The ID of the accounting location has to be specified. The debtor account configuration can contain one standard debtor account only or e.g. several accounts for each country of delivery.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location.
     * @return array
     *      - *id* - integer
     *          - The ID of the debtor account configuration
     *      - *locationId* - integer
     *          - The ID of the accounting location that the debtor account is associated with.
     *      - *mode* - string
     *          - The mode describes the criteria based on which pending amounts are assigned to a debtor account. The following modes are available:
<ul>
<li>character        = The debtor accounts are selected based on the first character of customer information. The information and the order of the information that will be used are defined with the sequence. There are 3 different sequences available.</li>
<li>payment          = The debtor accounts are selected based on the payment method.</li>
<li>country          = The debtor accounts are selected based on the country of delivery.</li>
<li>country_payment  = The debtor accounts are selected based on two criteria. The first criteria is the country and if the country is same as the country of the accounting location then the payment method is used to select the deptor account.</li>
</ul>
     *      - *sequence* - string
     *          - The sequence defines the order in which customer information will be used for the debtor account assignment if the character made has been chosen. The following sequences are available:
<ul>
<li>FNV = stands for the sequence: company, lastname, firstname</li>
<li>NVF = stands for the sequence: lastname, firstname, company</li>
<li>NFV = stands for the sequence: lastname, company, firstname</li>
</ul>
     *      - *standard* - string
     *          - The standard debtor account that will be used if no matching debtor account can be found.
     *      - *save* - boolean
     *          - Flag that indicates if the debtor account shall be saved within the contact data.
     */
    public function getAccountingLocationsDebtorAccountConfigurationsByLocationId(int $locationId): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/debtor_account_configurations");
    }
                
    /**
     * @description Updates the debtor account configuration of an accounting location. The ID of the accounting location has to be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the debtor account configuration
     *      - *locationId* - integer
     *          - The ID of the accounting location that the debtor account is associated with.
     *      - *mode* - string
     *          - The mode describes the criteria based on which pending amounts are assigned to a debtor account. The following modes are available:
<ul>
<li>character        = The debtor accounts are selected based on the first character of customer information. The information and the order of the information that will be used are defined with the sequence. There are 3 different sequences available.</li>
<li>payment          = The debtor accounts are selected based on the payment method.</li>
<li>country          = The debtor accounts are selected based on the country of delivery.</li>
<li>country_payment  = The debtor accounts are selected based on two criteria. The first criteria is the country and if the country is same as the country of the accounting location then the payment method is used to select the deptor account.</li>
</ul>
     *      - *sequence* - string
     *          - The sequence defines the order in which customer information will be used for the debtor account assignment if the character made has been chosen. The following sequences are available:
<ul>
<li>FNV = stands for the sequence: company, lastname, firstname</li>
<li>NVF = stands for the sequence: lastname, firstname, company</li>
<li>NFV = stands for the sequence: lastname, company, firstname</li>
</ul>
     *      - *standard* - string
     *          - The standard debtor account that will be used if no matching debtor account can be found.
     *      - *save* - boolean
     *          - Flag that indicates if the debtor account shall be saved within the contact data.
     */
    public function updateAccountingLocationsDebtorAccountConfigurationByLocationId(int $locationId, array $data): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/debtor_account_configurations", 'PUT', $data);
    }
                    
    /**
     * @description Lists the debtor accounts of an accounting location by mode. The ID of the accounting location and the mode have to be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location.
     * @param string $mode The mode defines how pending amounts are assigned to debtor accounts. The following modes are available:
     <ul>
      <li>character        = The debtor accounts are selected based on the first character of customer information. The information and the order of the information that will be used are defined with the sequence. There are 3 different sequences available.</li>
      <li>payment          = The debtor accounts are selected based on the payment method.</li>
      <li>country          = The debtor accounts are selected based on the country of delivery.</li>
      <li>country_payment  = The debtor accounts are selected based on two criteria. The first criteria is the country and if the country is same as the country of the accounting location then the payment method is used to select the deptor account.</li>
     </ul>
     */
    public function getAccountingLocationsDebtorAccountByLocationIdMode(int $locationId, string $mode)
    {
        return $this->api("/rest/accounting/locations/{$locationId}/debtor_accounts/{$mode}");
    }
                    
    /**
     * @description Get all posting accounts by locationId.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location.
     * @return array
     */
    public function getAccountingLocationsPostingAccountsByLocationId(int $locationId): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/posting_accounts");
    }
                    
    /**
     * @description Gets a posting key configuration of an accounting location. The ID of the accounting location has to be specified. The posting key configuration can contain up to 4 posting keys.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location.
     * @return array
     *      - *locationId* - integer
     *          - The ID of the accounting location that the configuration belongs to
     */
    public function getAccountingLocationsPostingKeyConfigurationsByLocationId(int $locationId): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/posting_key_configurations");
    }
                
    /**
     * @description Updates a posting key configuration of an accounting location. The ID of the accounting location has to be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location.
     * @param array $data 
     * @return array
     *      - *locationId* - integer
     *          - The ID of the accounting location that the configuration belongs to
     */
    public function updateAccountingLocationsPostingKeyConfigurationByLocationId(int $locationId, array $data): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/posting_key_configurations", 'PUT', $data);
    }
                    
    /**
     * @description Gets the revenue account configuration of an accounting location. A revenue account location configuration contains several revenue accounts. The ID of the accounting location has to be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location.
     * @return array
     *      - *id* - integer
     *          - The ID of the revenue account configuration
     *      - *locationId* - integer
     *          - The ID of the accounting location that the configuration belongs to
     *      - *accountEu* - string
     *          - The account used for revenues that are exempt from VAT and that were sold within the European Union
     *      - *accountExport* - string
     *          - The account used for revenues that are exempt from VAT and that were sold to outside the European Union
     */
    public function getAccountingLocationsRevenueAccountConfigurationsByLocationId(int $locationId): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/revenue_account_configurations");
    }
                
    /**
     * @description Updates the revenue account configuration of an accounting location. The ID of the accounting location has to be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the revenue account configuration
     *      - *locationId* - integer
     *          - The ID of the accounting location that the configuration belongs to
     *      - *accountEu* - string
     *          - The account used for revenues that are exempt from VAT and that were sold within the European Union
     *      - *accountExport* - string
     *          - The account used for revenues that are exempt from VAT and that were sold to outside the European Union
     */
    public function updateAccountingLocationsRevenueAccountConfigurationByLocationId(int $locationId, array $data): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/revenue_account_configurations", 'PUT', $data);
    }
                    
    /**
     * @description Gets accounting location settings. The ID of the accounting location must be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location
     * @return array
     *      - *locationId* - integer
     *          - The ID of the accounting location
     *      - *isInvoiceEUNet* - boolean
     *          - Is the invoice net for EU?
     *      - *isInvoiceExportNet* - boolean
     *          - Is the invoice net for export?
     *      - *showShippingVat* - boolean
     *          - Show the vat for shipping costs on the invoice?
     *      - *isSmallBusiness* - boolean
     *          - Is it a small business?
     *      - *numberOfDecimalPlaces* - integer
     *          - The number of decimal places for prices
     *      - *roundTotalsOnly* - boolean
     *          - Do only round totals?
     *      - *isReverseCharge* - boolean
     *          - Is the reverse charge method activated?
     */
    public function getAccountingLocationsSettingsByLocationId(int $locationId): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/settings");
    }
                
    /**
     * @description Updates accounting location settings. The ID of the accounting location must be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location
     * @param array $data 
     * @return array
     *      - *locationId* - integer
     *          - The ID of the accounting location
     *      - *isInvoiceEUNet* - boolean
     *          - Is the invoice net for EU?
     *      - *isInvoiceExportNet* - boolean
     *          - Is the invoice net for export?
     *      - *showShippingVat* - boolean
     *          - Show the vat for shipping costs on the invoice?
     *      - *isSmallBusiness* - boolean
     *          - Is it a small business?
     *      - *numberOfDecimalPlaces* - integer
     *          - The number of decimal places for prices
     *      - *roundTotalsOnly* - boolean
     *          - Do only round totals?
     *      - *isReverseCharge* - boolean
     *          - Is the reverse charge method activated?
     */
    public function updateAccountingLocationsSettingByLocationId(int $locationId, array $data): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/settings", 'PUT', $data);
    }
                    
    /**
     * @description Get all posting accounts by locationId and type.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location.
     * @param string $type The type of the PostingAccount.
     * @return array
     */
    public function getAccountingLocationsPostingAccountsByLocationIdType(int $locationId, string $type): array
    {
        return $this->api("/rest/accounting/locations/{$locationId}/{$type}/posting_accounts");
    }
                    
    /**
     * @description Get all posting accounts for a country of a webstore.
     * @tag Accounting
     * @param int $countryId The ID of the country
     * @param int $webstoreId 
     * @param array $query
     *      - *$webstoreId* - int - required
     *          - The ID of the webstore
     * @return array
     */
    public function getAccountingLocationsPostingAccountsByCountryIdWebstoreId(int $countryId, int $webstoreId, array $query): array
    {
        return $this->api(array_merge(["/rest/accounting/locations/{$webstoreId}/{$countryId}/posting_accounts"], $query));
    }
                    
    /**
     * @description List all accounting locations
     * @tag Accounting
     * @return array
     */
    public function getAccountingStoresLocations(): array
    {
        return $this->api("/rest/accounting/stores/locations");
    }
                    
    /**
     * @description Lists accounting locations of a client. The plenty ID of the client must be specified.
     * @tag Accounting
     * @param int $plentyId 
     * @return array
     */
    public function getAccountingStoresLocationsByPlentyId(int $plentyId): array
    {
        return $this->api("/rest/accounting/stores/{$plentyId}/locations");
    }
                    
    /**
     * @description Gets the ID of an accounting location of a country. The plenty ID of the client and the ID of the country must be specified.
     * @tag Accounting
     * @param int $plentyId 
     * @param array $query
     *      - *countryId* - int - optional
     *          - The ID of the country of the accounting location. The default accounting location of the client will be returned if the ID of a country is not specified.
     * @return array
     *      - *id* - integer
     *          - The ID of the accounting location
     *      - *countryId* - integer
     *          - The ID of the country of the accounting location
     *      - *name* - string
     *          - The name of the accounting location
     *      - *clientId* - integer
     *          - The ID of the client that the accounting location belongs to
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the accounting location belongs to
     */
    public function getStoresLocationsByPlentyId(int $plentyId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/stores/{$plentyId}/locations"], $query));
    }
                
    /**
     * @description Lists the VAT configurations for the given filter. Possible filters are <code>locationId</code>, <code>countryId</code>, <code>taxIdNumber</code> and <code>startedAt</code>.
     * @tag Accounting
     * @param array $query
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *with* - array - optional
     *          - The relations to load with the VAT object. The relations available are location or country.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Vat
     */
    public function eachVat(array $query = []): Iterator
    {
        return $this->eachInternal('getVat', func_get_args());
    }
        
    /**
     * @description Lists the VAT configurations for the given filter. Possible filters are <code>locationId</code>, <code>countryId</code>, <code>taxIdNumber</code> and <code>startedAt</code>.
     * @tag Accounting
     * @param array $query
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *with* - array - optional
     *          - The relations to load with the VAT object. The relations available are location or country.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Vat
     */
    public function batchVat(array $query = []): Iterator
    {
        return $this->batchInternal('getVat', func_get_args());
    }
    
    /**
     * @description Lists the VAT configurations for the given filter. Possible filters are <code>locationId</code>, <code>countryId</code>, <code>taxIdNumber</code> and <code>startedAt</code>.
     * @tag Accounting
     * @param array $query
     *      - *page* - int - optional
     *          - The requested page.
     *      - *itemsPerPage* - int - optional
     *          - The number of items per page.
     *      - *with* - array - optional
     *          - The relations to load with the VAT object. The relations available are location or country.
     *      - *columns* - array - optional
     *          - The properties to be loaded.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Vat
     */
    public function getVat(array $query = []): array
    {
        return $this->api(array_merge(["/rest/vat"], $query));
    }
                
    /**
     * @description Create a new VAT configuration
     * @tag Accounting
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the VAT configuration. A VAT configuration includes 4 VAT rates
     *      - *countryId* - integer
     *          - The ID of the country that the VAT configuration belongs to
     *      - *taxIdNumber* - string
     *          - The tax id number of VAT configuration.
     *      - *startedAt* - string
     *          - The date when the VAT configuration went into effect
     *      - *invalidFrom* - string
     *          - The date when the VAT configuration should not be used any more
     *      - *locationId* - integer
     *          - The ID of the location
     *      - *marginScheme* - string
     *          - Specifies the tax rate that is used, when the margin scheme is applied. Available values: 'none', 'vat1', 'vat2', 'vat3', 'vat4'.
     *      - *isRestrictedToDigitalItems* - boolean
     *          - Flag that indicates if the VAT configuration is used only applied to digital goods or not. True= The VAT set is only applied to digital goods. False = The VAT set is applied to all types of goods.
     *      - *isStandard* - boolean
     *          - Flag that indicates if the VAT configuration is the standard VAT configuration for the location
     *      - *createdAt* - string
     *          - The date at which the VAT configuration was created.
     *      - *updatedAt* - string
     *          - The date that the VAT configuration was last updated.
     *      - *isActive* - boolean
     *          - Is this the active VAT configuration for this location and country? (read-only)
     */
    public function createVat(array $data): array
    {
        return $this->api("/rest/vat", 'POST', $data);
    }
                    
    /**
     * @description Lists the VAT configurations for all countries of one accounting location
     * @tag Accounting
     * @param int $locationId The ID of the accounting location
     * @param array $query
     *      - *with[]* - array - optional
     *          - The relations to load with the VAT object. The relations available are location and country.
     *      - *columns[]* - array - optional
     *          - The attributes of the VAT configuration
     */
    public function getVatLocationByLocationId(int $locationId, array $query = [])
    {
        return $this->api(array_merge(["/rest/vat/locations/{$locationId}"], $query));
    }
                    
    /**
     * @description Lists the VAT configurations for a country of delivery of one accounting location. The ID of the accounting location and the ID of the country of delivery must be specified.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location
     * @param int $countryId The ID of the country of delivery
     * @param array $query
     *      - *with[]* - array - optional
     *          - The relations to load with the VAT object. The relations available are location or country.
     *      - *columns[]* - array - optional
     *          - The attributes of the VAT configuration
     * @return array
     */
    public function getVatLocationsCountryByLocationIdCountryId(int $locationId, int $countryId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/vat/locations/{$locationId}/countries/{$countryId}"], $query));
    }
                    
    /**
     * @description Gets the VAT configuration found by matching the given location, delivery country and date of validity.
     * @tag Accounting
     * @param int $locationId The ID of the accounting location
     * @param int $countryId The ID of the country of delivery
     * @param int $date 
     * @param array $query
     *      - *startDate* - string - required
     *          - The date of validity
     *      - *with[]* - array - optional
     *          - The relations to load with the VAT object. The relations available are location or country.
     *      - *columns[]* - array - optional
     *          - The attributes of the VAT configuration
     * @return array
     *      - *id* - integer
     *          - The ID of the VAT configuration. A VAT configuration includes 4 VAT rates
     *      - *countryId* - integer
     *          - The ID of the country that the VAT configuration belongs to
     *      - *taxIdNumber* - string
     *          - The tax id number of VAT configuration.
     *      - *startedAt* - string
     *          - The date when the VAT configuration went into effect
     *      - *invalidFrom* - string
     *          - The date when the VAT configuration should not be used any more
     *      - *locationId* - integer
     *          - The ID of the location
     *      - *marginScheme* - string
     *          - Specifies the tax rate that is used, when the margin scheme is applied. Available values: 'none', 'vat1', 'vat2', 'vat3', 'vat4'.
     *      - *isRestrictedToDigitalItems* - boolean
     *          - Flag that indicates if the VAT configuration is used only applied to digital goods or not. True= The VAT set is only applied to digital goods. False = The VAT set is applied to all types of goods.
     *      - *isStandard* - boolean
     *          - Flag that indicates if the VAT configuration is the standard VAT configuration for the location
     *      - *createdAt* - string
     *          - The date at which the VAT configuration was created.
     *      - *updatedAt* - string
     *          - The date that the VAT configuration was last updated.
     *      - *isActive* - boolean
     *          - Is this the active VAT configuration for this location and country? (read-only)
     */
    public function getVatLocationsCountriesDateByLocationIdCountryIdDate(int $locationId, int $countryId, int $date, array $query): array
    {
        return $this->api(array_merge(["/rest/vat/locations/{$locationId}/countries/{$countryId}/date/{$date}"], $query));
    }
                    
    /**
     * @description Gets the VAT configuration currently used for the country of the standard accounting location of a client (store). The ID of the client (store) must be specified.
     * @tag Accounting
     * @param array $query
     *      - *plentyId* - int - optional
     *          - The plenty ID of the client (store)
     *      - *startedAt* - string - optional
     *          - The date in the W3C format when the vat configuration went into effect
     * @return array
     *      - *id* - integer
     *          - The ID of the VAT configuration. A VAT configuration includes 4 VAT rates
     *      - *countryId* - integer
     *          - The ID of the country that the VAT configuration belongs to
     *      - *taxIdNumber* - string
     *          - The tax id number of VAT configuration.
     *      - *startedAt* - string
     *          - The date when the VAT configuration went into effect
     *      - *invalidFrom* - string
     *          - The date when the VAT configuration should not be used any more
     *      - *locationId* - integer
     *          - The ID of the location
     *      - *marginScheme* - string
     *          - Specifies the tax rate that is used, when the margin scheme is applied. Available values: 'none', 'vat1', 'vat2', 'vat3', 'vat4'.
     *      - *isRestrictedToDigitalItems* - boolean
     *          - Flag that indicates if the VAT configuration is used only applied to digital goods or not. True= The VAT set is only applied to digital goods. False = The VAT set is applied to all types of goods.
     *      - *isStandard* - boolean
     *          - Flag that indicates if the VAT configuration is the standard VAT configuration for the location
     *      - *createdAt* - string
     *          - The date at which the VAT configuration was created.
     *      - *updatedAt* - string
     *          - The date that the VAT configuration was last updated.
     *      - *isActive* - boolean
     *          - Is this the active VAT configuration for this location and country? (read-only)
     */
    public function getVatStandard(array $query = []): array
    {
        return $this->api(array_merge(["/rest/vat/standard"], $query));
    }
                    
    /**
     * @description Deletes a VAT configuration. The VAT ID must be specified.
     * @tag Accounting
     * @param int $vatId 
     */
    public function deleteVatByVatId(int $vatId)
    {
        return $this->api("/rest/vat/{$vatId}", 'DELETE');
    }
                
    /**
     * @description Get a VAT configuration by id.
     * @tag Accounting
     * @param int $vatId 
     * @return array
     *      - *id* - integer
     *          - The ID of the VAT configuration. A VAT configuration includes 4 VAT rates
     *      - *countryId* - integer
     *          - The ID of the country that the VAT configuration belongs to
     *      - *taxIdNumber* - string
     *          - The tax id number of VAT configuration.
     *      - *startedAt* - string
     *          - The date when the VAT configuration went into effect
     *      - *invalidFrom* - string
     *          - The date when the VAT configuration should not be used any more
     *      - *locationId* - integer
     *          - The ID of the location
     *      - *marginScheme* - string
     *          - Specifies the tax rate that is used, when the margin scheme is applied. Available values: 'none', 'vat1', 'vat2', 'vat3', 'vat4'.
     *      - *isRestrictedToDigitalItems* - boolean
     *          - Flag that indicates if the VAT configuration is used only applied to digital goods or not. True= The VAT set is only applied to digital goods. False = The VAT set is applied to all types of goods.
     *      - *isStandard* - boolean
     *          - Flag that indicates if the VAT configuration is the standard VAT configuration for the location
     *      - *createdAt* - string
     *          - The date at which the VAT configuration was created.
     *      - *updatedAt* - string
     *          - The date that the VAT configuration was last updated.
     *      - *isActive* - boolean
     *          - Is this the active VAT configuration for this location and country? (read-only)
     */
    public function getVatByVatId(int $vatId): array
    {
        return $this->api("/rest/vat/{$vatId}");
    }
                
    /**
     * @description Update a VAT configuration.
     * @tag Accounting
     * @param int $vatId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the VAT configuration. A VAT configuration includes 4 VAT rates
     *      - *countryId* - integer
     *          - The ID of the country that the VAT configuration belongs to
     *      - *taxIdNumber* - string
     *          - The tax id number of VAT configuration.
     *      - *startedAt* - string
     *          - The date when the VAT configuration went into effect
     *      - *invalidFrom* - string
     *          - The date when the VAT configuration should not be used any more
     *      - *locationId* - integer
     *          - The ID of the location
     *      - *marginScheme* - string
     *          - Specifies the tax rate that is used, when the margin scheme is applied. Available values: 'none', 'vat1', 'vat2', 'vat3', 'vat4'.
     *      - *isRestrictedToDigitalItems* - boolean
     *          - Flag that indicates if the VAT configuration is used only applied to digital goods or not. True= The VAT set is only applied to digital goods. False = The VAT set is applied to all types of goods.
     *      - *isStandard* - boolean
     *          - Flag that indicates if the VAT configuration is the standard VAT configuration for the location
     *      - *createdAt* - string
     *          - The date at which the VAT configuration was created.
     *      - *updatedAt* - string
     *          - The date that the VAT configuration was last updated.
     *      - *isActive* - boolean
     *          - Is this the active VAT configuration for this location and country? (read-only)
     */
    public function updateVatByVatId(int $vatId, array $data): array
    {
        return $this->api("/rest/vat/{$vatId}", 'PUT', $data);
    }
    
}
