<?php

namespace lujie\amazon\advertising\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description APIs that enable integrators to manage different aspects of billing for their account like Addresses, Taxes, Payments, Invoices etc..
*/
class AdvertisingBillingV3 extends \lujie\amazon\advertising\BaseAmazonAdvertisingClient
{

                
    /**
     * @description Lists the billing profiles linked to each country of global ads account. You can further narrow down the search by providing the countries you want the billing profiles for.     * @tag Billing Profiles
     * @param array $data The request body to fetch billing profiles linked to each country of global ads account.
     *      - *expandBillingProfile* - boolean
     *          - By default only the billingProfileId linked to the country will be returned. Choose `true` if you would like to see the content of the billing profiles linked to a country
     *      - *nextToken* - string
     *          - Offset to fetch next page with list of billing profile usage(s).
     *      - *maxResults* - integer
     *          - Max results / billing profile usage(s) to be shown in a single page.
     *      - *filters* - object
     *          - Filter object to be used to fetch list of billing profile usage(s).
     *      - *expandFallbackBillingProfile* - boolean
     *          - Choose `true` if you would like to see the information currently being used for billing for this marketplace. Useful when the billingProfileUsage status is not `OK` and the billing information coundn't be propagated for that country. If set to `true`, `fallbackBillingProfiles` attribute will be returned.
     * @return array
     *      - *billingProfileUsages* - array
     *      - *nextToken* - string
     *          - Indicates the pagination token to be used to access next page.
     *      - *maxResults* - integer
     *          - Max results / billing profile usage(s) to be shown in a single page.
     */
    public function getBillingProfileUsages(array $data, string $contentType = 'application/vnd.billingProfileUsage.v1+json'): array
    {
        return $this->api("/billingProfileUsages/list", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Fetches billing profiles present under the global account. You can limit the search results by providing filters like `defaultBillingProfileFilter` and `billingProfileIdFilter` in which case only results matching the filters will be returned. This is a Paginated API request and returns a paginationToken (`nextToken`) if more that `50` results match. You can customize the pageSize to be less than `50` by providing `maxResults` key in request.     * @tag Billing Profiles
     * @param array $data The request body to fetch one or more billing profile(s).
     *      - *nextToken* - string
     *          - Offset to fetch next page with list of billing profile(s).
     *      - *maxResults* - integer
     *          - Max results / billing profile(s) to be shown in a single page.
     *      - *filters* - object
     *          - Filter object to be used to fetch list of billing profile(s).
     * @return array
     *      - *billingProfiles* - array
     *          - Indicates list of billing profile(s).
     *      - *nextToken* - string
     *          - Offset to fetch next page with list of billing profile(s).
     *      - *maxResults* - integer
     *          - Max results / billing profile(s) to be shown in a single page.
     */
    public function getBillingProfiles(array $data, string $contentType = 'application/vnd.billingProfile.v1+json'): array
    {
        return $this->api("/billingProfiles/list", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description API to link one or more countries with a billing profile. The linked BillingProfile's billing informationwill be used for invoicing, taxes and other billing workflows. A single billing profile can be linked to multiple countries.     * @tag Billing Profiles
     * @param array $data The request body accepts a list of billing profile identifiers and advertisers for association.
     *      - *billingProfileUsages* - array
     *          - List of advertisers to which a list of billing profiles needs to be applied.
     * @return array
     *      - *billingProfileUsages* - object
     *          - Segregated list of success and error responses for each country and applied billing profile(s).
     */
    public function applyBillingProfile(array $data, string $contentType = 'application/vnd.billingProfileUsage.v1+json'): array
    {
        return $this->api("/billingProfileUsages", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description User needs to provide consent to certain agreements before creating a billing profile. This API provides a way for users to go through the agreement content.     * @tag Billing Profiles
     * @param string $billingProfileAgreementContentId agreementId for which the content needs to be fetched. This is same as the `documentName` in create/update billing profiles request
     * @param array $query
     *      - *languageOfPreference* - string - optional
     *          - This selection controls the language of preference (or `locale`) and the returned values of agreement content to match that language. Preferred locale can be chosen among the list of valid language codes. Check the table below for supported language code. <br/><br/><table border=1><caption> **Supported Locales Table** </caption><tr>    <th>Locale code</th>    <th>Language</th></tr><tr>    <td>en_US</td>    <td>English</td></tr><tr>    <td>ja_JP</td>    <td>Japanese</td></tr><tr>    <td>ar_SA</td>    <td>Arabic</td></tr><tr>    <td>de_DE</td>    <td>German</td></tr><tr>    <td>fr_FR</td>    <td>French</td></tr><tr>    <td>it_IT</td>    <td>Italian</td></tr><tr>    <td>es_MX</td>    <td>Spanish</td></tr><tr>    <td>nl_NL</td>    <td>Dutch</td></tr><tr>    <td>sv_SE</td>    <td>Swedish</td></tr><tr>    <td>pl_PL</td>    <td>Polish</td></tr><tr>    <td>tr_TR</td>    <td>Turkish</td></tr> <tr>    <td>pt_BR</td>    <td>Portuguese</td></tr> </table>
     * @return array
     *      - *content* - string
     *          - An HTML document to be rendered and read. A consent needs to be provided against this content.
     */
    public function getBillingProfileAgreementContent(string $billingProfileAgreementContentId, array $query = []): array
    {
        return $this->api(array_merge(["/billingProfileAgreementContents/{$billingProfileAgreementContentId}"], $query));
    }
                    
    /**
     * @description Request to create billing statement for advertiser advertising in Sponsored Products/Brands/Display segment.     * @tag Billing Statements
     * @param array $data The request body accepts filters required for generation of the billing statement report.
     *      - *countryCodes* - array
     *          - List of countries for which billing statements are to be fetched. If no country codes are passed in the request, the statement will be generated for all the advertising countries by default.
     *      - *endDate* - string
     *          - End date of the invoice summary period for a report in the format YYYY-MM-DD.
     *      - *format* - string
     *          - Format of the file, such as, for billing statements, etc.
     *      - *locale* - string
     *          - Preferred locale can be chosen among the list of valid language codes. Check the table below for supported language code. <br/><br/><table border=1><caption> **Supported Locales Table** </caption><tr>    <th>Locale code</th>    <th>Language</th></tr><tr>    <td>en_US</td>    <td>English</td></tr><tr>    <td>ja_JP</td>    <td>Japanese</td></tr><tr>    <td>ar_SA</td>    <td>Arabic</td></tr><tr>    <td>de_DE</td>    <td>German</td></tr><tr>    <td>fr_FR</td>    <td>French</td></tr><tr>    <td>it_IT</td>    <td>Italian</td></tr><tr>    <td>es_MX</td>    <td>Spanish</td></tr><tr>    <td>nl_NL</td>    <td>Dutch</td></tr><tr>    <td>sv_SE</td>    <td>Swedish</td></tr><tr>    <td>pl_PL</td>    <td>Polish</td></tr><tr>    <td>tr_TR</td>    <td>Turkish</td></tr> <tr>    <td>pt_BR</td>    <td>Portuguese</td></tr> </table>
     *      - *startDate* - string
     *          - Start date of the invoice summary period for a report in the format YYYY-MM-DD.
     * @return array
     *      - *billingStatementRequestId* - string
     *          - Billing statement request identifier.
     *      - *details* - string
     *          - A human-readable description of the response.
     */
    public function createBillingStatement(array $data, string $contentType = 'application/vnd.createbillingstatementsrequest.v1+json'): array
    {
        return $this->api("/billingStatements", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Creates or updates payment profiles.     * @tag Create Payment Profiles
     * @param array $data This API creates or updates payment profiles.
     *      - *paymentProfiles* - 
     * @return array
     *      - *success* - array
     *      - *error* - array
     */
    public function createPaymentProfiles(array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/billing/paymentProfiles", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Creates one or more billing profiles. A Billing Profile contains billing information (address, taxes, agreements etc..) that will be used for invoicing and other billing workflows. Currently, Billing Profiles can only be created for a Global Sponsored Ads vendor account. Please note that you need to link (`POST /billingProfileUsages`) a billingProfile to a country for that billingInformation to be used for that country.     * @tag Billing Profiles
     * @param array $data The request body accepts a list of billing profiles to be created in batch.
     *      - *billingProfiles* - array
     * @return array
     *      - *billingProfiles* - object
     *          - Segregated list of success and error responses for each billing profile in request payload.
     */
    public function createBillingProfiles(array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/billingProfiles", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Updates one or more billing profiles under a global account Please note that `isBillTo` and `type` are immutable attributes and cannot be updated -- in this case, user can always create a new billing profile with same details but with different `isBillTo` and `type` attribute values.     * @tag Billing Profiles
     * @param array $data The request body accepts a list of billing profiles to be updated in batch.
     *      - *billingProfiles* - array
     * @return array
     *      - *billingProfiles* - object
     *          - Segregated list of success and error responses for each billing profile in request payload.
     */
    public function updateBillingProfiles(array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/billingProfiles", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Lists the billing invoice summary(s) in a global ads account. You can further narrow down the search by providing filter(s) over country, status, paymentMethod with 'exact' and 'broad' match, search over invoice number & ro number and aggregation query(s) over the billing invoice summary(s)     * @tag Billing Invoice Summary(s)
     * @param array $data Payload with filter, sort and aggregate key(s) to fetch list of billing invoice summary(s).
     *      - *invoiceNumberFilter* - object
     *          - Object encapsulating the invoice number search information
     *      - *invoiceIssuedDateRangeFilter* - object
     *          - Object encapsulating issued date range information
     *      - *countryValueFilter* - object
     *          - Object encapsulating the country filtering information
     *      - *maxResults* - integer
     *          - Max results / billing invoice summary(s) to be shown in a single page.
     *      - *nextToken* - string
     *          - Offset to fetch next page with list of billing invoice summary(s).
     *      - *paymentMethodTypeValueFilter* - object
     *          - Object encapsulating the payment method type filtering information against which invoice is issued
     *      - *aggregation* - object
     *          - Object encapsulating the aggregation query information
     *      - *statusValueFilter* - object
     *          - Object encapsulating the invoice status filtering information
     *      - *sort* - object
     *          - Object encapsulating the sort operation information
     *      - *reserveOrderNumberFilter* - object
     *          - Object encapsulating the reserve order number search information
     *      - *invoiceDueDateRangeFilter* - object
     *          - Object encapsulating due date range information
     * @return array
     *      - *nextToken* - string
     *          - Offset to fetch next page with list of billing invoice summary(s).
     *      - *aggregation* - object
     *          - Object encapsulating the aggregation query and result(s) information
     */
    public function getBillingInvoiceSummaries(array $data, string $contentType = 'application/vnd.billingInvoiceSummary.v1+json'): array
    {
        return $this->api("/invoiceSummaries/list", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Retrieves eligible payment methods for a customer.     * @tag Get Payment Methods
     * @param array $query
     *      - *criteriaType* -  - required
     *          - Criteria Types to that can be used to filter the payment methods in the GET Payment methods API.
     * @return array
     *      - *creditCardPaymentMethods* - 
     *      - *nextToken* - 
     *      - *deductFromPaymentPaymentMethods* - 
     *      - *payByInvoicePaymentMethods* - 
     *      - *sellerPayablePaymentMethods* - 
     *      - *directDebitPaymentMethods* - 
     */
    public function getCustomerPaymentMethods(array $query): array
    {
        return $this->api(array_merge(["/billing/paymentMethods/list"], $query), 'POST');
    }
                    
    /**
     * @description Executes payment on a set of or all of an advertisers open invoices.

**Requires one of these permissions**:
["adv_billing_edit"]     * @tag Pay Invoices
     * @param array $data This API executes payment on one or multiple open invoices.
     *      - *idempotenceId* - 
     *      - *reasonLocale* - 
     *      - *paymentAgreementId* - 
     * @return array
     *      - *success* - 
     *      - *failure* - 
     */
    public function payInvoices(array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/billing/invoices/pay", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description This API retrieves BillingPromotions information for advertiser accounts. It enables users to query and analyze promotion consumption metrics across multiple invoices.

**Requires one of these permissions**:
["nemo_transactions_view, nemo_transactions_edit"].     * @tag Billing Promotions
     * @param array $data 
     *      - *promotionIdFilter* - 
     *      - *includePromotionConsumption* - boolean
     *          - Should response include consumption details.
     *      - *endDateTimeFilter* - 
     *      - *linkedEntityFilter* - 
     *      - *nextToken* - string
     *          - The token is used to fetch the next page of results if they exist.
     *      - *maxResults* - number
     *          - This is the maximum number of promotions to return in a single page of results.
     *      - *availableDateTimeFilter* - 
     *      - *promotionTypeFilter* - 
     *      - *startDateTimeFilter* - 
     * @return array
     *      - *promotions* - array
     *      - *nextToken* - string
     *          - The token is used to fetch the next page of results if they exist.
     *      - *maxResults* - number
     *          - This is the maximum number of promotions to return in a single page of results.
     */
    public function listBillingPromotions(array $data, string $contentType = 'application/vnd.billingpromotions.v1+json'): array
    {
        return $this->api("/billing/promotions/list", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets the current billing status associated for each advertising account.

**Requires one of these permissions**:
["advertiser_campaign_edit","adv_billing_view","adv_billing_edit"]     * @tag Billing Status
     * @param array $data 
     *      - *advertiserMarketplaces* - array
     *      - *locale* - 
     * @return array
     *      - *success* - array
     *      - *error* - array
     */
    public function bulkGetBillingStatus(array $data, string $contentType = 'application/vnd.bulkgetbillingstatusrequestbody.v1+json'): array
    {
        return $this->api("/billing/statuses", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description 

**Requires one of these permissions**:
["nemo_transactions_view","nemo_transactions_edit"]     * @tag invoice
     * @param array $query
     *      - *invoiceStatuses* - array - optional
     *          - * `ISSUED`: An invoice is issued when its charges are finalized and tax is computed on the total amount. 
* `PAID_IN_PART`: When a partial payment is received, the invoice status will change to paid in part.
* `PAID_IN_PART`: One full payment has been received, the invoice will be paid in full.
* `WRITTEN_OFF`: If an invoice is written off because of an error, the status will be updated to written off.

     *      - *startDate* -  - optional
     *          - The starting date (inclusive) of the date range for filtering invoices. Please provide the date in ISO-8601 format, representing a UTC date with only the date portion (no time).
     *      - *endDate* -  - optional
     *          - The ending date (inclusive) of the date range for filtering invoices. Please provide the date in ISO-8601 format, representing a UTC date with only the date portion (no time).
     *      - *count* - int - optional
     *          - Number of records to include in the paged response. Defaults to 100. Cannot be combined with the cursor parameter.
     *      - *cursor* - string - optional
     *          - A cursor representing how far into a result set this query should begin. In the absence of a cursor the request will default to start index of 0 and page size of 100.
     */
    public function getAdvertiserInvoices(array $query = []): void
    {
        $this->api(array_merge(["/invoices"], $query));
    }
                    
    /**
     * @description 

**Requires one of these permissions**:
["nemo_transactions_view","nemo_transactions_edit"]     * @tag invoice
     * @param string $invoiceId ID of invoice to fetch
     * @return array
     *      - *promotions* - 
     *      - *governmentInvoiceInformation* - 
     *      - *payerContactInfo* - 
     *      - *taxDetail* - 
     *      - *adjustments* - 
     *      - *invoiceLines* - 
     *      - *invoiceSummary* - 
     *      - *issuerContactInfo* - 
     *      - *thirdPartyContactInfo* - 
     *      - *payments* - 
     *      - *portfolios* - 
     */
    public function getInvoice(string $invoiceId): array
    {
        return $this->api("/invoices/{$invoiceId}");
    }
                    
    /**
     * @description API to fetch the latest status of Billing Statements creation request and billing statement download link if available.     * @tag Billing Statements
     * @param string $billingStatementRequestId Billing Statement Request Id.
     * @return array
     *      - *reportStatus* - string
     *          - The request status of the billing statement.
     *      - *details* - string
     *          - The human-readable description of the response.
     *      - *s3DownloadLink* - string
     *          - Download link of the billing statement file. Only when reportStatus is SUCCESS.
     */
    public function getBillingStatement(string $billingStatementRequestId): array
    {
        return $this->api("/billingStatements/{$billingStatementRequestId}");
    }
                    
    /**
     * @description Creates or updates payment agreements.     * @tag Create Payment Agreement
     * @param array $data This API creates or updates payment agreements.
     *      - *paymentAgreements* - 
     * @return array
     *      - *success* - array
     *      - *error* - array
     */
    public function createPaymentAgreements(array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/billing/paymentAgreements", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets current payment agreement for a customer.     * @tag Get Payment Agreements
     * @param array $query
     *      - *agreementType* -  - required
     *          - The type of payment agreement to query for.
     * @return array
     *      - *nextToken* - 
     *      - *paymentAgreements* - 
     */
    public function getPaymentAgreements(array $query): array
    {
        return $this->api(array_merge(["/billing/paymentAgreements/list"], $query), 'POST');
    }
                    
    /**
     * @description Gets an array of all currently valid billing notifications associated for each advertising account.     * @tag Billing Notifications
     * @param array $data 
     *      - *advertiserMarketplaces* - array
     *      - *locale* - 
     * @return array
     *      - *success* - array
     *      - *error* - array
     */
    public function bulkGetBillingNotifications(array $data, string $contentType = 'application/vnd.billingnotifications.v1+json'): array
    {
        return $this->api("/billing/notifications", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets billing document(s) with id.     * @tag Billing Documents
     * @param string $documentId 
     * @param array $query
     *      - *docType* - array - required
     *          - 
     * @return array
     *      - *unavailableDocuments* - array
     *      - *availableDocuments* - array
     */
    public function getDocument(string $documentId, array $query): array
    {
        return $this->api(array_merge(["/billing/documents/{$documentId}"], $query));
    }
    
}
