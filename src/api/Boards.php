<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Boards extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Gets a list with all boards.
     * @tag Boards
     * @return array
     */
    public function getBoards(): array
    {
        return $this->api("/rest/boards");
    }
                
    /**
     * @description Creates a new board.
     * @tag Boards
     * @param array $data 
     * @return array
     *      - *id* - string
     *          - The ID of the board
     *      - *boardName* - string
     *          - The name of the board
     *      - *columnsCount* - integer
     *          - The number of columns
     *      - *tasksCount* - integer
     *          - The number of tasks
     */
    public function createBoard(array $data): array
    {
        return $this->api("/rest/boards", 'POST', $data);
    }
                    
    /**
     * @description Deletes a specific board.  The ID of the board must be specified.
     * @tag Boards
     * @param string $boardId The ID of the board
     */
    public function deleteBoardByBoardId(string $boardId)
    {
        return $this->api("/rest/boards/{$boardId}", 'DELETE');
    }
                
    /**
     * @description Gets a specific board by its ID. The ID of the board must be specified.
     * @tag Boards
     * @param string $boardId The ID of the board
     * @param array $query
     *      - *tasksPerPage* - int - optional
     *          - Maximum number of tasks to list per column
     * @return array
     *      - *id* - string
     *          - The ID of the board
     *      - *boardName* - string
     *          - The name of the board
     *      - *columnsCount* - integer
     *          - The number of columns
     *      - *tasksCount* - integer
     *          - The number of tasks
     */
    public function getBoardByBoardId(string $boardId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/boards/{$boardId}"], $query));
    }
                
    /**
     * @description Copies a specific board.  The ID of the board must be specified.
     * @tag Boards
     * @param string $boardId The ID of the board
     * @return array
     *      - *id* - string
     *          - The ID of the board
     *      - *boardName* - string
     *          - The name of the board
     *      - *columnsCount* - integer
     *          - The number of columns
     *      - *tasksCount* - integer
     *          - The number of tasks
     */
    public function createBoardByBoardId(string $boardId): array
    {
        return $this->api("/rest/boards/{$boardId}", 'POST');
    }
                
    /**
     * @description Updates a specific board. The ID of the board must be specified.
     * @tag Boards
     * @param string $boardId The ID of the board
     * @param array $data 
     * @return array
     *      - *id* - string
     *          - The ID of the board
     *      - *boardName* - string
     *          - The name of the board
     *      - *columnsCount* - integer
     *          - The number of columns
     *      - *tasksCount* - integer
     *          - The number of tasks
     */
    public function updateBoardByBoardId(string $boardId, array $data): array
    {
        return $this->api("/rest/boards/{$boardId}", 'PUT', $data);
    }
    
}
