<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Catalog extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Gets a paginated list of the Catalogs.
     * @tag Catalog
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getCatalogsCatalogs(): array
    {
        return $this->api("/rest/catalogs/catalogs");
    }
                
    /**
     * @description Creates a Catalog
     * @tag Catalog
     * @return array
     *      - *data* - array
     *          - Contains the mappings and template settings
     *      - *settings* - array
     *          - Contains the settings
     *      - *name* - string
     *          - The name of the catalogue
     *      - *template* - string
     *          - The id of the template that was used to create the catalogue
     *      - *id* - string
     *          - The id of the catalogue
     *      - *active* - boolean
     *          - Determines whether a catalogue can be exported
     *      - *showMandatoryFields* - boolean
     *          - Determines if only the mandatory fields should be displayed in the catalogue UI
     *      - *updatedAt* - string
     *          - The updated at date in W3C
     *      - *createdAt* - string
     *          - The created at date in W3C
     */
    public function createCatalogsCatalog(): array
    {
        return $this->api("/rest/catalogs/catalogs", 'POST');
    }
                    
    /**
     * @description Activates or deactivates a Catalog based on its ID.
     * @tag Catalog
     * @param int $id 
     */
    public function createCatalogsCatalogsActivateById(int $id): void
    {
        $this->api("/rest/catalogs/catalogs/activate/{$id}", 'POST');
    }
                    
    /**
     * @description Gets the list of archived Catalogs. An archived Catalog is a deleted Catalog.
     * @tag Catalog
     * @return array
     */
    public function getCatalogsCatalogsArchive(): array
    {
        return $this->api("/rest/catalogs/catalogs/archive");
    }
                    
    /**
     * @description Restores an archived Catalog based on its ID. An archived Catalog is a deleted Catalog.
     * @tag Catalog
     * @param int $id 
     * @return array
     *      - *data* - array
     *          - Contains the mappings and template settings
     *      - *settings* - array
     *          - Contains the settings
     *      - *name* - string
     *          - The name of the catalogue
     *      - *template* - string
     *          - The id of the template that was used to create the catalogue
     *      - *id* - string
     *          - The id of the catalogue
     *      - *active* - boolean
     *          - Determines whether a catalogue can be exported
     *      - *showMandatoryFields* - boolean
     *          - Determines if only the mandatory fields should be displayed in the catalogue UI
     *      - *updatedAt* - string
     *          - The updated at date in W3C
     *      - *createdAt* - string
     *          - The created at date in W3C
     */
    public function createCatalogsCatalogsArchiveOreById(int $id): array
    {
        return $this->api("/rest/catalogs/catalogs/archive/{$id}/restore", 'POST');
    }
                    
    /**
     * @description Copies one or multiple Catalogs.
     * @tag Catalog
     * @return array
     */
    public function updateCatalogsCatalogsCopy(): array
    {
        return $this->api("/rest/catalogs/catalogs/copy", 'PUT');
    }
                    
    /**
     * @description Imports the catalog. The catalog ID is required.
     * @tag Catalog
     * @return array
     *      - *data* - array
     *          - Contains the mappings and template settings
     *      - *settings* - array
     *          - Contains the settings
     *      - *name* - string
     *          - The name of the catalogue
     *      - *template* - string
     *          - The id of the template that was used to create the catalogue
     *      - *id* - string
     *          - The id of the catalogue
     *      - *active* - boolean
     *          - Determines whether a catalogue can be exported
     *      - *showMandatoryFields* - boolean
     *          - Determines if only the mandatory fields should be displayed in the catalogue UI
     *      - *updatedAt* - string
     *          - The updated at date in W3C
     *      - *createdAt* - string
     *          - The created at date in W3C
     */
    public function createCatalogsCatalogsImport(): array
    {
        return $this->api("/rest/catalogs/catalogs/import", 'POST');
    }
                    
    /**
     * @description Migrates Catalogs from Dynamo DB to S3
     * @tag Catalog

     */
    public function createCatalogsCatalogsMigrate(): void
    {
        $this->api("/rest/catalogs/catalogs/migrate", 'POST');
    }
                    
    /**
     * @description Returns available schedules days list with key and translated value
     * @tag Catalog
     * @return array
     */
    public function getCatalogsCatalogsScheduleDays(): array
    {
        return $this->api("/rest/catalogs/catalogs/schedule/days");
    }
                    
    /**
     * @description Generates an alphanumeric token
     * @tag Catalog

     */
    public function getCatalogsCatalogsToken(): void
    {
        $this->api("/rest/catalogs/catalogs/token");
    }
                    
    /**
     * @description Copies a Catalog format based on its ID.
     * @tag Catalog
     * @param int $catalogId 
     * @return array
     */
    public function updateCatalogsCatalogsCopyByCatalogId(int $catalogId): array
    {
        return $this->api("/rest/catalogs/catalogs/{$catalogId}/copy", 'PUT');
    }
                    
    /**
     * @description Deletes a Catalog based on its ID.
     * @tag Catalog
     * @param int $id 
     */
    public function deleteCatalogsCatalogById(int $id): void
    {
        $this->api("/rest/catalogs/catalogs/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a specific Catalog based on its ID.
     * @tag Catalog
     * @param int $id 
     * @return array
     *      - *data* - array
     *          - Contains the mappings and template settings
     *      - *settings* - array
     *          - Contains the settings
     *      - *name* - string
     *          - The name of the catalogue
     *      - *template* - string
     *          - The id of the template that was used to create the catalogue
     *      - *id* - string
     *          - The id of the catalogue
     *      - *active* - boolean
     *          - Determines whether a catalogue can be exported
     *      - *showMandatoryFields* - boolean
     *          - Determines if only the mandatory fields should be displayed in the catalogue UI
     *      - *updatedAt* - string
     *          - The updated at date in W3C
     *      - *createdAt* - string
     *          - The created at date in W3C
     */
    public function getCatalogsCatalogById(int $id): array
    {
        return $this->api("/rest/catalogs/catalogs/{$id}");
    }
                
    /**
     * @description Updates a Catalog based on its ID.
     * @tag Catalog
     * @param int $id 
     * @return array
     *      - *data* - array
     *          - Contains the mappings and template settings
     *      - *settings* - array
     *          - Contains the settings
     *      - *name* - string
     *          - The name of the catalogue
     *      - *template* - string
     *          - The id of the template that was used to create the catalogue
     *      - *id* - string
     *          - The id of the catalogue
     *      - *active* - boolean
     *          - Determines whether a catalogue can be exported
     *      - *showMandatoryFields* - boolean
     *          - Determines if only the mandatory fields should be displayed in the catalogue UI
     *      - *updatedAt* - string
     *          - The updated at date in W3C
     *      - *createdAt* - string
     *          - The created at date in W3C
     */
    public function updateCatalogsCatalogById(int $id): array
    {
        return $this->api("/rest/catalogs/catalogs/{$id}", 'PUT');
    }
                    
    /**
     * @description Gets the content of a Catalog based on its ID.
     * @tag Catalog
     * @param int $id 
     * @return array
     */
    public function getCatalogsCatalogsContentById(int $id): array
    {
        return $this->api("/rest/catalogs/catalogs/{$id}/content");
    }
                
    /**
     * @description Updates the content of the Catalog.
     * @tag Catalog
     * @param int $id 
     * @return array
     */
    public function updateCatalogsCatalogsContentById(int $id): array
    {
        return $this->api("/rest/catalogs/catalogs/{$id}/content", 'PUT');
    }
                    
    /**
     * @description Exports the catalog. The catalog ID is required.
     * @tag Catalog
     * @param int $id 
     * @return array
     */
    public function getCatalogsCatalogsExportById(int $id): array
    {
        return $this->api("/rest/catalogs/catalogs/{$id}/export");
    }
                    
    /**
     * @description Gets the preview for an export with a specific catalog
     * @tag Catalog
     * @param int $id 
     */
    public function getCatalogsCatalogsPreviewById(int $id): void
    {
        $this->api("/rest/catalogs/catalogs/{$id}/preview");
    }
                    
    /**
     * @description Builds the private download url with optional data
The data should use the same structure as the catalog options
     * @tag Catalog
     * @param int $id 
     */
    public function getCatalogsCatalogsUrlPrivateById(int $id): void
    {
        $this->api("/rest/catalogs/catalogs/{$id}/url/private");
    }
                    
    /**
     * @description Builds the public download url with optional data
The data should use the same structure as the catalog options
     * @tag Catalog
     * @param int $id 
     */
    public function getCatalogsCatalogsUrlPublicById(int $id): void
    {
        $this->api("/rest/catalogs/catalogs/{$id}/url/public");
    }
                    
    /**
     * @description Lists all versions of a specific Catalog, based on its ID.
     * @tag Catalog
     * @param int $id 
     */
    public function getCatalogsCatalogsVersionsById(int $id): void
    {
        $this->api("/rest/catalogs/catalogs/{$id}/versions");
    }
                    
    /**
     * @description Gets a specific catalog based on its ID and version.
     * @tag Catalog
     * @param int $id 
     * @param int $versionId 
     * @return array
     *      - *data* - array
     *          - Contains the mappings and template settings
     *      - *settings* - array
     *          - Contains the settings
     *      - *name* - string
     *          - The name of the catalogue
     *      - *template* - string
     *          - The id of the template that was used to create the catalogue
     *      - *id* - string
     *          - The id of the catalogue
     *      - *active* - boolean
     *          - Determines whether a catalogue can be exported
     *      - *showMandatoryFields* - boolean
     *          - Determines if only the mandatory fields should be displayed in the catalogue UI
     *      - *updatedAt* - string
     *          - The updated at date in W3C
     *      - *createdAt* - string
     *          - The created at date in W3C
     */
    public function getCatalogsCatalogsVersionByIdVersionId(int $id, int $versionId): array
    {
        return $this->api("/rest/catalogs/catalogs/{$id}/versions/{$versionId}");
    }
                    
    /**
     * @description Restores a Catalog to a previous version.
     * @tag Catalog
     * @param int $id 
     * @param int $versionId 
     * @return array
     *      - *data* - array
     *          - Contains the mappings and template settings
     *      - *settings* - array
     *          - Contains the settings
     *      - *name* - string
     *          - The name of the catalogue
     *      - *template* - string
     *          - The id of the template that was used to create the catalogue
     *      - *id* - string
     *          - The id of the catalogue
     *      - *active* - boolean
     *          - Determines whether a catalogue can be exported
     *      - *showMandatoryFields* - boolean
     *          - Determines if only the mandatory fields should be displayed in the catalogue UI
     *      - *updatedAt* - string
     *          - The updated at date in W3C
     *      - *createdAt* - string
     *          - The created at date in W3C
     */
    public function createCatalogsCatalogsVersionsOreByIdVersionId(int $id, int $versionId): array
    {
        return $this->api("/rest/catalogs/catalogs/{$id}/versions/{$versionId}/restore", 'POST');
    }
                    
    /**
     * @description Checks connection to identify possible issues. Can handle FTP, FTPS, SFTP
     * @tag Catalog
     * @param int $protocol 
     */
    public function createCatalogsConnectionCheckByProtocol(int $protocol): void
    {
        $this->api("/rest/catalogs/connection/check/{$protocol}", 'POST');
    }
                    
    /**
     * @description Gets a list of Catalog statuses
     * @tag Catalog
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getCatalogsStatuses(): array
    {
        return $this->api("/rest/catalogs/statuses");
    }
                    
    /**
     * @description Gets a specific Catalog status based on its ID.
     * @tag Catalog
     * @param int $id 
     */
    public function getCatalogsStatusById(int $id): void
    {
        $this->api("/rest/catalogs/statuses/{$id}");
    }
                    
    /**
     * @description Gets a status data. For testing purposes.
     * @tag Catalog
     * @param int $id 
     */
    public function getCatalogsStatusesDataById(int $id): void
    {
        $this->api("/rest/catalogs/statuses/{$id}/data");
    }
                    
    /**
     * @description Lists all status histories. For testing purposes.
     * @tag Catalog
     * @param int $id 
     */
    public function getCatalogsStatusesHistoriesById(int $id): void
    {
        $this->api("/rest/catalogs/statuses/{$id}/histories");
    }
                    
    /**
     * @description Gets a single status history file. For testing purposes.
     * @tag Catalog
     * @param int $id 
     * @param int $filename 
     */
    public function getCatalogsStatusesHistoryByIdFilename(int $id, int $filename): void
    {
        $this->api("/rest/catalogs/statuses/{$id}/histories/{$filename}");
    }
                    
    /**
     * @description Lists all status logs. For testing purposes.
     * @tag Catalog
     * @param int $id 
     */
    public function getCatalogsStatusesLogsById(int $id): void
    {
        $this->api("/rest/catalogs/statuses/{$id}/logs");
    }
                    
    /**
     * @description Lists all status performances. For testing purposes.
     * @tag Catalog
     * @param int $id 
     */
    public function getCatalogsStatusesPerformancesById(int $id): void
    {
        $this->api("/rest/catalogs/statuses/{$id}/performances");
    }
                    
    /**
     * @description Cancel export and live export runs.
     * @tag Catalog
     * @param int $statusId 
     */
    public function createCatalogsStatusesCancelByStatusId(int $statusId): void
    {
        $this->api("/rest/catalogs/statuses/{$statusId}/cancel", 'POST');
    }
    
}
