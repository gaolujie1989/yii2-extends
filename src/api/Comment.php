<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Comment extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Creates a new comment.
     * @tag Comment
     * @param array $data 
     */
    public function createComment(array $data)
    {
        return $this->api("/rest/comments", 'POST', $data);
    }
                    
    /**
     * @description Deletes a comment. The ID of the comment must be specified.
     * @tag Comment
     * @param int $commentId The ID of the comment
     */
    public function deleteCommentByCommentId(int $commentId)
    {
        return $this->api("/rest/comments/{$commentId}", 'DELETE');
    }
                
    /**
     * @description Gets a comment. The ID of the comment must be specified.
     * @tag Comment
     * @param int $commentId The ID of the comment
     */
    public function getCommentByCommentId(int $commentId)
    {
        return $this->api("/rest/comments/{$commentId}");
    }
                
    /**
     * @description Updates a comment by commentId.
     * @tag Comment
     * @param int $commentId The ID of the comment
     * @param array $query
     *      - *referenceType* - string - required
     *          - The reference type. Valid types are 'category', 'contact', 'order'.
     *      - *referenceValue* - int - required
     *          - The reference value
     *      - *userId* - int - optional
     *          - The ID of the user the comment belongs to
     *      - *isVisibleForContact* - boolean - optional
     *          - If true, the comment is visible for the associated contact.
     */
    public function updateCommentByCommentId(int $commentId, array $query)
    {
        return $this->api(array_merge(["/rest/comments/{$commentId}"], $query), 'PUT');
    }
                    
    /**
     * @description Lists comments. The reference type and the reference value must be specified (e.g. the reference type is 'order' and the reference value is the ID of the order).
     * @tag Comment
     * @param string $referenceType The reference type. Valid types are 'category', 'contact', 'order', 'order_item'.
     * @param int $referenceValue The reference value
     * @param array $query
     *      - *userId* - int - optional
     *          - The ID of the user the comment belongs to
     *      - *isVisibleForContact* - boolean - optional
     *          - If true, the comment is visible for the associated contact.
     * @return array
     */
    public function getCommentByReferenceTypeReferenceValue(string $referenceType, int $referenceValue, array $query = []): array
    {
        return $this->api(array_merge(["/rest/comments/{$referenceType}/{$referenceValue}"], $query));
    }
    
}
