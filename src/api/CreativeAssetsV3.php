<?php

namespace lujie\amazon\advertising\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description Use the creative assets API to create and manage video and image assets for use in Amazon Ads campaigns. For details on using this API, see [Creatives overview](guides/creative-asset/asset-library-overview).
*/
class CreativeAssetsV3 extends \lujie\amazon\advertising\BaseAmazonAdvertisingClient
{

                
    /**
     * @description 
     * @tag Creative assets
     * @param array $query
     *      - *assetId* - string - required
     *          - The assetId
     *      - *version* - string - optional
     *          - The versionId of the asset, if not included all versions will return.
     */
    public function getAsset(array $query): void
    {
        $this->api(array_merge(["/assets"], $query));
    }
                    
    /**
     * @description 
     * @tag Creative assets
     * @param string $requestId Batch asset registration request id. It is returned in response of POST /assets/batchRegister API.
     */
    public function getAssetsBatchRegister(string $requestId): void
    {
        $this->api("/assets/batchRegister/{$requestId}");
    }
                    
    /**
     * @description This is an asynchronous api that provides clients an identifier for their batch registration request. They need to check for the status of their request by calling the `GET /assets/batchRegister/{requestId}` api with the identifier.     * @tag Creative assets
     * @param array $data Batch Register Uploaded Assets.
     */
    public function assetsBatchRegister(array $data, string $contentType = 'application/vnd.assetsbatchregisterrequest.v1+json'): void
    {
        $this->api("/assets/batchRegister", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description The API should be called once the asset is uploaded to the location
provided by the /asset/upload API endpoint. See [Creating assets](guides/creative-asset/creating-assets) to understand the call flow.     * @tag Creative assets
     * @param array $data Note - **asinList**, **versionInfo**, and **tags** are optional in the request body.
     */
    public function registerAsset(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/assets/register", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Creates an ephemeral resource (upload location) to upload Assets to Creative Assets tool. The upload location is short lived and expires in 15 minutes.The upload location only supports PUT HTTP Method to upload the asset content. If the upload location expires, API user will get `403` Forbidden response.
* All ad specs - sizes and policies can be found [here](https://advertising.amazon.com/resources/ad-specs/?ref_=a20m_us_hnav_spcs)

* Program specific links
1. **Stores** - [here](https://advertising.amazon.com/resources/ad-specs/stores?ref_=a20m_us_spcs_stcrgd)
2. **SB/SBV/sponsored ads** - [here](https://advertising.amazon.com/resources/ad-policy/sponsored-ads-policies?ref_=a20m_us_spcs_sbv_spcs_spadcap)
See [Creating assets](guides/creative-asset/creating-assets) to understand the call flow.     * @tag Creative assets
     * @param array $data Make sure to include file extension along with filename . (ie. "filename.mp4")
     */
    public function getUploadLocation(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/assets/upload", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description 
     * @tag Creative assets
     * @param array $data text - optional, this field matches asset name, asset name prefix, tags and ASINs associated with the assets

filterCriteria - optional, this is used to filter results

sortCriteria - optional, this is used to get sorted results

pageCriteria - optional, this is used for pagination

     *      - *text* - 
     *      - *filterCriteria* - 
     *      - *sortCriteria* - 
     *      - *pageCriteria* - 
     */
    public function searchAssets(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/assets/search", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
    
}
