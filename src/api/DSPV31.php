<?php

namespace lujie\amazon\advertising\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description Use the Amazon Ads API for DSP for campaign, creative, line item and association operations. For onboarding information, see the [account setup](https://advertising.amazon.com/API/docs/v3/guides/account_setup) topic.
*/
class DSPV31 extends \lujie\amazon\advertising\BaseAmazonAdvertisingClient
{

                
    /**
     * @description Gets an order with complete information specified by an identifier.     * @tag Order
     * @param string $orderId The order identifier.
     * @return array
     *      - *optimization* - 
     */
    public function getOrder(string $orderId, string $contentType = 'application/vnd.dsporders.v2.6+json'): array
    {
        return $this->api("/dsp/orders/{$orderId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets one or more orders with basic information.     * @tag Order
     * @param array $query
     *      - *startIndex* - string - optional
     *          - Optional. Sets a zero-based offset into the requested set of orders. Use in conjunction with the `count` parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
     *      - *count* - string - optional
     *          - Optional. Sets the number of orders in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten orders set `startIndex=0` and `count=10`. To return the next ten orders, set `startIndex=10` and `count=10`, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
     *      - *statusFilter* - string - optional
     *          - Optional. The returned array is filtered to include only orders with delivery status matching those specified in the comma-delimited string.
     *      - *orderIdFilter* - string - optional
     *          - The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
     *      - *advertiserIdFilter* - string - optional
     *          - The returned array is filtered to include only orders with identifiers matching those specified in the comma-delimited string. Either one of (OrderIdFilter or advertiserIdFilter) should be provided.
     * @return array
     *      - *optimization* - 
     */
    public function getOrders(array $query = [], string $contentType = 'application/vnd.dsporders.v2.6+json'): array
    {
        return $this->api(array_merge(["/dsp/orders/"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Create an order.

Callout - A future update will add support for multiple at a time.
     * @tag Order
     * @param array $data An array of order objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     */
    public function createOrders(array $data, string $contentType = 'application/vnd.dsporders.v2.6+json'): void
    {
        $this->api("/dsp/orders/", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description This is a full update, not partial patch. All the fields/data returned by GET Order by Id must be provided(including read-only fields). Any field that is changed/removed would be updated as provided in the request.
To update `deliveryActivationStatus` use POST deliveryActivationStatus by Order Id instead.

Callout - A future update will add support for multiple at a time.
     * @tag Order
     * @param array $data An array of order objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     */
    public function updateOrders(array $data, string $contentType = 'application/vnd.dsporders.v2.6+json'): void
    {
        $this->api("/dsp/orders/", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Setting delivery activation status for the given order id.     * @tag Order
     * @param string $orderId The order identifier.
     * @param array $query
     *      - *status* -  - required
     *          - The delivery activation status. If the given status value is not part of enumeration (DeliveryActivationStatus), then response code will be 404.
     */
    public function setOrderStatus(string $orderId, array $query): void
    {
        $this->api(array_merge(["/dsp/orders/{$orderId}/deliveryActivationStatus"], $query), 'POST');
    }
                    
    /**
     * @description Get conversion tracking information for given order.     * @tag Order
     * @param string $orderId The order identifier.
     * @return array
     *      - *products* - 
     *      - *pixels* - 
     */
    public function getConversionTrackings(string $orderId, string $contentType = 'application/vnd.dsporders.v2.1+json'): array
    {
        return $this->api("/dsp/orders/{$orderId}/conversionTracking", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Add or remove conversion tracking information from the order.     * @tag Order
     * @param string $orderId The order identifier.
     * @param array $data Conversion tracking object
     *      - *products* - 
     *      - *pixels* - 
     */
    public function updateConversionTracking(string $orderId, array $data, string $contentType = 'application/vnd.dsporders.v2.1+json'): void
    {
        $this->api("/dsp/orders/{$orderId}/conversionTracking", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Get conversion tracking products by identifier. If the order was previously updated by list of products, response will be a list of products. The maximum size of list will be 2000. If the order was previously updated by product file, please use '/dsp/orders/{orderId}/conversionTracking/products/export' to export as a file.     * @tag Order
     * @param string $orderId The order identifier.
     * @return array
     */
    public function getProductsByOrderId(string $orderId, string $contentType = 'application/vnd.dspproducttrackinglist.v1+json'): array
    {
        return $this->api("/dsp/orders/{$orderId}/conversionTracking/products", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Add or remove conversion tracking products from the order. It can be updated by either providing values for productList or productFile field. For productList, up to 2,000 ProductTrackingItems can be added, including up to 20 ProductTrackingItems per domain if FEATURED_WITH_VARIATIONS is specified in productAssociation. For productFile, up to 50,000 Products can be used. Check out our tutorial for more details.     * @tag Order
     * @param string $orderId The order identifier.
     * @param array $data Conversion tracking product tracking object
     *      - *productList* - 
     *      - *productFile* - string
     *          - The URL of the product tracking file.
     */
    public function updateProductsByOrderId(string $orderId, array $data, string $contentType = 'application/vnd.dspproducttracking.v1+json'): void
    {
        $this->api("/dsp/orders/{$orderId}/conversionTracking/products", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Export conversion tracking products as a file by identifier. The file URL will expire in 15 minutes.     * @tag Order
     * @param string $orderId The order identifier.
     * @return array
     */
    public function exportProductsByOrderId(string $orderId, string $contentType = 'application/vnd.dspproducttrackingfile.v1+json'): array
    {
        return $this->api("/dsp/orders/{$orderId}/conversionTracking/products/export", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Get conversion tracking pixels by identifier.     * @tag Order
     * @param string $orderId The order identifier.
     * @return array
     */
    public function getPixelsByOrderId(string $orderId, string $contentType = 'application/vnd.dsppixeltracking.v1+json'): array
    {
        return $this->api("/dsp/orders/{$orderId}/conversionTracking/pixels", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Add or remove conversion tracking pixels from the order. The maximum size of pixel list is 100.     * @tag Order
     * @param string $orderId The order identifier.
     * @param array $data Conversion tracking pixel tracking object
     */
    public function updatePixelsByOrderId(string $orderId, array $data, string $contentType = 'application/vnd.dsppixeltracking.v1+json'): void
    {
        $this->api("/dsp/orders/{$orderId}/conversionTracking/pixels", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets line item specified by identifier.     * @tag LineItem
     * @param string $lineItemId The line item identifier.
     * @return array
     *      - *targeting* - 
     */
    public function getLineItem(string $lineItemId, string $contentType = 'application/vnd.dsplineitems.v3.3+json'): array
    {
        return $this->api("/dsp/lineItems/{$lineItemId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets one or more line items with basic information.     * @tag LineItem
     * @param array $query
     *      - *startIndex* - string - optional
     *          - Optional. Sets a zero-based offset into the requested set of line items. Use in conjunction with the `count` parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
     *      - *count* - string - optional
     *          - Optional. Sets the number of line items in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten line items set `startIndex=0` and `count=10`. To return the next ten line items, set `startIndex=10` and `count=10`, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
     *      - *statusFilter* - string - optional
     *          - Optional. The returned array is filtered to include only line items with delivery status matching those specified in the comma-delimited string.
     *      - *orderIdFilter* - string - optional
     *          - The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
     *      - *lineItemIdFilter* - string - optional
     *          - The returned array is filtered to include only line items with identifiers matching those specified in the comma-delimited string. Either one of (orderIdFilter or lineItemIdFilter) should be provided.
     * @return array
     *      - *totalResults* - integer
     *          - Total number of results which satisfy the filtering criteria. This will help to support pagination.
     *      - *response* - array
     */
    public function getLineItems(array $query = [], string $contentType = 'application/vnd.dspbasiclineitems.v3+json'): array
    {
        return $this->api(array_merge(["/dsp/lineItems/"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Create line item.

Callout - A future update will add support for multiple at a time.
     * @tag LineItem
     * @param array $data An array of lineitem objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     */
    public function createLineItems(array $data, string $contentType = 'application/vnd.dsplineitems.v3.3+json'): void
    {
        $this->api("/dsp/lineItems/", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description This is a full update, not partial patch. All the fields/data returned by GET LineItem by Id must be provided(including read-only fields). Any field that is changed/removed would be updated as provided in the request.
To update `deliveryActivationStatus` use POST deliveryActivationStatus by LineItem Id instead.

Callout - A future update will add support for multiple at a time.
     * @tag LineItem
     * @param array $data An array of line item objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     */
    public function updateLineItems(array $data, string $contentType = 'application/vnd.dsplineitems.v3.3+json'): void
    {
        $this->api("/dsp/lineItems/", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Setting delivery activation status for the given line item id. Version 2.x line items accept `application/vnd.dsplineitems.v2+json` for this API. Version 3.x line items accept `application/vnd.dsplineitemsdeliveryactivationstatus.v3+json` for this API.     * @tag LineItem
     * @param string $lineItemId The line item identifier.
     * @param array $query
     *      - *status* -  - required
     *          - The delivery activation status. If the given delivery activation status value is not part of enumeration (DeliveryActivationStatus), Response code will be 404.
     */
    public function setLineItemStatus(string $lineItemId, array $query): void
    {
        $this->api(array_merge(["/dsp/lineItems/{$lineItemId}/deliveryActivationStatus"], $query), 'POST');
    }
                    
    /**
     * @description Gets one or more creatives.     * @tag Creative
     * @param array $query
     *      - *startIndex* - string - optional
     *          - Optional. Sets a zero-based offset into the requested set of creatives. Use in conjunction with the `count` parameter to control pagination of the returned array. Default startIndex is 0. Minimum count is 0.
     *      - *count* - string - optional
     *          - Optional. Sets the number of creatives in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten creatives set `startIndex=0` and `count=10`. To return the next ten creatives, set `startIndex=10` and `count=10`, and so on. Default count is 100. Minimum count is 1 and maximum count is 100.
     *      - *creativeIdFilter* - string - optional
     *          - The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
     *      - *advertiserIdFilter* - string - optional
     *          - The returned array is filtered to include only creatives with identifiers matching those specified in the comma-delimited string. Either one of (creativeIdFilter or advertiserIdFilter) should be given.
     *      - *lineItemTypeFilter* -  - optional
     *          - The returned array is filtered to include only creatives with line item type matching those specified in the comma-delimited string. If the given filter value is not part of enumeration (LineItemType), Response code will be 404. VIDEO line item type filter is available since version `application/vnd.dspcreatives.v2.1+json`.
     * @return array
     *      - *totalResults* - integer
     *          - Total number of results which satisfy the filtering criteria. This will help to support pagination.
     *      - *response* - array
     */
    public function getCreatives(array $query = [], string $contentType = 'application/vnd.dspcreatives.v2.1+json'): array
    {
        return $this->api(array_merge(["/dsp/creatives/"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Get an image creative matching criteria provided in request.

Callout - A future update will add support to get multiple Image creatives at a time.
     * @tag Image Creative
     * @return array
     *      - *creatives* - array
     */
    public function getImageCreatives(string $contentType = 'application/vnd.dspimagecreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/image", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Create an image creative.

Callout - A future update will add support to create multiple Image creatives at a time.
     * @tag Image Creative
     * @param array $data An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @return array
     */
    public function createImageCreative(array $data, string $contentType = 'application/vnd.dspcreateimagecreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/image", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Update an image creative.

Callout - A future update will add support to update multiple Image creatives at a time.
     * @tag Image Creative
     * @param array $data An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @return array
     */
    public function updateImageCreative(array $data, string $contentType = 'application/vnd.dspupdateimagecreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/image", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Preview an image creative.
     * @tag Image Creative
     * @param array $data A preview request.
     *      - *creativeId* - string
     *          - The creative Id.
     *      - *creativeModel* - 
     *      - *previewConfiguration* - 
     * @return array
     *      - *previewContent* - string
     *          - The HTML content
     */
    public function previewImageCreative(array $data, string $contentType = 'application/vnd.dsppreviewimagecreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/image/preview", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Get a video creative matching criteria provided in request.

Callout - A future update will add support to get multiple Video creatives at a time.
     * @tag Video Creative
     * @return array
     *      - *creatives* - array
     */
    public function getVideoCreatives(string $contentType = 'application/vnd.dspvideocreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/video", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Create a video creative

Callout - A future update will add support to create multiple Video creatives at a time.
     * @tag Video Creative
     * @param array $data An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @return array
     */
    public function createVideoCreatives(array $data, string $contentType = 'application/vnd.dspcreatevideocreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/video", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Update a video creative

Callout - A future update will add support to update multiple Video creatives at a time.
     * @tag Video Creative
     * @param array $data An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @return array
     */
    public function updateVideoCreatives(array $data, string $contentType = 'application/vnd.dspupdatevideocreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/video", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Preview a video creative     * @tag Video Creative
     * @param array $data A preview request.
     *      - *creativeId* - string
     *          - The creative Id.
     *      - *creativeModel* - 
     * @return array
     *      - *previewContent* - string
     *          - The HTML content
     */
    public function previewVideoCreative(array $data, string $contentType = 'application/vnd.dsppreviewvideocreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/video/preview", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Get an Responsive eCommerce Creative (REC) matching criteria provided in request.

Callout - A future update will add support to get multiple REC creatives at a time.
     * @tag Responsive eCommerce Creative
     * @return array
     *      - *creatives* - array
     */
    public function getRecCreatives(string $contentType = 'application/vnd.dspreccreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/rec", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Create a new Responsive eCommerce Creatives(REC).

Callout - A future update will add support to create multiple REC creatives at a time.
     * @tag Responsive eCommerce Creative
     * @param array $data An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @return array
     */
    public function createRecCreatives(array $data, string $contentType = 'application/vnd.dspcreatereccreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/rec", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Update existing Responsive eCommerce Creatives(REC).

Callout - A future update will add support for multiple at a time.
     * @tag Responsive eCommerce Creative
     * @param array $data An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @return array
     */
    public function updateRecCreatives(array $data, string $contentType = 'application/vnd.dspupdatereccreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/rec", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Preview a Responsive eCommerce Creative(REC).     * @tag Responsive eCommerce Creative
     * @param array $data A preview request.
     *      - *creativeId* - string
     *          - The identifier of the creative.
     *      - *creativeModel* - 
     *      - *previewConfiguration* - 
     * @return array
     *      - *previewContent* - string
     *          - The HTML content
     */
    public function previewRecCreative(array $data, string $contentType = 'application/vnd.dsppreviewreccreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/rec/preview", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Get a third party creative matching criteria provided in request.

Note that a future update will add support to get multiple third party creatives at a time.
     * @tag Third Party Creative
     * @return array
     *      - *creatives* - array
     */
    public function getThirdPartyCreatives(string $contentType = 'application/vnd.dspthirdpartycreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/thirdparty", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Create a third party creative.

Note that a future update will add support to create multiple third party creatives at a time.
     * @tag Third Party Creative
     * @param array $data An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @return array
     */
    public function createThirdPartyCreative(array $data, string $contentType = 'application/vnd.dspcreatethirdpartycreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/thirdparty", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Update a third party creative.

Note that a future update will add support to update multiple third party creatives at a time.
     * @tag Third Party Creative
     * @param array $data An array of creative objects. For each object, specify required fields and their values. Maximum length of the array is 1.
     * @return array
     */
    public function updateThirdPartyCreative(array $data, string $contentType = 'application/vnd.dspupdatethirdpartycreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/thirdparty", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Preview a third party creative.
     * @tag Third Party Creative
     * @param array $data A preview request.
     *      - *creativeId* - string
     *          - The identifier of the creative.
     *      - *creativeModel* - 
     *      - *previewConfiguration* - 
     * @return array
     *      - *previewContent* - string
     *          - The HTML content
     */
    public function previewThirdPartyCreative(array $data, string $contentType = 'application/vnd.dsppreviewthirdpartycreatives.v1+json'): array
    {
        return $this->api("/dsp/creatives/thirdparty/preview", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Get creative moderation summary by creativeId.     * @tag Moderation

     */
    public function getCreativeModeration(string $contentType = 'application/vnd.dspmoderationcreatives.v1+json'): void
    {
        $this->api("/dsp/moderation/creatives", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an array of creative associations, filtered by specified criteria.     * @tag LineItemCreativeAssociation
     * @param array $query
     *      - *lineItemIdFilter* - string - required
     *          - The returned array includes only associations to line items matching those specified in the comma-delimited string.
     *      - *count* - int - optional
     *          - Optional. Sets the number of results in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten results set `startIndex=0` and `count=10`. To return the next ten results, set `startIndex=10` and `count=10`, and so on. Maximum of count is 20.
     *      - *startIndex* - int - optional
     *          - Optional. Sets a zero-based offset into the requested set of results. Use in conjunction with the `count` parameter to control pagination of the returned array. Default startIndex is 0.
     * @return array
     *      - *totalResults* - integer
     *          - Total number of results which satisfy the filtering criteria. This will help to support pagination.
     *      - *response* - array
     */
    public function listLineItemCreativeAssociations(array $query, string $contentType = 'application/vnd.dsplineitemcreativeassociations.v2.2+json'): array
    {
        return $this->api(array_merge(["/dsp/lineItemCreativeAssociations"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Update association details. This API will be used to update startDate, endDate and weight parameters. Weight field can be updated only if creativeRotationType is `WEIGHTED`. CreativeRotationType field is under line item setting.

Callout - A future update will add support for multiple at a time.
     * @tag LineItemCreativeAssociation
     * @param array $data 
     */
    public function updateLineItemCreativeAssociations(array $data, string $contentType = 'application/vnd.dsplineitemcreativeassociations.v2.1+json'): void
    {
        $this->api("/dsp/lineItemCreativeAssociations", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Create/delete association between line item and creative.

Callout -  Do not pass in startDate, endDate and weight. Use the PUT operation instead to populate these fields. We will add support in POST in a future update. A future update will also include support for multiple at a time.
     * @tag LineItemCreativeAssociation
     * @param array $data 
     *      - *advertiserId* - string
     *          - The advertiser identifier.
     *      - *operation* - 
     *      - *associations* - array
     *          - A list of the associations to operate on. This object requires only lineItemId and creativeId and other fields are not required.
     * @return array
     *      - *success* - 
     *      - *errorDetails* - 
     */
    public function associateLineItemsToCreatives(array $data, string $contentType = 'application/vnd.dsplineitemcreativeassociations.v2.1+json'): array
    {
        return $this->api("/dsp/lineItemCreativeAssociations", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Create file upload policy that used to upload file to AWS S3. File upload policy will expire in 15 minutes.     * @tag FileUploads
     * @param array $query
     *      - *policyType* -  - required
     *          - The returned file upload policy is determined by policyType.
     * @return array
     *      - *url* - string
     *          - The AWS S3 url for file upload. It will be used as POST request URL.
     *      - *fields* - object
     *          - Fields used in Post request. See more details at https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/modules/_aws_sdk_s3_presigned_post.html#post-file-using-formdata-in-nodejs
     */
    public function createFileUploadsPolicy(array $query, string $contentType = 'application/vnd.dspfileuploadpolicies.v1+json'): array
    {
        return $this->api(array_merge(["/dsp/fileUploads/policy/"], $query), 'POST', ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets a list of pixels based on filters. AdvertiserIdFilter must be provided. Results are sorted by create time in ascending order (earliest first).     * @tag Discovery
     * @param array $query
     *      - *advertiserIdFilter* - array - required
     *          - The returned array is filtered to include only pixels owned by the advertiserIds specified. Up to 5 advertisers may be specified in a single request, unless pixelIdFilter is also present (see pixelIdFilter).
     *      - *pixelIdFilter* - array - optional
     *          - The returned array is filtered to include only pixels with ID matching those specified in the comma-delimited string. Limited to 25 pixel IDs per request. All pixels specified must belong to the same advertiser and therefore advertiserIdFilter is limited to a single advertiser if pixelIdFilter is non-null.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of pixels in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     */
    public function getPixels(array $query, string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/dsp/pixels"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets the hierarchy of product category objects as a list sorted by ID in ascending order.     * @tag Discovery
     * @param array $query
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of categories in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     */
    public function getProductCategories(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/dsp/productCategories"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Gets the supply sources based on line item type, advertiser and supply source type. When the supply source type is deal, orderId must be supplied. The returned list of deal supply sources will be filtered to include only those valid for the advertiser that owns the order and are running during the order dates.     * @tag Discovery
     * @param array $query
     *      - *lineItemType* -  - required
     *          - Line item type to retrieve supply sources for
     *      - *supplySourceType* - string - required
     *          - Type of supply source to retrieve
     *      - *orderId* - string - optional
     *          - Required for deal supply source type. The start time of the Order will be used to determine which deals to fetch. Returned deals will be valid for the advertiserId used to create the Order.
     *      - *advertiserId* - string - optional
     *          - Optional, but recommended. If specified, the result set of supply sources will be filtered to only those valid for the given advertiserId. If orderId is also provided, the order must belong to the specified advertiser.
     *      - *deviceTypes* - array - optional
     *          - Restricts query to the specified device types. If not specified, all valid device types for a line item type will be returned.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of supply sources in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return Iterator
     *      - *nextToken* - string
     *      - *supplySources* - array
     *          - Array of supply source items sorted by deal start time (if available) then ID, ascending.
     */
    public function eachSupplySources(array $query, string $contentType = 'application/vnd.supplysources.v1.2+json'): Iterator
    {
        return $this->eachInternal('getSupplySources', func_get_args());
    }
        
    /**
     * @description Gets the supply sources based on line item type, advertiser and supply source type. When the supply source type is deal, orderId must be supplied. The returned list of deal supply sources will be filtered to include only those valid for the advertiser that owns the order and are running during the order dates.     * @tag Discovery
     * @param array $query
     *      - *lineItemType* -  - required
     *          - Line item type to retrieve supply sources for
     *      - *supplySourceType* - string - required
     *          - Type of supply source to retrieve
     *      - *orderId* - string - optional
     *          - Required for deal supply source type. The start time of the Order will be used to determine which deals to fetch. Returned deals will be valid for the advertiserId used to create the Order.
     *      - *advertiserId* - string - optional
     *          - Optional, but recommended. If specified, the result set of supply sources will be filtered to only those valid for the given advertiserId. If orderId is also provided, the order must belong to the specified advertiser.
     *      - *deviceTypes* - array - optional
     *          - Restricts query to the specified device types. If not specified, all valid device types for a line item type will be returned.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of supply sources in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return Iterator
     *      - *nextToken* - string
     *      - *supplySources* - array
     *          - Array of supply source items sorted by deal start time (if available) then ID, ascending.
     */
    public function batchSupplySources(array $query, string $contentType = 'application/vnd.supplysources.v1.2+json'): Iterator
    {
        return $this->batchInternal('getSupplySources', func_get_args());
    }
    
    /**
     * @description Gets the supply sources based on line item type, advertiser and supply source type. When the supply source type is deal, orderId must be supplied. The returned list of deal supply sources will be filtered to include only those valid for the advertiser that owns the order and are running during the order dates.     * @tag Discovery
     * @param array $query
     *      - *lineItemType* -  - required
     *          - Line item type to retrieve supply sources for
     *      - *supplySourceType* - string - required
     *          - Type of supply source to retrieve
     *      - *orderId* - string - optional
     *          - Required for deal supply source type. The start time of the Order will be used to determine which deals to fetch. Returned deals will be valid for the advertiserId used to create the Order.
     *      - *advertiserId* - string - optional
     *          - Optional, but recommended. If specified, the result set of supply sources will be filtered to only those valid for the given advertiserId. If orderId is also provided, the order must belong to the specified advertiser.
     *      - *deviceTypes* - array - optional
     *          - Restricts query to the specified device types. If not specified, all valid device types for a line item type will be returned.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of supply sources in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return array
     *      - *nextToken* - string
     *      - *supplySources* - array
     *          - Array of supply source items sorted by deal start time (if available) then ID, ascending.
     */
    public function getSupplySources(array $query, string $contentType = 'application/vnd.supplysources.v1.2+json'): array
    {
        return $this->api(array_merge(["/dsp/supplySources"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets the list of domain lists for inclusion/exclusion based on entity. Lists are sorted by creation time.     * @tag Discovery
     * @param array $query
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of domain lists in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,100] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     */
    public function getDomains(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/dsp/domainLists"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets location targeting objects based on geoLocationID(s) or a text query (country, state, city, postal code, or DMA). Either geoLocationIdFilter or textQuery must be supplied, but not both. 

Text Query Examples:

When you search for "California States", only the state of California is returned.\
When you search for "California counties" only the counties in California are returned.\
When you search for "California postal" only the zip codes in California are returned.\
When you search for "California cities" only the cities in California are returned.\
When you search for "US states" all of the US states are returned.\
When you search for "US states A" only the US states beginning with A are returned.\
When you search for "US DMAs" only the DMAs in the US are returned.\
When you search for "US postal" only the postal codes in the US are returned.
     * @tag Discovery
     * @param array $query
     *      - *geoLocationIdFilter* - array - optional
     *          - An array of location IDs to retrieve, up to 10 in one request.
     *      - *textQuery* - string - optional
     *          - Filter by text such as city, state, country, dma, or postal code. Retrieves top 100 results in decreasing order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 100 items total.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of locations in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,2000] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     */
    public function getGeoLocations(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/dsp/geoLocations"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets the hierarchy of IAB content categories as a list sorted by ID in ascending order.     * @tag Discovery
     * @param array $query
     *      - *lineItemType* -  - optional
     *          - The line item type to retrieve content categories for. This was introduced in version - `application/vnd.dspiabcontentcategories.v1+json`.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of categories in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,1000] with default as 250. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     */
    public function getIabContentCategories(array $query = [], string $contentType = 'application/vnd.dspiabcontentcategories.v1+json'): void
    {
        $this->api(array_merge(["/dsp/iabContentCategories"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Retrieves custom contextual segments pre-bid targeting data for an account that is already linked to Double Verify. If an account is not linked to the provider, no data will be returned.     * @tag Discovery
     * @param array $query
     *      - *advertiserId* - string - required
     *          - The advertiser to retrieve pre-bid targeting for.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of segments in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return Iterator
     *      - *nextToken* - string
     *      - *customContextualSegments* - array
     */
    public function eachDvCustomContextualSegments(array $query, string $contentType = 'application/json'): Iterator
    {
        return $this->eachInternal('getDvCustomContextualSegments', func_get_args());
    }
        
    /**
     * @description Retrieves custom contextual segments pre-bid targeting data for an account that is already linked to Double Verify. If an account is not linked to the provider, no data will be returned.     * @tag Discovery
     * @param array $query
     *      - *advertiserId* - string - required
     *          - The advertiser to retrieve pre-bid targeting for.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of segments in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return Iterator
     *      - *nextToken* - string
     *      - *customContextualSegments* - array
     */
    public function batchDvCustomContextualSegments(array $query, string $contentType = 'application/json'): Iterator
    {
        return $this->batchInternal('getDvCustomContextualSegments', func_get_args());
    }
    
    /**
     * @description Retrieves custom contextual segments pre-bid targeting data for an account that is already linked to Double Verify. If an account is not linked to the provider, no data will be returned.     * @tag Discovery
     * @param array $query
     *      - *advertiserId* - string - required
     *          - The advertiser to retrieve pre-bid targeting for.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of segments in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return array
     *      - *nextToken* - string
     *      - *customContextualSegments* - array
     */
    public function getDvCustomContextualSegments(array $query, string $contentType = 'application/json'): array
    {
        return $this->api(array_merge(["/dsp/preBidTargeting/doubleVerify/customContextualSegments"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Retrieves custom predict pre-bid targeting data for an account that is already linked to Oracle Data Cloud. If an account is not linked to the provider, no data will be returned.     * @tag Discovery
     * @param array $query
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of segments in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return Iterator
     *      - *nextToken* - string
     *      - *customPredicts* - array
     */
    public function eachOdcCustomPredicts(array $query = [], string $contentType = 'application/json'): Iterator
    {
        return $this->eachInternal('getOdcCustomPredicts', func_get_args());
    }
        
    /**
     * @description Retrieves custom predict pre-bid targeting data for an account that is already linked to Oracle Data Cloud. If an account is not linked to the provider, no data will be returned.     * @tag Discovery
     * @param array $query
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of segments in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return Iterator
     *      - *nextToken* - string
     *      - *customPredicts* - array
     */
    public function batchOdcCustomPredicts(array $query = [], string $contentType = 'application/json'): Iterator
    {
        return $this->batchInternal('getOdcCustomPredicts', func_get_args());
    }
    
    /**
     * @description Retrieves custom predict pre-bid targeting data for an account that is already linked to Oracle Data Cloud. If an account is not linked to the provider, no data will be returned.     * @tag Discovery
     * @param array $query
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of segments in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return array
     *      - *nextToken* - string
     *      - *customPredicts* - array
     */
    public function getOdcCustomPredicts(array $query = [], string $contentType = 'application/json'): array
    {
        return $this->api(array_merge(["/dsp/preBidTargeting/oracleDataCloud/customPredicts"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Retrieves standard predict pre-bid targeting data.     * @tag Discovery
     * @param array $query
     *      - *nextToken* - string - optional
     *          - Token to be used to request additional entries. If not provided, up to the first 320 entries are returned. Note: subsequent calls must be made using the same parameters as used in previous requests that returned the provided nextToken.
     * @return Iterator
     *      - *nextToken* - string
     *      - *standardPredicts* - array
     */
    public function eachOdcStandardPredicts(array $query = [], string $contentType = 'application/vnd.odcstandardpredicts.v1+json'): Iterator
    {
        return $this->eachInternal('getOdcStandardPredicts', func_get_args());
    }
        
    /**
     * @description Retrieves standard predict pre-bid targeting data.     * @tag Discovery
     * @param array $query
     *      - *nextToken* - string - optional
     *          - Token to be used to request additional entries. If not provided, up to the first 320 entries are returned. Note: subsequent calls must be made using the same parameters as used in previous requests that returned the provided nextToken.
     * @return Iterator
     *      - *nextToken* - string
     *      - *standardPredicts* - array
     */
    public function batchOdcStandardPredicts(array $query = [], string $contentType = 'application/vnd.odcstandardpredicts.v1+json'): Iterator
    {
        return $this->batchInternal('getOdcStandardPredicts', func_get_args());
    }
    
    /**
     * @description Retrieves standard predict pre-bid targeting data.     * @tag Discovery
     * @param array $query
     *      - *nextToken* - string - optional
     *          - Token to be used to request additional entries. If not provided, up to the first 320 entries are returned. Note: subsequent calls must be made using the same parameters as used in previous requests that returned the provided nextToken.
     * @return array
     *      - *nextToken* - string
     *      - *standardPredicts* - array
     */
    public function getOdcStandardPredicts(array $query = [], string $contentType = 'application/vnd.odcstandardpredicts.v1+json'): array
    {
        return $this->api(array_merge(["/dsp/preBidTargeting/oracleDataCloud/standardPredicts"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets a list of configurations that can be applied to orders to optimize for a desired campaign goal, sorted by goal name.     * @tag Discovery
     * @param array $query
     *      - *productLocation* - string - required
     *          - Whether to retrieve the goal configurations available for an endemic (sold on Amazon) or non-endemic order.
     */
    public function getGoalConfigurations(array $query, string $contentType = 'application/vnd.goalconfigurations.v1.1+json'): void
    {
        $this->api(array_merge(["/dsp/goalConfigurations"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Gets apps based on app Ids or text querys. Either one of app Ids or text query may be supplied, but not both.     * @tag Discovery
     * @param array $query
     *      - *appIdFilter* - array - optional
     *          - An array of app Ids to retrieve, up to 20 in one request.
     *      - *textQuery* - string - optional
     *          - Filter by text. Retrieves up to 1000 results in sorted lexicographically, descending order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 1000 items total.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of apps in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,1000] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return Iterator
     *      - *nextToken* - string
     *      - *apps* - array
     */
    public function eachApps(array $query = [], string $contentType = 'application/vnd.dspgetapps.v1+json'): Iterator
    {
        return $this->eachInternal('getApps', func_get_args());
    }
        
    /**
     * @description Gets apps based on app Ids or text querys. Either one of app Ids or text query may be supplied, but not both.     * @tag Discovery
     * @param array $query
     *      - *appIdFilter* - array - optional
     *          - An array of app Ids to retrieve, up to 20 in one request.
     *      - *textQuery* - string - optional
     *          - Filter by text. Retrieves up to 1000 results in sorted lexicographically, descending order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 1000 items total.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of apps in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,1000] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return Iterator
     *      - *nextToken* - string
     *      - *apps* - array
     */
    public function batchApps(array $query = [], string $contentType = 'application/vnd.dspgetapps.v1+json'): Iterator
    {
        return $this->batchInternal('getApps', func_get_args());
    }
    
    /**
     * @description Gets apps based on app Ids or text querys. Either one of app Ids or text query may be supplied, but not both.     * @tag Discovery
     * @param array $query
     *      - *appIdFilter* - array - optional
     *          - An array of app Ids to retrieve, up to 20 in one request.
     *      - *textQuery* - string - optional
     *          - Filter by text. Retrieves up to 1000 results in sorted lexicographically, descending order of relevancy. Results may be paginated to retrieve these items in pages, but no query will return more than 1000 items total.
     *      - *nextToken* - string - optional
     *          - Token from a previous request. Use in conjunction with the `maxResults` parameter to control pagination of the returned array.
     *      - *maxResults* - int - optional
     *          - Sets the maximum number of apps in the returned array. Use in conjunction with the `nextToken` parameter to control pagination. The range for maxResults is [1,1000] with default as 10. For example, supplying maxResults=20 with a previously returned token will fetch up to the next 20 items. In some cases, fewer items may be returned.
     * @return array
     *      - *nextToken* - string
     *      - *apps* - array
     */
    public function getApps(array $query = [], string $contentType = 'application/vnd.dspgetapps.v1+json'): array
    {
        return $this->api(array_merge(["/dsp/apps"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets one or more line items domain targeting information.     * @tag Domain Targeting
     * @param array $query
     *      - *lineItemIdFilter* - string - required
     *          - Comma-delimited string of line item ids. Maximum 100 ids.
     * @return array
     *      - *response* - array
     */
    public function getDomainTargeting(array $query, string $contentType = 'application/vnd.dspreaddomaintargeting.v1+json'): array
    {
        return $this->api(array_merge(["/dsp/targeting/domain/"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Replaces the DomainTargeting for the specified line items with the ones provided in the request body.
     * @tag Domain Targeting
     * @param array $data An array of domain targeting objects. Maximum length of the array is 1.
     */
    public function updateDomainTargeting(array $data, string $contentType = 'application/vnd.dspupdatedomaintargeting.v1+json'): void
    {
        $this->api("/dsp/targeting/domain/", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
    
}
