<?php

namespace lujie\amazon\sp\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The Selling Partner API for Data Kiosk lets you submit GraphQL queries from a variety of schemas to help selling partners manage their businesses.
*/
class DataKiosk20231115 extends \lujie\amazon\sp\BaseAmazonSPClient
{

                
    /**
     * @description Returns details for the Data Kiosk queries that match the specified filters. See the `createQuery` operation for details about query retention.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.0222 | 10 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag queries
     * @param array $query
     *      - *processingStatuses* - array - optional
     *          - A list of processing statuses used to filter queries.
     *      - *pageSize* - integer - optional
     *          - The maximum number of queries to return in a single call.
     *      - *createdSince* - string - optional
     *          - The earliest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is 90 days ago.
     *      - *createdUntil* - string - optional
     *          - The latest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is the time of the `getQueries` request.
     *      - *paginationToken* - string - optional
     *          - A token to fetch a certain page of results when there are multiple pages of results available. The value of this token is fetched from the `pagination.nextToken` field returned in the `GetQueriesResponse` object. All other parameters must be provided with the same values that were provided with the request that generated this token, with the exception of `pageSize` which can be modified between calls to `getQueries`. In the absence of this token value, `getQueries` returns the first page of results.
     * @return array
     *      - *queries* - 
     *          - The Data Kiosk queries.
     *      - *pagination* - object
     *          - When a request has results that are not included in this response, pagination occurs. This means the results are divided into pages. To retrieve the next page, you must pass the `nextToken` as the `paginationToken` query parameter in the subsequent `getQueries` request. All other parameters must be provided with the same values that were provided with the request that generated this token, with the exception of `pageSize` which can be modified between calls to `getQueries`. When there are no more pages to fetch, the `nextToken` field will be absent.
     */
    public function getQueries(array $query = []): array
    {
        return $this->api(array_merge(["/dataKiosk/2023-11-15/queries"], $query));
    }
                
    /**
     * @description Creates a Data Kiosk query request.

**Note:** The retention of a query varies based on the fields requested. Each field within a schema is annotated with a `@resultRetention` directive that defines how long a query containing that field will be retained. When a query contains multiple fields with different retentions, the shortest (minimum) retention is applied. The retention of a query's resulting documents always matches the retention of the query.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.0167 | 15 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag queries
     * @param array $data 
     * @return array
     *      - *queryId* - string
     *          - The identifier for the query. This identifier is unique only in combination with a selling partner account ID.
     */
    public function createQuery(array $data): array
    {
        return $this->api("/dataKiosk/2023-11-15/queries", 'POST', $data);
    }
                        
    /**
     * @description Cancels the query specified by the `queryId` parameter. Only queries with a non-terminal `processingStatus` (`IN_QUEUE`, `IN_PROGRESS`) can be cancelled. Cancelling a query that already has a `processingStatus` of `CANCELLED` will no-op. Cancelled queries are returned in subsequent calls to the `getQuery` and `getQueries` operations.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.0222 | 10 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag queries
     * @param string $queryId The identifier for the query. This identifier is unique only in combination with a selling partner account ID.
     */
    public function cancelQuery(string $queryId): void
    {
        $this->api("/dataKiosk/2023-11-15/queries/{$queryId}", 'DELETE');
    }
                
    /**
     * @description Returns query details for the query specified by the `queryId` parameter. See the `createQuery` operation for details about query retention.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2.0 | 15 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag queries
     * @param string $queryId The query identifier.
     * @return array
     *      - *queryId* - string
     *          - The query identifier. This identifier is unique only in combination with a selling partner account ID.
     *      - *query* - string
     *          - The submitted query.
     *      - *createdTime* - string
     *          - The date and time when the query was created, in ISO 8601 date time format.
     *      - *processingStatus* - string
     *          - The processing status of the query.
     *      - *processingStartTime* - string
     *          - The date and time when the query processing started, in ISO 8601 date time format.
     *      - *processingEndTime* - string
     *          - The date and time when the query processing completed, in ISO 8601 date time format.
     *      - *dataDocumentId* - string
     *          - The data document identifier. This identifier is only present when there is data available as a result of the query. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the `getDocument` operation to get the information required to retrieve the data document's contents.
     *      - *errorDocumentId* - string
     *          - The error document identifier. This identifier is only present when an error occurs during query processing. This identifier is unique only in combination with a selling partner account ID. Pass this identifier into the `getDocument` operation to get the information required to retrieve the error document's contents.
     *      - *pagination* - object
     *          - When a query produces results that are not included in the data document, pagination occurs. This means the results are divided into pages. To retrieve the next page, you must pass a `CreateQuerySpecification` object with `paginationToken` set to this object's `nextToken` and with `query` set to this object's `query` in the subsequent `createQuery` request. When there are no more pages to fetch, the `nextToken` field will be absent.
     */
    public function getQuery(string $queryId): array
    {
        return $this->api("/dataKiosk/2023-11-15/queries/{$queryId}");
    }
                        
    /**
     * @description Returns the information required for retrieving a Data Kiosk document's contents. See the `createQuery` operation for details about document retention.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.0167 | 15 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag queries
     * @param string $documentId The identifier for the Data Kiosk document.
     * @return array
     *      - *documentId* - string
     *          - The identifier for the Data Kiosk document. This identifier is unique only in combination with a selling partner account ID.
     *      - *documentUrl* - string
     *          - A presigned URL that can be used to retrieve the Data Kiosk document. This URL expires after 5 minutes. If the Data Kiosk document is compressed, the `Content-Encoding` header will indicate the compression algorithm.

**Note:** Most HTTP clients are capable of automatically decompressing downloaded files based on the `Content-Encoding` header.
     */
    public function getDocument(string $documentId): array
    {
        return $this->api("/dataKiosk/2023-11-15/documents/{$documentId}");
    }
    
}
