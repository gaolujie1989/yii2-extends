<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class ExportSettings extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

            
    /**
     * @description Lists elastic exports.
     * @tag ExportSettings
     * @param array $query
     *      - *id* - int - optional
     *          - The ID of the export
     *      - *formatKey* - string - optional
     *          - The format of the export
     *      - *type* - string - optional
     *          - The type of the export
     *      - *name* - string - optional
     *          - The name of the export
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Export
     */
    public function eachExports(array $query = []): Iterator
    {
        return $this->eachInternal('getExports', func_get_args());
    }
        
    /**
     * @description Lists elastic exports.
     * @tag ExportSettings
     * @param array $query
     *      - *id* - int - optional
     *          - The ID of the export
     *      - *formatKey* - string - optional
     *          - The format of the export
     *      - *type* - string - optional
     *          - The type of the export
     *      - *name* - string - optional
     *          - The name of the export
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Export
     */
    public function batchExports(array $query = []): Iterator
    {
        return $this->batchInternal('getExports', func_get_args());
    }
    
    /**
     * @description Lists elastic exports.
     * @tag ExportSettings
     * @param array $query
     *      - *id* - int - optional
     *          - The ID of the export
     *      - *formatKey* - string - optional
     *          - The format of the export
     *      - *type* - string - optional
     *          - The type of the export
     *      - *name* - string - optional
     *          - The name of the export
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Export
     */
    public function getExports(array $query = []): array
    {
        return $this->api(array_merge(["/rest/exports"], $query));
    }
                
    /**
     * @description Creates an export. The name, formatKey, type and outputType must be specified.
     * @tag ExportSettings
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - export id
     *      - *name* - string
     *          - export name
     *      - *type* - string
     *          - export type
     *      - *limit* - integer
     *          - maximum number of entries
     *      - *createdAt* - string
     *          - created at date timestamp
     *      - *updatedAt* - string
     *          - last update date timestamp
     *      - *formatKey* - string
     *          - the format key
     *      - *outputType* - string
     *          - the output type
     *      - *generateCache* - integer
     *          - if cache should be generated
     */
    public function createExport(array $data): array
    {
        return $this->api("/rest/exports", 'POST', $data);
    }
                    
    /**
     * @description Deletes an export. The ID of the export must be specified.
     * @tag ExportSettings
     * @param int $exportId 
     */
    public function deleteExportByExportId(int $exportId)
    {
        return $this->api("/rest/exports/{$exportId}", 'DELETE');
    }
                
    /**
     * @description Gets detailed information about an export. The ID of the export must be specified.
     * @tag ExportSettings
     * @param int $exportId 
     * @return array
     *      - *id* - integer
     *          - export id
     *      - *name* - string
     *          - export name
     *      - *type* - string
     *          - export type
     *      - *limit* - integer
     *          - maximum number of entries
     *      - *createdAt* - string
     *          - created at date timestamp
     *      - *updatedAt* - string
     *          - last update date timestamp
     *      - *formatKey* - string
     *          - the format key
     *      - *outputType* - string
     *          - the output type
     *      - *generateCache* - integer
     *          - if cache should be generated
     */
    public function getExportByExportId(int $exportId): array
    {
        return $this->api("/rest/exports/{$exportId}");
    }
                
    /**
     * @description Updates an export. The ID of the export must be specified.
     * @tag ExportSettings
     * @param int $exportId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - export id
     *      - *name* - string
     *          - export name
     *      - *type* - string
     *          - export type
     *      - *limit* - integer
     *          - maximum number of entries
     *      - *createdAt* - string
     *          - created at date timestamp
     *      - *updatedAt* - string
     *          - last update date timestamp
     *      - *formatKey* - string
     *          - the format key
     *      - *outputType* - string
     *          - the output type
     *      - *generateCache* - integer
     *          - if cache should be generated
     */
    public function updateExportByExportId(int $exportId, array $data): array
    {
        return $this->api("/rest/exports/{$exportId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes filter from the export. The ID of the export and the ID of the filter must be specified.
     * @tag ExportSettings
     * @param int $exportId 
     * @param int $key 
     */
    public function deleteExportsFilterByExportIdKey(int $exportId, int $key)
    {
        return $this->api("/rest/exports/{$exportId}/filters/{$key}", 'DELETE');
    }
    
}
