<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Feedback extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Creates a comment for a review.
     * @tag Feedback
     * @param array $query
     *      - *message* - string - required
     *          - Feedback comment message
     *      - *commentRelationTargetTypeId* - int - required
     *          - The type ID of the comment's target
     *      - *commentRelationTargetId* - int - required
     *          - The ID of the comment's target
     * @return array
     *      - *id* - integer
     *          - The ID of the comment
     *      - *message* - string
     *          - The message of the comment
     *      - *isVisible* - boolean
     *          - If true, the comment is visible
     */
    public function createFeedbacksComment(array $query): array
    {
        return $this->api(array_merge(["/rest/feedbacks/comment"], $query), 'POST');
    }
                    
    /**
     * @description Deletes a feedback comment. The ID of the feedback comment must be specified.
     * @tag Feedback
     * @param int $commentId 
     * @param array $query
     *      - *feedbackCommentId* - int - required
     *          - The ID of the feedback comment
     */
    public function deleteFeedbacksCommentByCommentId(int $commentId, array $query)
    {
        return $this->api(array_merge(["/rest/feedbacks/comment/{$commentId}"], $query), 'DELETE');
    }
                
    /**
     * @description Gets a feedback comment. The ID of the feedback comment must be specified.
     * @tag Feedback
     * @param int $commentId 
     * @param array $query
     *      - *feedbackCommentId* - int - required
     *          - The ID of the feedback comment
     * @return array
     *      - *id* - integer
     *          - The ID of the comment
     *      - *message* - string
     *          - The message of the comment
     *      - *isVisible* - boolean
     *          - If true, the comment is visible
     */
    public function getFeedbacksCommentByCommentId(int $commentId, array $query): array
    {
        return $this->api(array_merge(["/rest/feedbacks/comment/{$commentId}"], $query));
    }
                    
    /**
     * @description Lists all feedback comments.
     * @tag Feedback
     * @return array
     */
    public function getFeedbacksComments(): array
    {
        return $this->api("/rest/feedbacks/comments");
    }
                    
    /**
     * @description Deletes multiple feedbacks. A list with IDs of feedbacks must be specified.
     * @tag Feedback
     * @param string $feedbackIds The list of feedback IDs, separated by commas
     */
    public function deleteFeedbacksDeleteFeedbackByFeedbackIds(string $feedbackIds)
    {
        return $this->api("/rest/feedbacks/delete_feedbacks/{$feedbackIds}", 'DELETE');
    }
                    
    /**
     * @description Creates a new feedback.
     * @tag Feedback
     * @param array $query
     *      - *title* - string - optional
     *          - Feedback title
     *      - *feedbackRelationTargetId* - string - optional
     *          - The ID of the feedback's target
     *      - *feedbackRelationTargetTypeId* - string - optional
     *          - The type ID of the feedback's target
     *      - *feedbackRelationSourceTypeId* - string - optional
     *          - The type ID of the feedback's source
     * @return array
     *      - *id* - integer
     *          - The ID of the feedback
     *      - *title* - string
     *          - The title of the feedback
     *      - *authorName* - string
     *          - The name of the feedback's author
     *      - *isVisible* - boolean
     *          - If true, the feedback is visible
     */
    public function createFeedbacksFeedback(array $query = []): array
    {
        return $this->api(array_merge(["/rest/feedbacks/feedback"], $query), 'POST');
    }
                    
    /**
     * @description Lists feedback replies. The ID of the feedback must be specified.
     * @tag Feedback
     * @param int $feedbackId The ID of the feedback
     * @return array
     *      - *id* - integer
     *          - The ID of the feedback
     *      - *title* - string
     *          - The title of the feedback
     *      - *authorName* - string
     *          - The name of the feedback's author
     *      - *isVisible* - boolean
     *          - If true, the feedback is visible
     */
    public function getFeedbacksFeedbackReplyByFeedbackId(int $feedbackId): array
    {
        return $this->api("/rest/feedbacks/feedback/replies/{$feedbackId}");
    }
                    
    /**
     * @description Deletes a feedback. The ID of the feedback must be specified.
     * @tag Feedback
     * @param int $feedbackId The ID of the feedback
     */
    public function deleteFeedbacksFeedbackByFeedbackId(int $feedbackId)
    {
        return $this->api("/rest/feedbacks/feedback/{$feedbackId}", 'DELETE');
    }
                
    /**
     * @description Gets a feedback. The ID of the feedback must be specified.
     * @tag Feedback
     * @param int $feedbackId The ID of the feedback
     * @return array
     *      - *id* - integer
     *          - The ID of the feedback
     *      - *title* - string
     *          - The title of the feedback
     *      - *authorName* - string
     *          - The name of the feedback's author
     *      - *isVisible* - boolean
     *          - If true, the feedback is visible
     */
    public function getFeedbacksFeedbackByFeedbackId(int $feedbackId): array
    {
        return $this->api("/rest/feedbacks/feedback/{$feedbackId}");
    }
                
    /**
     * @description Updates a feedback. The ID of the feedback must be specified.
     * @tag Feedback
     * @param int $feedbackId The ID of the feedback
     * @return array
     *      - *id* - integer
     *          - The ID of the feedback
     *      - *title* - string
     *          - The title of the feedback
     *      - *authorName* - string
     *          - The name of the feedback's author
     *      - *isVisible* - boolean
     *          - If true, the feedback is visible
     */
    public function updateFeedbacksFeedbackByFeedbackId(int $feedbackId): array
    {
        return $this->api("/rest/feedbacks/feedback/{$feedbackId}", 'PUT');
    }
                    
    /**
     * @description Lists feedbacks. The reference type and the reference value must be specified (e.g. the reference type is 'order' and the reference value is the ID of the order).
     * @tag Feedback
     * @return array
     */
    public function getFeedbacksFeedbacks(): array
    {
        return $this->api("/rest/feedbacks/feedbacks");
    }
                    
    /**
     * @description Updates the visibility of multiple feedbacks. A list with IDs of feedbacks must be specified.
     * @tag Feedback
     * @param array $query
     *      - *feedbackIds* - string - required
     *          - The list of feedback IDs, separated by commas
     *      - *isVisible* - boolean - required
     *          - The visibility value
     * @return array
     */
    public function updateFeedbacksFeedbacksVisibility(array $query): array
    {
        return $this->api(array_merge(["/rest/feedbacks/feedbacks_visibility"], $query), 'PUT');
    }
                    
    /**
     * @description  @return \Plenty\Modules\Feedback\Models\Feedback[]
     * @tag Feedback

     */
    public function createFeedbacksMigrate()
    {
        return $this->api("/rest/feedbacks/migrate", 'POST');
    }
                    
    /**
     * @description Creates a feedback rating.
     * @tag Feedback
     * @param array $query
     *      - *ratingValue* - int - required
     *          - The feedback's comment message
     *      - *ratingRelationTargetTypeId* - int - required
     *          - The type ID of the rating's target
     *      - *ratingRelationTargetId* - int - required
     *          - The ID of the rating's target
     * @return array
     *      - *id* - integer
     *          - The ID of the rating
     *      - *ratingValue* - string
     *          - The value of the rating
     *      - *isVisible* - boolean
     *          - If true, the rating is visible
     */
    public function createFeedbacksRating(array $query): array
    {
        return $this->api(array_merge(["/rest/feedbacks/rating"], $query), 'POST');
    }
                    
    /**
     * @description Deletes a feedback rating. The ID of the feedback rating must be specified.
     * @tag Feedback
     * @param int $ratingId 
     * @param array $query
     *      - *feedbackRatingId* - int - required
     *          - The ID of the feedback rating
     */
    public function deleteFeedbacksRatingByRatingId(int $ratingId, array $query)
    {
        return $this->api(array_merge(["/rest/feedbacks/rating/{$ratingId}"], $query), 'DELETE');
    }
                
    /**
     * @description Gets a feedback rating. The ID of the feedback rating must be specified.
     * @tag Feedback
     * @param int $ratingId 
     * @param array $query
     *      - *feedbackRatingId* - int - required
     *          - The ID of the feedback rating
     * @return array
     *      - *id* - integer
     *          - The ID of the rating
     *      - *ratingValue* - string
     *          - The value of the rating
     *      - *isVisible* - boolean
     *          - If true, the rating is visible
     */
    public function getFeedbacksRatingByRatingId(int $ratingId, array $query): array
    {
        return $this->api(array_merge(["/rest/feedbacks/rating/{$ratingId}"], $query));
    }
                    
    /**
     * @description Lists feedback ratings.
     * @tag Feedback
     * @return array
     */
    public function getFeedbacksRatings(): array
    {
        return $this->api("/rest/feedbacks/ratings");
    }
    
}
