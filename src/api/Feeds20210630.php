<?php

namespace lujie\amazon\sp\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
*/
class Feeds20210630 extends \lujie\amazon\sp\BaseAmazonSPClient
{

            
    /**
     * @description Returns feed details for the feeds that match the filters that you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.0222 | 10 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag Feeds
     * @param array $query
     *      - *feedTypes* - array - optional
     *          - A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required.
     *      - *marketplaceIds* - array - optional
     *          - A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify.
     *      - *pageSize* - integer - optional
     *          - The maximum number of feeds to return in a single call.
     *      - *processingStatuses* - array - optional
     *          - A list of processing statuses used to filter feeds.
     *      - *createdSince* - string - optional
     *          - The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days.
     *      - *createdUntil* - string - optional
     *          - The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now.
     *      - *nextToken* - string - optional
     *          - A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
     * @return Iterator
     *      - *feeds* - 
     *          - The feeds.
     *      - *nextToken* - string
     *          - Returned when the number of results exceeds pageSize. To get the next page of results, call the getFeeds operation with this token as the only parameter.
     */
    public function eachFeeds(array $query = []): Iterator
    {
        return $this->eachInternal('getFeeds', func_get_args());
    }
        
    /**
     * @description Returns feed details for the feeds that match the filters that you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.0222 | 10 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag Feeds
     * @param array $query
     *      - *feedTypes* - array - optional
     *          - A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required.
     *      - *marketplaceIds* - array - optional
     *          - A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify.
     *      - *pageSize* - integer - optional
     *          - The maximum number of feeds to return in a single call.
     *      - *processingStatuses* - array - optional
     *          - A list of processing statuses used to filter feeds.
     *      - *createdSince* - string - optional
     *          - The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days.
     *      - *createdUntil* - string - optional
     *          - The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now.
     *      - *nextToken* - string - optional
     *          - A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
     * @return Iterator
     *      - *feeds* - 
     *          - The feeds.
     *      - *nextToken* - string
     *          - Returned when the number of results exceeds pageSize. To get the next page of results, call the getFeeds operation with this token as the only parameter.
     */
    public function batchFeeds(array $query = []): Iterator
    {
        return $this->batchInternal('getFeeds', func_get_args());
    }
    
    /**
     * @description Returns feed details for the feeds that match the filters that you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.0222 | 10 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag Feeds
     * @param array $query
     *      - *feedTypes* - array - optional
     *          - A list of feed types used to filter feeds. When feedTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either feedTypes or nextToken is required.
     *      - *marketplaceIds* - array - optional
     *          - A list of marketplace identifiers used to filter feeds. The feeds returned will match at least one of the marketplaces that you specify.
     *      - *pageSize* - integer - optional
     *          - The maximum number of feeds to return in a single call.
     *      - *processingStatuses* - array - optional
     *          - A list of processing statuses used to filter feeds.
     *      - *createdSince* - string - optional
     *          - The earliest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is 90 days ago. Feeds are retained for a maximum of 90 days.
     *      - *createdUntil* - string - optional
     *          - The latest feed creation date and time for feeds included in the response, in ISO 8601 format. The default is now.
     *      - *nextToken* - string - optional
     *          - A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
     * @return array
     *      - *feeds* - 
     *          - The feeds.
     *      - *nextToken* - string
     *          - Returned when the number of results exceeds pageSize. To get the next page of results, call the getFeeds operation with this token as the only parameter.
     */
    public function getFeeds(array $query = []): array
    {
        return $this->api(array_merge(["/feeds/2021-06-30/feeds"], $query));
    }
                
    /**
     * @description Creates a feed. Upload the contents of the feed document before calling this operation.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.0083 | 15 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).

The rate limit for the [`JSON_LISTINGS_FEED`](https://developer-docs.amazon.com/sp-api/docs/listings-feed-type-values#listings-feed) feed type differs from the rate limit for the [`createFeed`](https://developer-docs.amazon.com/sp-api/docs/feeds-api-v2021-06-30-reference#post-feeds2021-06-30feeds) operation. For more information, refer to the [Building Listings Management Workflows Guide](https://developer-docs.amazon.com/sp-api/docs/building-listings-management-workflows-guide#should-i-submit-in-bulk-using-the-json_listings_feed-or-individually-with-the-listings-items-api).
     * @tag Feeds
     * @param array $data 
     * @return array
     *      - *feedId* - string
     *          - The identifier for the feed. This identifier is unique only in combination with a seller ID.
     */
    public function createFeed(array $data): array
    {
        return $this->api("/feeds/2021-06-30/feeds", 'POST', $data);
    }
                        
    /**
     * @description Cancels the feed that you specify. Only feeds with `processingStatus=IN_QUEUE` can be cancelled. Cancelled feeds are returned in subsequent calls to the [`getFeed`](https://developer-docs.amazon.com/sp-api/docs/feeds-api-v2021-06-30-reference#getfeed) and [`getFeeds`](https://developer-docs.amazon.com/sp-api/docs/feeds-api-v2021-06-30-reference#getfeeds) operations.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 15 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag Feeds
     * @param string $feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     */
    public function cancelFeed(string $feedId): void
    {
        $this->api("/feeds/2021-06-30/feeds/{$feedId}", 'DELETE');
    }
                
    /**
     * @description Returns feed details (including the `resultDocumentId`, if available) for the feed that you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 15 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag Feeds
     * @param string $feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     * @return array
     *      - *feedId* - string
     *          - The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *      - *feedType* - string
     *          - The feed type.
     *      - *marketplaceIds* - array
     *          - A list of identifiers for the marketplaces that the feed is applied to.
     *      - *createdTime* - string
     *          - The date and time when the feed was created, in ISO 8601 date time format.
     *      - *processingStatus* - string
     *          - The processing status of the feed.
     *      - *processingStartTime* - string
     *          - The date and time when feed processing started, in ISO 8601 date time format.
     *      - *processingEndTime* - string
     *          - The date and time when feed processing completed, in ISO 8601 date time format.
     *      - *resultFeedDocumentId* - string
     *          - The identifier for the feed document. This identifier is unique only in combination with a seller ID.
     */
    public function getFeed(string $feedId): array
    {
        return $this->api("/feeds/2021-06-30/feeds/{$feedId}");
    }
                        
    /**
     * @description Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading the feed document contents. It also returns a `feedDocumentId` value that you can pass in with a subsequent call to the [`createFeed`](https://developer-docs.amazon.com/sp-api/docs/feeds-api-v2021-06-30-reference#createfeed) operation.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.5 | 15 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag Feeds
     * @param array $data 
     * @return array
     *      - *feedDocumentId* - string
     *          - The identifier of the feed document.
     *      - *url* - string
     *          - The presigned URL for uploading the feed contents. This URL expires after 5 minutes.
     */
    public function createFeedDocument(array $data): array
    {
        return $this->api("/feeds/2021-06-30/documents", 'POST', $data);
    }
                        
    /**
     * @description Returns the information required for retrieving a feed document's contents.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.0222 | 10 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @tag Feeds
     * @param string $feedDocumentId The identifier of the feed document.
     * @return array
     *      - *feedDocumentId* - string
     *          - The identifier for the feed document. This identifier is unique only in combination with a seller ID.
     *      - *url* - string
     *          - A presigned URL for the feed document. If `compressionAlgorithm` is not returned, you can download the feed directly from this URL. This URL expires after 5 minutes.
     *      - *compressionAlgorithm* - string
     *          - If the feed document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the feed when you download. Otherwise, you can download the feed directly. Refer to [Step 7. Download the feed processing report](doc:feeds-api-v2021-06-30-use-case-guide#step-7-download-the-feed-processing-report) in the use case guide, where sample code is provided.
     */
    public function getFeedDocument(string $feedDocumentId): array
    {
        return $this->api("/feeds/2021-06-30/documents/{$feedDocumentId}");
    }
    
}
