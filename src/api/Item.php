<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Item extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Lists all item availabilities.
     * @tag Item
     * @return array
     */
    public function getAvailabilities(): array
    {
        return $this->api("/rest/availabilities");
    }
                    
    /**
     * @description Gets an item availability. The ID of the availability must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The ID of this availability
     *      - *icon* - string
     *          - The icon of this availability
     *      - *averageDays* - integer
     *          - The average delivery time in days for this availability
     */
    public function getAvailabilityById(int $id): array
    {
        return $this->api("/rest/availabilities/{$id}");
    }
                
    /**
     * @description Updates an item availability.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of this availability
     *      - *icon* - string
     *          - The icon of this availability
     *      - *averageDays* - integer
     *          - The average delivery time in days for this availability
     */
    public function updateAvailabilityById(int $id, array $data): array
    {
        return $this->api("/rest/availabilities/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description Delete the item sets.
     * @tag Item
     * @return array
     */
    public function deleteItemSet(): array
    {
        return $this->api("/rest/item_sets", 'DELETE');
    }
                
    /**
     * @description Lists all item sets.
     * @tag Item
     * @return array
     */
    public function getItemSets(): array
    {
        return $this->api("/rest/item_sets");
    }
                
    /**
     * @description Creates new item Sets.
     * @tag Item
     * @param array $query
     *      - *params* - array - optional
     *          - includes the item sets that have to be created
     * @return array
     *      - *id* - integer
     *          - The item ID of the item set. The ID must be unique.
     *      - *name* - string
     *          - The name of the item set. The default language of the system is used.
     *      - *categories* - array
     *          - The array with categories of the item set. The category ID key  "categoryId" must be specified. Example for JSON Object:  "categories":[{"categoryId":"34"},{"categoryId":"35"}]}]
     */
    public function createItemSet(array $query = []): array
    {
        return $this->api(array_merge(["/rest/item_sets"], $query), 'POST');
    }
                
    /**
     * @description Updates the item sets.
     * @tag Item
     * @return array
     */
    public function updateItemSet(): array
    {
        return $this->api("/rest/item_sets", 'PUT');
    }
                    
    /**
     * @description Deletes an item set. The item ID of the item set must be specified.
     * @tag Item
     * @param int $id 
     */
    public function deleteItemSetById(int $id): void
    {
        $this->api("/rest/item_sets/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets the configuration of an item set. The item ID of the item set must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The item ID of the item set. The ID must be unique.
     *      - *name* - string
     *          - The name of the item set. The default language of the system is used.
     *      - *categories* - array
     *          - The array with categories of the item set. The category ID key  "categoryId" must be specified. Example for JSON Object:  "categories":[{"categoryId":"34"},{"categoryId":"35"}]}]
     */
    public function getItemSetById(int $id): array
    {
        return $this->api("/rest/item_sets/{$id}");
    }
                
    /**
     * @description Updates an item set. The item ID of the item set must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The item ID of the item set. The ID must be unique.
     *      - *name* - string
     *          - The name of the item set. The default language of the system is used.
     *      - *categories* - array
     *          - The array with categories of the item set. The category ID key  "categoryId" must be specified. Example for JSON Object:  "categories":[{"categoryId":"34"},{"categoryId":"35"}]}]
     */
    public function updateItemSetById(int $id): array
    {
        return $this->api("/rest/item_sets/{$id}", 'PUT');
    }
                    
    /**
     * @description Deletes item set components. The ID of the set and the component must be specified
     * @tag Item
     * @param int $setId 
     * @return array
     *      - *id* - integer
     *          - The item set component ID. The ID must be unique.
     *      - *setId* - integer
     *          - The item ID of the item set. The ID must be unique.
     *      - *itemId* - integer
     *          - The item ID of the set component
     *      - *minimalOrderQuantity* - number
     *          - Minimum order quantity.
     *      - *maximumOrderQuantity* - number
     *          - Maximum order quantity.
     *      - *orderQuantityPossible* - boolean
     *          - Order quantities possible.
     */
    public function deleteItemSetsComponentBySetId(int $setId): array
    {
        return $this->api("/rest/item_sets/{$setId}/components", 'DELETE');
    }
                
    /**
     * @description Lists the item set components of an item set. The ID of the item set must be specified.
     * @tag Item
     * @param int $setId 
     * @return array
     */
    public function getItemSetsComponentsBySetId(int $setId): array
    {
        return $this->api("/rest/item_sets/{$setId}/components");
    }
                
    /**
     * @description Creates item set components. The id of the set must be specified
     * @tag Item
     * @param int $setId 
     * @return array
     *      - *id* - integer
     *          - The item set component ID. The ID must be unique.
     *      - *setId* - integer
     *          - The item ID of the item set. The ID must be unique.
     *      - *itemId* - integer
     *          - The item ID of the set component
     *      - *minimalOrderQuantity* - number
     *          - Minimum order quantity.
     *      - *maximumOrderQuantity* - number
     *          - Maximum order quantity.
     *      - *orderQuantityPossible* - boolean
     *          - Order quantities possible.
     */
    public function createItemSetsComponentBySetId(int $setId): array
    {
        return $this->api("/rest/item_sets/{$setId}/components", 'POST');
    }
                
    /**
     * @description Updates item set components. The id of the set must be specified
     * @tag Item
     * @param int $setId 
     * @return array
     *      - *id* - integer
     *          - The item set component ID. The ID must be unique.
     *      - *setId* - integer
     *          - The item ID of the item set. The ID must be unique.
     *      - *itemId* - integer
     *          - The item ID of the set component
     *      - *minimalOrderQuantity* - number
     *          - Minimum order quantity.
     *      - *maximumOrderQuantity* - number
     *          - Maximum order quantity.
     *      - *orderQuantityPossible* - boolean
     *          - Order quantities possible.
     */
    public function updateItemSetsComponentBySetId(int $setId): array
    {
        return $this->api("/rest/item_sets/{$setId}/components", 'PUT');
    }
                    
    /**
     * @description Deletes an item set component. The item set component ID of the item set component must be specified.
     * @tag Item
     * @param int $setId 
     * @param int $id 
     */
    public function deleteItemSetsComponentBySetIdId(int $setId, int $id): void
    {
        $this->api("/rest/item_sets/{$setId}/components/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets an item set component. The ID of the component and the set must be specified
     * @tag Item
     * @param int $setId 
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The item set component ID. The ID must be unique.
     *      - *setId* - integer
     *          - The item ID of the item set. The ID must be unique.
     *      - *itemId* - integer
     *          - The item ID of the set component
     *      - *minimalOrderQuantity* - number
     *          - Minimum order quantity.
     *      - *maximumOrderQuantity* - number
     *          - Maximum order quantity.
     *      - *orderQuantityPossible* - boolean
     *          - Order quantities possible.
     */
    public function getItemSetsComponentBySetIdId(int $setId, int $id): array
    {
        return $this->api("/rest/item_sets/{$setId}/components/{$id}");
    }
                
    /**
     * @description Updates an item set component. The ID of the set and the component must be specified
     * @tag Item
     * @param int $setId 
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The item set component ID. The ID must be unique.
     *      - *setId* - integer
     *          - The item ID of the item set. The ID must be unique.
     *      - *itemId* - integer
     *          - The item ID of the set component
     *      - *minimalOrderQuantity* - number
     *          - Minimum order quantity.
     *      - *maximumOrderQuantity* - number
     *          - Maximum order quantity.
     *      - *orderQuantityPossible* - boolean
     *          - Order quantities possible.
     */
    public function updateItemSetsComponentBySetIdId(int $setId, int $id): array
    {
        return $this->api("/rest/item_sets/{$setId}/components/{$id}", 'PUT');
    }
                    
    /**
     * @description Gets the item set configuration of an item set
     * @tag Item
     * @param int $setId 
     * @return array
     *      - *setId* - integer
     *          - set id The item ID of the item set. The ID must be unique.
     *      - *rebate* - number
     *          - The discount in percent to be subtracted from the sum of the prices of the selected set components.
     */
    public function getItemSetsConfigBySetId(int $setId): array
    {
        return $this->api("/rest/item_sets/{$setId}/config");
    }
                
    /**
     * @description Updates an item set configuration. The id of the item set must be specified
     * @tag Item
     * @param int $setId 
     * @return array
     *      - *setId* - integer
     *          - set id The item ID of the item set. The ID must be unique.
     *      - *rebate* - number
     *          - The discount in percent to be subtracted from the sum of the prices of the selected set components.
     */
    public function updateItemSetsConfigBySetId(int $setId): array
    {
        return $this->api("/rest/item_sets/{$setId}/config", 'PUT');
    }
                    
    /**
     * @description Triggers a sales price calculation for an item set. The id of the item set must be specified
     * @tag Item
     * @param int $setId 
     */
    public function createItemSetsConfigSalesPriceBySetId(int $setId): void
    {
        $this->api("/rest/item_sets/{$setId}/config/sales_prices", 'POST');
    }
                
    /**
     * @description Searches for an item.
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation information in the results. The following parameters are available: itemProperties, itemCrossSelling, variations, itemImages, itemShippingProfiles, ebayTitles
     *      - *lang* - string - optional
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#countries' target='_blank'>language</a> of the variation information.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of variations to be listed per page must be specified.
     *      - *name* - string - optional
     *          - Filter restricts the list of results to items with the specified item name. An item name must be specified.
     *      - *manufacturerId* - string - optional
     *          - Filter restricts the list of results to items with the specified manufacturerId.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to items with the specified ID. More than one ID should be separated by commas.
     *      - *flagOne* - int - optional
     *          - Filter restricts the list of results to items with the specified flagOne.
     *      - *flagTwo* - int - optional
     *          - Filter restricts the list of results to items with the specified flagTwo.
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to items updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../items?updatedBetween=1451606400,1456790400 will list items updated between 2016-01-01 and 2016-03-01. .../items?updatedBetween=1451606400 will list items updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *variationUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to items with variations that were updated during the specified period. The end date (to) is optional. If no end date is specified, items with variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../items?updatedBetween=1451606400,1456790400 will list items with variations that were updated between 2016-01-01 and 2016-03-01. .../items?updatedBetween=1451606400 will list items with variations that were updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *variationRelatedUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to items with variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
     *      - *or* - string - optional
     *          - Filters can be defined in this param to link them via OR instead of AND. The syntax looks like the following: or=(updatedBetween=1573050718&varitionUpdatedBetween=1573050718). Everything in the brackets is written in the normal URL-Syntax. The or-param can be used multiple times if it is used like this: or[]=(...)&or[]=(...)
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Item
     */
    public function eachItems(array $query = []): Iterator
    {
        return $this->eachInternal('getItems', func_get_args());
    }
        
    /**
     * @description Searches for an item.
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation information in the results. The following parameters are available: itemProperties, itemCrossSelling, variations, itemImages, itemShippingProfiles, ebayTitles
     *      - *lang* - string - optional
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#countries' target='_blank'>language</a> of the variation information.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of variations to be listed per page must be specified.
     *      - *name* - string - optional
     *          - Filter restricts the list of results to items with the specified item name. An item name must be specified.
     *      - *manufacturerId* - string - optional
     *          - Filter restricts the list of results to items with the specified manufacturerId.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to items with the specified ID. More than one ID should be separated by commas.
     *      - *flagOne* - int - optional
     *          - Filter restricts the list of results to items with the specified flagOne.
     *      - *flagTwo* - int - optional
     *          - Filter restricts the list of results to items with the specified flagTwo.
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to items updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../items?updatedBetween=1451606400,1456790400 will list items updated between 2016-01-01 and 2016-03-01. .../items?updatedBetween=1451606400 will list items updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *variationUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to items with variations that were updated during the specified period. The end date (to) is optional. If no end date is specified, items with variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../items?updatedBetween=1451606400,1456790400 will list items with variations that were updated between 2016-01-01 and 2016-03-01. .../items?updatedBetween=1451606400 will list items with variations that were updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *variationRelatedUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to items with variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
     *      - *or* - string - optional
     *          - Filters can be defined in this param to link them via OR instead of AND. The syntax looks like the following: or=(updatedBetween=1573050718&varitionUpdatedBetween=1573050718). Everything in the brackets is written in the normal URL-Syntax. The or-param can be used multiple times if it is used like this: or[]=(...)&or[]=(...)
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Item
     */
    public function batchItems(array $query = []): Iterator
    {
        return $this->batchInternal('getItems', func_get_args());
    }
    
    /**
     * @description Searches for an item.
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation information in the results. The following parameters are available: itemProperties, itemCrossSelling, variations, itemImages, itemShippingProfiles, ebayTitles
     *      - *lang* - string - optional
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#countries' target='_blank'>language</a> of the variation information.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of variations to be listed per page must be specified.
     *      - *name* - string - optional
     *          - Filter restricts the list of results to items with the specified item name. An item name must be specified.
     *      - *manufacturerId* - string - optional
     *          - Filter restricts the list of results to items with the specified manufacturerId.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to items with the specified ID. More than one ID should be separated by commas.
     *      - *flagOne* - int - optional
     *          - Filter restricts the list of results to items with the specified flagOne.
     *      - *flagTwo* - int - optional
     *          - Filter restricts the list of results to items with the specified flagTwo.
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to items updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../items?updatedBetween=1451606400,1456790400 will list items updated between 2016-01-01 and 2016-03-01. .../items?updatedBetween=1451606400 will list items updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *variationUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to items with variations that were updated during the specified period. The end date (to) is optional. If no end date is specified, items with variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../items?updatedBetween=1451606400,1456790400 will list items with variations that were updated between 2016-01-01 and 2016-03-01. .../items?updatedBetween=1451606400 will list items with variations that were updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *variationRelatedUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to items with variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
     *      - *or* - string - optional
     *          - Filters can be defined in this param to link them via OR instead of AND. The syntax looks like the following: or=(updatedBetween=1573050718&varitionUpdatedBetween=1573050718). Everything in the brackets is written in the normal URL-Syntax. The or-param can be used multiple times if it is used like this: or[]=(...)&or[]=(...)
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Item
     */
    public function getItems(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items"], $query));
    }
                
    /**
     * @description Creates new items.
     * @tag Item
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the item. The ID must be unique.
     *      - *position* - integer
     *          - The position of the item
     *      - *itemType* - string
     *          - The type of the item. Because Set items are managed using a separate route,
this value is always Default.
     *      - *stockType* - integer
     *          - The stock type of the item. Possible values:
<ul><li>0 = Stocked item (default)</li>
    <li>1 = Production item</li>
    <li>2 = Colli</li>
    <li>3 = Special order item</li></ul>
     *      - *storeSpecial* - integer
     *          - Option to present items more prominently in the online store.
<ul><li>1 = Special offer</li><li>2 = New items</li><li>3 = Top items</li></ul>
     *      - *ownerId* - integer
     *          - The plentymarkets user that is assigned as owner of this item.
     *      - *manufacturerId* - integer
     *          - The ID of the manufacturer of the item
     *      - *producingCountryId* - integer
     *          - The ID of the country in which the item was manufactured.
     *      - *mainVariationId* - integer
     *          - The ID of the main variation of the item. The ID must be unique.
     *      - *revenueAccount* - integer
     *          - The revenue account the item is linked to.
An individual revenue account can be saved for each item in plentymarkets.
If this is not done, plentymarkets automatically determines a revenue account
based on the VAT rate.
     *      - *couponRestriction* - integer
     *          - Indicates if the item can be purchased using a promotional coupon.
<ul><li>0 = Permitted</li>
    <li>1 = Not permitted</li>
    <li>2 = Purchasable with coupon only</li></ul>
     *      - *condition* - integer
     *          - The condition of the item. Possible values:
<ul><li>0 = New</li><li>1 = Used</li>
    <li>2 = Boxed as new</li>
    <li>3 = New with label</li>
    <li>4 = Factory seconds</li></ul>
     *      - *conditionApi* - integer
     *          - The condition of the item that is transferred to markets via API.
<ul><li>0 = New</li>
    <li>1 = Used but as new</li>
    <li>2 = Used but very good</li>
    <li>3 = Used but good</li>
    <li>4 = Used but acceptable</li>
    <li>5 = Factory seconds</li></ul>
     *      - *createdAt* - string
     *          - Timestamp of the date and time the item was created.
     *      - *updatedAt* - string
     *          - Timestamp of the last date and time the item was updated.
     *      - *isSubscribable* - boolean
     *          - Flag that indicates if the item can be ordered as a subscription item.
If yes, the item can be ordered for delivery at regular intervals.
     *      - *isSerialNumber* - boolean
     *          - Flag that indicates if serial numbers are to be assigned to variations of this item
to uniquely identify every item sold. Serial numbers ensure traceability of an item
in case of errors or problems.
     *      - *isShippingPackage* - boolean
     *          - Flag that indicates if a shipping package is to be used for this item.
If yes and the variation's dimensions are entered in the <b>Settings</b> tab of a
variation, the correct shipping package is assigned automatically.
     *      - *amazonFbaPlatform* - integer
     *          - Indicates the platform used for Fulfilment by Amazon (FBA).
<ul><li>0 = Do not use</li>
    <li>1 = AMAZON EU (Europe)</li>
    <li>2 = AMAZON FE (Far East)</li>
    <li>3 = AMAZON NA (North America)</li></ul>
     *      - *isShippableByAmazon* - boolean
     *          - Flag that indicates if the item can be shipped with Amazon Multi-Channel.
Amazon Multi-Channel Fulfillment is a service for fulfilling orders from sales
channels other than Amazon platforms using inventory stored in the Amazon
fulfillment center.
     *      - *amazonProductType* - integer
     *          - The Amazon product type of the item. List of IDs:
https://www.plentymarkets.co.uk/manual/data-exchange/data-formats/item/
     *      - *amazonFedas* - string
     *          - The FEDAS product classification key of the item.
     *      - *ebayPresetId* - integer
     *          - The eBay preset ID. This plentymarkets ID must be specified to save values for
$ebayCategory, $ebayCategory2, $ebayStoreCategory and $ebayStoreCategory2.
     *      - *ebayCategory* - integer
     *          - The eBay category 1 of the item. This category is used when a new listing is created.
     *      - *ebayCategory2* - integer
     *          - The eBay category 2 of the item. This category is used when a new listing is created.
     *      - *ebayStoreCategory* - integer
     *          - The ID of the eBay store category 1 of the item.
This value is used for new listings.
     *      - *ebayStoreCategory2* - integer
     *          - The ID of the eBay store category 2 of the item.
This value is used for new listings.
     *      - *rakutenCategoryId* - integer
     *          - The ID of the Rakuten category of this item.
     *      - *flagOne* - integer
     *          - Flag 1 of the item. Flags can be used to organise and filter items.
Each item can be assigned up to two flags. Possible values: 1 to 31, 0 = no flag
     *      - *flagTwo* - integer
     *          - Flag 2 of the item. Flags can be used to organise and filter items.
Each item can be assigned up to two flags. Possible values: 1 to 11, 0 = no flag
     *      - *ageRestriction* - integer
     *          - The age customers must be to purchase the item.
Items with an age rating of 18+ must be linked to a shipping profile for which the
PostIdent option is activated.
<ul><li>0 = None available</li>
   <li>3 = Released for ages 3 and up</li>
   <li>6 = Ages 6 and up</li>
   <li>9 = Ages 9 and up</li>
   <li>12 = Ages 12 and up</li>
   <li>14 = Ages 14 and up</li>
   <li>16 = Ages 16 and up</li>
   <li>18 = Ages 18 and up</li>
   <li>50 = Not marked</li>
   <li>88 = Not required</li>
   <li>99 = Unknown</li></ul>
     *      - *feedback* - integer
     *          - The feedback, i.e. rating, that this item received.
Possible values are 1 to 5 or 1 to 10 depending on the maximum rating setting.
An initial feedback can be saved for items. The saved value will then be displayed as the
initial feedback. Every time new feedback is submitted, the average value will be
recalculated automatically.
     *      - *free1* - string
     *          - The content of the free text field 1. This can be displayed in the online store or on eBay.
     *      - *free2* - string
     *          - The content of the free text field 2. This can be displayed in the online store or on eBay.
     *      - *free3* - string
     *          - The content of the free text field 3. This can be displayed in the online store or on eBay.
     *      - *free4* - string
     *          - The content of the free text field 4. This can be displayed in the online store or on eBay.
     *      - *free5* - string
     *          - The content of the free text field 5. This can be displayed in the online store or on eBay.
     *      - *free6* - string
     *          - The content of the free text field 6. This can be displayed in the online store or on eBay.
     *      - *free7* - string
     *          - The content of the free text field 7. This can be displayed in the online store or on eBay.
     *      - *free8* - string
     *          - The content of the free text field 8. This can be displayed in the online store or on eBay.
     *      - *free9* - string
     *          - The content of the free text field 9. This can be displayed in the online store or on eBay.
     *      - *free10* - string
     *          - The content of the free text field 10. This can be displayed in the online store or on eBay.
     *      - *free11* - string
     *          - The content of the free text field 11. This can be displayed in the online store or on eBay.
     *      - *free12* - string
     *          - The content of the free text field 12. This can be displayed in the online store or on eBay.
     *      - *free13* - string
     *          - The content of the free text field 13. This can be displayed in the online store or on eBay.
     *      - *free14* - string
     *          - The content of the free text field 14. This can be displayed in the online store or on eBay.
     *      - *free15* - string
     *          - The content of the free text field 15. This can be displayed in the online store or on eBay.
     *      - *free16* - string
     *          - The content of the free text field 16. This can be displayed in the online store or on eBay.
     *      - *free17* - string
     *          - The content of the free text field 17. This can be displayed in the online store or on eBay.
     *      - *free18* - string
     *          - The content of the free text field 18. This can be displayed in the online store or on eBay.
     *      - *free19* - string
     *          - The content of the free text field 19. This can be displayed in the online store or on eBay.
     *      - *free20* - string
     *          - The content of the free text field 20. This can be displayed in the online store or on eBay.
     *      - *maximumOrderQuantity* - number
     *          - The maximum order quantity of an item permitted per order.
If a maximum order quantity is specified, no more than this quantity of any
combination of the variations of the item can be ordered.
Decimal values are possible to allow orders by weight or length.
Default value is 0. If value is 0, the maximum order quantity is unlimited.
     *      - *customsTariffNumber* - string
     *          - Deprecated: The customs tariff number of the item;
usually a 11 digit code number based on the Harmonised System
     */
    public function createItem(array $data): array
    {
        return $this->api("/rest/items", 'POST', $data);
    }
                
    /**
     * @description Updates up to 50 items. The ID of the item must be specified.
     * @tag Item
     * @param array $data 
     */
    public function updateItem(array $data): void
    {
        $this->api("/rest/items", 'PUT', $data);
    }
                    
    /**
     * @description Gets name and language for an attribute value ID. The attribute value ID must be specified.
     * @tag Item
     * @param int $valueId 
     * @return array
     */
    public function getItemsAttributeValuesNamesByValueId(int $valueId): array
    {
        return $this->api("/rest/items/attribute_values/{$valueId}/names");
    }
                
    /**
     * @description Creates an attribute value name.
     * @tag Item
     * @param int $valueId 
     * @param array $data 
     * @return array
     *      - *valueId* - integer
     *          - The unique ID of the attribute value.
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language</a> of the attribute value.
     *      - *name* - string
     *          - The name of the attribute value. This attribute value name is displayed in the online store.
     */
    public function createItemsAttributeValuesNameByValueId(int $valueId, array $data): array
    {
        return $this->api("/rest/items/attribute_values/{$valueId}/names", 'POST', $data);
    }
                    
    /**
     * @description Deletes an attribute value name. The attribute value ID and language must be specified.
     * @tag Item
     * @param int $valueId 
     * @param int $lang 
     */
    public function deleteItemsAttributeValuesNameByValueIdLang(int $valueId, int $lang): void
    {
        $this->api("/rest/items/attribute_values/{$valueId}/names/{$lang}", 'DELETE');
    }
                
    /**
     * @description Gets the attribute value name. The attribute value ID and language must be specified.
     * @tag Item
     * @param int $valueId 
     * @param int $lang 
     * @return array
     *      - *valueId* - integer
     *          - The unique ID of the attribute value.
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language</a> of the attribute value.
     *      - *name* - string
     *          - The name of the attribute value. This attribute value name is displayed in the online store.
     */
    public function getItemsAttributeValuesNameByValueIdLang(int $valueId, int $lang): array
    {
        return $this->api("/rest/items/attribute_values/{$valueId}/names/{$lang}");
    }
                
    /**
     * @description Updates an attribute value name.
     * @tag Item
     * @param int $valueId 
     * @param int $lang 
     * @param array $data 
     * @return array
     *      - *valueId* - integer
     *          - The unique ID of the attribute value.
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language</a> of the attribute value.
     *      - *name* - string
     *          - The name of the attribute value. This attribute value name is displayed in the online store.
     */
    public function updateItemsAttributeValuesNameByValueIdLang(int $valueId, int $lang, array $data): array
    {
        return $this->api("/rest/items/attribute_values/{$valueId}/names/{$lang}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all attributes.
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified attribute information in the results. The following parameters are available: <ul><li>names</b> = The names of the attribute</li><li>values</b> = The values of the attribute</li><li>maps</b> = The market maps of the attribute</li></ul> More than one parameter should be separated by commas.
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to items updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Attribute
     */
    public function getItemsAttributes(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/attributes"], $query));
    }
                
    /**
     * @description Creates an attribute.
     * @tag Item
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the attribute.
     *      - *backendName* - string
     *          - The back end name of the attribute. The name must be unique and must not contain commas, colons, semicolons or quotation marks. It is not visible in the plentymarkets front end.
     *      - *position* - integer
     *          - The position of the attribute. Attributes are displayed in the attribute overview in ascending order by position.
     *      - *isSurchargePercental* - boolean
     *          - Flag that indicates if the surcharge is percental.
     *      - *isLinkableToImage* - boolean
     *          - Flag that indicates if an image can be linked to the attribute.
     *      - *amazonAttribute* - string
     *          - The attribute of the market Amazon that this attribute is liked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market. Check documentation of the market for permitted values.
     *      - *fruugoAttribute* - string
     *          - The attribute of the market Fruugo that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market.
     *      - *pixmaniaAttribute* - integer
     *          - The attribute of the market PIXmania that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market. Check documentation of the market for permitted values.
     *      - *ottoAttribute* - string
     *          - The attribute of the market OTTO that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market.
     *      - *googleShoppingAttribute* - string
     *          - The attribute of the market Google Shopping that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market.
     *      - *neckermannAtEpAttribute* - integer
     *          - The component of the market neckermann AT EP that this attribute is linked to. To list variations on this market, attributes must be linked to one of the components specified by the market. Check documentation of the market for permitted values.
     *      - *typeOfSelectionInOnlineStore* - string
     *          - How customers can select the attribute in the front end of a client. To allow attribute selection by check mark, attribute availability must be checked on the client side.
     *      - *laRedouteAttribute* - integer
     *          - The attribute of the market La Redoute that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market. Check documentation of the market for permitted values.
     *      - *isGroupable* - boolean
     *          - Flag that indicates if the attribute can be grouped in item lists. If yes, variations with this attribute can be shown in the ItemViewCategoriesList template first. Other attributes are nested and can only be selected after this attribute has been selected.
     */
    public function createItemsAttribute(array $data): array
    {
        return $this->api("/rest/items/attributes", 'POST', $data);
    }
                    
    /**
     * @description Lists all attribute maps.
     * @tag Item
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getItemsAttributesMaps(): array
    {
        return $this->api("/rest/items/attributes/maps");
    }
                    
    /**
     * @description Creates a new attribute map.
     * @tag Item
     * @param array $data 
     * @return array
     *      - *marketId* - number
     *          - The unique ID of the market.
     *      - *attributeId* - integer
     *          - The unique ID of the attribute.
     *      - *name* - string
     *          - The name of the attribute map. The name must be unique and must not contain commas, colons, semicolons or quotation marks. It is not visible in the plentymarkets front end.
     *      - *marketInformation1* - string
     *          - The information regarding the marketplace.
     *      - *marketInformation2* - string
     *          - The information regarding the marketplace.
     */
    public function createItemsAttributesMarketsMap(array $data): array
    {
        return $this->api("/rest/items/attributes/markets/maps", 'POST', $data);
    }
                    
    /**
     * @description Lists all attribute value maps.
     * @tag Item
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getItemsAttributesValuesMaps(): array
    {
        return $this->api("/rest/items/attributes/values/maps");
    }
                    
    /**
     * @description Creates a new attribute value map.
     * @tag Item
     * @param array $data 
     * @return array
     *      - *marketId* - number
     *          - The unique ID of the market.
     *      - *attributeId* - integer
     *          - The unique ID of the attribute.
     *      - *attributeValueId* - integer
     *          - The unique ID of the attribute value.
     *      - *name* - string
     *          - The name of the attribute value map. The name must be unique and must not contain commas, colons, semicolons or quotation marks. It is not visible in the plentymarkets front end.
     *      - *marketInformation1* - string
     *          - The information regarding the marketplace.
     *      - *marketInformation2* - string
     *          - The information regarding the marketplace.
     */
    public function createItemsAttributesValuesMarketsMap(array $data): array
    {
        return $this->api("/rest/items/attributes/values/markets/maps", 'POST', $data);
    }
                    
    /**
     * @description Deletes an attribute map. The ID of the attribute and the ID of the market must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $marketId 
     */
    public function deleteItemsAttributesMarketsMapByAttributeIdMarketId(int $attributeId, int $marketId): void
    {
        $this->api("/rest/items/attributes/{$attributeId}/markets/{$marketId}/maps", 'DELETE');
    }
                
    /**
     * @description Gets an attribute map. The ID of the attribute and the ID of the market must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $marketId 
     * @return array
     *      - *marketId* - number
     *          - The unique ID of the market.
     *      - *attributeId* - integer
     *          - The unique ID of the attribute.
     *      - *name* - string
     *          - The name of the attribute map. The name must be unique and must not contain commas, colons, semicolons or quotation marks. It is not visible in the plentymarkets front end.
     *      - *marketInformation1* - string
     *          - The information regarding the marketplace.
     *      - *marketInformation2* - string
     *          - The information regarding the marketplace.
     */
    public function getItemsAttributesMarketsMapsByAttributeIdMarketId(int $attributeId, int $marketId): array
    {
        return $this->api("/rest/items/attributes/{$attributeId}/markets/{$marketId}/maps");
    }
                
    /**
     * @description Updates an attribute map. The ID of the attribute and the ID of the market must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $marketId 
     * @return array
     *      - *marketId* - number
     *          - The unique ID of the market.
     *      - *attributeId* - integer
     *          - The unique ID of the attribute.
     *      - *name* - string
     *          - The name of the attribute map. The name must be unique and must not contain commas, colons, semicolons or quotation marks. It is not visible in the plentymarkets front end.
     *      - *marketInformation1* - string
     *          - The information regarding the marketplace.
     *      - *marketInformation2* - string
     *          - The information regarding the marketplace.
     */
    public function updateItemsAttributesMarketsMapByAttributeIdMarketId(int $attributeId, int $marketId): array
    {
        return $this->api("/rest/items/attributes/{$attributeId}/markets/{$marketId}/maps", 'PUT');
    }
                    
    /**
     * @description Gets the attribute name in the specified language. The language code must be specified.
     * @tag Item
     * @param int $attributeId 
     * @return array
     */
    public function getItemsAttributesNamesByAttributeId(int $attributeId): array
    {
        return $this->api("/rest/items/attributes/{$attributeId}/names");
    }
                
    /**
     * @description Creates an attribute name in the specified language. The language code must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param array $data 
     * @return array
     *      - *attributeId* - integer
     *          - The id of the attribute.
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language</a> of the attribute.
     *      - *name* - string
     *          - The name of the attribute. This attribute name is displayed in the online store.
     */
    public function createItemsAttributesNameByAttributeId(int $attributeId, array $data): array
    {
        return $this->api("/rest/items/attributes/{$attributeId}/names", 'POST', $data);
    }
                    
    /**
     * @description Deletes the attribute name in the specified language. The language code and attribute name must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $lang 
     */
    public function deleteItemsAttributesNameByAttributeIdLang(int $attributeId, int $lang): void
    {
        $this->api("/rest/items/attributes/{$attributeId}/names/{$lang}", 'DELETE');
    }
                
    /**
     * @description Lists the attribute names of an attribute.
     * @tag Item
     * @param int $attributeId 
     * @param int $lang 
     * @return array
     *      - *attributeId* - integer
     *          - The id of the attribute.
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language</a> of the attribute.
     *      - *name* - string
     *          - The name of the attribute. This attribute name is displayed in the online store.
     */
    public function getItemsAttributesNameByAttributeIdLang(int $attributeId, int $lang): array
    {
        return $this->api("/rest/items/attributes/{$attributeId}/names/{$lang}");
    }
                
    /**
     * @description Updates the attribute name in the specified language. The language code and attribute name must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $lang 
     * @param array $data 
     * @return array
     *      - *attributeId* - integer
     *          - The id of the attribute.
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language</a> of the attribute.
     *      - *name* - string
     *          - The name of the attribute. This attribute name is displayed in the online store.
     */
    public function updateItemsAttributesNameByAttributeIdLang(int $attributeId, int $lang, array $data): array
    {
        return $this->api("/rest/items/attributes/{$attributeId}/names/{$lang}", 'PUT', $data);
    }
                
    /**
     * @description Searches the delete log.
     * @tag Item
     * @param int $attributeId 
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of AttributeValueMarketName
     */
    public function eachItemsAttributesValueMarketNamesByAttributeId(int $attributeId, array $query = []): Iterator
    {
        return $this->eachInternal('getItemsAttributesValueMarketNamesByAttributeId', func_get_args());
    }
        
    /**
     * @description Searches the delete log.
     * @tag Item
     * @param int $attributeId 
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of AttributeValueMarketName
     */
    public function batchItemsAttributesValueMarketNamesByAttributeId(int $attributeId, array $query = []): Iterator
    {
        return $this->batchInternal('getItemsAttributesValueMarketNamesByAttributeId', func_get_args());
    }
    
    /**
     * @description Searches the delete log.
     * @tag Item
     * @param int $attributeId 
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of AttributeValueMarketName
     */
    public function getItemsAttributesValueMarketNamesByAttributeId(int $attributeId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/attributes/{$attributeId}/value_market_names"], $query));
    }
                
    /**
     * @description Creates an attribute value market name.
     * @tag Item
     * @param int $attributeId 
     * @param array $data 
     * @return array
     *      - *valueId* - integer
     *          - The unique ID of the attribute value.
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language</a> of the attribute value market.
     *      - *name* - string
     *          - The name of the attribute value market.
     *      - *name2* - string
     *          - The name2 of the attribute value market.
     *      - *attributeId* - integer
     *      - *referenceType* - string
     */
    public function createItemsAttributesValueMarketNameByAttributeId(int $attributeId, array $data): array
    {
        return $this->api("/rest/items/attributes/{$attributeId}/value_market_names", 'POST', $data);
    }
                    
    /**
     * @description Deletes an attribute value market name. The attribute value ID and language must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $valueId 
     * @param int $lang 
     * @param int $referenceType 
     */
    public function deleteItemsAttributesValueMarketNameByAttributeIdValueIdLangReferenceType(int $attributeId, int $valueId, int $lang, int $referenceType): void
    {
        $this->api("/rest/items/attributes/{$attributeId}/value_market_names/{$valueId}/{$lang}/{$referenceType}", 'DELETE');
    }
                
    /**
     * @description Updates an attribute value market name. The attribute value ID and language must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $valueId 
     * @param int $lang 
     * @param int $referenceType 
     * @param array $data 
     * @return array
     *      - *valueId* - integer
     *          - The unique ID of the attribute value.
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language</a> of the attribute value market.
     *      - *name* - string
     *          - The name of the attribute value market.
     *      - *name2* - string
     *          - The name2 of the attribute value market.
     *      - *attributeId* - integer
     *      - *referenceType* - string
     */
    public function updateItemsAttributesValueMarketNameByAttributeIdValueIdLangReferenceType(int $attributeId, int $valueId, int $lang, int $referenceType, array $data): array
    {
        return $this->api("/rest/items/attributes/{$attributeId}/value_market_names/{$valueId}/{$lang}/{$referenceType}", 'PUT', $data);
    }
                    
    /**
     * @description Lists the attribute values for an attribute. The attribute ID must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified attribute value information in the results. The following parameters are available:<ul><li>attribute = The attribute of the value</li><li>names = The attribute value names in all languages</li><li>marketNames = The market attribute value links (amazon only)</li><li>valueMaps = The market attribute value links (amazon excluded)</li></ul>
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to items updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of AttributeValue
     */
    public function getItemsAttributesValuesByAttributeId(int $attributeId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/attributes/{$attributeId}/values"], $query));
    }
                
    /**
     * @description Creates an attribute value.
     * @tag Item
     * @param int $attributeId 
     * @param array $data 
     */
    public function createItemsAttributesValueByAttributeId(int $attributeId, array $data): void
    {
        $this->api("/rest/items/attributes/{$attributeId}/values", 'POST', $data);
    }
                    
    /**
     * @description Deletes an attribute value map. The ID of the attribute, the ID of the attribute value and the ID of the market must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $attributeValueId 
     * @param int $marketId 
     */
    public function deleteItemsAttributesValuesMarketsMapByAttributeIdAttributeValueIdMarketId(int $attributeId, int $attributeValueId, int $marketId): void
    {
        $this->api("/rest/items/attributes/{$attributeId}/values/{$attributeValueId}/markets/{$marketId}/maps", 'DELETE');
    }
                
    /**
     * @description Gets an attribute value map. The ID of the attribute, the ID of the attribute value and the ID of the market must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $attributeValueId 
     * @param int $marketId 
     * @return array
     *      - *marketId* - number
     *          - The unique ID of the market.
     *      - *attributeId* - integer
     *          - The unique ID of the attribute.
     *      - *attributeValueId* - integer
     *          - The unique ID of the attribute value.
     *      - *name* - string
     *          - The name of the attribute value map. The name must be unique and must not contain commas, colons, semicolons or quotation marks. It is not visible in the plentymarkets front end.
     *      - *marketInformation1* - string
     *          - The information regarding the marketplace.
     *      - *marketInformation2* - string
     *          - The information regarding the marketplace.
     */
    public function getItemsAttributesValuesMarketsMapsByAttributeIdAttributeValueIdMarketId(int $attributeId, int $attributeValueId, int $marketId): array
    {
        return $this->api("/rest/items/attributes/{$attributeId}/values/{$attributeValueId}/markets/{$marketId}/maps");
    }
                
    /**
     * @description Updates an attribute value map. The ID of the attribute, the ID of the attribute value and the ID of the market must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $attributeValueId 
     * @param int $marketId 
     * @return array
     *      - *marketId* - number
     *          - The unique ID of the market.
     *      - *attributeId* - integer
     *          - The unique ID of the attribute.
     *      - *attributeValueId* - integer
     *          - The unique ID of the attribute value.
     *      - *name* - string
     *          - The name of the attribute value map. The name must be unique and must not contain commas, colons, semicolons or quotation marks. It is not visible in the plentymarkets front end.
     *      - *marketInformation1* - string
     *          - The information regarding the marketplace.
     *      - *marketInformation2* - string
     *          - The information regarding the marketplace.
     */
    public function updateItemsAttributesValuesMarketsMapByAttributeIdAttributeValueIdMarketId(int $attributeId, int $attributeValueId, int $marketId): array
    {
        return $this->api("/rest/items/attributes/{$attributeId}/values/{$attributeValueId}/markets/{$marketId}/maps", 'PUT');
    }
                    
    /**
     * @description Deletes an attribute value. The attribute ID must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $id 
     */
    public function deleteItemsAttributesValueByAttributeIdId(int $attributeId, int $id): void
    {
        $this->api("/rest/items/attributes/{$attributeId}/values/{$id}", 'DELETE');
    }
                
    /**
     * @description Get an attribute value. The ID of the attribute value must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $id 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified attribute value information in the results. The following parameters are available:<ul><li>attribute = The attribute of the value</li><li>names = The attribute value names in all languages</li><li>marketNames = The market attribute value links (amazon only)</li><li>valueMaps = The market attribute links (amazon excluded)</li></ul>
     */
    public function getItemsAttributesValueByAttributeIdId(int $attributeId, int $id, array $query = []): void
    {
        $this->api(array_merge(["/rest/items/attributes/{$attributeId}/values/{$id}"], $query));
    }
                
    /**
     * @description Updates an attribute value. The attribute value must be specified.
     * @tag Item
     * @param int $attributeId 
     * @param int $id 
     * @param array $data 
     */
    public function updateItemsAttributesValueByAttributeIdId(int $attributeId, int $id, array $data): void
    {
        $this->api("/rest/items/attributes/{$attributeId}/values/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes an attribute. The ID of the attribute must be specified.
     * @tag Item
     * @param int $id 
     */
    public function deleteItemsAttributeById(int $id): void
    {
        $this->api("/rest/items/attributes/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets an attribute. The ID of the attribute must be specified.
     * @tag Item
     * @param int $id 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified attribute information in the results. The following parameters are available: <ul><li>names</b> = The names of the attribute</li><li>values</b> = The values of the attribute</li><li>maps</b> = The market maps of the attribute</li></ul> More than one parameter should be separated by commas.
     * @return array
     *      - *id* - integer
     *          - The unique ID of the attribute.
     *      - *backendName* - string
     *          - The back end name of the attribute. The name must be unique and must not contain commas, colons, semicolons or quotation marks. It is not visible in the plentymarkets front end.
     *      - *position* - integer
     *          - The position of the attribute. Attributes are displayed in the attribute overview in ascending order by position.
     *      - *isSurchargePercental* - boolean
     *          - Flag that indicates if the surcharge is percental.
     *      - *isLinkableToImage* - boolean
     *          - Flag that indicates if an image can be linked to the attribute.
     *      - *amazonAttribute* - string
     *          - The attribute of the market Amazon that this attribute is liked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market. Check documentation of the market for permitted values.
     *      - *fruugoAttribute* - string
     *          - The attribute of the market Fruugo that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market.
     *      - *pixmaniaAttribute* - integer
     *          - The attribute of the market PIXmania that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market. Check documentation of the market for permitted values.
     *      - *ottoAttribute* - string
     *          - The attribute of the market OTTO that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market.
     *      - *googleShoppingAttribute* - string
     *          - The attribute of the market Google Shopping that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market.
     *      - *neckermannAtEpAttribute* - integer
     *          - The component of the market neckermann AT EP that this attribute is linked to. To list variations on this market, attributes must be linked to one of the components specified by the market. Check documentation of the market for permitted values.
     *      - *typeOfSelectionInOnlineStore* - string
     *          - How customers can select the attribute in the front end of a client. To allow attribute selection by check mark, attribute availability must be checked on the client side.
     *      - *laRedouteAttribute* - integer
     *          - The attribute of the market La Redoute that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market. Check documentation of the market for permitted values.
     *      - *isGroupable* - boolean
     *          - Flag that indicates if the attribute can be grouped in item lists. If yes, variations with this attribute can be shown in the ItemViewCategoriesList template first. Other attributes are nested and can only be selected after this attribute has been selected.
     */
    public function getItemsAttributeById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/attributes/{$id}"], $query));
    }
                
    /**
     * @description Updates an attribute. The ID of the attribute must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the attribute.
     *      - *backendName* - string
     *          - The back end name of the attribute. The name must be unique and must not contain commas, colons, semicolons or quotation marks. It is not visible in the plentymarkets front end.
     *      - *position* - integer
     *          - The position of the attribute. Attributes are displayed in the attribute overview in ascending order by position.
     *      - *isSurchargePercental* - boolean
     *          - Flag that indicates if the surcharge is percental.
     *      - *isLinkableToImage* - boolean
     *          - Flag that indicates if an image can be linked to the attribute.
     *      - *amazonAttribute* - string
     *          - The attribute of the market Amazon that this attribute is liked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market. Check documentation of the market for permitted values.
     *      - *fruugoAttribute* - string
     *          - The attribute of the market Fruugo that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market.
     *      - *pixmaniaAttribute* - integer
     *          - The attribute of the market PIXmania that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market. Check documentation of the market for permitted values.
     *      - *ottoAttribute* - string
     *          - The attribute of the market OTTO that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market.
     *      - *googleShoppingAttribute* - string
     *          - The attribute of the market Google Shopping that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market.
     *      - *neckermannAtEpAttribute* - integer
     *          - The component of the market neckermann AT EP that this attribute is linked to. To list variations on this market, attributes must be linked to one of the components specified by the market. Check documentation of the market for permitted values.
     *      - *typeOfSelectionInOnlineStore* - string
     *          - How customers can select the attribute in the front end of a client. To allow attribute selection by check mark, attribute availability must be checked on the client side.
     *      - *laRedouteAttribute* - integer
     *          - The attribute of the market La Redoute that this attribute is linked to. To list variations on this market, attributes must be linked to one of the attributes specified by the market. Check documentation of the market for permitted values.
     *      - *isGroupable* - boolean
     *          - Flag that indicates if the attribute can be grouped in item lists. If yes, variations with this attribute can be shown in the ItemViewCategoriesList template first. Other attributes are nested and can only be selected after this attribute has been selected.
     */
    public function updateItemsAttributeById(int $id, array $data): array
    {
        return $this->api("/rest/items/attributes/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all available barcodes.
     * @tag Item
     * @param array $query
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to items updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Barcode
     */
    public function getItemsBarcodes(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/barcodes"], $query));
    }
                
    /**
     * @description Creates a new barcode.
     * @tag Item
     * @param array $data 
     */
    public function createItemsBarcode(array $data): void
    {
        $this->api("/rest/items/barcodes", 'POST', $data);
    }
                    
    /**
     * @description Lists barcodes linked to the specified referrer. The ID of the referrer must be specified.
     * @tag Item
     * @param int $referrerId 
     * @return array
     */
    public function getItemsBarcodesReferrerByReferrerId(int $referrerId): array
    {
        return $this->api("/rest/items/barcodes/referrer/{$referrerId}");
    }
                    
    /**
     * @description Lists all barcodes of a specific type. The type must be specified.
     * @tag Item
     * @param int $type 
     * @return array
     */
    public function getItemsBarcodesTypeByType(int $type): array
    {
        return $this->api("/rest/items/barcodes/type/{$type}");
    }
                    
    /**
     * @description Deletes a barcode. The ID of the barcode must be specified.
     * @tag Item
     * @param int $barcodeId 
     */
    public function deleteItemsBarcodeByBarcodeId(int $barcodeId): void
    {
        $this->api("/rest/items/barcodes/{$barcodeId}", 'DELETE');
    }
                
    /**
     * @description Gets a barcode. The ID of the barcode must be specified.
     * @tag Item
     * @param int $barcodeId 
     */
    public function getItemsBarcodeByBarcodeId(int $barcodeId): void
    {
        $this->api("/rest/items/barcodes/{$barcodeId}");
    }
                
    /**
     * @description Updates a barcode. The ID of the barcode must be specified.
     * @tag Item
     * @param int $barcodeId 
     * @param array $data 
     */
    public function updateItemsBarcodeByBarcodeId(int $barcodeId, array $data): void
    {
        $this->api("/rest/items/barcodes/{$barcodeId}", 'PUT', $data);
    }
                    
    /**
     * @description Activate a referrer for a barcode.
     * @tag Item
     * @param int $barcodeId 
     * @return array
     *      - *barcodeId* - integer
     *          - The unique ID of the barcode
     *      - *referrerId* - number
     *          - The unique ID of the referrer. To activate all referrers, the value <strong>-1</strong> must be specified. This value activates all referrers in the system by default, including any referrers added at a later stage.
     *      - *createdAt* - string
     *          - The time the barcode was created.
     *      - *updatedAt* - string
     *          - The time the barcode was last updated.
     */
    public function createItemsBarcodesReferrerByBarcodeId(int $barcodeId): array
    {
        return $this->api("/rest/items/barcodes/{$barcodeId}/referrer", 'POST');
    }
                    
    /**
     * @description Deactivate a referrer for a barcode. The ID of the barcode and the ID of the referrer must be specified.
     * @tag Item
     * @param int $barcodeId 
     * @param int $referrerId 
     */
    public function deleteItemsBarcodesReferrerByBarcodeIdReferrerId(int $barcodeId, int $referrerId): void
    {
        $this->api("/rest/items/barcodes/{$barcodeId}/referrer/{$referrerId}", 'DELETE');
    }
                    
    /**
     * @description Lists all shipping profiles of all items. Results can be filtered by the timestamp of the link between items and shipping profiles (eq, lt, lte, gt, gte, between).
<ul>
<li>eq = Equal to</li>
<li>gte = Greater than or equal to</li>
<li>gt = Greater than</li>
<li>lte = Less than or equal to</li>
<li>lt = Less than</li>
<li>between = Date range</li>
</ul>
Example: updated=gt:2018-04-16 16:00:00 returns all items with shipping profiles that were activated after 4pm on the 16th of April 2018.
     * @tag Item
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getItemsItemShippingProfiles(): array
    {
        return $this->api("/rest/items/item_shipping_profiles");
    }
                
    /**
     * @description Activates up to 50 shipping profiles for items
     * @tag Item

     */
    public function createItemsItemShippingProfile(): void
    {
        $this->api("/rest/items/item_shipping_profiles", 'POST');
    }
                    
    /**
     * @description Lists the ID and name of all item label templates saved in the system.
     * @tag Item
     * @return array
     */
    public function getItemsLabels(): array
    {
        return $this->api("/rest/items/labels");
    }
                    
    /**
     * @description Searches for item listing categories. The following 3 filter are mandatory: market and marketSideId. parentId is optional.
     * @tag Item

     */
    public function getItemsListingsCategories(): void
    {
        $this->api("/rest/items/listings/categories");
    }
                    
    /**
     * @description Gets one item listing categories. The ID must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *id* - integer
     *      - *name* - string
     *      - *fullName* - string
     *      - *parentId* - integer
     *      - *isLeaf* - boolean
     */
    public function getItemsListingsCategoryById(int $id): array
    {
        return $this->api("/rest/items/listings/categories/{$id}");
    }
                    
    /**
     * @description Gets a list of item listing shop categories for the specified user ID
     * @tag Item
     * @param int $ebayAccountId 
     */
    public function getItemsListingsShopCategoryByEbayAccountId(int $ebayAccountId): void
    {
        $this->api("/rest/items/listings/shop_categories/{$ebayAccountId}");
    }
                    
    /**
     * @description Lists all manufacturers in the system.

Display a listing of the resource.
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified manufacturer information in the results. The following parameters are available: commissions, externals
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to records updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     *      - *name* - string - optional
     *          - Filter restricts the list of results to records with specified name.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Manufacturer
     */
    public function getItemsManufacturers(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/manufacturers"], $query));
    }
                
    /**
     * @description Creates a manufacturer.
     * @tag Item
     * @return array
     *      - *id* - integer
     *          - The unique ID of the manufacturer.
     *      - *name* - string
     *          - The name of the manufacturer
     *      - *externalName* - string
     *          - The external name of the manufacturer. The external name is used for the item export to external markets. If no external name is saved, the Name will be used. The external name will also be transferred to FINDOLOGIC and will be indexed for item searches.
     *      - *logo* - string
     *          - The URL of the manufacturer's logo
     *      - *url* - string
     *          - The URL of the manufacturer's website
     *      - *street* - string
     *          - The street of the manufacturer's address
     *      - *houseNo* - string
     *          - The house number of the manufacturer's address
     *      - *postcode* - string
     *          - The postal code of the manufacturer's address
     *      - *town* - string
     *          - The town of the manufacturer's address
     *      - *phoneNumber* - string
     *          - The phone number of the manufacturer
     *      - *faxNumber* - string
     *          - The fax number of the manufacturer
     *      - *email* - string
     *          - The email address of the manufacturer
     *      - *countryId* - integer
     *          - The ID of the <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">country</a> in which the manufacturer is based; 0 = unknown.
     *      - *pixmaniaBrandId* - integer
     *          - The manufacturer's ID on the market Pixmania
     *      - *neckermannAtEpBrandId* - integer
     *          - The manufacturer's ID on the market Neckermann Austria, Enterprise version
     *      - *laRedouteBrandId* - integer
     *          - The manufacturer's ID on the market La Redoute
     *      - *position* - integer
     *          - The position of the manufacturer
     *      - *comment* - string
     *          - Internal comments about the manufacturer (optional)
     *      - *updatedAt* - string
     *          - The time the manufacturer information was last updated.
     */
    public function createItemsManufacturer(): array
    {
        return $this->api("/rest/items/manufacturers", 'POST');
    }
                    
    /**
     * @description Deletes a manufacturer. The ID of the manufacturer must be specified.
     * @tag Item
     * @param int $id 
     */
    public function deleteItemsManufacturerById(int $id): void
    {
        $this->api("/rest/items/manufacturers/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a manufacturer. The ID of the manufacturer must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the manufacturer.
     *      - *name* - string
     *          - The name of the manufacturer
     *      - *externalName* - string
     *          - The external name of the manufacturer. The external name is used for the item export to external markets. If no external name is saved, the Name will be used. The external name will also be transferred to FINDOLOGIC and will be indexed for item searches.
     *      - *logo* - string
     *          - The URL of the manufacturer's logo
     *      - *url* - string
     *          - The URL of the manufacturer's website
     *      - *street* - string
     *          - The street of the manufacturer's address
     *      - *houseNo* - string
     *          - The house number of the manufacturer's address
     *      - *postcode* - string
     *          - The postal code of the manufacturer's address
     *      - *town* - string
     *          - The town of the manufacturer's address
     *      - *phoneNumber* - string
     *          - The phone number of the manufacturer
     *      - *faxNumber* - string
     *          - The fax number of the manufacturer
     *      - *email* - string
     *          - The email address of the manufacturer
     *      - *countryId* - integer
     *          - The ID of the <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">country</a> in which the manufacturer is based; 0 = unknown.
     *      - *pixmaniaBrandId* - integer
     *          - The manufacturer's ID on the market Pixmania
     *      - *neckermannAtEpBrandId* - integer
     *          - The manufacturer's ID on the market Neckermann Austria, Enterprise version
     *      - *laRedouteBrandId* - integer
     *          - The manufacturer's ID on the market La Redoute
     *      - *position* - integer
     *          - The position of the manufacturer
     *      - *comment* - string
     *          - Internal comments about the manufacturer (optional)
     *      - *updatedAt* - string
     *          - The time the manufacturer information was last updated.
     */
    public function getItemsManufacturerById(int $id): array
    {
        return $this->api("/rest/items/manufacturers/{$id}");
    }
                
    /**
     * @description Updates a manufacturer. The ID of the manufacturer must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the manufacturer.
     *      - *name* - string
     *          - The name of the manufacturer
     *      - *externalName* - string
     *          - The external name of the manufacturer. The external name is used for the item export to external markets. If no external name is saved, the Name will be used. The external name will also be transferred to FINDOLOGIC and will be indexed for item searches.
     *      - *logo* - string
     *          - The URL of the manufacturer's logo
     *      - *url* - string
     *          - The URL of the manufacturer's website
     *      - *street* - string
     *          - The street of the manufacturer's address
     *      - *houseNo* - string
     *          - The house number of the manufacturer's address
     *      - *postcode* - string
     *          - The postal code of the manufacturer's address
     *      - *town* - string
     *          - The town of the manufacturer's address
     *      - *phoneNumber* - string
     *          - The phone number of the manufacturer
     *      - *faxNumber* - string
     *          - The fax number of the manufacturer
     *      - *email* - string
     *          - The email address of the manufacturer
     *      - *countryId* - integer
     *          - The ID of the <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">country</a> in which the manufacturer is based; 0 = unknown.
     *      - *pixmaniaBrandId* - integer
     *          - The manufacturer's ID on the market Pixmania
     *      - *neckermannAtEpBrandId* - integer
     *          - The manufacturer's ID on the market Neckermann Austria, Enterprise version
     *      - *laRedouteBrandId* - integer
     *          - The manufacturer's ID on the market La Redoute
     *      - *position* - integer
     *          - The position of the manufacturer
     *      - *comment* - string
     *          - Internal comments about the manufacturer (optional)
     *      - *updatedAt* - string
     *          - The time the manufacturer information was last updated.
     */
    public function updateItemsManufacturerById(int $id): array
    {
        return $this->api("/rest/items/manufacturers/{$id}", 'PUT');
    }
                    
    /**
     * @description Lists all commissions associated with a manufacturer. The ID of the manufacturer must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsManufacturersCommissionsById(int $id): array
    {
        return $this->api("/rest/items/manufacturers/{$id}/commissions");
    }
                
    /**
     * @description Creates a commission for a manufacturer. The ID of the manufacturer must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the manufacturer commission
     *      - *manufacturerId* - integer
     *          - The unique ID of the manufacturer
     *      - *plentyId* - integer
     *          - The unique ID of the client (store) that the commission applies to. The route /rest/webstores provides access to clients (stores).
     *      - *referrerId* - number
     *          - The unique ID of the referrer that the commission applies to. The route /rest/orders/referrers provides access to referrers.
     *      - *commission* - number
     *          - The manufacturer commission value in percent
     */
    public function createItemsManufacturersCommissionById(int $id): array
    {
        return $this->api("/rest/items/manufacturers/{$id}/commissions", 'POST');
    }
                    
    /**
     * @description Delete a commission. The ID of the commission must be specified.
     * @tag Item
     * @param int $id 
     * @param int $manufacturerId 
     */
    public function deleteItemsManufacturersCommissionByIdManufacturerId(int $id, int $manufacturerId): void
    {
        $this->api("/rest/items/manufacturers/{$id}/commissions/{$manufacturerId}", 'DELETE');
    }
                
    /**
     * @description Gets a commission for a manufacturer. The ID of the commission must be specified.
     * @tag Item
     * @param int $id 
     * @param int $manufacturerId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the manufacturer commission
     *      - *manufacturerId* - integer
     *          - The unique ID of the manufacturer
     *      - *plentyId* - integer
     *          - The unique ID of the client (store) that the commission applies to. The route /rest/webstores provides access to clients (stores).
     *      - *referrerId* - number
     *          - The unique ID of the referrer that the commission applies to. The route /rest/orders/referrers provides access to referrers.
     *      - *commission* - number
     *          - The manufacturer commission value in percent
     */
    public function getItemsManufacturersCommissionByIdManufacturerId(int $id, int $manufacturerId): array
    {
        return $this->api("/rest/items/manufacturers/{$id}/commissions/{$manufacturerId}");
    }
                
    /**
     * @description Updates a commission. The ID of the commission must be specified.
     * @tag Item
     * @param int $id 
     * @param int $manufacturerId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the manufacturer commission
     *      - *manufacturerId* - integer
     *          - The unique ID of the manufacturer
     *      - *plentyId* - integer
     *          - The unique ID of the client (store) that the commission applies to. The route /rest/webstores provides access to clients (stores).
     *      - *referrerId* - number
     *          - The unique ID of the referrer that the commission applies to. The route /rest/orders/referrers provides access to referrers.
     *      - *commission* - number
     *          - The manufacturer commission value in percent
     */
    public function updateItemsManufacturersCommissionByIdManufacturerId(int $id, int $manufacturerId): array
    {
        return $this->api("/rest/items/manufacturers/{$id}/commissions/{$manufacturerId}", 'PUT');
    }
                    
    /**
     * @description Returns the packing units for the item variations based on the language wanted
     * @tag Item
     * @param array $query
     *      - *language* - string - optional
     *          - The language to return the unit name for. If no language is provided, all the languages will be returned
     * @return array
     */
    public function getItemsPackingUnits(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/packing_units"], $query));
    }
                    
    /**
     * @description Returns the packing unit for the item variations based on the given ID, the language wanted and the flag to say if the ID provided is the a unit ID
     * @tag Item
     * @param int $id The ID of the packing unit
     * @param array $query
     *      - *language* - string - optional
     *          - The language to return the unit name for. If no language is provided, all the languages will be returned
     *      - *isUnitId* - boolean - optional
     *          - A flag to say if the ID provided is the unit ID or not. If true, the unit ID will be taken into account to get the result
     * @return array
     *      - *id* - integer
     *          - The id of the packing unit entry. Primary key auto-increment
     *      - *unitId* - integer
     *          - The id of the packing unit as it was until now (from 0 to 39 without 33)
     *      - *unitNameEN* - string
     *          - The name of the packing unit in English
     *      - *unitNameDE* - string
     *          - The name of the packing unit in German
     */
    public function getItemsPackingUnitById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/packing_units/{$id}"], $query));
    }
                
    /**
     * @description Lists all properties.
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified property information in the results. The following parameters are available: <ul><li>names</b> = The names of the property</li><li>group</b> = The property group assigned to the property</li><li>marketComponents</b> = Lists the markets where the property is available </li><li>selections</b> = Lists the selections of the property</li></ul> More than one parameter should be separated by commas.
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to items updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     *      - *groupId* - string - optional
     *          - Filter restricts the list of results to items linked to a specified property group
     *      - *ids* - string - optional
     *          - Filter restricts the list of results to items with the specified id criteria. Allowed comparators are 'eq' and 'in'.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of properties to be listed per page must be specified.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Property
     */
    public function eachItemsProperties(array $query = []): Iterator
    {
        return $this->eachInternal('getItemsProperties', func_get_args());
    }
        
    /**
     * @description Lists all properties.
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified property information in the results. The following parameters are available: <ul><li>names</b> = The names of the property</li><li>group</b> = The property group assigned to the property</li><li>marketComponents</b> = Lists the markets where the property is available </li><li>selections</b> = Lists the selections of the property</li></ul> More than one parameter should be separated by commas.
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to items updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     *      - *groupId* - string - optional
     *          - Filter restricts the list of results to items linked to a specified property group
     *      - *ids* - string - optional
     *          - Filter restricts the list of results to items with the specified id criteria. Allowed comparators are 'eq' and 'in'.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of properties to be listed per page must be specified.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Property
     */
    public function batchItemsProperties(array $query = []): Iterator
    {
        return $this->batchInternal('getItemsProperties', func_get_args());
    }
    
    /**
     * @description Lists all properties.
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified property information in the results. The following parameters are available: <ul><li>names</b> = The names of the property</li><li>group</b> = The property group assigned to the property</li><li>marketComponents</b> = Lists the markets where the property is available </li><li>selections</b> = Lists the selections of the property</li></ul> More than one parameter should be separated by commas.
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to items updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     *      - *groupId* - string - optional
     *          - Filter restricts the list of results to items linked to a specified property group
     *      - *ids* - string - optional
     *          - Filter restricts the list of results to items with the specified id criteria. Allowed comparators are 'eq' and 'in'.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of properties to be listed per page must be specified.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Property
     */
    public function getItemsProperties(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/properties"], $query));
    }
                
    /**
     * @description Creates a new property.
     * @tag Item
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property
     *      - *cast* - string
     *          - The cast of the property (array values: 'empty','int','float','string','selection','text','html','date','file')
     *      - *type* - string
     *          - The type of the property (e.g. 'item' or 'contact')
     *      - *position* - integer
     *          - The position of the property
     */
    public function createItemsProperty(array $data): array
    {
        return $this->api("/rest/items/properties", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property. The ID of the property must be specified.
     * @tag Item
     * @param int $id 
     */
    public function deleteItemsPropertyById(int $id): void
    {
        $this->api("/rest/items/properties/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a property. The ID of the property must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The ID of the property
     *      - *cast* - string
     *          - The cast of the property (array values: 'empty','int','float','string','selection','text','html','date','file')
     *      - *type* - string
     *          - The type of the property (e.g. 'item' or 'contact')
     *      - *position* - integer
     *          - The position of the property
     */
    public function getItemsPropertyById(int $id): array
    {
        return $this->api("/rest/items/properties/{$id}");
    }
                
    /**
     * @description Updates a property. The ID of the property must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property
     *      - *cast* - string
     *          - The cast of the property (array values: 'empty','int','float','string','selection','text','html','date','file')
     *      - *type* - string
     *          - The type of the property (e.g. 'item' or 'contact')
     *      - *position* - integer
     *          - The position of the property
     */
    public function updateItemsPropertyById(int $id, array $data): array
    {
        return $this->api("/rest/items/properties/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description Lists the property market references of a property. The ID of the property must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsPropertiesMarketReferencesById(int $id): array
    {
        return $this->api("/rest/items/properties/{$id}/market_references");
    }
                
    /**
     * @description Creates a property market reference.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *propertyId* - integer
     *          - The unique ID of the property
     *      - *componentId* - integer
     *          - The unique ID of the reference for the market
     *      - *marketId* - number
     *          - The unique ID of the market
     *      - *externalComponent* - string
     *          - The external reference of the property
     */
    public function createItemsPropertiesMarketReferenceById(int $id, array $data): array
    {
        return $this->api("/rest/items/properties/{$id}/market_references", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property market reference. The ID of the property and the ID of the market must be specified.
     * @tag Item
     * @param int $id 
     * @param int $marketId 
     */
    public function deleteItemsPropertiesMarketReferenceByIdMarketId(int $id, int $marketId): void
    {
        $this->api("/rest/items/properties/{$id}/market_references/{$marketId}", 'DELETE');
    }
                
    /**
     * @description Gets a property market reference. The market ID and the property ID must be specified.
     * @tag Item
     * @param int $id 
     * @param int $marketId 
     * @return array
     *      - *propertyId* - integer
     *          - The unique ID of the property
     *      - *componentId* - integer
     *          - The unique ID of the reference for the market
     *      - *marketId* - number
     *          - The unique ID of the market
     *      - *externalComponent* - string
     *          - The external reference of the property
     */
    public function getItemsPropertiesMarketReferenceByIdMarketId(int $id, int $marketId): array
    {
        return $this->api("/rest/items/properties/{$id}/market_references/{$marketId}");
    }
                
    /**
     * @description Updates a property market reference.
     * @tag Item
     * @param int $id 
     * @param int $marketId 
     * @param array $data 
     * @return array
     *      - *propertyId* - integer
     *          - The unique ID of the property
     *      - *componentId* - integer
     *          - The unique ID of the reference for the market
     *      - *marketId* - number
     *          - The unique ID of the market
     *      - *externalComponent* - string
     *          - The external reference of the property
     */
    public function updateItemsPropertiesMarketReferenceByIdMarketId(int $id, int $marketId, array $data): array
    {
        return $this->api("/rest/items/properties/{$id}/market_references/{$marketId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists the names of a property in all languages. The ID of the property must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsPropertiesNamesById(int $id): array
    {
        return $this->api("/rest/items/properties/{$id}/names");
    }
                
    /**
     * @description Creates a property name. The ID of the property must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property name
     *      - *propertyId* - integer
     *          - The property ID of the property name
     *      - *lang* - string
     *          - The language of the property name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property name
     *      - *description* - string
     *          - The description of the property name
     */
    public function createItemsPropertiesNameById(int $id, array $data): array
    {
        return $this->api("/rest/items/properties/{$id}/names", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property name. The ID of the property must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     */
    public function deleteItemsPropertiesNameByIdLang(int $id, int $lang): void
    {
        $this->api("/rest/items/properties/{$id}/names/{$lang}", 'DELETE');
    }
                
    /**
     * @description Gets a property name in a specified language. The ID of the property and the language code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     * @return array
     *      - *id* - integer
     *          - The ID of the property name
     *      - *propertyId* - integer
     *          - The property ID of the property name
     *      - *lang* - string
     *          - The language of the property name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property name
     *      - *description* - string
     *          - The description of the property name
     */
    public function getItemsPropertiesNameByIdLang(int $id, int $lang): array
    {
        return $this->api("/rest/items/properties/{$id}/names/{$lang}");
    }
                
    /**
     * @description Updates a property name. The ID of the property and the language code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property name
     *      - *propertyId* - integer
     *          - The property ID of the property name
     *      - *lang* - string
     *          - The language of the property name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property name
     *      - *description* - string
     *          - The description of the property name
     */
    public function updateItemsPropertiesNameByIdLang(int $id, int $lang, array $data): array
    {
        return $this->api("/rest/items/properties/{$id}/names/{$lang}", 'PUT', $data);
    }
                    
    /**
     * @description Lists the property selections of a property. The ID of the property must be specified.
     * @tag Item
     * @param int $propertyId 
     * @return array
     */
    public function getItemsPropertiesSelectionsByPropertyId(int $propertyId): array
    {
        return $this->api("/rest/items/properties/{$propertyId}/selections");
    }
                
    /**
     * @description Creates a property selection.
     * @tag Item
     * @param int $propertyId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection
     *      - *propertyId* - integer
     *          - The property ID of the property selection
     *      - *position* - integer
     *          - The position of the property selection
     */
    public function createItemsPropertiesSelectionByPropertyId(int $propertyId, array $data): array
    {
        return $this->api("/rest/items/properties/{$propertyId}/selections", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property selection. The ID of the property must be specified.
     * @tag Item
     * @param int $propertyId 
     * @param int $id 
     */
    public function deleteItemsPropertiesSelectionByPropertyIdId(int $propertyId, int $id): void
    {
        $this->api("/rest/items/properties/{$propertyId}/selections/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a property selection of a property.
     * @tag Item
     * @param int $propertyId 
     * @param int $id 
     * @return array
     */
    public function getItemsPropertiesSelectionByPropertyIdId(int $propertyId, int $id): array
    {
        return $this->api("/rest/items/properties/{$propertyId}/selections/{$id}");
    }
                
    /**
     * @description Creates a property selection lang.
     * @tag Item
     * @param int $propertyId 
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection
     *      - *propertyId* - integer
     *          - The property ID of the property selection
     *      - *position* - integer
     *          - The position of the property selection
     */
    public function createItemsPropertiesSelectionByPropertyIdId(int $propertyId, int $id, array $data): array
    {
        return $this->api("/rest/items/properties/{$propertyId}/selections/{$id}", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property selection language. The ID of the selection and the language must be specified.
     * @tag Item
     * @param int $propertyId 
     * @param int $id 
     * @param int $lang 
     */
    public function deleteItemsPropertiesSelectionByPropertyIdIdLang(int $propertyId, int $id, int $lang): void
    {
        $this->api("/rest/items/properties/{$propertyId}/selections/{$id}/{$lang}", 'DELETE');
    }
                
    /**
     * @description Lists the property selections of a property for a specific language. The ID and language of the property must be specified.
     * @tag Item
     * @param int $propertyId 
     * @param int $id 
     * @param int $lang 
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection
     *      - *propertyId* - integer
     *          - The property ID of the property selection
     *      - *position* - integer
     *          - The position of the property selection
     */
    public function getItemsPropertiesSelectionByPropertyIdIdLang(int $propertyId, int $id, int $lang): array
    {
        return $this->api("/rest/items/properties/{$propertyId}/selections/{$id}/{$lang}");
    }
                
    /**
     * @description Updates a property selection.
     * @tag Item
     * @param int $propertyId 
     * @param int $id 
     * @param int $lang 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection
     *      - *propertyId* - integer
     *          - The property ID of the property selection
     *      - *position* - integer
     *          - The position of the property selection
     */
    public function updateItemsPropertiesSelectionByPropertyIdIdLang(int $propertyId, int $id, int $lang, array $data): array
    {
        return $this->api("/rest/items/properties/{$propertyId}/selections/{$id}/{$lang}", 'PUT', $data);
    }
                    
    /**
     * @description Lists the property selections of a property. The ID of the property must be specified.
     * @tag Item
     * @param int $propertyId 
     * @param int $lang 
     * @return array
     */
    public function getItemsPropertiesSelectionByPropertyIdLang(int $propertyId, int $lang): array
    {
        return $this->api("/rest/items/properties/{$propertyId}/selections/{$lang}");
    }
                    
    /**
     * @description Lists the property groups.
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified property group information in the results. The following parameters are available: <ul><li>names</b> = The names of the property group</li><li>properties</b> = The properties that are assigned to the property group</li></ul> More than one parameter should be separated by commas.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyGroup
     */
    public function getItemsPropertyGroups(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/property_groups"], $query));
    }
                
    /**
     * @description Creates a property group.
     * @tag Item
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group
     *      - *position* - integer
     *          - The position of the property group
     */
    public function createItemsPropertyGroup(array $data): array
    {
        return $this->api("/rest/items/property_groups", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property group. The ID of the property group must be specified.
     * @tag Item
     * @param int $id 
     */
    public function deleteItemsPropertyGroupById(int $id): void
    {
        $this->api("/rest/items/property_groups/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a property group. The ID of the property group must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group
     *      - *position* - integer
     *          - The position of the property group
     */
    public function getItemsPropertyGroupById(int $id): array
    {
        return $this->api("/rest/items/property_groups/{$id}");
    }
                
    /**
     * @description Updates an existing property group.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group
     *      - *position* - integer
     *          - The position of the property group
     */
    public function updateItemsPropertyGroupById(int $id, array $data): array
    {
        return $this->api("/rest/items/property_groups/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description Lists the property group names of a property group in all languages. The ID of the property group must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsPropertyGroupsNamesById(int $id): array
    {
        return $this->api("/rest/items/property_groups/{$id}/names");
    }
                
    /**
     * @description Creates a property group name. The ID of the property group must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group name
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *lang* - string
     *          - The language of the property group name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property group
     *      - *description* - string
     *          - The description of the property group
     */
    public function createItemsPropertyGroupsNameById(int $id, array $data): array
    {
        return $this->api("/rest/items/property_groups/{$id}/names", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property group name. The ID of the property group must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     */
    public function deleteItemsPropertyGroupsNameByIdLang(int $id, int $lang): void
    {
        $this->api("/rest/items/property_groups/{$id}/names/{$lang}", 'DELETE');
    }
                
    /**
     * @description Gets a property group name in the specified language. The ID of the property group name and the language code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group name
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *lang* - string
     *          - The language of the property group name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property group
     *      - *description* - string
     *          - The description of the property group
     */
    public function getItemsPropertyGroupsNameByIdLang(int $id, int $lang): array
    {
        return $this->api("/rest/items/property_groups/{$id}/names/{$lang}");
    }
                
    /**
     * @description Updates a property group name. The ID of the property group and the language must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group name
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *lang* - string
     *          - The language of the property group name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property group
     *      - *description* - string
     *          - The description of the property group
     */
    public function updateItemsPropertyGroupsNameByIdLang(int $id, int $lang, array $data): array
    {
        return $this->api("/rest/items/property_groups/{$id}/names/{$lang}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all sales prices.
     * @tag Item
     * @param array $query
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to items updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of SalesPrice
     */
    public function getItemsSalesPrices(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/sales_prices"], $query));
    }
                
    /**
     * @description Creates a sales price.
     * @tag Item
     * @param array $data 
     */
    public function createItemsSalesPrice(array $data): void
    {
        $this->api("/rest/items/sales_prices", 'POST', $data);
    }
                    
    /**
     * @description Deletes a sales price. The ID of the sales price must be specified.

Delete salesPrice
     * @tag Item
     * @param int $id 
     */
    public function deleteItemsSalesPriceById(int $id): void
    {
        $this->api("/rest/items/sales_prices/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets the data for a specific sales price. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     */
    public function getItemsSalesPriceById(int $id): void
    {
        $this->api("/rest/items/sales_prices/{$id}");
    }
                
    /**
     * @description Updates a sales price.
     * @tag Item
     * @param int $id 
     * @param array $data 
     */
    public function updateItemsSalesPriceById(int $id, array $data): void
    {
        $this->api("/rest/items/sales_prices/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all activated referrer accounts of a sales price.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsSalesPricesAccountsById(int $id): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/accounts");
    }
                
    /**
     * @description Activates a referrer account for a sales price.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *referrerId* - integer
     *          - The ID of the referrer linked to the sales price
     *      - *accountId* - integer
     *          - The ID of the referrer account linked to the sales price
     *      - *createdAt* - string
     *          - The time the referrer account was linked to the sales price.
     *      - *updatedAt* - string
     *          - The time the link was last updated.
     */
    public function createItemsSalesPricesAccountById(int $id, array $data): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/accounts", 'POST', $data);
    }
                    
    /**
     * @description Deactivates a referrer account for a sales price.
     * @tag Item
     * @param int $id 
     * @param int $accountType 
     * @param int $accountId 
     */
    public function deleteItemsSalesPricesAccountByIdAccountTypeAccountId(int $id, int $accountType, int $accountId): void
    {
        $this->api("/rest/items/sales_prices/{$id}/accounts/{$accountType}/{$accountId}", 'DELETE');
    }
                    
    /**
     * @description Lists active countries for a sales price. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsSalesPricesCountriesById(int $id): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/countries");
    }
                
    /**
     * @description Activates a country for a sales price.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *countryId* - integer
     *          - The unique ID of the <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries"  target="_blank">country</a>
     *      - *createdAt* - string
     *          - The time the country was activated.
     *      - *updatedAt* - string
     *          - The time the relationship between country and sales price was last updated.
     */
    public function createItemsSalesPricesCountryById(int $id, array $data): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/countries", 'POST', $data);
    }
                    
    /**
     * @description Deactivates a country for a sales price.
     * @tag Item
     * @param int $id 
     * @param int $countryId 
     */
    public function deleteItemsSalesPricesCountryByIdCountryId(int $id, int $countryId): void
    {
        $this->api("/rest/items/sales_prices/{$id}/countries/{$countryId}", 'DELETE');
    }
                    
    /**
     * @description List all currencies activated for a sales price. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsSalesPricesCurrenciesById(int $id): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/currencies");
    }
                
    /**
     * @description Activates a currency for a sales price. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *currency* - string
     *          - The ISO code of the <a href="https://developers.plentymarkets.com/rest-doc/introduction#currencies" target="_blank">currency</a>; -1 = all currencies.
     *      - *createdAt* - string
     *          - The time the currency was activated.
     *      - *updatedAt* - string
     *          - The time the relationship between currency and sales price was last updated.
     */
    public function createItemsSalesPricesCurrencyById(int $id, array $data): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/currencies", 'POST', $data);
    }
                    
    /**
     * @description Deactivate a currency for a sales price. The ID of the sales price and the ISO code of the currency must be specified.
     * @tag Item
     * @param int $id 
     * @param int $currency 
     */
    public function deleteItemsSalesPricesCurrencyByIdCurrency(int $id, int $currency): void
    {
        $this->api("/rest/items/sales_prices/{$id}/currencies/{$currency}", 'DELETE');
    }
                    
    /**
     * @description Lists the activated customer classes for a sales price. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsSalesPricesCustomerClassesById(int $id): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/customer_classes");
    }
                
    /**
     * @description Activates a customer class for a sales price. The ID of the sales price and the ID of the customer class must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *customerClassId* - integer
     *          - The unique ID of the customer class
     *      - *createdAt* - string
     *          - The time the customer class was activated.
     *      - *updatedAt* - string
     *          - The time the relationship between customer class and sales price was last updated.
     */
    public function createItemsSalesPricesCustomerClassById(int $id, array $data): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/customer_classes", 'POST', $data);
    }
                    
    /**
     * @description Activates a customer class for a sales price. The ID of the sales price and the ID of the customer class must be specified.
     * @tag Item
     * @param int $id 
     * @param int $customerClassId 
     */
    public function deleteItemsSalesPricesCustomerClassByIdCustomerClassId(int $id, int $customerClassId): void
    {
        $this->api("/rest/items/sales_prices/{$id}/customer_classes/{$customerClassId}", 'DELETE');
    }
                    
    /**
     * @description Lists the names of a sales price in all languages. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsSalesPricesNamesById(int $id): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/names");
    }
                
    /**
     * @description Creates a name for a sales price in the specified language. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *lang* - string
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#languages' target='_blank'>language code</a> of the sales price name
     *      - *nameInternal* - string
     *          - The internal name of the sales price. The internal name is used in the plentymarkets back end only.
     *      - *nameExternal* - string
     *          - The external name of the sales price. The external name is displayed in the online store and as such is visible for customers.
     *      - *createdAt* - string
     *          - The time the name was created.
     *      - *updatedAt* - string
     *          - The time the name was last updated.
     */
    public function createItemsSalesPricesNameById(int $id, array $data): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/names", 'POST', $data);
    }
                    
    /**
     * @description Deletes the name of a sales price in the specified language. The ID of the sales price and the language code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     */
    public function deleteItemsSalesPricesNameByIdLang(int $id, int $lang): void
    {
        $this->api("/rest/items/sales_prices/{$id}/names/{$lang}", 'DELETE');
    }
                
    /**
     * @description Gets the sales price name of a sales price in the specified langauge. The ID of the sales price and the language code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     * @return array
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *lang* - string
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#languages' target='_blank'>language code</a> of the sales price name
     *      - *nameInternal* - string
     *          - The internal name of the sales price. The internal name is used in the plentymarkets back end only.
     *      - *nameExternal* - string
     *          - The external name of the sales price. The external name is displayed in the online store and as such is visible for customers.
     *      - *createdAt* - string
     *          - The time the name was created.
     *      - *updatedAt* - string
     *          - The time the name was last updated.
     */
    public function getItemsSalesPricesNameByIdLang(int $id, int $lang): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/names/{$lang}");
    }
                
    /**
     * @description Updates a sales price name in the specified language. The ID of the sales price and the language code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     * @param array $data 
     * @return array
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *lang* - string
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#languages' target='_blank'>language code</a> of the sales price name
     *      - *nameInternal* - string
     *          - The internal name of the sales price. The internal name is used in the plentymarkets back end only.
     *      - *nameExternal* - string
     *          - The external name of the sales price. The external name is displayed in the online store and as such is visible for customers.
     *      - *createdAt* - string
     *          - The time the name was created.
     *      - *updatedAt* - string
     *          - The time the name was last updated.
     */
    public function updateItemsSalesPricesNameByIdLang(int $id, int $lang, array $data): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/names/{$lang}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all activated clients (stores) for a sales price. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsSalesPricesOnlineStoresById(int $id): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/online_stores");
    }
                
    /**
     * @description Activates a client (store) for a sales price. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *plentyId* - integer
     *          - The unique ID of the client (store)
     *      - *createdAt* - string
     *          - The time the client (store) was activated.
     *      - *updatedAt* - string
     *          - The time the relationship between the client (store) and the sales price was last updated.
     */
    public function createItemsSalesPricesOnlineStoreById(int $id, array $data): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/online_stores", 'POST', $data);
    }
                    
    /**
     * @description Deactivates a client (store) for a sales price. The ID of the sales price and the ID of the client (store) must be specified.
     * @tag Item
     * @param int $id 
     * @param int $webstoreId 
     */
    public function deleteItemsSalesPricesOnlineStoreByIdWebstoreId(int $id, int $webstoreId): void
    {
        $this->api("/rest/items/sales_prices/{$id}/online_stores/{$webstoreId}", 'DELETE');
    }
                    
    /**
     * @description Lists all activated referrers for a sales price. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsSalesPricesReferrersById(int $id): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/referrers");
    }
                
    /**
     * @description Activates a referrer for a sales price. The ID of the sales price must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *referrerId* - number
     *          - The unique ID of the referrer
     *      - *createdAt* - string
     *          - The time the referrer was activated.
     *      - *updatedAt* - string
     *          - The time the relationship between referrer and sales price was last updated.
     */
    public function createItemsSalesPricesReferrerById(int $id, array $data): array
    {
        return $this->api("/rest/items/sales_prices/{$id}/referrers", 'POST', $data);
    }
                    
    /**
     * @description Deactivates a referrer for a sales price. The ID of the sales price and the ID of the referrer must be specified.
     * @tag Item
     * @param int $id 
     * @param int $referrerId 
     */
    public function deleteItemsSalesPricesReferrerByIdReferrerId(int $id, int $referrerId): void
    {
        $this->api("/rest/items/sales_prices/{$id}/referrers/{$referrerId}", 'DELETE');
    }
                    
    /**
     * @description Lists all available units.
     * @tag Item
     * @param array $query
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to items updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Unit
     */
    public function getItemsUnits(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/units"], $query));
    }
                
    /**
     * @description Creates a new unit.
     * @tag Item
     * @param array $data 
     */
    public function createItemsUnit(array $data): void
    {
        $this->api("/rest/items/units", 'POST', $data);
    }
                    
    /**
     * @description Gets a list of unit measurement ISOs.
     * @tag Item
     * @param array $query
     *      - *language* - string - optional
     *          - Language is required to be used for extracting the translations from item/unit.
     * @return array
     */
    public function getItemsUnitsUnitsOfMeasurements(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/units/unitsOfMeasurements"], $query));
    }
                    
    /**
     * @description Deletes a unit. The ID of the unit must be specified.
     * @tag Item
     * @param int $id 
     */
    public function deleteItemsUnitById(int $id): void
    {
        $this->api("/rest/items/units/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a unit. The ID of the unit must be specified.
     * @tag Item
     * @param int $id 
     */
    public function getItemsUnitById(int $id): void
    {
        $this->api("/rest/items/units/{$id}");
    }
                
    /**
     * @description Updates a unit. The ID of the unit must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     */
    public function updateItemsUnitById(int $id, array $data): void
    {
        $this->api("/rest/items/units/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description Lists the unit names of a unit. The ID of the unit must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function getItemsUnitsNamesById(int $id): array
    {
        return $this->api("/rest/items/units/{$id}/names");
    }
                
    /**
     * @description Creates a unit name. The ID of the unit and the language must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *unitId* - integer
     *          - The unique ID of the unit
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#languages"  target="_blank">language</a> of the unit name
     *      - *name* - string
     *          - The name of the unit
     */
    public function createItemsUnitsNameById(int $id): array
    {
        return $this->api("/rest/items/units/{$id}/names", 'POST');
    }
                    
    /**
     * @description Deletes a unit name. The ID of the unit and the language must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     */
    public function deleteItemsUnitsNameByIdLang(int $id, int $lang): void
    {
        $this->api("/rest/items/units/{$id}/names/{$lang}", 'DELETE');
    }
                
    /**
     * @description Gets a unit name. The ID of the unit and the language must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     * @return array
     *      - *unitId* - integer
     *          - The unique ID of the unit
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#languages"  target="_blank">language</a> of the unit name
     *      - *name* - string
     *          - The name of the unit
     */
    public function getItemsUnitsNameByIdLang(int $id, int $lang): array
    {
        return $this->api("/rest/items/units/{$id}/names/{$lang}");
    }
                
    /**
     * @description Updates a unit name. The ID of the unit and the language must be specified.
     * @tag Item
     * @param int $id 
     * @param int $lang 
     * @return array
     *      - *unitId* - integer
     *          - The unique ID of the unit
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#languages"  target="_blank">language</a> of the unit name
     *      - *name* - string
     *          - The name of the unit
     */
    public function updateItemsUnitsNameByIdLang(int $id, int $lang): array
    {
        return $this->api("/rest/items/units/{$id}/names/{$lang}", 'PUT');
    }
                
    /**
     * @description Search variations by different filters
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation information in the results. The following parameters are available: <ul><li>properties</b> = The properties linked to the variation</li><li>variationProperties</b> = The properties linked to the variation</li><li>variationBarcodes</b> = The barcode linked to the variation and the saved code</li><li>variationBundleComponents</b> = The bundle components of the variation and their quantities</li><li>variationComponentBundles</b> = The bundles that this variation is a component of</li><li>variationSalesPrices</b> = The sales prices linked to the variation and the saved price</li><li>marketItemNumbers</b> = The market ident number of the variation</li><li>variationCategories</b> = The categories linked to the variation</li><li>variationClients</b> = The clients (stores) for which the variation is activated</li><li>variationMarkets</b> = The markets for which the variation is activated </li><li>variationDefaultCategory</b> = The default category of the variation</li><li>variationSuppliers</b> = The supplier data associated with the variation</li><li>variationWarehouses</b> = The warehouse data associated with the variation</li><li>images</b> = The images linked to the variation</li><li>itemImages</b> = The images linked to the item</li><li>variationAttributeValues</b> = The attribute values of the variation</li><li>variationSkus</b> = The SKU data associated with the variation</li><li>variationAdditionalSkus</b> = The additional SKU data associated with the variation</li><li>unit</b> = The unit assigned to the variation</li><li>parent</b> = The main variation of the variation. Value is null if this variation is the item's main variation.</li><li>item</b> = The item of the variation</li><li>stock</b> = The stock data of the variation</li></ul> For example, specifying the parameters variationCategories and variationDefaultCategory will include the default category and all other categories the variations are linked to. More than one parameter should be separated by commas.
     *      - *lang* - string - optional
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#countries' target='_blank'>language</a> of the variation information.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of variations to be listed per page must be specified. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to variations with the specified variation ID. An variation ID must be specified. More than one ID should be separated by commas.
     *      - *itemId* - int - optional
     *          - Filter restricts the list of results to variations with the specified item ID. An item ID must be specified. More than one ID should be separated by commas.
     *      - *variationTagId* - int - optional
     *          - Filter restricts the list of results to variations with the specified tag ID. An tag ID must be specified. More than one ID should be separated by commas.
     *      - *itemName* - string - optional
     *          - Filter restricts the list of results to variations with the specified item name. An item name must be specified.
     *      - *flagOne* - string - optional
     *          - Filter restricts the list of results to variations of items with the flag one. The flag one must be specified.
     *      - *flagTwo* - string - optional
     *          - Filter restricts the list of results to variations of items with the flag two. The flag two must be specified.
     *      - *storeSpecial* - int - optional
     *          - Filter restricts the list of results to variations of items with the specified store special. The following values are allowed: 0 (None), 1 (Special offer), 2 (New item), 3(Top item).
     *      - *categoryId* - int - optional
     *          - Filter restricts the list of results to variations with the specified category id
     *      - *isMain* - boolean - optional
     *          - Filter restricts the list of results to variations that are main variations.
     *      - *isActive* - boolean - optional
     *          - Filter restricts the list of results to variations that are active.
     *      - *barcode* - string - optional
     *          - Filter restricts the list of results to variations with the specified barcode. A barcode must be specified.
     *      - *numberExact* - string - optional
     *          - Filter restricts the list of results to the variation with the variation number specified.
     *      - *numberFuzzy* - string - optional
     *          - Filter restricts the list of results to variations with numbers that contain the variation number specified (SQL LIKE operator). For example, if variations with variation numbers 1 to 400 exist in the system, filtering by 12 will list variation numbers 12, 112, 120-129, 212 and 312.
     *      - *isBundle* - boolean - optional
     *          - Filter restricts the list of results to variations to which variations were added to create a bundle.
     *      - *plentyId* - int - optional
     *          - Filter restricts the list of results to variations that are visible in specified clients. Separate more than one client by commas.
     *      - *referrerId* - int - optional
     *          - Filter restricts the list of results to variations that are visible in specified markets. Separate more than one referrer by commas.
     *      - *supplierNumber* - string - optional
     *          - Filter restricts the list of results to variations with the specified supplier number. A supplier number must be specified.
     *      - *sku* - string - optional
     *          - Filter restricts the list of results to variations with the specified SKU. In additional, results can also be restricted to a specific referrer by specifying the referrer ID after a colon. Example: L0R3MIP5UM:104.1
     *      - *manufacturerId* - int - optional
     *          - Filter restricts the list of results to variations with the specified manufacturer ID.
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to variations updated during the specified period. The end date (to) is optional. If no end date is specified, variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?updatedBetween=1451606400,1456790400 will list variations updated between 2016-01-01 and 2016-03-01. .../variations?updatedBetween=1451606400 will list variations updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *createdBetween* - string - optional
     *          - Filter restricts the list of results to variations created during the specified period. The end date (to) is optional. If no end date is specified, variations created between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?createdBetween=1451606400,1456790400 will list variations created between 2016-01-01 and 2016-03-01. .../variations?createdBetween=1451606400 will list variations created since 2016-01-01. The PHP function strtotime is also supported.
     *      - *relatedUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to those variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
     *      - *itemDescription* - string - optional
     *          - Filter restricts the list of results to variations with descriptions that contain the specified string.
     *      - *stockWarehouseId* - string - optional
     *          - Filter restricts the list of results to variations which have physical stock on the given warehouse.
     *      - *supplierId* - int - optional
     *          - Filter restricts the list of results to variations with the specified supplier ID.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Variation
     */
    public function eachItemsVariations(array $query = []): Iterator
    {
        return $this->eachInternal('getItemsVariations', func_get_args());
    }
        
    /**
     * @description Search variations by different filters
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation information in the results. The following parameters are available: <ul><li>properties</b> = The properties linked to the variation</li><li>variationProperties</b> = The properties linked to the variation</li><li>variationBarcodes</b> = The barcode linked to the variation and the saved code</li><li>variationBundleComponents</b> = The bundle components of the variation and their quantities</li><li>variationComponentBundles</b> = The bundles that this variation is a component of</li><li>variationSalesPrices</b> = The sales prices linked to the variation and the saved price</li><li>marketItemNumbers</b> = The market ident number of the variation</li><li>variationCategories</b> = The categories linked to the variation</li><li>variationClients</b> = The clients (stores) for which the variation is activated</li><li>variationMarkets</b> = The markets for which the variation is activated </li><li>variationDefaultCategory</b> = The default category of the variation</li><li>variationSuppliers</b> = The supplier data associated with the variation</li><li>variationWarehouses</b> = The warehouse data associated with the variation</li><li>images</b> = The images linked to the variation</li><li>itemImages</b> = The images linked to the item</li><li>variationAttributeValues</b> = The attribute values of the variation</li><li>variationSkus</b> = The SKU data associated with the variation</li><li>variationAdditionalSkus</b> = The additional SKU data associated with the variation</li><li>unit</b> = The unit assigned to the variation</li><li>parent</b> = The main variation of the variation. Value is null if this variation is the item's main variation.</li><li>item</b> = The item of the variation</li><li>stock</b> = The stock data of the variation</li></ul> For example, specifying the parameters variationCategories and variationDefaultCategory will include the default category and all other categories the variations are linked to. More than one parameter should be separated by commas.
     *      - *lang* - string - optional
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#countries' target='_blank'>language</a> of the variation information.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of variations to be listed per page must be specified. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to variations with the specified variation ID. An variation ID must be specified. More than one ID should be separated by commas.
     *      - *itemId* - int - optional
     *          - Filter restricts the list of results to variations with the specified item ID. An item ID must be specified. More than one ID should be separated by commas.
     *      - *variationTagId* - int - optional
     *          - Filter restricts the list of results to variations with the specified tag ID. An tag ID must be specified. More than one ID should be separated by commas.
     *      - *itemName* - string - optional
     *          - Filter restricts the list of results to variations with the specified item name. An item name must be specified.
     *      - *flagOne* - string - optional
     *          - Filter restricts the list of results to variations of items with the flag one. The flag one must be specified.
     *      - *flagTwo* - string - optional
     *          - Filter restricts the list of results to variations of items with the flag two. The flag two must be specified.
     *      - *storeSpecial* - int - optional
     *          - Filter restricts the list of results to variations of items with the specified store special. The following values are allowed: 0 (None), 1 (Special offer), 2 (New item), 3(Top item).
     *      - *categoryId* - int - optional
     *          - Filter restricts the list of results to variations with the specified category id
     *      - *isMain* - boolean - optional
     *          - Filter restricts the list of results to variations that are main variations.
     *      - *isActive* - boolean - optional
     *          - Filter restricts the list of results to variations that are active.
     *      - *barcode* - string - optional
     *          - Filter restricts the list of results to variations with the specified barcode. A barcode must be specified.
     *      - *numberExact* - string - optional
     *          - Filter restricts the list of results to the variation with the variation number specified.
     *      - *numberFuzzy* - string - optional
     *          - Filter restricts the list of results to variations with numbers that contain the variation number specified (SQL LIKE operator). For example, if variations with variation numbers 1 to 400 exist in the system, filtering by 12 will list variation numbers 12, 112, 120-129, 212 and 312.
     *      - *isBundle* - boolean - optional
     *          - Filter restricts the list of results to variations to which variations were added to create a bundle.
     *      - *plentyId* - int - optional
     *          - Filter restricts the list of results to variations that are visible in specified clients. Separate more than one client by commas.
     *      - *referrerId* - int - optional
     *          - Filter restricts the list of results to variations that are visible in specified markets. Separate more than one referrer by commas.
     *      - *supplierNumber* - string - optional
     *          - Filter restricts the list of results to variations with the specified supplier number. A supplier number must be specified.
     *      - *sku* - string - optional
     *          - Filter restricts the list of results to variations with the specified SKU. In additional, results can also be restricted to a specific referrer by specifying the referrer ID after a colon. Example: L0R3MIP5UM:104.1
     *      - *manufacturerId* - int - optional
     *          - Filter restricts the list of results to variations with the specified manufacturer ID.
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to variations updated during the specified period. The end date (to) is optional. If no end date is specified, variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?updatedBetween=1451606400,1456790400 will list variations updated between 2016-01-01 and 2016-03-01. .../variations?updatedBetween=1451606400 will list variations updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *createdBetween* - string - optional
     *          - Filter restricts the list of results to variations created during the specified period. The end date (to) is optional. If no end date is specified, variations created between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?createdBetween=1451606400,1456790400 will list variations created between 2016-01-01 and 2016-03-01. .../variations?createdBetween=1451606400 will list variations created since 2016-01-01. The PHP function strtotime is also supported.
     *      - *relatedUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to those variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
     *      - *itemDescription* - string - optional
     *          - Filter restricts the list of results to variations with descriptions that contain the specified string.
     *      - *stockWarehouseId* - string - optional
     *          - Filter restricts the list of results to variations which have physical stock on the given warehouse.
     *      - *supplierId* - int - optional
     *          - Filter restricts the list of results to variations with the specified supplier ID.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Variation
     */
    public function batchItemsVariations(array $query = []): Iterator
    {
        return $this->batchInternal('getItemsVariations', func_get_args());
    }
    
    /**
     * @description Search variations by different filters
     * @tag Item
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation information in the results. The following parameters are available: <ul><li>properties</b> = The properties linked to the variation</li><li>variationProperties</b> = The properties linked to the variation</li><li>variationBarcodes</b> = The barcode linked to the variation and the saved code</li><li>variationBundleComponents</b> = The bundle components of the variation and their quantities</li><li>variationComponentBundles</b> = The bundles that this variation is a component of</li><li>variationSalesPrices</b> = The sales prices linked to the variation and the saved price</li><li>marketItemNumbers</b> = The market ident number of the variation</li><li>variationCategories</b> = The categories linked to the variation</li><li>variationClients</b> = The clients (stores) for which the variation is activated</li><li>variationMarkets</b> = The markets for which the variation is activated </li><li>variationDefaultCategory</b> = The default category of the variation</li><li>variationSuppliers</b> = The supplier data associated with the variation</li><li>variationWarehouses</b> = The warehouse data associated with the variation</li><li>images</b> = The images linked to the variation</li><li>itemImages</b> = The images linked to the item</li><li>variationAttributeValues</b> = The attribute values of the variation</li><li>variationSkus</b> = The SKU data associated with the variation</li><li>variationAdditionalSkus</b> = The additional SKU data associated with the variation</li><li>unit</b> = The unit assigned to the variation</li><li>parent</b> = The main variation of the variation. Value is null if this variation is the item's main variation.</li><li>item</b> = The item of the variation</li><li>stock</b> = The stock data of the variation</li></ul> For example, specifying the parameters variationCategories and variationDefaultCategory will include the default category and all other categories the variations are linked to. More than one parameter should be separated by commas.
     *      - *lang* - string - optional
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#countries' target='_blank'>language</a> of the variation information.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of variations to be listed per page must be specified. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to variations with the specified variation ID. An variation ID must be specified. More than one ID should be separated by commas.
     *      - *itemId* - int - optional
     *          - Filter restricts the list of results to variations with the specified item ID. An item ID must be specified. More than one ID should be separated by commas.
     *      - *variationTagId* - int - optional
     *          - Filter restricts the list of results to variations with the specified tag ID. An tag ID must be specified. More than one ID should be separated by commas.
     *      - *itemName* - string - optional
     *          - Filter restricts the list of results to variations with the specified item name. An item name must be specified.
     *      - *flagOne* - string - optional
     *          - Filter restricts the list of results to variations of items with the flag one. The flag one must be specified.
     *      - *flagTwo* - string - optional
     *          - Filter restricts the list of results to variations of items with the flag two. The flag two must be specified.
     *      - *storeSpecial* - int - optional
     *          - Filter restricts the list of results to variations of items with the specified store special. The following values are allowed: 0 (None), 1 (Special offer), 2 (New item), 3(Top item).
     *      - *categoryId* - int - optional
     *          - Filter restricts the list of results to variations with the specified category id
     *      - *isMain* - boolean - optional
     *          - Filter restricts the list of results to variations that are main variations.
     *      - *isActive* - boolean - optional
     *          - Filter restricts the list of results to variations that are active.
     *      - *barcode* - string - optional
     *          - Filter restricts the list of results to variations with the specified barcode. A barcode must be specified.
     *      - *numberExact* - string - optional
     *          - Filter restricts the list of results to the variation with the variation number specified.
     *      - *numberFuzzy* - string - optional
     *          - Filter restricts the list of results to variations with numbers that contain the variation number specified (SQL LIKE operator). For example, if variations with variation numbers 1 to 400 exist in the system, filtering by 12 will list variation numbers 12, 112, 120-129, 212 and 312.
     *      - *isBundle* - boolean - optional
     *          - Filter restricts the list of results to variations to which variations were added to create a bundle.
     *      - *plentyId* - int - optional
     *          - Filter restricts the list of results to variations that are visible in specified clients. Separate more than one client by commas.
     *      - *referrerId* - int - optional
     *          - Filter restricts the list of results to variations that are visible in specified markets. Separate more than one referrer by commas.
     *      - *supplierNumber* - string - optional
     *          - Filter restricts the list of results to variations with the specified supplier number. A supplier number must be specified.
     *      - *sku* - string - optional
     *          - Filter restricts the list of results to variations with the specified SKU. In additional, results can also be restricted to a specific referrer by specifying the referrer ID after a colon. Example: L0R3MIP5UM:104.1
     *      - *manufacturerId* - int - optional
     *          - Filter restricts the list of results to variations with the specified manufacturer ID.
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to variations updated during the specified period. The end date (to) is optional. If no end date is specified, variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?updatedBetween=1451606400,1456790400 will list variations updated between 2016-01-01 and 2016-03-01. .../variations?updatedBetween=1451606400 will list variations updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *createdBetween* - string - optional
     *          - Filter restricts the list of results to variations created during the specified period. The end date (to) is optional. If no end date is specified, variations created between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?createdBetween=1451606400,1456790400 will list variations created between 2016-01-01 and 2016-03-01. .../variations?createdBetween=1451606400 will list variations created since 2016-01-01. The PHP function strtotime is also supported.
     *      - *relatedUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to those variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
     *      - *itemDescription* - string - optional
     *          - Filter restricts the list of results to variations with descriptions that contain the specified string.
     *      - *stockWarehouseId* - string - optional
     *          - Filter restricts the list of results to variations which have physical stock on the given warehouse.
     *      - *supplierId* - int - optional
     *          - Filter restricts the list of results to variations with the specified supplier ID.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Variation
     */
    public function getItemsVariations(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/variations"], $query));
    }
                
    /**
     * @description Updates up to 50 variations. The ID of the variation must be specified.
     * @tag Item
     * @param array $data 
     */
    public function updateItemsVariation(array $data): void
    {
        $this->api("/rest/items/variations", 'PUT', $data);
    }
                    
    /**
     * @description Creates up to 50 links between variations and categories. The ID of the variations and the ID of the categories must be specified.
     * @tag Item
     * @param array $data 
     */
    public function createItemsVariationsVariationCategory(array $data): void
    {
        $this->api("/rest/items/variations/variation_categories", 'POST', $data);
    }
                
    /**
     * @description Updates up to 50 links between variations and categories. The ID of the variations and the ID of the categories must be specified.
     * @tag Item
     * @param array $data 
     */
    public function updateItemsVariationsVariationCategory(array $data): void
    {
        $this->api("/rest/items/variations/variation_categories", 'PUT', $data);
    }
                    
    /**
     * @description Lists all links between variations and markets.
Results can be filtered by the ID of the variation and by the ID of the market, e.g. "variationId=1030"
lists all links of the variation with the ID 1030.
     * @tag Item
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of VariationMarket
     */
    public function getItemsVariationsVariationMarkets(): array
    {
        return $this->api("/rest/items/variations/variation_markets");
    }
                
    /**
     * @description Creates up to 50 links between variations and markets. The ID of the variation and the ID of the market must be specified.
     * @tag Item
     * @param array $data 
     */
    public function createItemsVariationsVariationMarket(array $data): void
    {
        $this->api("/rest/items/variations/variation_markets", 'POST', $data);
    }
                    
    /**
     * @description Creates up to 50 properties of variations.
     * @tag Item
     * @param array $data 
     */
    public function createItemsVariationsVariationProperty(array $data): void
    {
        $this->api("/rest/items/variations/variation_properties", 'POST', $data);
    }
                
    /**
     * @description Updates up to 50 properties of variations.
     * @tag Item
     * @param array $data 
     */
    public function updateItemsVariationsVariationProperty(array $data): void
    {
        $this->api("/rest/items/variations/variation_properties", 'PUT', $data);
    }
                    
    /**
     * @description Gets all links between variations and sales prices including sales price data.
     * @tag Item
     * @param array $query
     *      - *variationId* - int - optional
     *          - Filter that restricts the search result to the sales price data of a specific variation.
     *      - *salesPriceId* - int - optional
     *          - Filter that restricts the search result to the sales price data of variations linked to a specific sales price.
     *      - *updatedAt* - string - optional
     *          - Filter that restricts the search result to links between variations and sales prices updated after a specific point in time.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getItemsVariationsVariationSalesPrices(array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/variations/variation_sales_prices"], $query));
    }
                
    /**
     * @description Creates up to 50 prices of variations. The ID of the variation, the ID of the sales price and a price must be specified.
     * @tag Item
     * @param array $data 
     */
    public function createItemsVariationsVariationSalesPrice(array $data): void
    {
        $this->api("/rest/items/variations/variation_sales_prices", 'POST', $data);
    }
                
    /**
     * @description Updates up to 50 prices of variations. The ID of the variation, the ID of the sales price and a price must be specified.
     * @tag Item
     * @param array $data 
     */
    public function updateItemsVariationsVariationSalesPrice(array $data): void
    {
        $this->api("/rest/items/variations/variation_sales_prices", 'PUT', $data);
    }
                    
    /**
     * @description Lists all images of an item. The item ID must be specified.
     * @tag Item
     * @param int $id 
     * @param array $query
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to items updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     * @return array
     */
    public function getItemsImagesById(int $id, array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/images"], $query));
    }
                    
    /**
     * @description Lists the images linked to an attribute value.
     * @tag Item
     * @param int $id 
     * @param array $query
     *      - *imageId* - int - optional
     *          - The unique ID of the image
     *      - *itemId* - int - optional
     *          - The unique ID of the item
     *      - *valueId* - int - optional
     *          - The unique ID of the attribute value
     *      - *attributeId* - int - optional
     *          - The unique ID of the attribute
     */
    public function getItemsImagesAttributeValueMarketsById(int $id, array $query = []): void
    {
        $this->api(array_merge(["/rest/items/{$id}/images/attribute_value_markets"], $query));
    }
                    
    /**
     * @description Uploads an image. The item ID must be specified.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the image
     *      - *itemId* - integer
     *          - The unique ID of the item the image is associated with
     *      - *fileType* - string
     *          - The file format of the image. Possible file formats: jpg, jpeg, png, gif, svg
     *      - *path* - string
     *          - The path under which the image is saved.
     *      - *position* - integer
     *          - The position of the image. The position is used for sorting images in the online store.
     *      - *createdAt* - string
     *          - The time the image was uploaded.
     *      - *updatedAt* - string
     *          - The time the image details were last updated.
     *      - *md5Checksum* - string
     *          - The MD5 hash value of the image file
     *      - *md5ChecksumOriginal* - string
     *          - The MD5 hash value of the original image file
     *      - *hasLinkedVariations* - integer
     *          - Indicates if the item is linked with variations. Returns 1 if at least one variation is linked with the image, otherwise 0.
     *      - *size* - integer
     *          - The size of the image in pixels
     *      - *width* - integer
     *          - The width of the image in pixels
     *      - *height* - integer
     *          - The height of the image in pixels
     *      - *url* - string
     *          - The URL under which the image can be accessed after the upload.
     *      - *urlMiddle* - string
     *          - The URL that points to the  medium-sized version of the item image.
     *      - *urlPreview* - string
     *          - The URL that points to the  first preview version of the item image.
     *      - *urlSecondPreview* - string
     *          - The URL that points to the second preview version of the item image.
     */
    public function createItemsImagesUploadById(int $id, array $data): array
    {
        return $this->api("/rest/items/{$id}/images/upload", 'POST', $data);
    }
                    
    /**
     * @description Delete an image. The ID of the image must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     */
    public function deleteItemsImageByIdImageId(int $id, int $imageId): void
    {
        $this->api("/rest/items/{$id}/images/{$imageId}", 'DELETE');
    }
                
    /**
     * @description Gets an image. The ID of the image must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the image
     *      - *itemId* - integer
     *          - The unique ID of the item the image is associated with
     *      - *fileType* - string
     *          - The file format of the image. Possible file formats: jpg, jpeg, png, gif, svg
     *      - *path* - string
     *          - The path under which the image is saved.
     *      - *position* - integer
     *          - The position of the image. The position is used for sorting images in the online store.
     *      - *createdAt* - string
     *          - The time the image was uploaded.
     *      - *updatedAt* - string
     *          - The time the image details were last updated.
     *      - *md5Checksum* - string
     *          - The MD5 hash value of the image file
     *      - *md5ChecksumOriginal* - string
     *          - The MD5 hash value of the original image file
     *      - *hasLinkedVariations* - integer
     *          - Indicates if the item is linked with variations. Returns 1 if at least one variation is linked with the image, otherwise 0.
     *      - *size* - integer
     *          - The size of the image in pixels
     *      - *width* - integer
     *          - The width of the image in pixels
     *      - *height* - integer
     *          - The height of the image in pixels
     *      - *url* - string
     *          - The URL under which the image can be accessed after the upload.
     *      - *urlMiddle* - string
     *          - The URL that points to the  medium-sized version of the item image.
     *      - *urlPreview* - string
     *          - The URL that points to the  first preview version of the item image.
     *      - *urlSecondPreview* - string
     *          - The URL that points to the second preview version of the item image.
     */
    public function getItemsImageByIdImageId(int $id, int $imageId): array
    {
        return $this->api("/rest/items/{$id}/images/{$imageId}");
    }
                
    /**
     * @description Updates an image. The ID of the image must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the image
     *      - *itemId* - integer
     *          - The unique ID of the item the image is associated with
     *      - *fileType* - string
     *          - The file format of the image. Possible file formats: jpg, jpeg, png, gif, svg
     *      - *path* - string
     *          - The path under which the image is saved.
     *      - *position* - integer
     *          - The position of the image. The position is used for sorting images in the online store.
     *      - *createdAt* - string
     *          - The time the image was uploaded.
     *      - *updatedAt* - string
     *          - The time the image details were last updated.
     *      - *md5Checksum* - string
     *          - The MD5 hash value of the image file
     *      - *md5ChecksumOriginal* - string
     *          - The MD5 hash value of the original image file
     *      - *hasLinkedVariations* - integer
     *          - Indicates if the item is linked with variations. Returns 1 if at least one variation is linked with the image, otherwise 0.
     *      - *size* - integer
     *          - The size of the image in pixels
     *      - *width* - integer
     *          - The width of the image in pixels
     *      - *height* - integer
     *          - The height of the image in pixels
     *      - *url* - string
     *          - The URL under which the image can be accessed after the upload.
     *      - *urlMiddle* - string
     *          - The URL that points to the  medium-sized version of the item image.
     *      - *urlPreview* - string
     *          - The URL that points to the  first preview version of the item image.
     *      - *urlSecondPreview* - string
     *          - The URL that points to the second preview version of the item image.
     */
    public function updateItemsImageByIdImageId(int $id, int $imageId, array $data): array
    {
        return $this->api("/rest/items/{$id}/images/{$imageId}", 'PUT', $data);
    }
                    
    /**
     * @description Creates a link between an image and an attribute value.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @param array $data 
     * @return array
     *      - *imageId* - integer
     *          - The unique ID of the image
     *      - *itemId* - integer
     *          - The unique ID of the item
     *      - *attributeId* - integer
     *          - The unique ID of the attribute
     *      - *valueId* - integer
     *          - The unique ID of the attribute value
     */
    public function createItemsImagesAttributeValueMarketByIdImageId(int $id, int $imageId, array $data): array
    {
        return $this->api("/rest/items/{$id}/images/{$imageId}/attribute_value_markets", 'POST', $data);
    }
                    
    /**
     * @description Deletes the link between an image and an attribute value. The attribute ID must be specified.
     * @tag Item
     * @param int $imageId The unique ID of the image
     * @param int $valueId The unique ID of the attribute value
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The unique ID of the item
     */
    public function deleteItemsImagesAttributeValueMarketByImageIdValueIdId(int $imageId, int $valueId, int $id, array $query): void
    {
        $this->api(array_merge(["/rest/items/{$id}/images/{$imageId}/attribute_value_markets/{$valueId}"], $query), 'DELETE');
    }
                
    /**
     * @description Gets an attribute value image link. The following IDs must be specified: image ID, item ID and value ID.
     * @tag Item
     * @param int $imageId The unique ID of the image
     * @param int $valueId The unique ID of the value
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The unique ID of the item
     * @return array
     *      - *imageId* - integer
     *          - The unique ID of the image
     *      - *itemId* - integer
     *          - The unique ID of the item
     *      - *attributeId* - integer
     *          - The unique ID of the attribute
     *      - *valueId* - integer
     *          - The unique ID of the attribute value
     */
    public function getItemsImagesAttributeValueMarketByImageIdValueIdId(int $imageId, int $valueId, int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/images/{$imageId}/attribute_value_markets/{$valueId}"], $query));
    }
                
    /**
     * @description Updates the link between an image and an attribute value. The following IDs must be specified: image ID, item ID and value ID.
     * @tag Item
     * @param int $imageId The unique ID of the image
     * @param int $valueId The unique ID of the attribute value
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The unique ID of the item
     *      - *attributeId* - int - required
     *          - The unique ID of the attribute
     * @param array $data 
     * @return array
     *      - *imageId* - integer
     *          - The unique ID of the image
     *      - *itemId* - integer
     *          - The unique ID of the item
     *      - *attributeId* - integer
     *          - The unique ID of the attribute
     *      - *valueId* - integer
     *          - The unique ID of the attribute value
     */
    public function updateItemsImagesAttributeValueMarketByImageIdValueIdId(int $imageId, int $valueId, int $id, array $query, array $data): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/images/{$imageId}/attribute_value_markets/{$valueId}"], $query), 'PUT', $data);
    }
                    
    /**
     * @description Delete an availability for a specified value.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @param array $data 
     */
    public function deleteItemsImagesAvailabilityByIdImageId(int $id, int $imageId, array $data): void
    {
        $this->api("/rest/items/{$id}/images/{$imageId}/availabilities", 'DELETE', $data);
    }
                
    /**
     * @description List all availabilities of an image. The image ID must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @return array
     *      - *imageId* - integer
     *          - The ID of the image. The ID must be unique.
     *      - *type* - string
     *          - The type of referrer for which the image is available. Possible types: <ul><li>mandant = The image can be made available for clients (stores).</li><li>marketplace = The image can be made available for markets.</li><li>listing = The image can be made available for listings.</li></ul>
     *      - *value* - number
     *          - For the type <b>mandant</b>, this is the plentyID of the client (store) for which the image is available. For the types <b>marketplace</b> and <b>listing</b>, this is the ID of the referrer for which the image is available. <ul><li><strong>-1.00</strong> = The image is available for all referrers of this type.</li></ul>
     */
    public function getItemsImagesAvailabilitiesByIdImageId(int $id, int $imageId): array
    {
        return $this->api("/rest/items/{$id}/images/{$imageId}/availabilities");
    }
                
    /**
     * @description Create an availability. The image ID must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @param array $data 
     * @return array
     *      - *imageId* - integer
     *          - The ID of the image. The ID must be unique.
     *      - *type* - string
     *          - The type of referrer for which the image is available. Possible types: <ul><li>mandant = The image can be made available for clients (stores).</li><li>marketplace = The image can be made available for markets.</li><li>listing = The image can be made available for listings.</li></ul>
     *      - *value* - number
     *          - For the type <b>mandant</b>, this is the plentyID of the client (store) for which the image is available. For the types <b>marketplace</b> and <b>listing</b>, this is the ID of the referrer for which the image is available. <ul><li><strong>-1.00</strong> = The image is available for all referrers of this type.</li></ul>
     */
    public function createItemsImagesAvailabilityByIdImageId(int $id, int $imageId, array $data): array
    {
        return $this->api("/rest/items/{$id}/images/{$imageId}/availabilities", 'POST', $data);
    }
                    
    /**
     * @description Lists all names of an image. The image ID must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @return array
     */
    public function getItemsImagesNamesByIdImageId(int $id, int $imageId): array
    {
        return $this->api("/rest/items/{$id}/images/{$imageId}/names");
    }
                
    /**
     * @description Create an image name. The ID, language and name of the image must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @param array $data 
     * @return array
     *      - *imageId* - integer
     *          - The ID of the image. The ID must be unique.
     *      - *lang* - string
     *          - The language of the image name
     *      - *name* - string
     *          - The name of the image in the specified language
     *      - *alternate* - string
     *          - The alternative name of the image in the specified language
     */
    public function createItemsImagesNameByIdImageId(int $id, int $imageId, array $data): array
    {
        return $this->api("/rest/items/{$id}/images/{$imageId}/names", 'POST', $data);
    }
                    
    /**
     * @description Delete an image name. The ID and language of the image must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @param int $lang 
     */
    public function deleteItemsImagesNameByIdImageIdLang(int $id, int $imageId, int $lang): void
    {
        $this->api("/rest/items/{$id}/images/{$imageId}/names/{$lang}", 'DELETE');
    }
                
    /**
     * @description Gets an image name. The image ID and language must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @param int $lang 
     * @return array
     *      - *imageId* - integer
     *          - The ID of the image. The ID must be unique.
     *      - *lang* - string
     *          - The language of the image name
     *      - *name* - string
     *          - The name of the image in the specified language
     *      - *alternate* - string
     *          - The alternative name of the image in the specified language
     */
    public function getItemsImagesNameByIdImageIdLang(int $id, int $imageId, int $lang): array
    {
        return $this->api("/rest/items/{$id}/images/{$imageId}/names/{$lang}");
    }
                
    /**
     * @description Update an image name. The ID, language and name of the image must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @param int $lang 
     * @param array $data 
     * @return array
     *      - *imageId* - integer
     *          - The ID of the image. The ID must be unique.
     *      - *lang* - string
     *          - The language of the image name
     *      - *name* - string
     *          - The name of the image in the specified language
     *      - *alternate* - string
     *          - The alternative name of the image in the specified language
     */
    public function updateItemsImagesNameByIdImageIdLang(int $id, int $imageId, int $lang, array $data): array
    {
        return $this->api("/rest/items/{$id}/images/{$imageId}/names/{$lang}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all variations linked to an image. The image ID must be specified.
     * @tag Item
     * @param int $id 
     * @param int $imageId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between a variation and an image
     *      - *itemId* - integer
     *          - The unique ID of the item
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *imageId* - integer
     *          - The unique ID of the image
     *      - *createdAt* - string
     *          - The time the image was linked to the variation.
     *      - *updatedAt* - string
     *          - The time the link between an image and a variation was last updated.
     */
    public function getItemsImagesVariationImagesByIdImageId(int $id, int $imageId): array
    {
        return $this->api("/rest/items/{$id}/images/{$imageId}/variation_images");
    }
                    
    /**
     * @description Lists all cross-selling items linked to an item. The ID of the item must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *itemId* - integer
     *          - The unique ID of the item to which cross-selling items are linked
     *      - *crossItemId* - integer
     *          - The unique ID of the cross-selling item that is linked to the item
     *      - *relationship* - string
     *          - The cross-selling relationship between item and cross-selling item. Possible values:<ul><li>Accessory = The cross-selling item is an accessory of the item.</li><li>ReplacementPart = The cross-selling item is a replacement part for the item.</li><li>Similar = The cross-selling item is similar to the item.</li><li>Bundle = The cross-selling item is suitable to be sold as a bundle with the item.</li></ul>
     *      - *isDynamic* - boolean
     *          - Flag that indicates if the cross-selling link was generated automatically.
     */
    public function getItemsItemCrossSellingById(int $id): array
    {
        return $this->api("/rest/items/{$id}/item_cross_selling");
    }
                
    /**
     * @description Creates a cross-selling link.
     * @tag Item
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *itemId* - integer
     *          - The unique ID of the item to which cross-selling items are linked
     *      - *crossItemId* - integer
     *          - The unique ID of the cross-selling item that is linked to the item
     *      - *relationship* - string
     *          - The cross-selling relationship between item and cross-selling item. Possible values:<ul><li>Accessory = The cross-selling item is an accessory of the item.</li><li>ReplacementPart = The cross-selling item is a replacement part for the item.</li><li>Similar = The cross-selling item is similar to the item.</li><li>Bundle = The cross-selling item is suitable to be sold as a bundle with the item.</li></ul>
     *      - *isDynamic* - boolean
     *          - Flag that indicates if the cross-selling link was generated automatically.
     */
    public function createItemsItemCrossSellingById(int $id, array $data): array
    {
        return $this->api("/rest/items/{$id}/item_cross_selling", 'POST', $data);
    }
                    
    /**
     * @description Deletes a cross-selling link. The ID of the item and the ID of the cross-selling item must be specified.
     * @tag Item
     * @param int $id 
     * @param int $crossItemId 
     */
    public function deleteItemsItemCrossSellingByIdCrossItemId(int $id, int $crossItemId): void
    {
        $this->api("/rest/items/{$id}/item_cross_selling/{$crossItemId}", 'DELETE');
    }
                
    /**
     * @description Updates a cross-selling link. The ID of the item and the ID of the cross-selling item must be specified.
     * @tag Item
     * @param int $id 
     * @param int $crossItemId 
     * @return array
     *      - *itemId* - integer
     *          - The unique ID of the item to which cross-selling items are linked
     *      - *crossItemId* - integer
     *          - The unique ID of the cross-selling item that is linked to the item
     *      - *relationship* - string
     *          - The cross-selling relationship between item and cross-selling item. Possible values:<ul><li>Accessory = The cross-selling item is an accessory of the item.</li><li>ReplacementPart = The cross-selling item is a replacement part for the item.</li><li>Similar = The cross-selling item is similar to the item.</li><li>Bundle = The cross-selling item is suitable to be sold as a bundle with the item.</li></ul>
     *      - *isDynamic* - boolean
     *          - Flag that indicates if the cross-selling link was generated automatically.
     */
    public function updateItemsItemCrossSellingByIdCrossItemId(int $id, int $crossItemId): array
    {
        return $this->api("/rest/items/{$id}/item_cross_selling/{$crossItemId}", 'PUT');
    }
                    
    /**
     * @description Gets a base64 encoded label for the specified item ID. The labelId of the label template must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     */
    public function createItemsLabelById(int $id): array
    {
        return $this->api("/rest/items/{$id}/labels", 'POST');
    }
                    
    /**
     * @description Lists all images linked to an item. The item ID must be specified.
     * @tag Item
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between a variation and an image
     *      - *itemId* - integer
     *          - The unique ID of the item
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *imageId* - integer
     *          - The unique ID of the image
     *      - *createdAt* - string
     *          - The time the image was linked to the variation.
     *      - *updatedAt* - string
     *          - The time the link between an image and a variation was last updated.
     */
    public function getItemsVariationImagesById(int $id): array
    {
        return $this->api("/rest/items/{$id}/variation_images");
    }
                    
    /**
     * @description Lists the texts for an item in all available languages. The ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsDescriptionsByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/descriptions");
    }
                
    /**
     * @description Creates texts for an item. The ID of the variation and the language code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the description
     *      - *itemId* - integer
     *          - The unique ID of the item that this description belongs to
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language code</a> of the description
     *      - *name* - string
     *          - The default name of the item. By default, this name is displayed in the online store. For Default items, this name is also used for markets. Character limit: max. 240 characters.
     *      - *name2* - string
     *          - Alternative item name that can be used e.g. for markets. Character limit: max. 240 characters.
     *      - *name3* - string
     *          - Alternative item name that can be used e.g. for markets. Character limit: max. 240 characters.
     *      - *previewDescription* - string
     *          - The preview text. The preview text is a short description that can be displayed in item lists.
     *      - *metaDescription* - string
     *          - The meta description of the item. This description is analysed by search engines and displayed in search results. This text should be treated as an advertising text to maximise click-through from search engine result pages. Current recommended limit is 156 characters.
     *      - *description* - string
     *          - The item description. This is a detailed description displayed in the item layout of the online store.
     *      - *technicalData* - string
     *          - The technical data for the item. To display the technical data in the online store, insert the template variable TechnicalData and an optional title into the template ItemViewSingleItem.
     *      - *urlPath* - string
     *          - The URL path of the item in the online store. By default, the URL path consists of the categories and the item name. The path will be assigned automatically by plentymarkets when the item is created and will be displayed as part of the URL when the item is selected in the online store.
     *      - *metaKeywords* - string
     *          - Meta keywords to tag the item for search engines. More than one keyword can be separated by commas.
     */
    public function createItemsVariationsDescriptionByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/descriptions", 'POST', $data);
    }
                    
    /**
     * @description Deletes texts for an item in the specified language. The ID of the variation and the language code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $lang 
     */
    public function deleteItemsVariationsDescriptionByIdVariationIdLang(int $id, int $variationId, int $lang): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/descriptions/{$lang}", 'DELETE');
    }
                
    /**
     * @description Gets the texts for an item in the specified language. The ID of the variation and the language code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $lang 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the description
     *      - *itemId* - integer
     *          - The unique ID of the item that this description belongs to
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language code</a> of the description
     *      - *name* - string
     *          - The default name of the item. By default, this name is displayed in the online store. For Default items, this name is also used for markets. Character limit: max. 240 characters.
     *      - *name2* - string
     *          - Alternative item name that can be used e.g. for markets. Character limit: max. 240 characters.
     *      - *name3* - string
     *          - Alternative item name that can be used e.g. for markets. Character limit: max. 240 characters.
     *      - *previewDescription* - string
     *          - The preview text. The preview text is a short description that can be displayed in item lists.
     *      - *metaDescription* - string
     *          - The meta description of the item. This description is analysed by search engines and displayed in search results. This text should be treated as an advertising text to maximise click-through from search engine result pages. Current recommended limit is 156 characters.
     *      - *description* - string
     *          - The item description. This is a detailed description displayed in the item layout of the online store.
     *      - *technicalData* - string
     *          - The technical data for the item. To display the technical data in the online store, insert the template variable TechnicalData and an optional title into the template ItemViewSingleItem.
     *      - *urlPath* - string
     *          - The URL path of the item in the online store. By default, the URL path consists of the categories and the item name. The path will be assigned automatically by plentymarkets when the item is created and will be displayed as part of the URL when the item is selected in the online store.
     *      - *metaKeywords* - string
     *          - Meta keywords to tag the item for search engines. More than one keyword can be separated by commas.
     */
    public function getItemsVariationsDescriptionByIdVariationIdLang(int $id, int $variationId, int $lang): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/descriptions/{$lang}");
    }
                
    /**
     * @description Updates texts for an item in the specified language. The ID of the variation and the language code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $lang 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the description
     *      - *itemId* - integer
     *          - The unique ID of the item that this description belongs to
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#countries" target="_blank">language code</a> of the description
     *      - *name* - string
     *          - The default name of the item. By default, this name is displayed in the online store. For Default items, this name is also used for markets. Character limit: max. 240 characters.
     *      - *name2* - string
     *          - Alternative item name that can be used e.g. for markets. Character limit: max. 240 characters.
     *      - *name3* - string
     *          - Alternative item name that can be used e.g. for markets. Character limit: max. 240 characters.
     *      - *previewDescription* - string
     *          - The preview text. The preview text is a short description that can be displayed in item lists.
     *      - *metaDescription* - string
     *          - The meta description of the item. This description is analysed by search engines and displayed in search results. This text should be treated as an advertising text to maximise click-through from search engine result pages. Current recommended limit is 156 characters.
     *      - *description* - string
     *          - The item description. This is a detailed description displayed in the item layout of the online store.
     *      - *technicalData* - string
     *          - The technical data for the item. To display the technical data in the online store, insert the template variable TechnicalData and an optional title into the template ItemViewSingleItem.
     *      - *urlPath* - string
     *          - The URL path of the item in the online store. By default, the URL path consists of the categories and the item name. The path will be assigned automatically by plentymarkets when the item is created and will be displayed as part of the URL when the item is selected in the online store.
     *      - *metaKeywords* - string
     *          - Meta keywords to tag the item for search engines. More than one keyword can be separated by commas.
     */
    public function updateItemsVariationsDescriptionByIdVariationIdLang(int $id, int $variationId, int $lang, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/descriptions/{$lang}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all images of a variation. The variation ID must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsImagesByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/images");
    }
                    
    /**
     * @description Gets a base64 encoded label for the specified variation ID. The labelId of the label template must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function createItemsVariationsLabelByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/labels", 'POST');
    }
                    
    /**
     * @description Lists the ident number (ASIN/ePID) of a variation. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsMarketIdentNumbersByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/market_ident_numbers");
    }
                
    /**
     * @description Creates a market ident number (ASIN/ePID) for a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the market ident number (ASIN/ePID) of a variation
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *countryId* - integer
     *          - The country code of the market ident number (ASIN/ePID)
     *      - *type* - string
     *          - The type of market ident number (ASIN/ePID)
     *      - *position* - integer
     *          - The position of the market ident number  (ASIN/ePID)
     *      - *value* - string
     *          - The value of the market ident number (ASIN/ePID)
     */
    public function createItemsVariationsMarketIdentNumberByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/market_ident_numbers", 'POST', $data);
    }
                    
    /**
     * @description Deletes a market ident number (ASIN/ePID) of a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $marketIdentNumberId 
     */
    public function deleteItemsVariationsMarketIdentNumberByIdVariationIdMarketIdentNumberId(int $id, int $variationId, int $marketIdentNumberId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/market_ident_numbers/{$marketIdentNumberId}", 'DELETE');
    }
                
    /**
     * @description Gets a market ident number (ASIN/ePID) of a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $marketIdentNumberId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the market ident number (ASIN/ePID) of a variation
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *countryId* - integer
     *          - The country code of the market ident number (ASIN/ePID)
     *      - *type* - string
     *          - The type of market ident number (ASIN/ePID)
     *      - *position* - integer
     *          - The position of the market ident number  (ASIN/ePID)
     *      - *value* - string
     *          - The value of the market ident number (ASIN/ePID)
     */
    public function getItemsVariationsMarketIdentNumberByIdVariationIdMarketIdentNumberId(int $id, int $variationId, int $marketIdentNumberId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/market_ident_numbers/{$marketIdentNumberId}");
    }
                
    /**
     * @description Updates a market ident number (ASIN/ePID) of a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $marketIdentNumberId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the market ident number (ASIN/ePID) of a variation
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *countryId* - integer
     *          - The country code of the market ident number (ASIN/ePID)
     *      - *type* - string
     *          - The type of market ident number (ASIN/ePID)
     *      - *position* - integer
     *          - The position of the market ident number  (ASIN/ePID)
     *      - *value* - string
     *          - The value of the market ident number (ASIN/ePID)
     */
    public function updateItemsVariationsMarketIdentNumberByIdVariationIdMarketIdentNumberId(int $id, int $variationId, int $marketIdentNumberId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/market_ident_numbers/{$marketIdentNumberId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists stock of a variation per warehouse. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     *      - *columns* - array - optional
     *          - The properties to be loaded
     * @return array
     */
    public function getItemsVariationsStockByVariationIdId(int $variationId, int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/variations/{$variationId}/stock"], $query));
    }
                    
    /**
     * @description Books incoming stock for a variation. The incoming stock will be added to the existing stock. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     * @param array $data 
     * @return array
     */
    public function updateItemsVariationsStockBookIncomingItemByVariationIdId(int $variationId, int $id, array $query, array $data): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/variations/{$variationId}/stock/bookIncomingItems"], $query), 'PUT', $data);
    }
                    
    /**
     * @description Books outgoing stock for a variation. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     * @param array $data 
     * @return array
     */
    public function updateItemsVariationsStockBookOutgoingItemByVariationIdId(int $variationId, int $id, array $query, array $data): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/variations/{$variationId}/stock/bookOutgoingItems"], $query), 'PUT', $data);
    }
                    
    /**
     * @description Corrects stock. The item ID and the variation ID must be specified.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     * @param array $data 
     * @return array
     */
    public function updateItemsVariationsStockCorrectionByVariationIdId(int $variationId, int $id, array $query, array $data): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/variations/{$variationId}/stock/correction"], $query), 'PUT', $data);
    }
                
    /**
     * @description Lists stock movements for a variation. The ID of the item and the ID of the variation must be specified. To get movements older than 3 months, set the 'year' parameter.
NOTE: You can either get archive entries or non-archive entries. You can not get entries for the current year that are younger and older than 3 months with one request. You need separate requests to get entries older and younger than 3 months. To get all entries younger than 3 month you do not need to specify a year or any createdAt parameter.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     *      - *warehouseId* - int - optional
     *          - The ID of the warehouse
     *      - *createdAtFrom* - string - optional
     *          - Get entries with createdAt date after this date
     *      - *createdAtTo* - string - optional
     *          - Get entries with createdAt date before this date
     *      - *year* - int - optional
     *          - Get entries from the archive for the given year. All movements older than 3 months are stored in the archive.
     *      - *page* - int - required
     *          - The requested page. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of items per page. The default number per page is 50.
     *      - *columns* - array - optional
     *          - The properties to be loaded
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of VariationStockMovement
     */
    public function eachItemsVariationsStockMovementsByVariationIdId(int $variationId, int $id, array $query): Iterator
    {
        return $this->eachInternal('getItemsVariationsStockMovementsByVariationIdId', func_get_args());
    }
        
    /**
     * @description Lists stock movements for a variation. The ID of the item and the ID of the variation must be specified. To get movements older than 3 months, set the 'year' parameter.
NOTE: You can either get archive entries or non-archive entries. You can not get entries for the current year that are younger and older than 3 months with one request. You need separate requests to get entries older and younger than 3 months. To get all entries younger than 3 month you do not need to specify a year or any createdAt parameter.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     *      - *warehouseId* - int - optional
     *          - The ID of the warehouse
     *      - *createdAtFrom* - string - optional
     *          - Get entries with createdAt date after this date
     *      - *createdAtTo* - string - optional
     *          - Get entries with createdAt date before this date
     *      - *year* - int - optional
     *          - Get entries from the archive for the given year. All movements older than 3 months are stored in the archive.
     *      - *page* - int - required
     *          - The requested page. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of items per page. The default number per page is 50.
     *      - *columns* - array - optional
     *          - The properties to be loaded
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of VariationStockMovement
     */
    public function batchItemsVariationsStockMovementsByVariationIdId(int $variationId, int $id, array $query): Iterator
    {
        return $this->batchInternal('getItemsVariationsStockMovementsByVariationIdId', func_get_args());
    }
    
    /**
     * @description Lists stock movements for a variation. The ID of the item and the ID of the variation must be specified. To get movements older than 3 months, set the 'year' parameter.
NOTE: You can either get archive entries or non-archive entries. You can not get entries for the current year that are younger and older than 3 months with one request. You need separate requests to get entries older and younger than 3 months. To get all entries younger than 3 month you do not need to specify a year or any createdAt parameter.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     *      - *warehouseId* - int - optional
     *          - The ID of the warehouse
     *      - *createdAtFrom* - string - optional
     *          - Get entries with createdAt date after this date
     *      - *createdAtTo* - string - optional
     *          - Get entries with createdAt date before this date
     *      - *year* - int - optional
     *          - Get entries from the archive for the given year. All movements older than 3 months are stored in the archive.
     *      - *page* - int - required
     *          - The requested page. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of items per page. The default number per page is 50.
     *      - *columns* - array - optional
     *          - The properties to be loaded
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of VariationStockMovement
     */
    public function getItemsVariationsStockMovementsByVariationIdId(int $variationId, int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/variations/{$variationId}/stock/movements"], $query));
    }
                    
    /**
     * @description Redistributes the stock of one storage location among one or more storage locations. The item ID and the variation ID need to be specified.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     * @param array $data 
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockStorageLocation
     */
    public function updateItemsVariationsStockRedistributeByVariationIdId(int $variationId, int $id, array $query, array $data): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/variations/{$variationId}/stock/redistribute"], $query), 'PUT', $data);
    }
                
    /**
     * @description Lists stock of a variation per storage location. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     *      - *page* - int - required
     *          - The requested page
     *      - *itemsPerPage* - int - required
     *          - The number of items per page
     *      - *columns* - array - optional
     *          - The properties to be loaded
     *      - *sortBy* - string - optional
     *          - The column to be sorted by
     *      - *sortOrder* - string - optional
     *          - The sort direction
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockStorageLocation
     */
    public function eachItemsVariationsStockStorageLocationsByVariationIdId(int $variationId, int $id, array $query): Iterator
    {
        return $this->eachInternal('getItemsVariationsStockStorageLocationsByVariationIdId', func_get_args());
    }
        
    /**
     * @description Lists stock of a variation per storage location. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     *      - *page* - int - required
     *          - The requested page
     *      - *itemsPerPage* - int - required
     *          - The number of items per page
     *      - *columns* - array - optional
     *          - The properties to be loaded
     *      - *sortBy* - string - optional
     *          - The column to be sorted by
     *      - *sortOrder* - string - optional
     *          - The sort direction
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockStorageLocation
     */
    public function batchItemsVariationsStockStorageLocationsByVariationIdId(int $variationId, int $id, array $query): Iterator
    {
        return $this->batchInternal('getItemsVariationsStockStorageLocationsByVariationIdId', func_get_args());
    }
    
    /**
     * @description Lists stock of a variation per storage location. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $variationId The ID of the variation
     * @param int $id 
     * @param array $query
     *      - *itemId* - int - required
     *          - The ID of the item
     *      - *page* - int - required
     *          - The requested page
     *      - *itemsPerPage* - int - required
     *          - The number of items per page
     *      - *columns* - array - optional
     *          - The properties to be loaded
     *      - *sortBy* - string - optional
     *          - The column to be sorted by
     *      - *sortOrder* - string - optional
     *          - The sort direction
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StockStorageLocation
     */
    public function getItemsVariationsStockStorageLocationsByVariationIdId(int $variationId, int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/variations/{$variationId}/stock/storageLocations"], $query));
    }
                    
    /**
     * @description Lists the additional SKUs of a variation. Filters must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     */
    public function getItemsVariationsVariationAdditionalSkusByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_additional_skus", 'GET', $data);
    }
                
    /**
     * @description Creates an additional SKU. The ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the additional sku
     *      - *variationId* - integer
     *          - The ID of the variation.
     *      - *marketId* - number
     *          - The ID of the market reference.
     *      - *marketAccountId* - integer
     *          - The ID of the market account.
     *      - *sku* - string
     *          - The additional sku for this variation.
     *      - *createdAt* - string
     *          - The time the SKU was created (YYYY-MM-DD HH:MM:SS).
     *      - *updatedAt* - string
     *          - The time the SKU was updated (YYYY-MM-DD HH:MM:SS).
     */
    public function createItemsVariationsVariationAdditionalSkusByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_additional_skus", 'POST', $data);
    }
                    
    /**
     * @description Deletes an additional SKU. The ID of the additional SKU must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $additionalSkuId 
     */
    public function deleteItemsVariationsVariationAdditionalSkusByIdVariationIdAdditionalSkuId(int $id, int $variationId, int $additionalSkuId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_additional_skus/{$additionalSkuId}", 'DELETE');
    }
                
    /**
     * @description Gets an additional SKU. The ID of the additional SKU must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $additionalSkuId 
     * @return array
     *      - *id* - integer
     *          - The ID of the additional sku
     *      - *variationId* - integer
     *          - The ID of the variation.
     *      - *marketId* - number
     *          - The ID of the market reference.
     *      - *marketAccountId* - integer
     *          - The ID of the market account.
     *      - *sku* - string
     *          - The additional sku for this variation.
     *      - *createdAt* - string
     *          - The time the SKU was created (YYYY-MM-DD HH:MM:SS).
     *      - *updatedAt* - string
     *          - The time the SKU was updated (YYYY-MM-DD HH:MM:SS).
     */
    public function getItemsVariationsVariationAdditionalSkusByIdVariationIdAdditionalSkuId(int $id, int $variationId, int $additionalSkuId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_additional_skus/{$additionalSkuId}");
    }
                
    /**
     * @description Updates an additional SKU. The ID of the additional SKU must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $additionalSkuId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the additional sku
     *      - *variationId* - integer
     *          - The ID of the variation.
     *      - *marketId* - number
     *          - The ID of the market reference.
     *      - *marketAccountId* - integer
     *          - The ID of the market account.
     *      - *sku* - string
     *          - The additional sku for this variation.
     *      - *createdAt* - string
     *          - The time the SKU was created (YYYY-MM-DD HH:MM:SS).
     *      - *updatedAt* - string
     *          - The time the SKU was updated (YYYY-MM-DD HH:MM:SS).
     */
    public function updateItemsVariationsVariationAdditionalSkusByIdVariationIdAdditionalSkuId(int $id, int $variationId, int $additionalSkuId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_additional_skus/{$additionalSkuId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all barcodes of a variation. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation barcode information in the results. The following parameter is available: <ul><li>barcode</li></ul>
     * @return array
     */
    public function getItemsVariationsVariationBarcodesByIdVariationId(int $id, int $variationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/variations/{$variationId}/variation_barcodes"], $query));
    }
                
    /**
     * @description Creates a variation barcode. The ID of the item, the ID of the variation, the ID of the barcode and the code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *code* - string
     *          - The code of the variation's barcode. The combination of code and barcode ID must be unique.
     *      - *barcodeId* - integer
     *          - The unique ID of the barcode linked to the variation. The combination of code and barcode ID must be unique.
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *createdAt* - string
     *          - The time the variation's code was created.
     */
    public function createItemsVariationsVariationBarcodeByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_barcodes", 'POST', $data);
    }
                    
    /**
     * @description Deletes a variation barcode. Unlinks the barcode from the variation and deletes the code saved for the variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $barcodeId 
     */
    public function deleteItemsVariationsVariationBarcodeByIdVariationIdBarcodeId(int $id, int $variationId, int $barcodeId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_barcodes/{$barcodeId}", 'DELETE');
    }
                
    /**
     * @description Get a specific variation barcode. The ID of the item, the ID of the variation and the ID of the barcode must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $barcodeId 
     * @return array
     *      - *code* - string
     *          - The code of the variation's barcode. The combination of code and barcode ID must be unique.
     *      - *barcodeId* - integer
     *          - The unique ID of the barcode linked to the variation. The combination of code and barcode ID must be unique.
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *createdAt* - string
     *          - The time the variation's code was created.
     */
    public function getItemsVariationsVariationBarcodeByIdVariationIdBarcodeId(int $id, int $variationId, int $barcodeId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_barcodes/{$barcodeId}");
    }
                
    /**
     * @description Updates a variation barcode. The ID of the item, the ID of the variation, the ID of the barcode and the code must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $barcodeId 
     * @param array $data 
     * @return array
     *      - *code* - string
     *          - The code of the variation's barcode. The combination of code and barcode ID must be unique.
     *      - *barcodeId* - integer
     *          - The unique ID of the barcode linked to the variation. The combination of code and barcode ID must be unique.
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *createdAt* - string
     *          - The time the variation's code was created.
     */
    public function updateItemsVariationsVariationBarcodeByIdVariationIdBarcodeId(int $id, int $variationId, int $barcodeId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_barcodes/{$barcodeId}", 'PUT', $data);
    }
                    
    /**
     * @description List all components of a bundle. The ID of the item and the ID of the variation to which bundle components were added must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsVariationBundlesByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_bundles");
    }
                
    /**
     * @description Adds a variation to a bundle variation as a bundle component.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link that marks a variation as a bundle component
     *      - *variationId* - integer
     *          - The unique ID of the variation to which other variations are added to create a bundle
     *      - *componentVariationId* - integer
     *          - The unique ID of the variation added as bundle component
     *      - *componentQuantity* - integer
     *          - The quantity of the variation to be added as bundle component
     *      - *lastUpdatedTimestamp* - string
     *          - The time the bundle was last updated.
     *      - *createdAt* - string
     *          - The time the bundle was created.
     */
    public function createItemsVariationsVariationBundleByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_bundles", 'POST', $data);
    }
                    
    /**
     * @description Removes a component from a bundle. The bundle ID must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $bundleId 
     */
    public function deleteItemsVariationsVariationBundleByIdVariationIdBundleId(int $id, int $variationId, int $bundleId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_bundles/{$bundleId}", 'DELETE');
    }
                
    /**
     * @description Gets the bundle information for a specific bundle component.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $bundleId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link that marks a variation as a bundle component
     *      - *variationId* - integer
     *          - The unique ID of the variation to which other variations are added to create a bundle
     *      - *componentVariationId* - integer
     *          - The unique ID of the variation added as bundle component
     *      - *componentQuantity* - integer
     *          - The quantity of the variation to be added as bundle component
     *      - *lastUpdatedTimestamp* - string
     *          - The time the bundle was last updated.
     *      - *createdAt* - string
     *          - The time the bundle was created.
     */
    public function getItemsVariationsVariationBundleByIdVariationIdBundleId(int $id, int $variationId, int $bundleId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_bundles/{$bundleId}");
    }
                
    /**
     * @description Updates a variation bundle component.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $bundleId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link that marks a variation as a bundle component
     *      - *variationId* - integer
     *          - The unique ID of the variation to which other variations are added to create a bundle
     *      - *componentVariationId* - integer
     *          - The unique ID of the variation added as bundle component
     *      - *componentQuantity* - integer
     *          - The quantity of the variation to be added as bundle component
     *      - *lastUpdatedTimestamp* - string
     *          - The time the bundle was last updated.
     *      - *createdAt* - string
     *          - The time the bundle was created.
     */
    public function updateItemsVariationsVariationBundleByIdVariationIdBundleId(int $id, int $variationId, int $bundleId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_bundles/{$bundleId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all categories linked to a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *categoryId* - integer
     *          - The unique ID of the category
     *      - *position* - integer
     *          - The position of the category
     *      - *isNeckermannPrimary* - string
     *          - Flag that indicates if the category is the primary category for the market Neckermann for this variation.
     */
    public function getItemsVariationsVariationCategoriesByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_categories");
    }
                
    /**
     * @description Creates a link between a category and a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *categoryId* - integer
     *          - The unique ID of the category
     *      - *position* - integer
     *          - The position of the category
     *      - *isNeckermannPrimary* - string
     *          - Flag that indicates if the category is the primary category for the market Neckermann for this variation.
     */
    public function createItemsVariationsVariationCategoryByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_categories", 'POST', $data);
    }
                    
    /**
     * @description Deletes the link between a category and a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $catId 
     */
    public function deleteItemsVariationsVariationCategoryByIdVariationIdCatId(int $id, int $variationId, int $catId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_categories/{$catId}", 'DELETE');
    }
                
    /**
     * @description Gets the link between a category and a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $catId 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *categoryId* - integer
     *          - The unique ID of the category
     *      - *position* - integer
     *          - The position of the category
     *      - *isNeckermannPrimary* - string
     *          - Flag that indicates if the category is the primary category for the market Neckermann for this variation.
     */
    public function getItemsVariationsVariationCategoryByIdVariationIdCatId(int $id, int $variationId, int $catId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_categories/{$catId}");
    }
                
    /**
     * @description Updates the link between a category and a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $catId 
     * @param array $data 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *categoryId* - integer
     *          - The unique ID of the category
     *      - *position* - integer
     *          - The position of the category
     *      - *isNeckermannPrimary* - string
     *          - Flag that indicates if the category is the primary category for the market Neckermann for this variation.
     */
    public function updateItemsVariationsVariationCategoryByIdVariationIdCatId(int $id, int $variationId, int $catId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_categories/{$catId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all clients (stores) linked to a variation. The ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsVariationClientsByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_clients");
    }
                
    /**
     * @description Creates a link between a client (store) and a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *plentyId* - integer
     *          - The unique ID of the client (store)
     *      - *createdAt* - string
     *          - The time at which the client (store) was linked to the variation.
     */
    public function createItemsVariationsVariationClientByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_clients", 'POST', $data);
    }
                    
    /**
     * @description Deletes the link between a client (store) and a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $plentyId 
     */
    public function deleteItemsVariationsVariationClientByIdVariationIdPlentyId(int $id, int $variationId, int $plentyId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_clients/{$plentyId}", 'DELETE');
    }
                    
    /**
     * @description List the bundles that the variation is a component of. The variation ID must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsVariationComponentBundlesByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_component_bundles");
    }
                    
    /**
     * @description Lists the default category of a variation for all clients (stores). The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsVariationDefaultCategoriesByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_default_categories");
    }
                
    /**
     * @description Creates a link between a variation and a category that designates the category as the default category.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *branchId* - integer
     *          - The unique ID of the category branch
     *      - *plentyId* - integer
     *          - The unique plenty ID of the client (store)
     *      - *manually* - string
     */
    public function createItemsVariationsVariationDefaultCategoryByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_default_categories", 'POST');
    }
                    
    /**
     * @description Deletes a link between a variation and a category that designates this category as the default category.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $plentyId 
     */
    public function deleteItemsVariationsVariationDefaultCategoryByIdVariationIdPlentyId(int $id, int $variationId, int $plentyId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_default_categories/{$plentyId}", 'DELETE');
    }
                
    /**
     * @description Gets the default category linked to a variation for the specified client (store). The ID of the item, the ID of the variation and the ID of the client (store) must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $plentyId 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *branchId* - integer
     *          - The unique ID of the category branch
     *      - *plentyId* - integer
     *          - The unique plenty ID of the client (store)
     *      - *manually* - string
     */
    public function getItemsVariationsVariationDefaultCategoryByIdVariationIdPlentyId(int $id, int $variationId, int $plentyId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_default_categories/{$plentyId}");
    }
                    
    /**
     * @description Lists all images linked to a variation. The variation ID must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $query
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to variation images updated after the specified date. The date can be specified as unix timestamps or in the ISO 8601 date format. The PHP function strtotime is also supported.
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between a variation and an image
     *      - *itemId* - integer
     *          - The unique ID of the item
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *imageId* - integer
     *          - The unique ID of the image
     *      - *createdAt* - string
     *          - The time the image was linked to the variation.
     *      - *updatedAt* - string
     *          - The time the link between an image and a variation was last updated.
     */
    public function getItemsVariationsVariationImagesByIdVariationId(int $id, int $variationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/{$id}/variations/{$variationId}/variation_images"], $query));
    }
                
    /**
     * @description Creates a link between an image and a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between a variation and an image
     *      - *itemId* - integer
     *          - The unique ID of the item
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *imageId* - integer
     *          - The unique ID of the image
     *      - *createdAt* - string
     *          - The time the image was linked to the variation.
     *      - *updatedAt* - string
     *          - The time the link between an image and a variation was last updated.
     */
    public function createItemsVariationsVariationImageByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_images", 'POST', $data);
    }
                    
    /**
     * @description Deletes a link between an image and a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $imageId 
     */
    public function deleteItemsVariationsVariationImageByIdVariationIdImageId(int $id, int $variationId, int $imageId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_images/{$imageId}", 'DELETE');
    }
                    
    /**
     * @description Deletes all links of one variation. The ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     */
    public function deleteItemsVariationsVariationMarketByIdVariationId(int $id, int $variationId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_markets", 'DELETE');
    }
                
    /**
     * @description Lists all markets linked to a variation. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsVariationMarketsByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_markets");
    }
                
    /**
     * @description Creates a link between a variation and a market. The ID of the item, the ID of the variation and the ID of the market must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *marketId* - integer
     *          - The unique ID of the market
     *      - *createdAt* - string
     *          - The time the link between the variation and the market was created.
     */
    public function createItemsVariationsVariationMarketByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_markets", 'POST', $data);
    }
                    
    /**
     * @description Deletes a link between a variation and a market. The ID of the item, the ID of the variation and the ID of the market must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $marketplaceId 
     */
    public function deleteItemsVariationsVariationMarketByIdVariationIdMarketplaceId(int $id, int $variationId, int $marketplaceId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_markets/{$marketplaceId}", 'DELETE');
    }
                    
    /**
     * @description Deletes all links between a variation and its property values. The ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     */
    public function deleteItemsVariationsVariationPropertyByIdVariationId(int $id, int $variationId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_properties", 'DELETE');
    }
                
    /**
     * @description Lists the property values linked to a variation. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsVariationPropertiesByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_properties");
    }
                
    /**
     * @description Creates a link between a variation and a property value.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between the variation and the property value
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *propertyId* - integer
     *          - The unique ID of the property
     *      - *propertySelectionId* - integer
     *          - The unique ID of the property selection of the variation
     *      - *valueInt* - integer
     *          - The int value of the property value of the variation
     *      - *valueFloat* - number
     *          - The float value of the property value of the variation
     *      - *valueFile* - string
     *          - The file value of the property value of the variation
     *      - *surcharge* - number
     *          - The surcharge of the property value of the variation
     */
    public function createItemsVariationsVariationPropertyByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_properties", 'POST', $data);
    }
                    
    /**
     * @description Delete a link between a variation and a property value. The ID of the item, the ID of the variation and the ID of the property must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $propertyId 
     */
    public function deleteItemsVariationsVariationPropertyByIdVariationIdPropertyId(int $id, int $variationId, int $propertyId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_properties/{$propertyId}", 'DELETE');
    }
                
    /**
     * @description Gets a property value linked to a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $propertyId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between the variation and the property value
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *propertyId* - integer
     *          - The unique ID of the property
     *      - *propertySelectionId* - integer
     *          - The unique ID of the property selection of the variation
     *      - *valueInt* - integer
     *          - The int value of the property value of the variation
     *      - *valueFloat* - number
     *          - The float value of the property value of the variation
     *      - *valueFile* - string
     *          - The file value of the property value of the variation
     *      - *surcharge* - number
     *          - The surcharge of the property value of the variation
     */
    public function getItemsVariationsVariationPropertyByIdVariationIdPropertyId(int $id, int $variationId, int $propertyId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_properties/{$propertyId}");
    }
                
    /**
     * @description Update the data of a property value linked to a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $propertyId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between the variation and the property value
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *propertyId* - integer
     *          - The unique ID of the property
     *      - *propertySelectionId* - integer
     *          - The unique ID of the property selection of the variation
     *      - *valueInt* - integer
     *          - The int value of the property value of the variation
     *      - *valueFloat* - number
     *          - The float value of the property value of the variation
     *      - *valueFile* - string
     *          - The file value of the property value of the variation
     *      - *surcharge* - number
     *          - The surcharge of the property value of the variation
     */
    public function updateItemsVariationsVariationPropertyByIdVariationIdPropertyId(int $id, int $variationId, int $propertyId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_properties/{$propertyId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes all links between a variation and its sales prices and deletes the sales price data. The ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     */
    public function deleteItemsVariationsVariationSalesPriceByIdVariationId(int $id, int $variationId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_sales_prices", 'DELETE');
    }
                
    /**
     * @description Lists the sales prices of a variation. The ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsVariationSalesPricesByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_sales_prices");
    }
                
    /**
     * @description Creates a link between a variation and a sales price and adds sales price data.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *price* - number
     *          - The price of the variation saved for this sales price
     *      - *lowestPrice* - number
     *          - The lowest price of the variation saved for this sales price
     *      - *lowestPriceCalculation* - boolean
     *          - Is the lowest price calculation active for this sales price
     *      - *updatedAt* - string
     *          - The time the sales price was last updated.
     *      - *createdAt* - string
     *          - The time the sales price was created.
     */
    public function createItemsVariationsVariationSalesPriceByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_sales_prices", 'POST', $data);
    }
                    
    /**
     * @description Deletes a link between a variation and a sales price and deletes the sales price data. The ID of the sales price and the ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $priceId 
     */
    public function deleteItemsVariationsVariationSalesPriceByIdVariationIdPriceId(int $id, int $variationId, int $priceId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_sales_prices/{$priceId}", 'DELETE');
    }
                
    /**
     * @description Gets sales price data linked to a variation. The ID of the sales price and the ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $priceId 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *price* - number
     *          - The price of the variation saved for this sales price
     *      - *lowestPrice* - number
     *          - The lowest price of the variation saved for this sales price
     *      - *lowestPriceCalculation* - boolean
     *          - Is the lowest price calculation active for this sales price
     *      - *updatedAt* - string
     *          - The time the sales price was last updated.
     *      - *createdAt* - string
     *          - The time the sales price was created.
     */
    public function getItemsVariationsVariationSalesPriceByIdVariationIdPriceId(int $id, int $variationId, int $priceId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_sales_prices/{$priceId}");
    }
                
    /**
     * @description Updates sales price data linked to a variation. The ID of the sales price and the ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $priceId 
     * @param array $data 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *salesPriceId* - integer
     *          - The unique ID of the sales price
     *      - *price* - number
     *          - The price of the variation saved for this sales price
     *      - *lowestPrice* - number
     *          - The lowest price of the variation saved for this sales price
     *      - *lowestPriceCalculation* - boolean
     *          - Is the lowest price calculation active for this sales price
     *      - *updatedAt* - string
     *          - The time the sales price was last updated.
     *      - *createdAt* - string
     *          - The time the sales price was created.
     */
    public function updateItemsVariationsVariationSalesPriceByIdVariationIdPriceId(int $id, int $variationId, int $priceId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_sales_prices/{$priceId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists the SKUs of a variation. Filters must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsVariationSkusByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_skus");
    }
                
    /**
     * @description Creates an SKU. The ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The row ID of the table plenty_item_variation_market_status
     *      - *variationId* - integer
     *          - The ID of the variation
     *      - *marketId* - number
     *          - The ID of the market
     *      - *accountId* - integer
     *          - The ID of the market account
     *      - *initialSku* - string
     *          - The initial SKU of the variation. The initial SKU cannot be modified even if the variation SKU is changed. However, it is possible to reset the variation SKU to the initial SKU.
     *      - *sku* - string
     *          - The SKU of the variation. The SKU is adjustable but may not exist twice for the combination of market Id and account Id.
     *      - *parentSku* - string
     *          - The Parent SKU of the variation. The Parent SKU is adjustable. The same Parent SKU value should be used on variations of same article.
     *      - *isActive* - boolean
     *          - Flag that indicates if the item is ready for export (currently not in use).
     *      - *createdAt* - string
     *          - The time the SKU was created (YYYY-MM-DD HH:MM:SS).
     *      - *updatedAt* - string
     *          - The time the SKU was updated (YYYY-MM-DD HH:MM:SS).
     *      - *exportedAt* - string
     *          - The time the variation was last exported (YYYY-MM-DD HH:MM:SS).
     *      - *stockUpdatedAt* - string
     *      - *deletedAt* - string
     *          - The time the variation was deleted (YYYY-MM-DD HH:MM:SS).
     *      - *status* - string
     *          - The status of the variation after the export. Possible entries are INACTIVE, ERROR, SENT and ACTIVE.
     *      - *additionalInformation* - string
     *          - The field that contains additional information.
     */
    public function createItemsVariationsVariationSkusByIdVariationId(int $id, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_skus", 'POST', $data);
    }
                    
    /**
     * @description Deletes an SKU. The ID of the SKU must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $skuId 
     */
    public function deleteItemsVariationsVariationSkusByIdVariationIdSkuId(int $id, int $variationId, int $skuId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_skus/{$skuId}", 'DELETE');
    }
                
    /**
     * @description Gets an SKU. The ID of the SKU must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $skuId 
     * @return array
     *      - *id* - integer
     *          - The row ID of the table plenty_item_variation_market_status
     *      - *variationId* - integer
     *          - The ID of the variation
     *      - *marketId* - number
     *          - The ID of the market
     *      - *accountId* - integer
     *          - The ID of the market account
     *      - *initialSku* - string
     *          - The initial SKU of the variation. The initial SKU cannot be modified even if the variation SKU is changed. However, it is possible to reset the variation SKU to the initial SKU.
     *      - *sku* - string
     *          - The SKU of the variation. The SKU is adjustable but may not exist twice for the combination of market Id and account Id.
     *      - *parentSku* - string
     *          - The Parent SKU of the variation. The Parent SKU is adjustable. The same Parent SKU value should be used on variations of same article.
     *      - *isActive* - boolean
     *          - Flag that indicates if the item is ready for export (currently not in use).
     *      - *createdAt* - string
     *          - The time the SKU was created (YYYY-MM-DD HH:MM:SS).
     *      - *updatedAt* - string
     *          - The time the SKU was updated (YYYY-MM-DD HH:MM:SS).
     *      - *exportedAt* - string
     *          - The time the variation was last exported (YYYY-MM-DD HH:MM:SS).
     *      - *stockUpdatedAt* - string
     *      - *deletedAt* - string
     *          - The time the variation was deleted (YYYY-MM-DD HH:MM:SS).
     *      - *status* - string
     *          - The status of the variation after the export. Possible entries are INACTIVE, ERROR, SENT and ACTIVE.
     *      - *additionalInformation* - string
     *          - The field that contains additional information.
     */
    public function getItemsVariationsVariationSkusByIdVariationIdSkuId(int $id, int $variationId, int $skuId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_skus/{$skuId}");
    }
                
    /**
     * @description Updates an SKU. The ID of the SKU must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $skuId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The row ID of the table plenty_item_variation_market_status
     *      - *variationId* - integer
     *          - The ID of the variation
     *      - *marketId* - number
     *          - The ID of the market
     *      - *accountId* - integer
     *          - The ID of the market account
     *      - *initialSku* - string
     *          - The initial SKU of the variation. The initial SKU cannot be modified even if the variation SKU is changed. However, it is possible to reset the variation SKU to the initial SKU.
     *      - *sku* - string
     *          - The SKU of the variation. The SKU is adjustable but may not exist twice for the combination of market Id and account Id.
     *      - *parentSku* - string
     *          - The Parent SKU of the variation. The Parent SKU is adjustable. The same Parent SKU value should be used on variations of same article.
     *      - *isActive* - boolean
     *          - Flag that indicates if the item is ready for export (currently not in use).
     *      - *createdAt* - string
     *          - The time the SKU was created (YYYY-MM-DD HH:MM:SS).
     *      - *updatedAt* - string
     *          - The time the SKU was updated (YYYY-MM-DD HH:MM:SS).
     *      - *exportedAt* - string
     *          - The time the variation was last exported (YYYY-MM-DD HH:MM:SS).
     *      - *stockUpdatedAt* - string
     *      - *deletedAt* - string
     *          - The time the variation was deleted (YYYY-MM-DD HH:MM:SS).
     *      - *status* - string
     *          - The status of the variation after the export. Possible entries are INACTIVE, ERROR, SENT and ACTIVE.
     *      - *additionalInformation* - string
     *          - The field that contains additional information.
     */
    public function updateItemsVariationsVariationSkusByIdVariationIdSkuId(int $id, int $variationId, int $skuId, array $data): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_skus/{$skuId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists all supplier data linked to a variation. The ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsVariationSuppliersByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_suppliers");
    }
                
    /**
     * @description Creates a link between a variation and a supplier and adds supplier data.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between variation and supplier
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *supplierId* - integer
     *          - The unique ID of the supplier
     *      - *purchasePrice* - number
     *          - The price at which the variation was purchased from this supplier.
     *      - *minimumPurchase* - integer
     *          - The minimum quantity of the variation that has to be ordered from the supplier. This value is also used as a quantity suggestion when creating reorders.
     *      - *itemNumber* - string
     *          - The external item number assigned to the variation by this supplier
     *      - *lastPriceQuery* - string
     *          - The date of the last price query to this supplier. This helps to plan price negotiations.
     *      - *deliveryTimeInDays* - integer
     *          - The delivery time in days for the variation saved for this supplier
     *      - *discount* - number
     *          - The discount in percent the supplier grants for the variation.
     *      - *isDiscountable* - string
     *          - Flag that indicates if the supplier's discount for this variation is active.
     *      - *packagingUnit* - number
     *          - The packaging unit of the supplier if it differs from the packaging unit settings in plentymarkets.
     *      - *lastUpdateTimestamp* - string
     *          - The time the supplier data was last updated
     *      - *createdAt* - string
     *          - The time the supplier data was created
     *      - *currencyPurchasePrice* - number
     *          - The purchase price in the currency of the supplier
     *      - *itemDescription* - string
     *          - The supplier item description
     */
    public function createItemsVariationsVariationSupplierByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_suppliers", 'POST');
    }
                    
    /**
     * @description Deletes a link between a variation and a supplier. The ID of the variation and the ID of the link between the variation and the supplier must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $variationSupplierId 
     */
    public function deleteItemsVariationsVariationSupplierByIdVariationIdVariationSupplierId(int $id, int $variationId, int $variationSupplierId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_suppliers/{$variationSupplierId}", 'DELETE');
    }
                
    /**
     * @description Gets the data for a supplier linked to a variation. The ID of the variation and the ID of the link between the variation and the supplier must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $variationSupplierId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between variation and supplier
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *supplierId* - integer
     *          - The unique ID of the supplier
     *      - *purchasePrice* - number
     *          - The price at which the variation was purchased from this supplier.
     *      - *minimumPurchase* - integer
     *          - The minimum quantity of the variation that has to be ordered from the supplier. This value is also used as a quantity suggestion when creating reorders.
     *      - *itemNumber* - string
     *          - The external item number assigned to the variation by this supplier
     *      - *lastPriceQuery* - string
     *          - The date of the last price query to this supplier. This helps to plan price negotiations.
     *      - *deliveryTimeInDays* - integer
     *          - The delivery time in days for the variation saved for this supplier
     *      - *discount* - number
     *          - The discount in percent the supplier grants for the variation.
     *      - *isDiscountable* - string
     *          - Flag that indicates if the supplier's discount for this variation is active.
     *      - *packagingUnit* - number
     *          - The packaging unit of the supplier if it differs from the packaging unit settings in plentymarkets.
     *      - *lastUpdateTimestamp* - string
     *          - The time the supplier data was last updated
     *      - *createdAt* - string
     *          - The time the supplier data was created
     *      - *currencyPurchasePrice* - number
     *          - The purchase price in the currency of the supplier
     *      - *itemDescription* - string
     *          - The supplier item description
     */
    public function getItemsVariationsVariationSupplierByIdVariationIdVariationSupplierId(int $id, int $variationId, int $variationSupplierId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_suppliers/{$variationSupplierId}");
    }
                
    /**
     * @description Updates the data of a supplier linked to a variation.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $variationSupplierId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between variation and supplier
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *supplierId* - integer
     *          - The unique ID of the supplier
     *      - *purchasePrice* - number
     *          - The price at which the variation was purchased from this supplier.
     *      - *minimumPurchase* - integer
     *          - The minimum quantity of the variation that has to be ordered from the supplier. This value is also used as a quantity suggestion when creating reorders.
     *      - *itemNumber* - string
     *          - The external item number assigned to the variation by this supplier
     *      - *lastPriceQuery* - string
     *          - The date of the last price query to this supplier. This helps to plan price negotiations.
     *      - *deliveryTimeInDays* - integer
     *          - The delivery time in days for the variation saved for this supplier
     *      - *discount* - number
     *          - The discount in percent the supplier grants for the variation.
     *      - *isDiscountable* - string
     *          - Flag that indicates if the supplier's discount for this variation is active.
     *      - *packagingUnit* - number
     *          - The packaging unit of the supplier if it differs from the packaging unit settings in plentymarkets.
     *      - *lastUpdateTimestamp* - string
     *          - The time the supplier data was last updated
     *      - *createdAt* - string
     *          - The time the supplier data was created
     *      - *currencyPurchasePrice* - number
     *          - The purchase price in the currency of the supplier
     *      - *itemDescription* - string
     *          - The supplier item description
     */
    public function updateItemsVariationsVariationSupplierByIdVariationIdVariationSupplierId(int $id, int $variationId, int $variationSupplierId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_suppliers/{$variationSupplierId}", 'PUT');
    }
                    
    /**
     * @description Lists the warehouses linked to a variation. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     */
    public function getItemsVariationsVariationWarehousesByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_warehouses");
    }
                
    /**
     * @description Creates a link between a variation and a warehouse and adds warehouse data.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *warehouseId* - integer
     *          - The unique ID of the warehouse
     *      - *warehouseZoneId* - integer
     *          - The unique ID of the warehouse zone
     *      - *storageLocationType* - string
     *          - The storage location type of the warehouse
     *      - *reorderLevel* - integer
     *          - The reorder level for the variation in this warehouse
     *      - *maximumStock* - integer
     *          - The maximum stock for the variation in this warehouse
     *      - *stockTurnoverInDays* - integer
     *          - The stock turnover in days for the variation in this warehouse
     *      - *storageLocation* - integer
     *          - The storage location of the variation in this warehouse
     *      - *stockBuffer* - integer
     *          - The stock buffer for the variation in this warehouse
     *      - *isBatch* - boolean
     *          - Is for warehouse and variation stock batch active
     *      - *isBestBeforeDate* - boolean
     *          - Is for warehouse and variation stock best before date active
     *      - *lastUpdateTimestamp* - string
     *          - The time the warehouse data was last updated.
     *      - *createdAt* - string
     *          - The time the warehouse data was created.
     */
    public function createItemsVariationsVariationWarehouseByIdVariationId(int $id, int $variationId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_warehouses", 'POST');
    }
                    
    /**
     * @description Deletes the link between a warehouse and a variation. The ID of the variation and the ID of the warehouse must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $warehouseId 
     */
    public function deleteItemsVariationsVariationWarehouseByIdVariationIdWarehouseId(int $id, int $variationId, int $warehouseId): void
    {
        $this->api("/rest/items/{$id}/variations/{$variationId}/variation_warehouses/{$warehouseId}", 'DELETE');
    }
                
    /**
     * @description Gets the data of a warehouse linked to a variation. The ID of the variation and the ID of the warehouse must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $warehouseId 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *warehouseId* - integer
     *          - The unique ID of the warehouse
     *      - *warehouseZoneId* - integer
     *          - The unique ID of the warehouse zone
     *      - *storageLocationType* - string
     *          - The storage location type of the warehouse
     *      - *reorderLevel* - integer
     *          - The reorder level for the variation in this warehouse
     *      - *maximumStock* - integer
     *          - The maximum stock for the variation in this warehouse
     *      - *stockTurnoverInDays* - integer
     *          - The stock turnover in days for the variation in this warehouse
     *      - *storageLocation* - integer
     *          - The storage location of the variation in this warehouse
     *      - *stockBuffer* - integer
     *          - The stock buffer for the variation in this warehouse
     *      - *isBatch* - boolean
     *          - Is for warehouse and variation stock batch active
     *      - *isBestBeforeDate* - boolean
     *          - Is for warehouse and variation stock best before date active
     *      - *lastUpdateTimestamp* - string
     *          - The time the warehouse data was last updated.
     *      - *createdAt* - string
     *          - The time the warehouse data was created.
     */
    public function getItemsVariationsVariationWarehouseByIdVariationIdWarehouseId(int $id, int $variationId, int $warehouseId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_warehouses/{$warehouseId}");
    }
                
    /**
     * @description Updates the data of a warehouse linked to a variation. The ID of the variation and the ID of the warehouse must be specified.
     * @tag Item
     * @param int $id 
     * @param int $variationId 
     * @param int $warehouseId 
     * @return array
     *      - *variationId* - integer
     *          - The unique ID of the variation
     *      - *warehouseId* - integer
     *          - The unique ID of the warehouse
     *      - *warehouseZoneId* - integer
     *          - The unique ID of the warehouse zone
     *      - *storageLocationType* - string
     *          - The storage location type of the warehouse
     *      - *reorderLevel* - integer
     *          - The reorder level for the variation in this warehouse
     *      - *maximumStock* - integer
     *          - The maximum stock for the variation in this warehouse
     *      - *stockTurnoverInDays* - integer
     *          - The stock turnover in days for the variation in this warehouse
     *      - *storageLocation* - integer
     *          - The storage location of the variation in this warehouse
     *      - *stockBuffer* - integer
     *          - The stock buffer for the variation in this warehouse
     *      - *isBatch* - boolean
     *          - Is for warehouse and variation stock batch active
     *      - *isBestBeforeDate* - boolean
     *          - Is for warehouse and variation stock best before date active
     *      - *lastUpdateTimestamp* - string
     *          - The time the warehouse data was last updated.
     *      - *createdAt* - string
     *          - The time the warehouse data was created.
     */
    public function updateItemsVariationsVariationWarehouseByIdVariationIdWarehouseId(int $id, int $variationId, int $warehouseId): array
    {
        return $this->api("/rest/items/{$id}/variations/{$variationId}/variation_warehouses/{$warehouseId}", 'PUT');
    }
                    
    /**
     * @description Deletes an item. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId 
     */
    public function deleteItemByItemId(int $itemId): void
    {
        $this->api("/rest/items/{$itemId}", 'DELETE');
    }
                
    /**
     * @description Show an item by itemId
     * @tag Item
     * @param int $itemId 
     * @param array $query
     *      - *lang* - string - optional
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#countries' target='_blank'>language</a> of the variation information.
     * @return array
     *      - *id* - integer
     *          - The ID of the item. The ID must be unique.
     *      - *position* - integer
     *          - The position of the item
     *      - *itemType* - string
     *          - The type of the item. Because Set items are managed using a separate route,
this value is always Default.
     *      - *stockType* - integer
     *          - The stock type of the item. Possible values:
<ul><li>0 = Stocked item (default)</li>
    <li>1 = Production item</li>
    <li>2 = Colli</li>
    <li>3 = Special order item</li></ul>
     *      - *storeSpecial* - integer
     *          - Option to present items more prominently in the online store.
<ul><li>1 = Special offer</li><li>2 = New items</li><li>3 = Top items</li></ul>
     *      - *ownerId* - integer
     *          - The plentymarkets user that is assigned as owner of this item.
     *      - *manufacturerId* - integer
     *          - The ID of the manufacturer of the item
     *      - *producingCountryId* - integer
     *          - The ID of the country in which the item was manufactured.
     *      - *mainVariationId* - integer
     *          - The ID of the main variation of the item. The ID must be unique.
     *      - *revenueAccount* - integer
     *          - The revenue account the item is linked to.
An individual revenue account can be saved for each item in plentymarkets.
If this is not done, plentymarkets automatically determines a revenue account
based on the VAT rate.
     *      - *couponRestriction* - integer
     *          - Indicates if the item can be purchased using a promotional coupon.
<ul><li>0 = Permitted</li>
    <li>1 = Not permitted</li>
    <li>2 = Purchasable with coupon only</li></ul>
     *      - *condition* - integer
     *          - The condition of the item. Possible values:
<ul><li>0 = New</li><li>1 = Used</li>
    <li>2 = Boxed as new</li>
    <li>3 = New with label</li>
    <li>4 = Factory seconds</li></ul>
     *      - *conditionApi* - integer
     *          - The condition of the item that is transferred to markets via API.
<ul><li>0 = New</li>
    <li>1 = Used but as new</li>
    <li>2 = Used but very good</li>
    <li>3 = Used but good</li>
    <li>4 = Used but acceptable</li>
    <li>5 = Factory seconds</li></ul>
     *      - *createdAt* - string
     *          - Timestamp of the date and time the item was created.
     *      - *updatedAt* - string
     *          - Timestamp of the last date and time the item was updated.
     *      - *isSubscribable* - boolean
     *          - Flag that indicates if the item can be ordered as a subscription item.
If yes, the item can be ordered for delivery at regular intervals.
     *      - *isSerialNumber* - boolean
     *          - Flag that indicates if serial numbers are to be assigned to variations of this item
to uniquely identify every item sold. Serial numbers ensure traceability of an item
in case of errors or problems.
     *      - *isShippingPackage* - boolean
     *          - Flag that indicates if a shipping package is to be used for this item.
If yes and the variation's dimensions are entered in the <b>Settings</b> tab of a
variation, the correct shipping package is assigned automatically.
     *      - *amazonFbaPlatform* - integer
     *          - Indicates the platform used for Fulfilment by Amazon (FBA).
<ul><li>0 = Do not use</li>
    <li>1 = AMAZON EU (Europe)</li>
    <li>2 = AMAZON FE (Far East)</li>
    <li>3 = AMAZON NA (North America)</li></ul>
     *      - *isShippableByAmazon* - boolean
     *          - Flag that indicates if the item can be shipped with Amazon Multi-Channel.
Amazon Multi-Channel Fulfillment is a service for fulfilling orders from sales
channels other than Amazon platforms using inventory stored in the Amazon
fulfillment center.
     *      - *amazonProductType* - integer
     *          - The Amazon product type of the item. List of IDs:
https://www.plentymarkets.co.uk/manual/data-exchange/data-formats/item/
     *      - *amazonFedas* - string
     *          - The FEDAS product classification key of the item.
     *      - *ebayPresetId* - integer
     *          - The eBay preset ID. This plentymarkets ID must be specified to save values for
$ebayCategory, $ebayCategory2, $ebayStoreCategory and $ebayStoreCategory2.
     *      - *ebayCategory* - integer
     *          - The eBay category 1 of the item. This category is used when a new listing is created.
     *      - *ebayCategory2* - integer
     *          - The eBay category 2 of the item. This category is used when a new listing is created.
     *      - *ebayStoreCategory* - integer
     *          - The ID of the eBay store category 1 of the item.
This value is used for new listings.
     *      - *ebayStoreCategory2* - integer
     *          - The ID of the eBay store category 2 of the item.
This value is used for new listings.
     *      - *rakutenCategoryId* - integer
     *          - The ID of the Rakuten category of this item.
     *      - *flagOne* - integer
     *          - Flag 1 of the item. Flags can be used to organise and filter items.
Each item can be assigned up to two flags. Possible values: 1 to 31, 0 = no flag
     *      - *flagTwo* - integer
     *          - Flag 2 of the item. Flags can be used to organise and filter items.
Each item can be assigned up to two flags. Possible values: 1 to 11, 0 = no flag
     *      - *ageRestriction* - integer
     *          - The age customers must be to purchase the item.
Items with an age rating of 18+ must be linked to a shipping profile for which the
PostIdent option is activated.
<ul><li>0 = None available</li>
   <li>3 = Released for ages 3 and up</li>
   <li>6 = Ages 6 and up</li>
   <li>9 = Ages 9 and up</li>
   <li>12 = Ages 12 and up</li>
   <li>14 = Ages 14 and up</li>
   <li>16 = Ages 16 and up</li>
   <li>18 = Ages 18 and up</li>
   <li>50 = Not marked</li>
   <li>88 = Not required</li>
   <li>99 = Unknown</li></ul>
     *      - *feedback* - integer
     *          - The feedback, i.e. rating, that this item received.
Possible values are 1 to 5 or 1 to 10 depending on the maximum rating setting.
An initial feedback can be saved for items. The saved value will then be displayed as the
initial feedback. Every time new feedback is submitted, the average value will be
recalculated automatically.
     *      - *free1* - string
     *          - The content of the free text field 1. This can be displayed in the online store or on eBay.
     *      - *free2* - string
     *          - The content of the free text field 2. This can be displayed in the online store or on eBay.
     *      - *free3* - string
     *          - The content of the free text field 3. This can be displayed in the online store or on eBay.
     *      - *free4* - string
     *          - The content of the free text field 4. This can be displayed in the online store or on eBay.
     *      - *free5* - string
     *          - The content of the free text field 5. This can be displayed in the online store or on eBay.
     *      - *free6* - string
     *          - The content of the free text field 6. This can be displayed in the online store or on eBay.
     *      - *free7* - string
     *          - The content of the free text field 7. This can be displayed in the online store or on eBay.
     *      - *free8* - string
     *          - The content of the free text field 8. This can be displayed in the online store or on eBay.
     *      - *free9* - string
     *          - The content of the free text field 9. This can be displayed in the online store or on eBay.
     *      - *free10* - string
     *          - The content of the free text field 10. This can be displayed in the online store or on eBay.
     *      - *free11* - string
     *          - The content of the free text field 11. This can be displayed in the online store or on eBay.
     *      - *free12* - string
     *          - The content of the free text field 12. This can be displayed in the online store or on eBay.
     *      - *free13* - string
     *          - The content of the free text field 13. This can be displayed in the online store or on eBay.
     *      - *free14* - string
     *          - The content of the free text field 14. This can be displayed in the online store or on eBay.
     *      - *free15* - string
     *          - The content of the free text field 15. This can be displayed in the online store or on eBay.
     *      - *free16* - string
     *          - The content of the free text field 16. This can be displayed in the online store or on eBay.
     *      - *free17* - string
     *          - The content of the free text field 17. This can be displayed in the online store or on eBay.
     *      - *free18* - string
     *          - The content of the free text field 18. This can be displayed in the online store or on eBay.
     *      - *free19* - string
     *          - The content of the free text field 19. This can be displayed in the online store or on eBay.
     *      - *free20* - string
     *          - The content of the free text field 20. This can be displayed in the online store or on eBay.
     *      - *maximumOrderQuantity* - number
     *          - The maximum order quantity of an item permitted per order.
If a maximum order quantity is specified, no more than this quantity of any
combination of the variations of the item can be ordered.
Decimal values are possible to allow orders by weight or length.
Default value is 0. If value is 0, the maximum order quantity is unlimited.
     *      - *customsTariffNumber* - string
     *          - Deprecated: The customs tariff number of the item;
usually a 11 digit code number based on the Harmonised System
     */
    public function getItemByItemId(int $itemId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/{$itemId}"], $query));
    }
                
    /**
     * @description Updates a item. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the item. The ID must be unique.
     *      - *position* - integer
     *          - The position of the item
     *      - *itemType* - string
     *          - The type of the item. Because Set items are managed using a separate route,
this value is always Default.
     *      - *stockType* - integer
     *          - The stock type of the item. Possible values:
<ul><li>0 = Stocked item (default)</li>
    <li>1 = Production item</li>
    <li>2 = Colli</li>
    <li>3 = Special order item</li></ul>
     *      - *storeSpecial* - integer
     *          - Option to present items more prominently in the online store.
<ul><li>1 = Special offer</li><li>2 = New items</li><li>3 = Top items</li></ul>
     *      - *ownerId* - integer
     *          - The plentymarkets user that is assigned as owner of this item.
     *      - *manufacturerId* - integer
     *          - The ID of the manufacturer of the item
     *      - *producingCountryId* - integer
     *          - The ID of the country in which the item was manufactured.
     *      - *mainVariationId* - integer
     *          - The ID of the main variation of the item. The ID must be unique.
     *      - *revenueAccount* - integer
     *          - The revenue account the item is linked to.
An individual revenue account can be saved for each item in plentymarkets.
If this is not done, plentymarkets automatically determines a revenue account
based on the VAT rate.
     *      - *couponRestriction* - integer
     *          - Indicates if the item can be purchased using a promotional coupon.
<ul><li>0 = Permitted</li>
    <li>1 = Not permitted</li>
    <li>2 = Purchasable with coupon only</li></ul>
     *      - *condition* - integer
     *          - The condition of the item. Possible values:
<ul><li>0 = New</li><li>1 = Used</li>
    <li>2 = Boxed as new</li>
    <li>3 = New with label</li>
    <li>4 = Factory seconds</li></ul>
     *      - *conditionApi* - integer
     *          - The condition of the item that is transferred to markets via API.
<ul><li>0 = New</li>
    <li>1 = Used but as new</li>
    <li>2 = Used but very good</li>
    <li>3 = Used but good</li>
    <li>4 = Used but acceptable</li>
    <li>5 = Factory seconds</li></ul>
     *      - *createdAt* - string
     *          - Timestamp of the date and time the item was created.
     *      - *updatedAt* - string
     *          - Timestamp of the last date and time the item was updated.
     *      - *isSubscribable* - boolean
     *          - Flag that indicates if the item can be ordered as a subscription item.
If yes, the item can be ordered for delivery at regular intervals.
     *      - *isSerialNumber* - boolean
     *          - Flag that indicates if serial numbers are to be assigned to variations of this item
to uniquely identify every item sold. Serial numbers ensure traceability of an item
in case of errors or problems.
     *      - *isShippingPackage* - boolean
     *          - Flag that indicates if a shipping package is to be used for this item.
If yes and the variation's dimensions are entered in the <b>Settings</b> tab of a
variation, the correct shipping package is assigned automatically.
     *      - *amazonFbaPlatform* - integer
     *          - Indicates the platform used for Fulfilment by Amazon (FBA).
<ul><li>0 = Do not use</li>
    <li>1 = AMAZON EU (Europe)</li>
    <li>2 = AMAZON FE (Far East)</li>
    <li>3 = AMAZON NA (North America)</li></ul>
     *      - *isShippableByAmazon* - boolean
     *          - Flag that indicates if the item can be shipped with Amazon Multi-Channel.
Amazon Multi-Channel Fulfillment is a service for fulfilling orders from sales
channels other than Amazon platforms using inventory stored in the Amazon
fulfillment center.
     *      - *amazonProductType* - integer
     *          - The Amazon product type of the item. List of IDs:
https://www.plentymarkets.co.uk/manual/data-exchange/data-formats/item/
     *      - *amazonFedas* - string
     *          - The FEDAS product classification key of the item.
     *      - *ebayPresetId* - integer
     *          - The eBay preset ID. This plentymarkets ID must be specified to save values for
$ebayCategory, $ebayCategory2, $ebayStoreCategory and $ebayStoreCategory2.
     *      - *ebayCategory* - integer
     *          - The eBay category 1 of the item. This category is used when a new listing is created.
     *      - *ebayCategory2* - integer
     *          - The eBay category 2 of the item. This category is used when a new listing is created.
     *      - *ebayStoreCategory* - integer
     *          - The ID of the eBay store category 1 of the item.
This value is used for new listings.
     *      - *ebayStoreCategory2* - integer
     *          - The ID of the eBay store category 2 of the item.
This value is used for new listings.
     *      - *rakutenCategoryId* - integer
     *          - The ID of the Rakuten category of this item.
     *      - *flagOne* - integer
     *          - Flag 1 of the item. Flags can be used to organise and filter items.
Each item can be assigned up to two flags. Possible values: 1 to 31, 0 = no flag
     *      - *flagTwo* - integer
     *          - Flag 2 of the item. Flags can be used to organise and filter items.
Each item can be assigned up to two flags. Possible values: 1 to 11, 0 = no flag
     *      - *ageRestriction* - integer
     *          - The age customers must be to purchase the item.
Items with an age rating of 18+ must be linked to a shipping profile for which the
PostIdent option is activated.
<ul><li>0 = None available</li>
   <li>3 = Released for ages 3 and up</li>
   <li>6 = Ages 6 and up</li>
   <li>9 = Ages 9 and up</li>
   <li>12 = Ages 12 and up</li>
   <li>14 = Ages 14 and up</li>
   <li>16 = Ages 16 and up</li>
   <li>18 = Ages 18 and up</li>
   <li>50 = Not marked</li>
   <li>88 = Not required</li>
   <li>99 = Unknown</li></ul>
     *      - *feedback* - integer
     *          - The feedback, i.e. rating, that this item received.
Possible values are 1 to 5 or 1 to 10 depending on the maximum rating setting.
An initial feedback can be saved for items. The saved value will then be displayed as the
initial feedback. Every time new feedback is submitted, the average value will be
recalculated automatically.
     *      - *free1* - string
     *          - The content of the free text field 1. This can be displayed in the online store or on eBay.
     *      - *free2* - string
     *          - The content of the free text field 2. This can be displayed in the online store or on eBay.
     *      - *free3* - string
     *          - The content of the free text field 3. This can be displayed in the online store or on eBay.
     *      - *free4* - string
     *          - The content of the free text field 4. This can be displayed in the online store or on eBay.
     *      - *free5* - string
     *          - The content of the free text field 5. This can be displayed in the online store or on eBay.
     *      - *free6* - string
     *          - The content of the free text field 6. This can be displayed in the online store or on eBay.
     *      - *free7* - string
     *          - The content of the free text field 7. This can be displayed in the online store or on eBay.
     *      - *free8* - string
     *          - The content of the free text field 8. This can be displayed in the online store or on eBay.
     *      - *free9* - string
     *          - The content of the free text field 9. This can be displayed in the online store or on eBay.
     *      - *free10* - string
     *          - The content of the free text field 10. This can be displayed in the online store or on eBay.
     *      - *free11* - string
     *          - The content of the free text field 11. This can be displayed in the online store or on eBay.
     *      - *free12* - string
     *          - The content of the free text field 12. This can be displayed in the online store or on eBay.
     *      - *free13* - string
     *          - The content of the free text field 13. This can be displayed in the online store or on eBay.
     *      - *free14* - string
     *          - The content of the free text field 14. This can be displayed in the online store or on eBay.
     *      - *free15* - string
     *          - The content of the free text field 15. This can be displayed in the online store or on eBay.
     *      - *free16* - string
     *          - The content of the free text field 16. This can be displayed in the online store or on eBay.
     *      - *free17* - string
     *          - The content of the free text field 17. This can be displayed in the online store or on eBay.
     *      - *free18* - string
     *          - The content of the free text field 18. This can be displayed in the online store or on eBay.
     *      - *free19* - string
     *          - The content of the free text field 19. This can be displayed in the online store or on eBay.
     *      - *free20* - string
     *          - The content of the free text field 20. This can be displayed in the online store or on eBay.
     *      - *maximumOrderQuantity* - number
     *          - The maximum order quantity of an item permitted per order.
If a maximum order quantity is specified, no more than this quantity of any
combination of the variations of the item can be ordered.
Decimal values are possible to allow orders by weight or length.
Default value is 0. If value is 0, the maximum order quantity is unlimited.
     *      - *customsTariffNumber* - string
     *          - Deprecated: The customs tariff number of the item;
usually a 11 digit code number based on the Harmonised System
     */
    public function updateItemByItemId(int $itemId, array $data): array
    {
        return $this->api("/rest/items/{$itemId}", 'PUT', $data);
    }
                    
    /**
     * @description Copies an item and its variations. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId 
     */
    public function createItemsCopyByItemId(int $itemId): void
    {
        $this->api("/rest/items/{$itemId}/copy", 'POST');
    }
                    
    /**
     * @description Fills item to es. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId 
     */
    public function createItemsFillByItemId(int $itemId): void
    {
        $this->api("/rest/items/{$itemId}/fill", 'POST');
    }
                    
    /**
     * @description Deactivates all shipping profiles of an item. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId 
     */
    public function deleteItemsItemShippingProfileByItemId(int $itemId): void
    {
        $this->api("/rest/items/{$itemId}/item_shipping_profiles", 'DELETE');
    }
                
    /**
     * @description Lists the shipping profiles linked to an item. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId 
     * @return array
     */
    public function getItemsItemShippingProfilesByItemId(int $itemId): array
    {
        return $this->api("/rest/items/{$itemId}/item_shipping_profiles");
    }
                
    /**
     * @description Links a shipping profile to the item. The ID of the item and the ID of the shipping profile must be specified.
     * @tag Item
     * @param int $itemId 
     * @return array
     *      - *id* - integer
     *          - The unique ID of the link between item and shipping profile
     *      - *itemId* - integer
     *          - The unique ID of the item
     *      - *profileId* - integer
     *          - The unique ID of the shipping profile
     */
    public function createItemsItemShippingProfileByItemId(int $itemId): array
    {
        return $this->api("/rest/items/{$itemId}/item_shipping_profiles", 'POST');
    }
                    
    /**
     * @description Unlinks a shipping profile from the item. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId The unique ID of the item
     * @param int $id The unique ID of the link between item and shipping profile
     */
    public function deleteItemsItemShippingProfileByItemIdId(int $itemId, int $id): void
    {
        $this->api("/rest/items/{$itemId}/item_shipping_profiles/{$id}", 'DELETE');
    }
                
    /**
     * @description Lists all variations of an item. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation information in the results. The following parameters are available: <ul><li>properties</b> = The properties linked to the variation</li><li>variationProperties</b> = The properties linked to the variation</li><li>variationBarcodes</b> = The barcode linked to the variation and the saved code</li><li>variationBundleComponents</b> = The bundle components of the variation and their quantities</li><li>variationComponentBundles</b> = The bundles that this variation is a component of</li><li>variationSalesPrices</b> = The sales prices linked to the variation and the saved price</li><li>marketItemNumbers</b> = The market ident number of the variation</li><li>variationCategories</b> = The categories linked to the variation</li><li>variationClients</b> = The clients (stores) for which the variation is activated</li><li>variationMarkets</b> = The markets for which the variation is activated </li><li>variationDefaultCategory</b> = The default category of the variation</li><li>variationSuppliers</b> = The supplier data associated with the variation</li><li>variationWarehouses</b> = The warehouse data associated with the variation</li><li>images</b> = The images linked to the variation</li><li>itemImages</b> = The images linked to the item</li><li>variationAttributeValues</b> = The attribute values of the variation</li><li>variationSkus</b> = The SKU data associated with the variation</li><li>variationAdditionalSkus</b> = The additional SKU data associated with the variation</li><li>unit</b> = The unit assigned to the variation</li><li>parent</b> = The main variation of the variation. Value is null if this variation is the item's main variation.</li><li>item</b> = The item of the variation</li><li>stock</b> = The stock data of the variation</li></ul> For example, specifying the parameters variationCategories and variationDefaultCategory will include the default category and all other categories the variations are linked to. More than one parameter should be separated by commas.
     *      - *lang* - string - optional
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#countries' target='_blank'>language</a> of the variation information.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of variations to be listed per page must be specified.
     *      - *isMain* - boolean - optional
     *          - Filter restricts the list of results to variations that are main variations.
     *      - *isActive* - boolean - optional
     *          - Filter restricts the list of results to variations that are active.
     *      - *barcode* - string - optional
     *          - Filter restricts the list of results to variations with the specified barcode. A barcode must be specified.
     *      - *numberExact* - string - optional
     *          - Filter restricts the list of results to the variation with the variation number specified.
     *      - *numberFuzzy* - string - optional
     *          - Filter restricts the list of results to variations with numbers that contain the variation number specified (SQL LIKE operator). For example, if variations with variation numbers 1 to 400 exist in the system, filtering by 12 will list variation numbers 12, 112, 120-129, 212 and 312.
     *      - *isBundle* - boolean - optional
     *          - Filter restricts the list of results to variations to which variations were added to create a bundle.
     *      - *supplierNumber* - string - optional
     *          - Filter restricts the list of results to variations with the specified supplier number. A supplier number must be specified.
     *      - *manufacturerId* - int - optional
     *          - Filter restricts the list of results to variations with the specified manufacturer ID.
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to variations updated during the specified period. The end date (to) is optional. If no end date is specified, variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?updatedBetween=1451606400,1456790400 will list variations updated between 2016-01-01 and 2016-03-01. .../variations?updatedBetween=1451606400 will list variations updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *createdBetween* - string - optional
     *          - Filter restricts the list of results to variations created during the specified period. The end date (to) is optional. If no end date is specified, variations created between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?createdBetween=1451606400,1456790400 will list variations created between 2016-01-01 and 2016-03-01. .../variations?createdBetween=1451606400 will list variations created since 2016-01-01. The PHP function strtotime is also supported.
     *      - *relatedUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to those variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Variation
     */
    public function eachItemsVariationsByItemId(int $itemId, array $query = []): Iterator
    {
        return $this->eachInternal('getItemsVariationsByItemId', func_get_args());
    }
        
    /**
     * @description Lists all variations of an item. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation information in the results. The following parameters are available: <ul><li>properties</b> = The properties linked to the variation</li><li>variationProperties</b> = The properties linked to the variation</li><li>variationBarcodes</b> = The barcode linked to the variation and the saved code</li><li>variationBundleComponents</b> = The bundle components of the variation and their quantities</li><li>variationComponentBundles</b> = The bundles that this variation is a component of</li><li>variationSalesPrices</b> = The sales prices linked to the variation and the saved price</li><li>marketItemNumbers</b> = The market ident number of the variation</li><li>variationCategories</b> = The categories linked to the variation</li><li>variationClients</b> = The clients (stores) for which the variation is activated</li><li>variationMarkets</b> = The markets for which the variation is activated </li><li>variationDefaultCategory</b> = The default category of the variation</li><li>variationSuppliers</b> = The supplier data associated with the variation</li><li>variationWarehouses</b> = The warehouse data associated with the variation</li><li>images</b> = The images linked to the variation</li><li>itemImages</b> = The images linked to the item</li><li>variationAttributeValues</b> = The attribute values of the variation</li><li>variationSkus</b> = The SKU data associated with the variation</li><li>variationAdditionalSkus</b> = The additional SKU data associated with the variation</li><li>unit</b> = The unit assigned to the variation</li><li>parent</b> = The main variation of the variation. Value is null if this variation is the item's main variation.</li><li>item</b> = The item of the variation</li><li>stock</b> = The stock data of the variation</li></ul> For example, specifying the parameters variationCategories and variationDefaultCategory will include the default category and all other categories the variations are linked to. More than one parameter should be separated by commas.
     *      - *lang* - string - optional
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#countries' target='_blank'>language</a> of the variation information.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of variations to be listed per page must be specified.
     *      - *isMain* - boolean - optional
     *          - Filter restricts the list of results to variations that are main variations.
     *      - *isActive* - boolean - optional
     *          - Filter restricts the list of results to variations that are active.
     *      - *barcode* - string - optional
     *          - Filter restricts the list of results to variations with the specified barcode. A barcode must be specified.
     *      - *numberExact* - string - optional
     *          - Filter restricts the list of results to the variation with the variation number specified.
     *      - *numberFuzzy* - string - optional
     *          - Filter restricts the list of results to variations with numbers that contain the variation number specified (SQL LIKE operator). For example, if variations with variation numbers 1 to 400 exist in the system, filtering by 12 will list variation numbers 12, 112, 120-129, 212 and 312.
     *      - *isBundle* - boolean - optional
     *          - Filter restricts the list of results to variations to which variations were added to create a bundle.
     *      - *supplierNumber* - string - optional
     *          - Filter restricts the list of results to variations with the specified supplier number. A supplier number must be specified.
     *      - *manufacturerId* - int - optional
     *          - Filter restricts the list of results to variations with the specified manufacturer ID.
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to variations updated during the specified period. The end date (to) is optional. If no end date is specified, variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?updatedBetween=1451606400,1456790400 will list variations updated between 2016-01-01 and 2016-03-01. .../variations?updatedBetween=1451606400 will list variations updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *createdBetween* - string - optional
     *          - Filter restricts the list of results to variations created during the specified period. The end date (to) is optional. If no end date is specified, variations created between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?createdBetween=1451606400,1456790400 will list variations created between 2016-01-01 and 2016-03-01. .../variations?createdBetween=1451606400 will list variations created since 2016-01-01. The PHP function strtotime is also supported.
     *      - *relatedUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to those variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Variation
     */
    public function batchItemsVariationsByItemId(int $itemId, array $query = []): Iterator
    {
        return $this->batchInternal('getItemsVariationsByItemId', func_get_args());
    }
    
    /**
     * @description Lists all variations of an item. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation information in the results. The following parameters are available: <ul><li>properties</b> = The properties linked to the variation</li><li>variationProperties</b> = The properties linked to the variation</li><li>variationBarcodes</b> = The barcode linked to the variation and the saved code</li><li>variationBundleComponents</b> = The bundle components of the variation and their quantities</li><li>variationComponentBundles</b> = The bundles that this variation is a component of</li><li>variationSalesPrices</b> = The sales prices linked to the variation and the saved price</li><li>marketItemNumbers</b> = The market ident number of the variation</li><li>variationCategories</b> = The categories linked to the variation</li><li>variationClients</b> = The clients (stores) for which the variation is activated</li><li>variationMarkets</b> = The markets for which the variation is activated </li><li>variationDefaultCategory</b> = The default category of the variation</li><li>variationSuppliers</b> = The supplier data associated with the variation</li><li>variationWarehouses</b> = The warehouse data associated with the variation</li><li>images</b> = The images linked to the variation</li><li>itemImages</b> = The images linked to the item</li><li>variationAttributeValues</b> = The attribute values of the variation</li><li>variationSkus</b> = The SKU data associated with the variation</li><li>variationAdditionalSkus</b> = The additional SKU data associated with the variation</li><li>unit</b> = The unit assigned to the variation</li><li>parent</b> = The main variation of the variation. Value is null if this variation is the item's main variation.</li><li>item</b> = The item of the variation</li><li>stock</b> = The stock data of the variation</li></ul> For example, specifying the parameters variationCategories and variationDefaultCategory will include the default category and all other categories the variations are linked to. More than one parameter should be separated by commas.
     *      - *lang* - string - optional
     *          - The <a href='https://developers.plentymarkets.com/rest-doc/introduction#countries' target='_blank'>language</a> of the variation information.
     *      - *page* - int - optional
     *          - Limits the results to a specific page. The page number must be specified.
     *      - *itemsPerPage* - int - optional
     *          - Limits the number of results listed per page to a specific number. The number of variations to be listed per page must be specified.
     *      - *isMain* - boolean - optional
     *          - Filter restricts the list of results to variations that are main variations.
     *      - *isActive* - boolean - optional
     *          - Filter restricts the list of results to variations that are active.
     *      - *barcode* - string - optional
     *          - Filter restricts the list of results to variations with the specified barcode. A barcode must be specified.
     *      - *numberExact* - string - optional
     *          - Filter restricts the list of results to the variation with the variation number specified.
     *      - *numberFuzzy* - string - optional
     *          - Filter restricts the list of results to variations with numbers that contain the variation number specified (SQL LIKE operator). For example, if variations with variation numbers 1 to 400 exist in the system, filtering by 12 will list variation numbers 12, 112, 120-129, 212 and 312.
     *      - *isBundle* - boolean - optional
     *          - Filter restricts the list of results to variations to which variations were added to create a bundle.
     *      - *supplierNumber* - string - optional
     *          - Filter restricts the list of results to variations with the specified supplier number. A supplier number must be specified.
     *      - *manufacturerId* - int - optional
     *          - Filter restricts the list of results to variations with the specified manufacturer ID.
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to variations updated during the specified period. The end date (to) is optional. If no end date is specified, variations updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?updatedBetween=1451606400,1456790400 will list variations updated between 2016-01-01 and 2016-03-01. .../variations?updatedBetween=1451606400 will list variations updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *createdBetween* - string - optional
     *          - Filter restricts the list of results to variations created during the specified period. The end date (to) is optional. If no end date is specified, variations created between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../variations?createdBetween=1451606400,1456790400 will list variations created between 2016-01-01 and 2016-03-01. .../variations?createdBetween=1451606400 will list variations created since 2016-01-01. The PHP function strtotime is also supported.
     *      - *relatedUpdatedBetween* - string - optional
     *          - Filter restricts the list of results to those variations for which related information was updated during the specified period. Related information is defined as information linked to the variation, i.e. barcodes, categories, images, markets, clients (stores), prices, suppliers, warehouses and the default category. See variationUpdatedBetween for supported formats.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Variation
     */
    public function getItemsVariationsByItemId(int $itemId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/{$itemId}/variations"], $query));
    }
                
    /**
     * @description Create a variation. The ID of the item must be specified.
     * @tag Item
     * @param int $itemId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The id of the variation.
     *      - *elasticSearchSource* - array
     */
    public function createItemsVariationByItemId(int $itemId, array $data): array
    {
        return $this->api("/rest/items/{$itemId}/variations", 'POST', $data);
    }
                    
    /**
     * @description Delete a variation. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $itemId 
     * @param int $variationId 
     */
    public function deleteItemsVariationByItemIdVariationId(int $itemId, int $variationId): void
    {
        $this->api("/rest/items/{$itemId}/variations/{$variationId}", 'DELETE');
    }
                
    /**
     * @description Get a variation. The ID of the item and the ID of the variation must be specified.
     * @tag Item
     * @param int $itemId 
     * @param int $variationId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified variation information in the results. The following parameters are available: <ul><li>properties</b> = The properties linked to the variation</li><li>variationProperties</b> = The properties linked to the variation</li><li>variationBarcodes</b> = The barcode linked to the variation and the saved code</li><li>variationBundleComponents</b> = The bundle components of the variation and their quantities</li><li>variationComponentBundles</b> = The bundles that this variation is a component of</li><li>variationSalesPrices</b> = The sales prices linked to the variation and the saved price</li><li>marketItemNumbers</b> = The market ident number of the variation</li><li>variationCategories</b> = The categories linked to the variation</li><li>variationClients</b> = The clients (stores) for which the variation is activated</li><li>variationMarkets</b> = The markets for which the variation is activated </li><li>variationDefaultCategory</b> = The default category of the variation</li><li>variationSuppliers</b> = The supplier data associated with the variation</li><li>variationWarehouses</b> = The warehouse data associated with the variation</li><li>images</b> = The images linked to the variation</li><li>itemImages</b> = The images linked to the item</li><li>variationAttributeValues</b> = The attribute values of the variation</li><li>variationSkus</b> = The SKU data associated with the variation</li><li>variationAdditionalSkus</b> = The additional SKU data associated with the variation</li><li>unit</b> = The unit assigned to the variation</li><li>parent</b> = The main variation of the variation. Value is null if this variation is the item's main variation.</li><li>item</b> = The item of the variation</li><li>stock</b> = The stock data of the variation</li></ul> For example, specifying the parameters variationCategories and variationDefaultCategory will include the default category and all other categories the variations are linked to. More than one parameter should be separated by commas.
     * @return array
     *      - *id* - integer
     *          - The id of the variation.
     *      - *elasticSearchSource* - array
     */
    public function getItemsVariationByItemIdVariationId(int $itemId, int $variationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/items/{$itemId}/variations/{$variationId}"], $query));
    }
                
    /**
     * @description Updates a variation. The ID of the variation must be specified.
     * @tag Item
     * @param int $itemId 
     * @param int $variationId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The id of the variation.
     *      - *elasticSearchSource* - array
     */
    public function updateItemsVariationByItemIdVariationId(int $itemId, int $variationId, array $data): array
    {
        return $this->api("/rest/items/{$itemId}/variations/{$variationId}", 'PUT', $data);
    }
                    
    /**
     * @description Fills a variation. The ID of the variation must be specified.
     * @tag Item
     * @param int $itemId 
     * @param int $variationId 
     */
    public function createItemsVariationsFillByItemIdVariationId(int $itemId, int $variationId): void
    {
        $this->api("/rest/items/{$itemId}/variations/{$variationId}/fill", 'POST');
    }
                    
    /**
     * @description Gets the texts saved for a specific property of the type Text in all available languages. The ID of the property must be specified.
     * @tag Item
     * @param int $itemId 
     * @param int $variationId 
     * @param int $propertyId 
     * @return array
     */
    public function getItemsVariationsVariationPropertiesTextsByItemIdVariationIdPropertyId(int $itemId, int $variationId, int $propertyId): array
    {
        return $this->api("/rest/items/{$itemId}/variations/{$variationId}/variation_properties/{$propertyId}/texts");
    }
                
    /**
     * @description Saves text for a specific property of the type Text in the specified language. The ID of the property and the language must be specified.
     * @tag Item
     * @param int $itemId 
     * @param int $variationId 
     * @param int $propertyId 
     * @param array $data 
     * @return array
     *      - *valueId* - integer
     *          - The unique ID of the link between the variation and the property
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#languages" target="_blank">language</a> of the property value text
     *      - *value* - string
     *          - The text saved for the property of the type Text
     */
    public function createItemsVariationsVariationPropertiesTextByItemIdVariationIdPropertyId(int $itemId, int $variationId, int $propertyId, array $data): array
    {
        return $this->api("/rest/items/{$itemId}/variations/{$variationId}/variation_properties/{$propertyId}/texts", 'POST', $data);
    }
                    
    /**
     * @description Deletes the text saved for a specific property of the type Text in the specified language. The ID of the property  and the language must be specified.
     * @tag Item
     * @param int $itemId 
     * @param int $variationId 
     * @param int $propertyId 
     * @param int $lang 
     */
    public function deleteItemsVariationsVariationPropertiesTextByItemIdVariationIdPropertyIdLang(int $itemId, int $variationId, int $propertyId, int $lang): void
    {
        $this->api("/rest/items/{$itemId}/variations/{$variationId}/variation_properties/{$propertyId}/texts/{$lang}", 'DELETE');
    }
                
    /**
     * @description Gets the value text saved for a specific property of the type Text in the specified language. The ID of the property  and the language must be specified.
     * @tag Item
     * @param int $itemId 
     * @param int $variationId 
     * @param int $propertyId 
     * @param int $lang 
     * @return array
     *      - *valueId* - integer
     *          - The unique ID of the link between the variation and the property
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#languages" target="_blank">language</a> of the property value text
     *      - *value* - string
     *          - The text saved for the property of the type Text
     */
    public function getItemsVariationsVariationPropertiesTextByItemIdVariationIdPropertyIdLang(int $itemId, int $variationId, int $propertyId, int $lang): array
    {
        return $this->api("/rest/items/{$itemId}/variations/{$variationId}/variation_properties/{$propertyId}/texts/{$lang}");
    }
                
    /**
     * @description Updates the text saved for a specific property of the type Text in the specified language. The ID of the property and the language must be specified.
     * @tag Item
     * @param int $itemId 
     * @param int $variationId 
     * @param int $propertyId 
     * @param int $lang 
     * @param array $data 
     * @return array
     *      - *valueId* - integer
     *          - The unique ID of the link between the variation and the property
     *      - *lang* - string
     *          - The <a href="https://developers.plentymarkets.com/rest-doc/introduction#languages" target="_blank">language</a> of the property value text
     *      - *value* - string
     *          - The text saved for the property of the type Text
     */
    public function updateItemsVariationsVariationPropertiesTextByItemIdVariationIdPropertyIdLang(int $itemId, int $variationId, int $propertyId, int $lang, array $data): array
    {
        return $this->api("/rest/items/{$itemId}/variations/{$variationId}/variation_properties/{$propertyId}/texts/{$lang}", 'PUT', $data);
    }
    
}
