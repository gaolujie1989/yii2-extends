<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Log extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

            
    /**
     * @description Searches the delete log.
     * @tag Log
     * @param array $query
     *      - *referenceType* - int - optional
     *          - The type of deleted record
     *      - *userId* - int - optional
     *          - The ID of the user who deleted the record
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to deleteLogs updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../delete_log?updatedBetween=1451606400,1456790400 will list deleteLogs updated between 2016-01-01 and 2016-03-01. .../delete_log?updatedBetween=1451606400 will list deleteLogs updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of DeleteLog
     */
    public function eachDeleteLog(array $query = []): Iterator
    {
        return $this->eachInternal('getDeleteLog', func_get_args());
    }
        
    /**
     * @description Searches the delete log.
     * @tag Log
     * @param array $query
     *      - *referenceType* - int - optional
     *          - The type of deleted record
     *      - *userId* - int - optional
     *          - The ID of the user who deleted the record
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to deleteLogs updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../delete_log?updatedBetween=1451606400,1456790400 will list deleteLogs updated between 2016-01-01 and 2016-03-01. .../delete_log?updatedBetween=1451606400 will list deleteLogs updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of DeleteLog
     */
    public function batchDeleteLog(array $query = []): Iterator
    {
        return $this->batchInternal('getDeleteLog', func_get_args());
    }
    
    /**
     * @description Searches the delete log.
     * @tag Log
     * @param array $query
     *      - *referenceType* - int - optional
     *          - The type of deleted record
     *      - *userId* - int - optional
     *          - The ID of the user who deleted the record
     *      - *updatedBetween* - string - optional
     *          - Filter restricts the list of results to deleteLogs updated during the specified period. The end date (to) is optional. If no end date is specified, items updated between the start date (from) and the present will be listed. The dates can be specified as unix timestamps or in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../delete_log?updatedBetween=1451606400,1456790400 will list deleteLogs updated between 2016-01-01 and 2016-03-01. .../delete_log?updatedBetween=1451606400 will list deleteLogs updated since 2016-01-01. The PHP function strtotime is also supported.
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of DeleteLog
     */
    public function getDeleteLog(array $query = []): array
    {
        return $this->api(array_merge(["/rest/delete_log"], $query));
    }
                
    /**
     * @description Perform a validated search operation.
     * @tag Log
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *integration* - array - optional
     *          - Filter that restricts the search result to log
     *   entries with custom integration key(s).
     *      - *identifier* - array - optional
     *          - Filter that restricts the search result to log
     *   entries with custom identifier(s).
     *      - *referenceType* - string - optional
     *          - Filter that restricts the search result to log
     *   entries with custom reference types.
     *      - *referenceValue* - string - optional
     *          - Filter that restricts the search result to log
     *   entries with custom reference values.
     *      - *additionalInfo* - string - optional
     *          - Filter that restricts the search result to log
     *   entries that match an additional info.
     *      - *code* - int - optional
     *          - Filter that restricts the search result to log
     *   entries with a custom code.
     *      - *level* - int - optional
     *          - Filter that restricts the search result to log
     *   entries of a custom level. Available values are: 'debug', 'info', 'notice', 'warning', 'error', 'critical',
     *   'alert', 'emergency'.
     *      - *fromDate* - string - optional
     *          - Filter that restricts the search result to log
     *   entries created after this date. The date has to be in the MySQL Datetime format, e.g.
     *   '2016-10-24 13:33:23'.
     *      - *toDate* - string - optional
     *          - Filter that restricts the search result to log
     *   entries created before this date. The date has to be in the MySQL Datetime format, e.g.
     *   '2016-10-24 13:33:23'.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded.
     *   Valid instances are 'additionalInfo'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Log
     *      - *filters* - 
     */
    public function eachLogs(array $query = []): Iterator
    {
        return $this->eachInternal('getLogs', func_get_args());
    }
        
    /**
     * @description Perform a validated search operation.
     * @tag Log
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *integration* - array - optional
     *          - Filter that restricts the search result to log
     *   entries with custom integration key(s).
     *      - *identifier* - array - optional
     *          - Filter that restricts the search result to log
     *   entries with custom identifier(s).
     *      - *referenceType* - string - optional
     *          - Filter that restricts the search result to log
     *   entries with custom reference types.
     *      - *referenceValue* - string - optional
     *          - Filter that restricts the search result to log
     *   entries with custom reference values.
     *      - *additionalInfo* - string - optional
     *          - Filter that restricts the search result to log
     *   entries that match an additional info.
     *      - *code* - int - optional
     *          - Filter that restricts the search result to log
     *   entries with a custom code.
     *      - *level* - int - optional
     *          - Filter that restricts the search result to log
     *   entries of a custom level. Available values are: 'debug', 'info', 'notice', 'warning', 'error', 'critical',
     *   'alert', 'emergency'.
     *      - *fromDate* - string - optional
     *          - Filter that restricts the search result to log
     *   entries created after this date. The date has to be in the MySQL Datetime format, e.g.
     *   '2016-10-24 13:33:23'.
     *      - *toDate* - string - optional
     *          - Filter that restricts the search result to log
     *   entries created before this date. The date has to be in the MySQL Datetime format, e.g.
     *   '2016-10-24 13:33:23'.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded.
     *   Valid instances are 'additionalInfo'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Log
     *      - *filters* - 
     */
    public function batchLogs(array $query = []): Iterator
    {
        return $this->batchInternal('getLogs', func_get_args());
    }
    
    /**
     * @description Perform a validated search operation.
     * @tag Log
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *integration* - array - optional
     *          - Filter that restricts the search result to log
     *   entries with custom integration key(s).
     *      - *identifier* - array - optional
     *          - Filter that restricts the search result to log
     *   entries with custom identifier(s).
     *      - *referenceType* - string - optional
     *          - Filter that restricts the search result to log
     *   entries with custom reference types.
     *      - *referenceValue* - string - optional
     *          - Filter that restricts the search result to log
     *   entries with custom reference values.
     *      - *additionalInfo* - string - optional
     *          - Filter that restricts the search result to log
     *   entries that match an additional info.
     *      - *code* - int - optional
     *          - Filter that restricts the search result to log
     *   entries with a custom code.
     *      - *level* - int - optional
     *          - Filter that restricts the search result to log
     *   entries of a custom level. Available values are: 'debug', 'info', 'notice', 'warning', 'error', 'critical',
     *   'alert', 'emergency'.
     *      - *fromDate* - string - optional
     *          - Filter that restricts the search result to log
     *   entries created after this date. The date has to be in the MySQL Datetime format, e.g.
     *   '2016-10-24 13:33:23'.
     *      - *toDate* - string - optional
     *          - Filter that restricts the search result to log
     *   entries created before this date. The date has to be in the MySQL Datetime format, e.g.
     *   '2016-10-24 13:33:23'.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded.
     *   Valid instances are 'additionalInfo'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Log
     *      - *filters* - 
     */
    public function getLogs(array $query = []): array
    {
        return $this->api(array_merge(["/rest/logs"], $query));
    }
                
    /**
     * @description Create a log entry.
     * @tag Log
     * @param array $data 
     */
    public function createLog(array $data): void
    {
        $this->api("/rest/logs", 'POST', $data);
    }
                    
    /**
     * @description Get the log integration keys.
     * @tag Log

     */
    public function getLogsIntegrationKeys(): void
    {
        $this->api("/rest/logs/integration_keys");
    }
                    
    /**
     * @description Get all registered reference types.
     * @tag Log

     */
    public function getLogsReferenceTypes(): void
    {
        $this->api("/rest/logs/reference_types");
    }
                    
    /**
     * @description Shows a configuration.
     * @tag Log

     */
    public function getLogsSettings(): void
    {
        $this->api("/rest/logs/settings");
    }
                
    /**
     * @description Saves a configuration
     * @tag Log

     */
    public function createLogsSetting(): void
    {
        $this->api("/rest/logs/settings", 'POST');
    }
                    
    /**
     * @description Get the log entry by ID.
     * @tag Log
     * @param int $id 
     * @return array
     *      - *id* - string
     *          - The ID of the log entry
     *      - *createdAt* - string
     *          - The date when the log entry was created
     *      - *integration* - string
     *          - The integration key used for the log entry. Used as a first level allocation.
     *      - *identifier* - string
     *          - The identifier used for the log entry. Used as a second level allocation.
     *      - *code* - string
     *          - The code for this current log entry. For log entries with level "debug", "info", "notice", "warning" and "report" this needs to have an translation in order to be stored.
     *      - *referenceType* - string
     *          - Deprecated field, see the <code>references</code> field instead.
     *      - *referenceValue* - string
     *          - Deprecated field, see the <code>references</code> field instead.
     *      - *level* - string
     *          - The level this current log entry belongs to. Notice! When storing log entries with level "report" the entries will actually be stored as level "info". The difference between "report" and "info" is that log entries with level "report" do not need prior activation.
     *      - *additionalInfo* - string
     *          - Additional information that need to also be stored. Can be an int, string or object.
     *      - *callerFunction* - string
     *      - *callerLine* - integer
     *      - *references* - array
     *          - All the reference types and values correlated with this log entry.
     */
    public function getLogById(int $id): array
    {
        return $this->api("/rest/logs/{$id}");
    }
    
}
