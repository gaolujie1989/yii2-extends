<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Market extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

            
    /**
     * @description Lists credentials by filter options.
     * @tag Market
     * @param array $query
     *      - *page* - int - required
     *          - The page of results to search for
     *      - *itemsPerPage* - int - required
     *          - The items per page to search for
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Credentials
     */
    public function eachMarketsCredentials(array $query): Iterator
    {
        return $this->eachInternal('getMarketsCredentials', func_get_args());
    }
        
    /**
     * @description Lists credentials by filter options.
     * @tag Market
     * @param array $query
     *      - *page* - int - required
     *          - The page of results to search for
     *      - *itemsPerPage* - int - required
     *          - The items per page to search for
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Credentials
     */
    public function batchMarketsCredentials(array $query): Iterator
    {
        return $this->batchInternal('getMarketsCredentials', func_get_args());
    }
    
    /**
     * @description Lists credentials by filter options.
     * @tag Market
     * @param array $query
     *      - *page* - int - required
     *          - The page of results to search for
     *      - *itemsPerPage* - int - required
     *          - The items per page to search for
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Credentials
     */
    public function getMarketsCredentials(array $query): array
    {
        return $this->api(array_merge(["/rest/markets/credentials"], $query));
    }
                
    /**
     * @description Create a new credential with the given data.
     * @tag Market
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the credentials.
     *      - *environment* - string
     *          - The environment for the credentials. Possible values: sandbox, production
     *      - *status* - string
     *          - The status of the credentials. Possible values: active, inactive, pending
     *      - *data* - array
     *          - The data of the credentials.
     *      - *market* - string
     *          - The market for the current credentials.
     *      - *createdAt* - string
     *          - The date that the credentials was created.
     *      - *updatedAt* - string
     *          - The date that the credentials was updated last.
     */
    public function createMarketsCredential(array $data): array
    {
        return $this->api("/rest/markets/credentials", 'POST', $data);
    }
                    
    /**
     * @description Lists all credentials - no pagination - usual filters: market and data['authType']
     * @tag Market
     * @return array
     */
    public function getMarketsCredentialsAll(): array
    {
        return $this->api("/rest/markets/credentials/all");
    }
                    
    /**
     * @description Deletes a credential by given ID.
     * @tag Market
     * @param int $credentialsId 
     * @param array $query
     *      - *id* - int - required
     *          - The ID of the credentials to be deleted.
     */
    public function deleteMarketsCredentialByCredentialsId(int $credentialsId, array $query)
    {
        return $this->api(array_merge(["/rest/markets/credentials/{$credentialsId}"], $query), 'DELETE');
    }
                
    /**
     * @description Gets a credential by given ID.
     * @tag Market
     * @param int $credentialsId 
     * @param array $query
     *      - *id* - int - required
     *          - The ID of the credentials to be found.
     * @return array
     *      - *id* - integer
     *          - The ID of the credentials.
     *      - *environment* - string
     *          - The environment for the credentials. Possible values: sandbox, production
     *      - *status* - string
     *          - The status of the credentials. Possible values: active, inactive, pending
     *      - *data* - array
     *          - The data of the credentials.
     *      - *market* - string
     *          - The market for the current credentials.
     *      - *createdAt* - string
     *          - The date that the credentials was created.
     *      - *updatedAt* - string
     *          - The date that the credentials was updated last.
     */
    public function getMarketsCredentialByCredentialsId(int $credentialsId, array $query): array
    {
        return $this->api(array_merge(["/rest/markets/credentials/{$credentialsId}"], $query));
    }
                
    /**
     * @description Update a credential with the given data and ID.
     * @tag Market
     * @param int $credentialsId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the credentials.
     *      - *environment* - string
     *          - The environment for the credentials. Possible values: sandbox, production
     *      - *status* - string
     *          - The status of the credentials. Possible values: active, inactive, pending
     *      - *data* - array
     *          - The data of the credentials.
     *      - *market* - string
     *          - The market for the current credentials.
     *      - *createdAt* - string
     *          - The date that the credentials was created.
     *      - *updatedAt* - string
     *          - The date that the credentials was updated last.
     */
    public function updateMarketsCredentialByCredentialsId(int $credentialsId, array $data): array
    {
        return $this->api("/rest/markets/credentials/{$credentialsId}", 'PUT', $data);
    }
                    
    /**
     * @description Generates the eBay login URL.
     * @tag Market

     */
    public function getMarketsEbayAuthLogin()
    {
        return $this->api("/rest/markets/ebay/auth/login");
    }
                    
    /**
     * @description Refreshes the expired eBay access token.
     * @tag Market

     */
    public function updateMarketsEbayAuthRefreshToken()
    {
        return $this->api("/rest/markets/ebay/auth/refresh-token", 'PUT');
    }
                    
    /**
     * @description Lists categories. By passing category ID as filter, only subcategories of that category will be returned. The marketplace ID filter is required.
     * @tag Market
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - Filter that restricts the search result to categories that belong to the specified marketplace ID.
     *      - *categoryId* - string - optional
     *          - Filter that restricts the search result to categories that belong to the specified category ID.
     * @return array
     */
    public function getMarketsEbayCategories(array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/categories"], $query));
    }
                    
    /**
     * @description Get category for given ID.
     * @tag Market
     * @param int $id The ID of the category to be found.
     */
    public function getMarketsEbayCategoryById(int $id)
    {
        return $this->api("/rest/markets/ebay/categories/{$id}");
    }
                    
    /**
     * @description Create a fulfillment policy.
     * @tag Market
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     * @return array
     *      - *fulfillmentPolicyId* - string
     *          - The ID of the fulfillment policy.
     *      - *description* - string
     *          - An optional seller-defined description of the fulfillment policy.
     *      - *freightShipping* - boolean
     *          - Set this value to true to indicate the seller offers freight shipping.
     *      - *globalShipping* - boolean
     *          - If this value is set to true, it indicates the seller has opted-in to the eBay Global Shipping Program and that they use that service for thier internation shipments.
     *      - *localPickup* - boolean
     *          - If this value is set to true, it indicates the seller offers local pickup of their items.
     *      - *marketplaceId* - string
     *          - The ID of the eBay marketplace to which this fulfillment policy applies. If this value is not specified, value defaults to the seller's eBay registration site.
     *      - *name* - string
     *          - A user-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace.
     *      - *pickupDropOff* - boolean
     *          - If this value is set to true, it indicates the seller offers the "Click and Collect" feature.
     */
    public function createMarketsEbayFulfillmentPolicy(array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/fulfillment_policies"], $query), 'POST');
    }
                    
    /**
     * @description Delete fulfillment policy by given ID.
     * @tag Market
     * @param int $id 
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     */
    public function deleteMarketsEbayFulfillmentPolicyById(int $id, array $query)
    {
        return $this->api(array_merge(["/rest/markets/ebay/fulfillment_policies/{$id}"], $query), 'DELETE');
    }
                
    /**
     * @description Get fulfillment policy for given ID.
     * @tag Market
     * @param int $id 
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     * @return array
     *      - *fulfillmentPolicyId* - string
     *          - The ID of the fulfillment policy.
     *      - *description* - string
     *          - An optional seller-defined description of the fulfillment policy.
     *      - *freightShipping* - boolean
     *          - Set this value to true to indicate the seller offers freight shipping.
     *      - *globalShipping* - boolean
     *          - If this value is set to true, it indicates the seller has opted-in to the eBay Global Shipping Program and that they use that service for thier internation shipments.
     *      - *localPickup* - boolean
     *          - If this value is set to true, it indicates the seller offers local pickup of their items.
     *      - *marketplaceId* - string
     *          - The ID of the eBay marketplace to which this fulfillment policy applies. If this value is not specified, value defaults to the seller's eBay registration site.
     *      - *name* - string
     *          - A user-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace.
     *      - *pickupDropOff* - boolean
     *          - If this value is set to true, it indicates the seller offers the "Click and Collect" feature.
     */
    public function getMarketsEbayFulfillmentPolicyById(int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/fulfillment_policies/{$id}"], $query));
    }
                
    /**
     * @description Update a fulfillment policy.
     * @tag Market
     * @param int $id 
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     * @return array
     *      - *fulfillmentPolicyId* - string
     *          - The ID of the fulfillment policy.
     *      - *description* - string
     *          - An optional seller-defined description of the fulfillment policy.
     *      - *freightShipping* - boolean
     *          - Set this value to true to indicate the seller offers freight shipping.
     *      - *globalShipping* - boolean
     *          - If this value is set to true, it indicates the seller has opted-in to the eBay Global Shipping Program and that they use that service for thier internation shipments.
     *      - *localPickup* - boolean
     *          - If this value is set to true, it indicates the seller offers local pickup of their items.
     *      - *marketplaceId* - string
     *          - The ID of the eBay marketplace to which this fulfillment policy applies. If this value is not specified, value defaults to the seller's eBay registration site.
     *      - *name* - string
     *          - A user-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace.
     *      - *pickupDropOff* - boolean
     *          - If this value is set to true, it indicates the seller offers the "Click and Collect" feature.
     */
    public function createMarketsEbayFulfillmentPolicyById(int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/fulfillment_policies/{$id}"], $query), 'POST');
    }
                    
    /**
     * @description List item specifics for a given category Id and referrerId.
     * @tag Market
     * @param array $query
     *      - *categoryId* - int - required
     *          - The ID of the category for which to list item specifics
     *      - *marketplaceId* - string - required
     *          - Filter that restricts the search result to categories that belong to the specified marketplace ID.
     * @return array
     */
    public function getMarketsEbayItemSpecifics(array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/item_specifics"], $query));
    }
                    
    /**
     * @description List eBay marketplaces. Use filters to find specific ones.
     * @tag Market
     * @param array $query
     *      - *referrerId* - number - optional
     *          - Get only marketplaces that match the given referrer ID
     *      - *marketplaceId* - string - optional
     *          - Get only marketplaces that match the given marketplace ID
     *      - *marketId* - int - optional
     *          - Get only marketplaces that match the given market ID
     *      - *siteId* - int - optional
     *          - Get only marketplaces that match the given site ID
     * @return array
     */
    public function getMarketsEbayMarketplaces(array $query = []): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/marketplaces"], $query));
    }
                    
    /**
     * @description Lists fitments.
     * @tag Market
     * @return array
     */
    public function getMarketsEbayPartsFitments(): array
    {
        return $this->api("/rest/markets/ebay/parts-fitments");
    }
                
    /**
     * @description Create a new fitment for the given data.
     * @tag Market
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The id of the fitment.
     *      - *marketId* - integer
     *          - The id of the market the fitment belongs to.
     *      - *name* - string
     *          - The name of the fitment.
     *      - *categoryId* - integer
     *          - The id of the category the fitment belongs to.
     */
    public function createMarketsEbayPartsFitment(array $data): array
    {
        return $this->api("/rest/markets/ebay/parts-fitments", 'POST', $data);
    }
                
    /**
     * @description Search fitments by filter options.
     * @tag Market
     * @param array $query
     *      - *categoryId* - int - optional
     *          - Filter that restricts the search result to fitments with specific eBay category ID. Several IDs can be entered as array.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to fitments with specific ID. Several IDs can be entered as array.
     *      - *marketId* - int - optional
     *          - Filter that restricts the search result to fitments with specific market ID. Several IDs can be entered as array.
     *      - *name* - string - optional
     *          - Filter that restricts the search result to fitments with specific name.
     *      - *propertyName* - string - optional
     *          - Filter that restricts the search result to fitments with specific property name.
     *      - *propertyValue* - string - optional
     *          - Filter that restricts the search result to fitments with specific property value.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Available values: 'items', 'items.properties'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Fitment
     */
    public function eachMarketsEbayPartsFitmentsSearch(array $query = []): Iterator
    {
        return $this->eachInternal('getMarketsEbayPartsFitmentsSearch', func_get_args());
    }
        
    /**
     * @description Search fitments by filter options.
     * @tag Market
     * @param array $query
     *      - *categoryId* - int - optional
     *          - Filter that restricts the search result to fitments with specific eBay category ID. Several IDs can be entered as array.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to fitments with specific ID. Several IDs can be entered as array.
     *      - *marketId* - int - optional
     *          - Filter that restricts the search result to fitments with specific market ID. Several IDs can be entered as array.
     *      - *name* - string - optional
     *          - Filter that restricts the search result to fitments with specific name.
     *      - *propertyName* - string - optional
     *          - Filter that restricts the search result to fitments with specific property name.
     *      - *propertyValue* - string - optional
     *          - Filter that restricts the search result to fitments with specific property value.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Available values: 'items', 'items.properties'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Fitment
     */
    public function batchMarketsEbayPartsFitmentsSearch(array $query = []): Iterator
    {
        return $this->batchInternal('getMarketsEbayPartsFitmentsSearch', func_get_args());
    }
    
    /**
     * @description Search fitments by filter options.
     * @tag Market
     * @param array $query
     *      - *categoryId* - int - optional
     *          - Filter that restricts the search result to fitments with specific eBay category ID. Several IDs can be entered as array.
     *      - *id* - int - optional
     *          - Filter that restricts the search result to fitments with specific ID. Several IDs can be entered as array.
     *      - *marketId* - int - optional
     *          - Filter that restricts the search result to fitments with specific market ID. Several IDs can be entered as array.
     *      - *name* - string - optional
     *          - Filter that restricts the search result to fitments with specific name.
     *      - *propertyName* - string - optional
     *          - Filter that restricts the search result to fitments with specific property name.
     *      - *propertyValue* - string - optional
     *          - Filter that restricts the search result to fitments with specific property value.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     *      - *with* - array - optional
     *          - An array with child instances to be loaded. Available values: 'items', 'items.properties'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Fitment
     */
    public function getMarketsEbayPartsFitmentsSearch(array $query = []): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/parts-fitments/search"], $query));
    }
                    
    /**
     * @description Deletes a fitment. The ID of the fitment must be specified.
     * @tag Market
     * @param int $fitmentId 
     * @param array $query
     *      - *id* - int - required
     *          - The fitment ID.
     */
    public function deleteMarketsEbayPartsFitmentByFitmentId(int $fitmentId, array $query)
    {
        return $this->api(array_merge(["/rest/markets/ebay/parts-fitments/{$fitmentId}"], $query), 'DELETE');
    }
                
    /**
     * @description Gets a fitment. The id of the fitment must be specified.
     * @tag Market
     * @param int $fitmentId 
     * @param array $query
     *      - *id* - int - required
     *          - The fitment ID.
     * @return array
     *      - *id* - integer
     *          - The id of the fitment.
     *      - *marketId* - integer
     *          - The id of the market the fitment belongs to.
     *      - *name* - string
     *          - The name of the fitment.
     *      - *categoryId* - integer
     *          - The id of the category the fitment belongs to.
     */
    public function getMarketsEbayPartsFitmentByFitmentId(int $fitmentId, array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/parts-fitments/{$fitmentId}"], $query));
    }
                
    /**
     * @description Updates a fitment. Items that do not occur anymore will be replaced.
     * @tag Market
     * @param int $fitmentId 
     * @param array $data 
     * @param array $query
     *      - *id* - int - required
     *          - The ID of the fitment list.
     * @return array
     *      - *id* - integer
     *          - The id of the fitment.
     *      - *marketId* - integer
     *          - The id of the market the fitment belongs to.
     *      - *name* - string
     *          - The name of the fitment.
     *      - *categoryId* - integer
     *          - The id of the category the fitment belongs to.
     */
    public function updateMarketsEbayPartsFitmentByFitmentId(int $fitmentId, array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/parts-fitments/{$fitmentId}"], $query), 'PUT', $data);
    }
                    
    /**
     * @description Create a payment policy.
     * @tag Market
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     * @return array
     *      - *paymentPolicyId* - string
     *          - The ID of the payment policy.
     *      - *description* - string
     *          - An optional seller-defined description of the payment policy. (Max length: 250)
     *      - *immediatePay* - boolean
     *          - Indicate if the payment is due upon receipt or not. (eBay generates a receipt when the buyer agrees to purchase an item)
     *      - *marketplaceId* - string
     *          - The ID of the eBay marketplace to which this return policy applies. If this value is not specified, value defaults to the seller's eBay registration site.
     *      - *name* - string
     *          - A user-defined name for this payment policy. Names must be unique for policies assigned to the same marketplace. (Max length: 64)
     *      - *paymentInstructions* - string
     *          - Allows the seller to give payment instructions to the buyer. These instructions appear on the eBay View Item and Checkout pages.
     */
    public function createMarketsEbayPaymentPolicy(array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/payment_policies"], $query), 'POST');
    }
                    
    /**
     * @description Delete payment policy by given ID.
     * @tag Market
     * @param int $id 
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     */
    public function deleteMarketsEbayPaymentPolicyById(int $id, array $query)
    {
        return $this->api(array_merge(["/rest/markets/ebay/payment_policies/{$id}"], $query), 'DELETE');
    }
                
    /**
     * @description Get payment policy for given ID.
     * @tag Market
     * @param int $id 
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     * @return array
     *      - *paymentPolicyId* - string
     *          - The ID of the payment policy.
     *      - *description* - string
     *          - An optional seller-defined description of the payment policy. (Max length: 250)
     *      - *immediatePay* - boolean
     *          - Indicate if the payment is due upon receipt or not. (eBay generates a receipt when the buyer agrees to purchase an item)
     *      - *marketplaceId* - string
     *          - The ID of the eBay marketplace to which this return policy applies. If this value is not specified, value defaults to the seller's eBay registration site.
     *      - *name* - string
     *          - A user-defined name for this payment policy. Names must be unique for policies assigned to the same marketplace. (Max length: 64)
     *      - *paymentInstructions* - string
     *          - Allows the seller to give payment instructions to the buyer. These instructions appear on the eBay View Item and Checkout pages.
     */
    public function getMarketsEbayPaymentPolicyById(int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/payment_policies/{$id}"], $query));
    }
                
    /**
     * @description Update payment policy for given ID.
     * @tag Market
     * @param int $id 
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     * @return array
     *      - *paymentPolicyId* - string
     *          - The ID of the payment policy.
     *      - *description* - string
     *          - An optional seller-defined description of the payment policy. (Max length: 250)
     *      - *immediatePay* - boolean
     *          - Indicate if the payment is due upon receipt or not. (eBay generates a receipt when the buyer agrees to purchase an item)
     *      - *marketplaceId* - string
     *          - The ID of the eBay marketplace to which this return policy applies. If this value is not specified, value defaults to the seller's eBay registration site.
     *      - *name* - string
     *          - A user-defined name for this payment policy. Names must be unique for policies assigned to the same marketplace. (Max length: 64)
     *      - *paymentInstructions* - string
     *          - Allows the seller to give payment instructions to the buyer. These instructions appear on the eBay View Item and Checkout pages.
     */
    public function createMarketsEbayPaymentPolicyById(int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/payment_policies/{$id}"], $query), 'POST');
    }
                    
    /**
     * @description Create a return policy.
     * @tag Market
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     * @return array
     *      - *returnPolicyId* - string
     *          - The ID of the return policy.
     *      - *description* - string
     *          - An optional seller-defined description of the return policy.
     *      - *extendedHolidayReturnsOffered* - boolean
     *          - If this value is set to true, it indicates the seller offers an Extended Holiday Returns policy for their listings.
     *      - *marketplaceId* - string
     *          - The ID of the eBay marketplace to which this return policy applies. If this value is not specified, value defaults to the seller's eBay registration site.
     *      - *name* - string
     *          - A user-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace.
     *      - *refundMethod* - string
     *          - Indicates the method the seller uses to compensate the buyer for returned items. The return method specified applies only to remorse returns. Available options: `MERCHANDISE_CREDIT`, `MONEY_BACK`.
     *      - *restockingFeePercentage* - string
     *          - Sellers who accept returns should include this field if they charge buyers a restocking fee when items are returned.
     *      - *returnInstruction* - string
     *          - This optional free-form string field lets the seller provide a detailed explanation of the return policy.
     *      - *returnInstructions* - string
     *          - This optional free-form string field lets the seller provide a detailed explanation of the return policy.
     *      - *returnMethod* - string
     *          - This field indicates the method in which the seller handles non-money back return requests for remorse returns. Sellers can specify they either exchange or replace items. Available options: `EXCHANGE`, `REPLACEMENT`.
     *      - *returnsAccepted* - boolean
     *          - Set this value to true to indicate the seller accepts returns.
     *      - *returnShippingCostPayer* - string
     *          - The seller uses this value to specify whether the buyer or the seller is responsible for paying return shipping charges. The field can be set to either `BUYER` or `SELLER`.
     */
    public function createMarketsEbayReturnPolicy(array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/return_policies"], $query), 'POST');
    }
                    
    /**
     * @description Delete payment policy by given ID.
     * @tag Market
     * @param int $id 
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     */
    public function deleteMarketsEbayReturnPolicyById(int $id, array $query)
    {
        return $this->api(array_merge(["/rest/markets/ebay/return_policies/{$id}"], $query), 'DELETE');
    }
                
    /**
     * @description Get return policy for given ID.
     * @tag Market
     * @param int $id 
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     * @return array
     *      - *returnPolicyId* - string
     *          - The ID of the return policy.
     *      - *description* - string
     *          - An optional seller-defined description of the return policy.
     *      - *extendedHolidayReturnsOffered* - boolean
     *          - If this value is set to true, it indicates the seller offers an Extended Holiday Returns policy for their listings.
     *      - *marketplaceId* - string
     *          - The ID of the eBay marketplace to which this return policy applies. If this value is not specified, value defaults to the seller's eBay registration site.
     *      - *name* - string
     *          - A user-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace.
     *      - *refundMethod* - string
     *          - Indicates the method the seller uses to compensate the buyer for returned items. The return method specified applies only to remorse returns. Available options: `MERCHANDISE_CREDIT`, `MONEY_BACK`.
     *      - *restockingFeePercentage* - string
     *          - Sellers who accept returns should include this field if they charge buyers a restocking fee when items are returned.
     *      - *returnInstruction* - string
     *          - This optional free-form string field lets the seller provide a detailed explanation of the return policy.
     *      - *returnInstructions* - string
     *          - This optional free-form string field lets the seller provide a detailed explanation of the return policy.
     *      - *returnMethod* - string
     *          - This field indicates the method in which the seller handles non-money back return requests for remorse returns. Sellers can specify they either exchange or replace items. Available options: `EXCHANGE`, `REPLACEMENT`.
     *      - *returnsAccepted* - boolean
     *          - Set this value to true to indicate the seller accepts returns.
     *      - *returnShippingCostPayer* - string
     *          - The seller uses this value to specify whether the buyer or the seller is responsible for paying return shipping charges. The field can be set to either `BUYER` or `SELLER`.
     */
    public function getMarketsEbayReturnPolicyById(int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/return_policies/{$id}"], $query));
    }
                
    /**
     * @description Update return policy for given ID.
     * @tag Market
     * @param int $id 
     * @param array $query
     *      - *marketplaceId* - string - required
     *          - The ID of the marketplace for which to get the policy.
     *      - *credentialsId* - int - required
     *          - The ID of credentials for which to get the policy.
     * @return array
     *      - *returnPolicyId* - string
     *          - The ID of the return policy.
     *      - *description* - string
     *          - An optional seller-defined description of the return policy.
     *      - *extendedHolidayReturnsOffered* - boolean
     *          - If this value is set to true, it indicates the seller offers an Extended Holiday Returns policy for their listings.
     *      - *marketplaceId* - string
     *          - The ID of the eBay marketplace to which this return policy applies. If this value is not specified, value defaults to the seller's eBay registration site.
     *      - *name* - string
     *          - A user-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace.
     *      - *refundMethod* - string
     *          - Indicates the method the seller uses to compensate the buyer for returned items. The return method specified applies only to remorse returns. Available options: `MERCHANDISE_CREDIT`, `MONEY_BACK`.
     *      - *restockingFeePercentage* - string
     *          - Sellers who accept returns should include this field if they charge buyers a restocking fee when items are returned.
     *      - *returnInstruction* - string
     *          - This optional free-form string field lets the seller provide a detailed explanation of the return policy.
     *      - *returnInstructions* - string
     *          - This optional free-form string field lets the seller provide a detailed explanation of the return policy.
     *      - *returnMethod* - string
     *          - This field indicates the method in which the seller handles non-money back return requests for remorse returns. Sellers can specify they either exchange or replace items. Available options: `EXCHANGE`, `REPLACEMENT`.
     *      - *returnsAccepted* - boolean
     *          - Set this value to true to indicate the seller accepts returns.
     *      - *returnShippingCostPayer* - string
     *          - The seller uses this value to specify whether the buyer or the seller is responsible for paying return shipping charges. The field can be set to either `BUYER` or `SELLER`.
     */
    public function createMarketsEbayReturnPolicyById(int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/return_policies/{$id}"], $query), 'POST');
    }
                    
    /**
     * @description Lists all eBay shop categories.
     * @tag Market
     * @param array $query
     *      - *credentialsId* - int - required
     *          - The credentials ID for whom to fetch eBay shop categories.
     *      - *viewType* - string - optional
     *          - How should the eBay shop categories be returned. Possible values: 'list' or 'tree'. Default is 'list'
     * @return array
     */
    public function getMarketsEbayShopCategories(array $query): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/shop_categories"], $query));
    }
                
    /**
     * @description Lists transaction by filter options.
     * @tag Market
     * @param array $query
     *      - *orderId* - int - optional
     *          - Filter that restricts the search result to transactions with specific ID. Use -1 for open orders
     *      - *externalOrderId* - int - optional
     *          - Filter that restricts the search result to transactions with specific external order ID.
     *      - *transactionId* - int - optional
     *          - Filter that restricts the search result to transactions with specific transaction ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to transactions with specific credentials ID.
     *      - *buyerUserId* - string - optional
     *          - Filter that restricts the search result to transactions with specific buyer user ID.
     *      - *createdAt* - string - optional
     *          - Filter that restricts the search result to transactions with specific creation date.
     *      - *endTime* - string - optional
     *          - Filter that restricts the search result to transactions with end time date.
     *      - *importStatus* - string - optional
     *          - Filter that restricts the search result to transactions with specific import status. Possible values are: NEW, IN_PROGRESS, DONE.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Transaction
     */
    public function eachMarketsEbayTransactions(array $query = []): Iterator
    {
        return $this->eachInternal('getMarketsEbayTransactions', func_get_args());
    }
        
    /**
     * @description Lists transaction by filter options.
     * @tag Market
     * @param array $query
     *      - *orderId* - int - optional
     *          - Filter that restricts the search result to transactions with specific ID. Use -1 for open orders
     *      - *externalOrderId* - int - optional
     *          - Filter that restricts the search result to transactions with specific external order ID.
     *      - *transactionId* - int - optional
     *          - Filter that restricts the search result to transactions with specific transaction ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to transactions with specific credentials ID.
     *      - *buyerUserId* - string - optional
     *          - Filter that restricts the search result to transactions with specific buyer user ID.
     *      - *createdAt* - string - optional
     *          - Filter that restricts the search result to transactions with specific creation date.
     *      - *endTime* - string - optional
     *          - Filter that restricts the search result to transactions with end time date.
     *      - *importStatus* - string - optional
     *          - Filter that restricts the search result to transactions with specific import status. Possible values are: NEW, IN_PROGRESS, DONE.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Transaction
     */
    public function batchMarketsEbayTransactions(array $query = []): Iterator
    {
        return $this->batchInternal('getMarketsEbayTransactions', func_get_args());
    }
    
    /**
     * @description Lists transaction by filter options.
     * @tag Market
     * @param array $query
     *      - *orderId* - int - optional
     *          - Filter that restricts the search result to transactions with specific ID. Use -1 for open orders
     *      - *externalOrderId* - int - optional
     *          - Filter that restricts the search result to transactions with specific external order ID.
     *      - *transactionId* - int - optional
     *          - Filter that restricts the search result to transactions with specific transaction ID.
     *      - *credentialsId* - int - optional
     *          - Filter that restricts the search result to transactions with specific credentials ID.
     *      - *buyerUserId* - string - optional
     *          - Filter that restricts the search result to transactions with specific buyer user ID.
     *      - *createdAt* - string - optional
     *          - Filter that restricts the search result to transactions with specific creation date.
     *      - *endTime* - string - optional
     *          - Filter that restricts the search result to transactions with end time date.
     *      - *importStatus* - string - optional
     *          - Filter that restricts the search result to transactions with specific import status. Possible values are: NEW, IN_PROGRESS, DONE.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Transaction
     */
    public function getMarketsEbayTransactions(array $query = []): array
    {
        return $this->api(array_merge(["/rest/markets/ebay/transactions"], $query));
    }
                    
    /**
     * @description List listing marketplaces. Use filters to find specific ones.
     * @tag Market
     * @param array $query
     *      - *referrerId* - number - optional
     *          - Get only marketplaces that match the given referrer ID
     *      - *marketplaceId* - string - optional
     *          - Get only marketplaces that match the given marketplace ID
     *      - *marketId* - int - optional
     *          - Get only marketplaces that match the given market ID
     *      - *siteId* - int - optional
     *          - Get only marketplaces that match the given site ID
     * @return array
     */
    public function getMarketsListingsMarketplaces(array $query = []): array
    {
        return $this->api(array_merge(["/rest/markets/listings/marketplaces"], $query));
    }
                    
    /**
     * @description Lists market settings. The marketplace ID and the type must be specified.
     * @tag Market
     * @return array
     */
    public function getMarketsSettings(): array
    {
        return $this->api("/rest/markets/settings");
    }
                
    /**
     * @description Creates new market settings by given data. The marketplace ID and the type must be specified.
     * @tag Market
     * @return array
     *      - *id* - integer
     *          - The ID of the market settings.
     *      - *marketplaceId* - integer
     *          - The ID of the marketplace.
     *      - *type* - string
     *          - The type of the current market settings. Possible values are: attribute, attributeValue, property, category, shipping.
     *      - *settings* - array
     *          - The market settings for the current marketplace.
     */
    public function createMarketsSetting(): array
    {
        return $this->api("/rest/markets/settings", 'POST');
    }
                    
    /**
     * @description Creates new market settings by given data. The marketplace ID and the type must be specified.
     * @tag Market
     * @return array
     */
    public function createMarketsSettingsBulk(): array
    {
        return $this->api("/rest/markets/settings/bulk", 'POST');
    }
                
    /**
     * @description Updates market settings. The market settings ID must be specified.
     * @tag Market
     * @return array
     */
    public function updateMarketsSettingsBulk(): array
    {
        return $this->api("/rest/markets/settings/bulk", 'PUT');
    }
                    
    /**
     * @description Lists correlations. The type, the market settings ID and the correlation ID must be specified.
     * @tag Market
     * @return array
     *      - *id* - integer
     *          - The ID of the market settings.
     *      - *marketplaceId* - integer
     *          - The ID of the marketplace.
     *      - *type* - string
     *          - The type of the current market settings. Possible values are: attribute, attributeValue, property, category, shipping.
     *      - *settings* - array
     *          - The market settings for the current marketplace.
     */
    public function getMarketsSettingsCorrelations(): array
    {
        return $this->api("/rest/markets/settings/correlations");
    }
                
    /**
     * @description Creates a correlation. The type, the market settings ID and the correlation ID must be specified.
     * @tag Market

     */
    public function createMarketsSettingsCorrelation()
    {
        return $this->api("/rest/markets/settings/correlations", 'POST');
    }
                    
    /**
     * @description Creates multiple correlations. The type, market settings ID and the correlation ID for each param combination must be specified.
     * @tag Market

     */
    public function createMarketsSettingsCorrelationsBulk()
    {
        return $this->api("/rest/markets/settings/correlations/bulk", 'POST');
    }
                    
    /**
     * @description Deletes market settings. The market settings ID must be specified.
     * @tag Market
     * @param int $settingId 
     */
    public function deleteMarketsSettingBySettingId(int $settingId)
    {
        return $this->api("/rest/markets/settings/{$settingId}", 'DELETE');
    }
                
    /**
     * @description Gets market settings. The market settings ID must be specified.
     * @tag Market
     * @param int $settingId 
     * @return array
     *      - *id* - integer
     *          - The ID of the market settings.
     *      - *marketplaceId* - integer
     *          - The ID of the marketplace.
     *      - *type* - string
     *          - The type of the current market settings. Possible values are: attribute, attributeValue, property, category, shipping.
     *      - *settings* - array
     *          - The market settings for the current marketplace.
     */
    public function getMarketsSettingBySettingId(int $settingId): array
    {
        return $this->api("/rest/markets/settings/{$settingId}");
    }
                
    /**
     * @description Updates market settings. The market settings ID must be specified.
     * @tag Market
     * @param int $settingId 
     * @return array
     *      - *id* - integer
     *          - The ID of the market settings.
     *      - *marketplaceId* - integer
     *          - The ID of the marketplace.
     *      - *type* - string
     *          - The type of the current market settings. Possible values are: attribute, attributeValue, property, category, shipping.
     *      - *settings* - array
     *          - The market settings for the current marketplace.
     */
    public function updateMarketsSettingBySettingId(int $settingId): array
    {
        return $this->api("/rest/markets/settings/{$settingId}", 'PUT');
    }
    
}
