<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Messenger extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Deletes a batch of conversations (soft delete, conversations will be moved to trash)
     * @tag Messenger
     * @param array $query
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to be deleted. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function deleteConversation(array $query)
    {
        return $this->api(array_merge(["/rest/conversations"], $query), 'DELETE');
    }
                
    /**
     * @description List conversation based on provided parameters
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to createdAt).
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to desc).
     *      - *title* - string - optional
     *          - Filter results by conversation title (searched string must be contained in title).
     *      - *message* - string - optional
     *          - Filter results by message body (searched string must be contained in one of the converesation messages).
     *      - *fromDate* - string - optional
     *          - Filter results by conversation creation date. Conversation must be created after this date. Expected format: 2023-01-31T00:00:00+03:00
     *      - *toDate* - string - optional
     *          - Filter results by conversation creation date. Conversation must be created before this date. Expected format: 2023-01-31T00:00:00+03:00
     *      - *updateFromDate* - string - optional
     *          - Filter results by conversation update date. Conversation must be updated after this date. Expected format: 2023-01-31T00:00:00+03:00
     *      - *updateToDate* - string - optional
     *          - Filter results by conversation update date. Conversation must be updated before this date. Expected format: 2023-01-31T00:00:00+03:00
     *      - *tagIds* - string - optional
     *          - Filter results by conversation tags. Multiple values can be provided, separated by comma. Expected format: 1, 9, 15
     *      - *isDone* - boolean - optional
     *          - Filter results by conversation state. Expected values: true/false
     *      - *referrer* - string - optional
     *          - Filter results by conversation referrer (referrer of first message of the conversation). Expected values: system/backend/rest/plugin/email
     *      - *shortId* - int - optional
     *          - Filter results by conversation short ID.
     *      - *hasAttachments* - boolean - optional
     *          - Filter results by conversation that contain at least one message with one attachment. Expected values: true
     *      - *hasBilledMsg* - boolean - optional
     *          - Filter results by conversation that contain at least one billed message. Expected values: true
     *      - *orderIds* - string - optional
     *          - Filter results by conversation relation type order. Multiple values can be provided, separated by comma. Expected format: 1, 9, 15
     *      - *contactIds* - string - optional
     *          - Filter results by conversation relation type contact. Multiple values can be provided, separated by comma. Expected format: 1, 9, 15
     *      - *emails* - string - optional
     *          - Filter results by conversation relation type email. Multiple values can be provided, separated by comma. Expected format: email1@plentymarkets.com, email2@plentymarkets.com
     *      - *paymentIds* - string - optional
     *          - Filter results by conversation relation type payment. Multiple values can be provided, separated by comma. Expected format: 1, 9, 15
     *      - *subscribersUsers* - string - optional
     *          - Filter results by conversation subscribers. Multiple values can be provided, separated by comma. Expected format: 1, 9, 15
     *      - *fromValue* - string - optional
     *          - Filter results by conversation sender (sender of the first message of tehr conversation).
     * The searched value can be and user ID or an email. Multiple values can be provided, separated by comma. This filter only works if the fromType filter is also provided. Expected format: 1, 5
     *      - *fromType* - string - optional
     *          - Filter results by conversation sender type (sender type of the first message of the conversation). Expected values: user/email
     *      - *priorityId* - int - optional
     *          - Filter results by conversation priority. Expected values: 1/2/3/4/5
     *      - *inboxId* - int - optional
     *          - Filter results by conversation inbox ID. Expected format: 1
     *      - *deadline* - string - optional
     *          - Filter results by conversation deadline ID. Expected values: yesterday/today/tomorrow/exceeded/in_the_future
     *      - *statusId* - int - optional
     *          - Filter results by conversation status ID
     *      - *typeId* - int - optional
     *          - Filter results by conversation type ID
     *      - *isDeleted* - int - optional
     *          - Filter results by conversation deleted flag. Expected values: 0/1
     *      - *deletedAtBefore* - string - optional
     *          - Filter results by conversation deleted date. Conversation must be deleted before this date. Expected format: 2023-01-31T00:00:00+03:00
     *      - *isArchived* - string - optional
     *          - Filter results from main index or from archive. Expected value: true/false (defaults to false)
     *      - *isRead* - boolean - optional
     *          - Filter results by conversation read status. This filter will take effect only in combination with readById filter. Expected value: true/false
     *      - *readById* - int - optional
     *          - Filter results by conversation read status for the provided user ID. This filter will take effect only in combination with isRead filter. Expected format: 1
     *      - *uuids* - string - optional
     *          - Filter results by conversation ID's. Multiple values can be provided, separated by comma. Expected format: ee2be9db-82c0-441b-98cb-5e11e34b549e, 24810ce7-4b75-45d0-8610-7fb07ede0d86
     *      - *folderId* - string - optional
     *          - Filter results by folder ID. Expected format: ee2be9db-82c0-441b-98cb-5e11e34b549e
     *      - *with* - array - optional
     *          - Appends relations to conversations. Expected values: ['messages']
     * @return array
     */
    public function getConversations(array $query = []): array
    {
        return $this->api(array_merge(["/rest/conversations"], $query));
    }
                
    /**
     * @description Create a new conversation
     * @tag Messenger
     * @return array
     *      - *uuid* - string
     *          - The UUID of the conversation
     *      - *shortId* - string
     *          - The Short ID of the Conversation
     *      - *plentyIdHash* - string
     *          - The plentyIdHash
     *      - *plentyId* - integer
     *          - The plentyId of the relation contact
     *      - *inboxId* - string
     *          - The inboxId from the assistant
     *      - *title* - string
     *          - The Title of the Conversation
     *      - *tagIds* - array
     *          - Array of tag IDs
     *      - *isClosed* - boolean
     *          - Boolean that indicates if the conversation is closed
     *      - *isDeleted* - boolean
     *          - Boolean that indicates if the conversation is deleted
     *      - *readBy* - array
     *          - Array of user ids (int)
     *      - ** - boolean
     *          - validRelation Conversation has the relations validated
     *      - *priorityId* - string
     *          - The Priority of the Conversation
     *      - *typeId* - integer
     *          - ID of conversation type
     *      - *typePosition* - integer
     *          - Sort order of conversation type
     *      - *statusId* - integer
     *          - ID of conversation status
     *      - *statusPosition* - integer
     *          - Sort order of conversation status
     *      - *hasWhisperedMessages* - boolean
     *          - Flag that indicates if a conversation contains whispered messages
     *      - *messagesTitles* - array
     *          - Array of all message titles
     *      - *messagesBodies* - array
     *          - Array with all message bodies stripped of tags
     *      - *messagesTags* - array
     *          - Array with all tag ID's from all messages
     *      - *messagesPaths* - array
     *          - Array with s3 messages paths
     *      - *messagesIds* - array
     *          - Array with all messages UUID's
     *      - *isMigratedToEs* - integer
     *          - Flag that indicates if the conversation is synced to ES (used during messenger migration to new structure)
     *      - *isArchived* - boolean
     *          - Flag that indicates if the conversation is archived
     */
    public function createConversation(): array
    {
        return $this->api("/rest/conversations", 'POST');
    }
                    
    /**
     * @description Move multiple conversations to archive
     * @tag Messenger
     * @param array $query
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to archive. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsArchive(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/archive"], $query), 'PUT');
    }
                    
    /**
     * @description Permanently delete a list of archived conversation. This will delete also the messages that belong to that conversation
     * @tag Messenger
     * @param array $query
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to restore from archive. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function deleteConversationsArchiveDelete(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/archiveDelete"], $query), 'DELETE');
    }
                    
    /**
     * @description Restore multiple conversations from archive
     * @tag Messenger
     * @param array $query
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to restore from archive. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsArchiveRestore(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/archiveRestore"], $query), 'PUT');
    }
                    
    /**
     * @description Restore deleted conversations from trash
     * @tag Messenger
     * @param array $query
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to restore from trash. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsBatchRestoreConversation(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/batchRestoreConversations"], $query), 'PUT');
    }
                    
    /**
     * @description Updates the state for a batch of conversations
     * @tag Messenger
     * @param array $query
     *      - *isClosed* - boolean - required
     *          - The new state of the conversation. Expected values: true/false
     *      - *uuids* - array - required
     *          - Array of conversations UUID's. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsClose(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/close"], $query), 'PUT');
    }
                    
    /**
     * @description Update deadline for a batch of conversations
     * @tag Messenger
     * @param array $query
     *      - *deadline* - string - required
     *          - The new deadline. Expected format: 2023/01/31
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to update deadline. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsDeadline(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/deadline"], $query), 'PUT');
    }
                    
    /**
     * @description Adds the empty trash command to a queue. Emptying of the trash will happen sometime in the future, when the first worker is available to process the queue
     * @tag Messenger

     */
    public function deleteConversationsEmptyTrash()
    {
        return $this->api("/rest/conversations/emptyTrash", 'DELETE');
    }
                
    /**
     * @description Returns a paginated result object will list of conversation events
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to id). Expected values: any property of the event model
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *id* - int - optional
     *          - Filter results by event ID.
     *      - *name* - string - optional
     *          - Filter results by event name.
     *      - *description* - string - optional
     *          - Filter results by event description.
     *      - *type* - string - optional
     *          - Filter results by event type. Expected values: live / scheduled
     *      - *filter* - string - optional
     *          - Filter results by event filters. Expected values: conversation_age / conversation_deadline /
     * conversation_from_user / conversation_priority / conversation_type_status / conversation_referrer_type / conversation_inbox / conversation_last_change /
     * conversation_tag / conversation_guest_order / conversation_is_lead / conversation_is_opportunity / contact_client / contact_class / contact_type /
     * contact_language
     *      - *action* - string - optional
     *          - Filter results by event actions. Expected values: add_reply / send_email / update_deadline /
     * add_subscriber / change_priority / change_type_and_status / add_to_folder / remove_from_folder / add_tags / remove_tags
     *      - *trigger* - string - optional
     *          - Filter results by event triggers. Expected values: new_conversation / new_reply_to_conversation /
     * new_email_from_customer / new_reply_from_customer / conversation_deadline_changed / conversation_priority_changed / conversation_status_changed /
     * conversation_tag_added / conversation_tag_removed / conversation_scheduled_event
     *      - *state* - boolean - optional
     *          - Filter results by event state. Expected values: ntrue / false
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationEvent
     */
    public function eachConversationsEvents(array $query = []): Iterator
    {
        return $this->eachInternal('getConversationsEvents', func_get_args());
    }
        
    /**
     * @description Returns a paginated result object will list of conversation events
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to id). Expected values: any property of the event model
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *id* - int - optional
     *          - Filter results by event ID.
     *      - *name* - string - optional
     *          - Filter results by event name.
     *      - *description* - string - optional
     *          - Filter results by event description.
     *      - *type* - string - optional
     *          - Filter results by event type. Expected values: live / scheduled
     *      - *filter* - string - optional
     *          - Filter results by event filters. Expected values: conversation_age / conversation_deadline /
     * conversation_from_user / conversation_priority / conversation_type_status / conversation_referrer_type / conversation_inbox / conversation_last_change /
     * conversation_tag / conversation_guest_order / conversation_is_lead / conversation_is_opportunity / contact_client / contact_class / contact_type /
     * contact_language
     *      - *action* - string - optional
     *          - Filter results by event actions. Expected values: add_reply / send_email / update_deadline /
     * add_subscriber / change_priority / change_type_and_status / add_to_folder / remove_from_folder / add_tags / remove_tags
     *      - *trigger* - string - optional
     *          - Filter results by event triggers. Expected values: new_conversation / new_reply_to_conversation /
     * new_email_from_customer / new_reply_from_customer / conversation_deadline_changed / conversation_priority_changed / conversation_status_changed /
     * conversation_tag_added / conversation_tag_removed / conversation_scheduled_event
     *      - *state* - boolean - optional
     *          - Filter results by event state. Expected values: ntrue / false
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationEvent
     */
    public function batchConversationsEvents(array $query = []): Iterator
    {
        return $this->batchInternal('getConversationsEvents', func_get_args());
    }
    
    /**
     * @description Returns a paginated result object will list of conversation events
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to id). Expected values: any property of the event model
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *id* - int - optional
     *          - Filter results by event ID.
     *      - *name* - string - optional
     *          - Filter results by event name.
     *      - *description* - string - optional
     *          - Filter results by event description.
     *      - *type* - string - optional
     *          - Filter results by event type. Expected values: live / scheduled
     *      - *filter* - string - optional
     *          - Filter results by event filters. Expected values: conversation_age / conversation_deadline /
     * conversation_from_user / conversation_priority / conversation_type_status / conversation_referrer_type / conversation_inbox / conversation_last_change /
     * conversation_tag / conversation_guest_order / conversation_is_lead / conversation_is_opportunity / contact_client / contact_class / contact_type /
     * contact_language
     *      - *action* - string - optional
     *          - Filter results by event actions. Expected values: add_reply / send_email / update_deadline /
     * add_subscriber / change_priority / change_type_and_status / add_to_folder / remove_from_folder / add_tags / remove_tags
     *      - *trigger* - string - optional
     *          - Filter results by event triggers. Expected values: new_conversation / new_reply_to_conversation /
     * new_email_from_customer / new_reply_from_customer / conversation_deadline_changed / conversation_priority_changed / conversation_status_changed /
     * conversation_tag_added / conversation_tag_removed / conversation_scheduled_event
     *      - *state* - boolean - optional
     *          - Filter results by event state. Expected values: ntrue / false
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationEvent
     */
    public function getConversationsEvents(array $query = []): array
    {
        return $this->api(array_merge(["/rest/conversations/events"], $query));
    }
                
    /**
     * @description Creates a new event
     * @tag Messenger
     * @return array
     *      - *id* - integer
     *      - *name* - string
     *      - *description* - string
     *      - *eventClass* - string
     *      - *isActive* - boolean
     *      - *userId* - integer
     *      - *updatedAt* - string
     *      - *executedAt* - string
     */
    public function createConversationsEvent(): array
    {
        return $this->api("/rest/conversations/events", 'POST');
    }
                    
    /**
     * @description Deletes a single event
     * @tag Messenger
     * @param int $id 
     */
    public function deleteConversationsEventById(int $id)
    {
        return $this->api("/rest/conversations/events/{$id}", 'DELETE');
    }
                
    /**
     * @description Updates an existing event
     * @tag Messenger
     * @param int $id 
     * @return array
     *      - *id* - integer
     *      - *name* - string
     *      - *description* - string
     *      - *eventClass* - string
     *      - *isActive* - boolean
     *      - *userId* - integer
     *      - *updatedAt* - string
     *      - *executedAt* - string
     */
    public function updateConversationsEventById(int $id): array
    {
        return $this->api("/rest/conversations/events/{$id}", 'PUT');
    }
                    
    /**
     * @description Copies an event to a new event
     * @tag Messenger
     * @param int $id 
     * @param array $query
     *      - *name* - string - required
     *          - The name of the new event
     * @return array
     *      - *id* - integer
     *      - *name* - string
     *      - *description* - string
     *      - *eventClass* - string
     *      - *isActive* - boolean
     *      - *userId* - integer
     *      - *updatedAt* - string
     *      - *executedAt* - string
     */
    public function updateConversationsEventsCopyById(int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/conversations/events/{$id}/copy"], $query), 'PUT');
    }
                    
    /**
     * @description Sets the current date as the last execution date for an existing event
     * @tag Messenger
     * @param int $id 
     * @return array
     *      - *id* - integer
     *      - *name* - string
     *      - *description* - string
     *      - *eventClass* - string
     *      - *isActive* - boolean
     *      - *userId* - integer
     *      - *updatedAt* - string
     *      - *executedAt* - string
     */
    public function updateConversationsEventsUpdateExecutedAtEventById(int $id): array
    {
        return $this->api("/rest/conversations/events/{$id}/updateExecutedAtEvent", 'PUT');
    }
                    
    /**
     * @description Sets an event as active / inactive
     * @tag Messenger
     * @param int $id 
     * @param array $query
     *      - *status* - boolean - required
     *          - The new status. Expected values: true/false
     * @return array
     *      - *id* - integer
     *      - *name* - string
     *      - *description* - string
     *      - *eventClass* - string
     *      - *isActive* - boolean
     *      - *userId* - integer
     *      - *updatedAt* - string
     *      - *executedAt* - string
     */
    public function updateConversationsEventsUpdateStatusById(int $id, array $query): array
    {
        return $this->api(array_merge(["/rest/conversations/events/{$id}/update_status"], $query), 'PUT');
    }
                
    /**
     * @description Returns a paginated result object will list of folders
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to name). Expected values: any folder model property
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *userId* - int - optional
     *          - Filter results by user ID (defaults to null, all users).
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationFolder
     */
    public function eachConversationsFolders(array $query = []): Iterator
    {
        return $this->eachInternal('getConversationsFolders', func_get_args());
    }
        
    /**
     * @description Returns a paginated result object will list of folders
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to name). Expected values: any folder model property
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *userId* - int - optional
     *          - Filter results by user ID (defaults to null, all users).
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationFolder
     */
    public function batchConversationsFolders(array $query = []): Iterator
    {
        return $this->batchInternal('getConversationsFolders', func_get_args());
    }
    
    /**
     * @description Returns a paginated result object will list of folders
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to name). Expected values: any folder model property
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *userId* - int - optional
     *          - Filter results by user ID (defaults to null, all users).
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationFolder
     */
    public function getConversationsFolders(array $query = []): array
    {
        return $this->api(array_merge(["/rest/conversations/folders"], $query));
    }
                
    /**
     * @description Creates a new folder. Important! The userId property will be automatically set based on the current logged in user.
     * @tag Messenger
     * @return array
     *      - *uuid* - string
     *          - The UUID of the folder
     *      - *name* - string
     *          - The name of the folder
     *      - *userId* - integer
     *          - The user ID which is the folder owner
     */
    public function createConversationsFolder(): array
    {
        return $this->api("/rest/conversations/folders", 'POST');
    }
                
    /**
     * @description Assigns a batch of conversations to a batch of folders
     * @tag Messenger
     * @param array $query
     *      - *foldersUuids* - int - required
     *          - The list of folders to be assigned to. Expected format: ['78656f7d-02fd-5461-9e54-13b2668f9b43']
     *      - *conversationsUuids* - array - required
     *          - The list of conversations UUID's to assign to folders. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsFolder(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/folders"], $query), 'PUT');
    }
                    
    /**
     * @description Add multiple conversations to multiple folders
     * @tag Messenger
     * @param array $query
     *      - *foldersUuids* - int - required
     *          - The list of folders to be assigned to. Expected format: ['78656f7d-02fd-5461-9e54-13b2668f9b43']
     *      - *conversationsUuids* - array - required
     *          - The list of conversations UUID's to assign to folders. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsFoldersAdd(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/folders/add"], $query), 'PUT');
    }
                    
    /**
     * @description Remove multiple conversations from multiple folders
     * @tag Messenger
     * @param array $query
     *      - *foldersUuids* - int - required
     *          - The list of folders that will be removed from the conversation. Expected format: ['78656f7d-02fd-5461-9e54-13b2668f9b43']
     *      - *conversationsUuids* - array - required
     *          - The list of conversations UUID's to assign to folders. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsFoldersRemove(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/folders/remove"], $query), 'PUT');
    }
                    
    /**
     * @description Deletes a folder
     * @tag Messenger
     * @param int $uuid5 
     */
    public function deleteConversationsFolderByUuid5(int $uuid5)
    {
        return $this->api("/rest/conversations/folders/{$uuid5}", 'DELETE');
    }
                
    /**
     * @description Retrieves a folder object based on UUID
     * @tag Messenger
     * @param int $uuid5 
     * @return array
     *      - *uuid* - string
     *          - The UUID of the folder
     *      - *name* - string
     *          - The name of the folder
     *      - *userId* - integer
     *          - The user ID which is the folder owner
     */
    public function getConversationsFolderByUuid5(int $uuid5): array
    {
        return $this->api("/rest/conversations/folders/{$uuid5}");
    }
                
    /**
     * @description Updates an existing folder
     * @tag Messenger
     * @param int $uuid5 
     * @return array
     *      - *uuid* - string
     *          - The UUID of the folder
     *      - *name* - string
     *          - The name of the folder
     *      - *userId* - integer
     *          - The user ID which is the folder owner
     */
    public function updateConversationsFolderByUuid5(int $uuid5): array
    {
        return $this->api("/rest/conversations/folders/{$uuid5}", 'PUT');
    }
                    
    /**
     * @description Returns a list with all configured inboxes (only active ones)
     * @tag Messenger
     * @return array
     */
    public function getConversationsInboxes(): array
    {
        return $this->api("/rest/conversations/inboxes");
    }
                    
    /**
     * @description Updates priority for a batch of conversations
     * @tag Messenger
     * @param array $query
     *      - *priorityId* - int - required
     *          - The new priority. Expected values: 0/1/2/3/4/5
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to update priority. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsPriority(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/priority"], $query), 'PUT');
    }
                    
    /**
     * @description Mark a batch of conversations as read or unread
     * @tag Messenger
     * @param array $query
     *      - *read* - boolean - required
     *          - The read status. Expected values: true/false
     *      - *userId* - int - required
     *          - The user ID for which the conversations will be marked as read/unread. Expected format: 1
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to update read status. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsRead(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/read"], $query), 'PUT');
    }
                    
    /**
     * @description Searches for entities that can be linked to a conversation. It will search for contacts (ID and full text), orders (ID) and users (name, email and ID)
     * @tag Messenger
     * @param array $query
     *      - *searchTerm* - string - required
     *          - The searched value. Expected values: John Doe/ 123 / john@plentymarkets.com
     * @return array
     */
    public function getConversationsSearchReceiver(array $query): array
    {
        return $this->api(array_merge(["/rest/conversations/searchReceiver"], $query));
    }
                    
    /**
     * @description Deletes a batch of statuses
     * @tag Messenger
     * @param array $query
     *      - *ids* - array - required
     *          - Array of conversation statuses ID's. Expected values: [1, 2]
     */
    public function deleteConversationsStatus(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/statuses"], $query), 'DELETE');
    }
            
    /**
     * @description Returns a paginated result object will list of conversation statuses
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to id). Expected values: id/position
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *isDeleted* - boolean - optional
     *          - Filter results by deleted flag.
     *      - *name* - string - optional
     *          - Filter results by status name.
     *      - *id* - int - optional
     *          - Filter results by status ID.
     *      - *typeId* - int - optional
     *          - Filter results by status type ID.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationStatus
     */
    public function eachConversationsStatuses(array $query = []): Iterator
    {
        return $this->eachInternal('getConversationsStatuses', func_get_args());
    }
        
    /**
     * @description Returns a paginated result object will list of conversation statuses
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to id). Expected values: id/position
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *isDeleted* - boolean - optional
     *          - Filter results by deleted flag.
     *      - *name* - string - optional
     *          - Filter results by status name.
     *      - *id* - int - optional
     *          - Filter results by status ID.
     *      - *typeId* - int - optional
     *          - Filter results by status type ID.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationStatus
     */
    public function batchConversationsStatuses(array $query = []): Iterator
    {
        return $this->batchInternal('getConversationsStatuses', func_get_args());
    }
    
    /**
     * @description Returns a paginated result object will list of conversation statuses
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to id). Expected values: id/position
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *isDeleted* - boolean - optional
     *          - Filter results by deleted flag.
     *      - *name* - string - optional
     *          - Filter results by status name.
     *      - *id* - int - optional
     *          - Filter results by status ID.
     *      - *typeId* - int - optional
     *          - Filter results by status type ID.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationStatus
     */
    public function getConversationsStatuses(array $query = []): array
    {
        return $this->api(array_merge(["/rest/conversations/statuses"], $query));
    }
                
    /**
     * @description Creates a new status
     * @tag Messenger
     * @return array
     *      - *id* - integer
     *          - The ID of the status
     *      - *position* - integer
     *          - The position of the status (used in sorting)
     *      - *userId* - integer
     *          - The suer ID which performed the last update
     *      - *isDeleted* - boolean
     *          - Flag that indicates if the status was deleted
     *      - ** - string
     *          - colour Color of the status background (example: #0084ff)
     */
    public function createConversationsStatus(): array
    {
        return $this->api("/rest/conversations/statuses", 'POST');
    }
                    
    /**
     * @description Deletes a single status (soft delete, status will be flagged as deleted)
     * @tag Messenger
     * @param int $id 
     */
    public function deleteConversationsStatusById(int $id)
    {
        return $this->api("/rest/conversations/statuses/{$id}", 'DELETE');
    }
                
    /**
     * @description Retrieves a single status based on ID
     * @tag Messenger
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The ID of the status
     *      - *position* - integer
     *          - The position of the status (used in sorting)
     *      - *userId* - integer
     *          - The suer ID which performed the last update
     *      - *isDeleted* - boolean
     *          - Flag that indicates if the status was deleted
     *      - ** - string
     *          - colour Color of the status background (example: #0084ff)
     */
    public function getConversationsStatusById(int $id): array
    {
        return $this->api("/rest/conversations/statuses/{$id}");
    }
                
    /**
     * @description Updates an existing status
     * @tag Messenger
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The ID of the status
     *      - *position* - integer
     *          - The position of the status (used in sorting)
     *      - *userId* - integer
     *          - The suer ID which performed the last update
     *      - *isDeleted* - boolean
     *          - Flag that indicates if the status was deleted
     *      - ** - string
     *          - colour Color of the status background (example: #0084ff)
     */
    public function updateConversationsStatusById(int $id): array
    {
        return $this->api("/rest/conversations/statuses/{$id}", 'PUT');
    }
                    
    /**
     * @description Subscribes the current user to multiple conversations
     * @tag Messenger
     * @param array $query
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to subscribe to. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsSubscribe(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/subscribe"], $query), 'PUT');
    }
                    
    /**
     * @description Adds multiple tags to multiple conversations
     * @tag Messenger
     * @param array $query
     *      - *tagIds* - array - required
     *          - The list of tags to be added. Expected values: [17, 18]
     *      - *uuids* - array - required
     *          - Array of conversations UUID's. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsTag(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/tags"], $query), 'PUT');
    }
                    
    /**
     * @description Returns the total number of unread conversations for current user
     * @tag Messenger
     * @return array
     */
    public function getConversationsTotals(): array
    {
        return $this->api("/rest/conversations/totals");
    }
                    
    /**
     * @description Updates type and status for a batch of conversations
     * @tag Messenger
     * @param array $query
     *      - *typeId* - int - required
     *          - The new type. Expected format: 1
     *      - *statusId* - int - required
     *          - The new status. Expected format: 1
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to update type and status. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsTypeStatus(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/type_status"], $query), 'PUT');
    }
                    
    /**
     * @description Deletes a batch of types
     * @tag Messenger
     * @param array $query
     *      - *ids* - array - required
     *          - Array of conversation types ID's. Expected values: [1, 2]
     */
    public function deleteConversationsType(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/types"], $query), 'DELETE');
    }
            
    /**
     * @description Returns a paginated result object will list of conversation types
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to id). Expected values: id/position
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *isDeleted* - boolean - optional
     *          - Filter results by deleted flag.
     *      - *name* - string - optional
     *          - Filter results by type name.
     *      - *id* - int - optional
     *          - Filter results by type ID.
     *      - *with* - array - optional
     *          - Appends relations to types. Expected values: ['allStatuses'] / ['activeStatuses']
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationType
     */
    public function eachConversationsTypes(array $query = []): Iterator
    {
        return $this->eachInternal('getConversationsTypes', func_get_args());
    }
        
    /**
     * @description Returns a paginated result object will list of conversation types
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to id). Expected values: id/position
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *isDeleted* - boolean - optional
     *          - Filter results by deleted flag.
     *      - *name* - string - optional
     *          - Filter results by type name.
     *      - *id* - int - optional
     *          - Filter results by type ID.
     *      - *with* - array - optional
     *          - Appends relations to types. Expected values: ['allStatuses'] / ['activeStatuses']
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationType
     */
    public function batchConversationsTypes(array $query = []): Iterator
    {
        return $this->batchInternal('getConversationsTypes', func_get_args());
    }
    
    /**
     * @description Returns a paginated result object will list of conversation types
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The page number (defaults to 1).
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page (defaults to 50).
     *      - *sortBy* - string - optional
     *          - The sorting column (defaults to id). Expected values: id/position
     *      - *sortOrder* - string - optional
     *          - The sorting direction (defaults to asc).
     *      - *isDeleted* - boolean - optional
     *          - Filter results by deleted flag.
     *      - *name* - string - optional
     *          - Filter results by type name.
     *      - *id* - int - optional
     *          - Filter results by type ID.
     *      - *with* - array - optional
     *          - Appends relations to types. Expected values: ['allStatuses'] / ['activeStatuses']
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ConversationType
     */
    public function getConversationsTypes(array $query = []): array
    {
        return $this->api(array_merge(["/rest/conversations/types"], $query));
    }
                
    /**
     * @description Creates a new type
     * @tag Messenger
     * @return array
     *      - *id* - integer
     *          - The ID of the type
     *      - *position* - integer
     *          - The position of the type (used in sorting)
     *      - *userId* - integer
     *          - The suer ID which performed the last update
     *      - *isDeleted* - boolean
     *          - Flag that indicates if the type was deleted
     */
    public function createConversationsType(): array
    {
        return $this->api("/rest/conversations/types", 'POST');
    }
                    
    /**
     * @description Deletes a single type (soft delete, type will be flagged as deleted)
     * @tag Messenger
     * @param int $id 
     */
    public function deleteConversationsTypeById(int $id)
    {
        return $this->api("/rest/conversations/types/{$id}", 'DELETE');
    }
                
    /**
     * @description Retrieves a single type based on ID
     * @tag Messenger
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The ID of the type
     *      - *position* - integer
     *          - The position of the type (used in sorting)
     *      - *userId* - integer
     *          - The suer ID which performed the last update
     *      - *isDeleted* - boolean
     *          - Flag that indicates if the type was deleted
     */
    public function getConversationsTypeById(int $id): array
    {
        return $this->api("/rest/conversations/types/{$id}");
    }
                
    /**
     * @description Updates an existing type
     * @tag Messenger
     * @param int $id 
     * @return array
     *      - *id* - integer
     *          - The ID of the type
     *      - *position* - integer
     *          - The position of the type (used in sorting)
     *      - *userId* - integer
     *          - The suer ID which performed the last update
     *      - *isDeleted* - boolean
     *          - Flag that indicates if the type was deleted
     */
    public function updateConversationsTypeById(int $id): array
    {
        return $this->api("/rest/conversations/types/{$id}", 'PUT');
    }
                    
    /**
     * @description Unsubscribe the current user from multiple conversations
     * @tag Messenger
     * @param array $query
     *      - *uuids* - array - required
     *          - The list of conversations UUID's to unsubscribe from. Expected values: ['24810ce7-4b75-45d0-8610-7fb07ede0d86']
     */
    public function updateConversationsUnsubscribe(array $query)
    {
        return $this->api(array_merge(["/rest/conversations/unsubscribe"], $query), 'PUT');
    }
                    
    /**
     * @description Deletes a conversation (soft delete, conversation will be moved to trash)
     * @tag Messenger
     * @param int $uuid5 
     */
    public function deleteConversationByUuid5(int $uuid5)
    {
        return $this->api("/rest/conversations/{$uuid5}", 'DELETE');
    }
                
    /**
     * @description Get a single conversation by UUID
     * @tag Messenger
     * @param int $uuid5 
     * @return array
     *      - *uuid* - string
     *          - The UUID of the conversation
     *      - *shortId* - string
     *          - The Short ID of the Conversation
     *      - *plentyIdHash* - string
     *          - The plentyIdHash
     *      - *plentyId* - integer
     *          - The plentyId of the relation contact
     *      - *inboxId* - string
     *          - The inboxId from the assistant
     *      - *title* - string
     *          - The Title of the Conversation
     *      - *tagIds* - array
     *          - Array of tag IDs
     *      - *isClosed* - boolean
     *          - Boolean that indicates if the conversation is closed
     *      - *isDeleted* - boolean
     *          - Boolean that indicates if the conversation is deleted
     *      - *readBy* - array
     *          - Array of user ids (int)
     *      - ** - boolean
     *          - validRelation Conversation has the relations validated
     *      - *priorityId* - string
     *          - The Priority of the Conversation
     *      - *typeId* - integer
     *          - ID of conversation type
     *      - *typePosition* - integer
     *          - Sort order of conversation type
     *      - *statusId* - integer
     *          - ID of conversation status
     *      - *statusPosition* - integer
     *          - Sort order of conversation status
     *      - *hasWhisperedMessages* - boolean
     *          - Flag that indicates if a conversation contains whispered messages
     *      - *messagesTitles* - array
     *          - Array of all message titles
     *      - *messagesBodies* - array
     *          - Array with all message bodies stripped of tags
     *      - *messagesTags* - array
     *          - Array with all tag ID's from all messages
     *      - *messagesPaths* - array
     *          - Array with s3 messages paths
     *      - *messagesIds* - array
     *          - Array with all messages UUID's
     *      - *isMigratedToEs* - integer
     *          - Flag that indicates if the conversation is synced to ES (used during messenger migration to new structure)
     *      - *isArchived* - boolean
     *          - Flag that indicates if the conversation is archived
     */
    public function getConversationByUuid5(int $uuid5): array
    {
        return $this->api("/rest/conversations/{$uuid5}");
    }
                
    /**
     * @description Updates a conversation by UUID
     * @tag Messenger
     * @param int $uuid5 
     * @return array
     *      - *uuid* - string
     *          - The UUID of the conversation
     *      - *shortId* - string
     *          - The Short ID of the Conversation
     *      - *plentyIdHash* - string
     *          - The plentyIdHash
     *      - *plentyId* - integer
     *          - The plentyId of the relation contact
     *      - *inboxId* - string
     *          - The inboxId from the assistant
     *      - *title* - string
     *          - The Title of the Conversation
     *      - *tagIds* - array
     *          - Array of tag IDs
     *      - *isClosed* - boolean
     *          - Boolean that indicates if the conversation is closed
     *      - *isDeleted* - boolean
     *          - Boolean that indicates if the conversation is deleted
     *      - *readBy* - array
     *          - Array of user ids (int)
     *      - ** - boolean
     *          - validRelation Conversation has the relations validated
     *      - *priorityId* - string
     *          - The Priority of the Conversation
     *      - *typeId* - integer
     *          - ID of conversation type
     *      - *typePosition* - integer
     *          - Sort order of conversation type
     *      - *statusId* - integer
     *          - ID of conversation status
     *      - *statusPosition* - integer
     *          - Sort order of conversation status
     *      - *hasWhisperedMessages* - boolean
     *          - Flag that indicates if a conversation contains whispered messages
     *      - *messagesTitles* - array
     *          - Array of all message titles
     *      - *messagesBodies* - array
     *          - Array with all message bodies stripped of tags
     *      - *messagesTags* - array
     *          - Array with all tag ID's from all messages
     *      - *messagesPaths* - array
     *          - Array with s3 messages paths
     *      - *messagesIds* - array
     *          - Array with all messages UUID's
     *      - *isMigratedToEs* - integer
     *          - Flag that indicates if the conversation is synced to ES (used during messenger migration to new structure)
     *      - *isArchived* - boolean
     *          - Flag that indicates if the conversation is archived
     */
    public function updateConversationByUuid5(int $uuid5): array
    {
        return $this->api("/rest/conversations/{$uuid5}", 'PUT');
    }
                    
    /**
     * @description Subscribes a user to a conversation
     * @tag Messenger
     * @param int $uuid5 
     * @param array $query
     *      - *userId* - int - required
     *          - The ID of the user to be subscribed. Expected format: 1
     */
    public function updateConversationsSubscribeByUuid5(int $uuid5, array $query)
    {
        return $this->api(array_merge(["/rest/conversations/{$uuid5}/subscribe"], $query), 'PUT');
    }
                    
    /**
     * @description Adds tags to a single conversation
     * @tag Messenger
     * @param int $uuid5 
     * @param array $query
     *      - *tagIds* - array - required
     *          - The list of tags to be added. Expected values: [17, 18]
     */
    public function updateConversationsTagByUuid5(int $uuid5, array $query)
    {
        return $this->api(array_merge(["/rest/conversations/{$uuid5}/tags"], $query), 'PUT');
    }
                    
    /**
     * @description Unsubscribes a user from a conversation
     * @tag Messenger
     * @param int $uuid5 
     * @param array $query
     *      - *userId* - int - required
     *          - The ID of the user to be unsubscribed. Expected format: 1
     */
    public function updateConversationsUnsubscribeByUuid5(int $uuid5, array $query)
    {
        return $this->api(array_merge(["/rest/conversations/{$uuid5}/unsubscribe"], $query), 'PUT');
    }
                    
    /**
     * @description Lists the stream of messages of a certain message (excluding the message with the given UUID5).
     * @tag Messenger
     * @param array $query
     *      - *uuid* - string - optional
     *          - The reference UUID5 of the message to start from (excluding).
     *      - *successors* - boolean - optional
     *          - If set to FALSE, the messages older than the referenced message will be returned.
     *      - *amount* - int - optional
     *          - The number of messages to be listed (defaults to 50)
     * @return array
     */
    public function getMessages(array $query = []): array
    {
        return $this->api(array_merge(["/rest/messages"], $query));
    }
                
    /**
     * @description Creates a new message.
     * @tag Messenger
     * @param array $data 
     * @return array
     *      - *uuid* - string
     *          - The UUID5 identifier of the message
     *      - *plentyIdHash* - string
     *          - The plenty ID hash
     *      - *parentUuid* - string
     *          - The UUID5 of the parent message
     *      - *conversationId* - string
     *          - The UUID5 of the conversation
     *      - *whispered* - boolean
     *          - Whether the message is whispered (not visible for the contact/order linked to the message) or not
     *      - *tags* - array
     *          - An array with tag IDs assigned to the message
     *      - *title* - string
     *          - The title of the message
     *      - *preview* - string
     *          - The first two lines of the message without any markup
     *      - *message* - string
     *          - The content of the message
     *      - *plainMessage* - string
     *          - The content of the message as plain text
     *      - *attachedFilesCount* - integer
     *          - The amount of attached files (readonly)
     *      - *doneAt* - string
     *          - The date the messages was set to done
     *      - *createdAt* - string
     *          - The creation date of the message
     *      - *updatedAt* - string
     *          - The date of the last update of the message
     *      - *deletedAt* - string
     *          - The date the message was deleted
     *      - *deletedBy* - integer
     *          - The ID of the user who deleted the message
     */
    public function createMessage(array $data): array
    {
        return $this->api("/rest/messages", 'POST', $data);
    }
                    
    /**
     * @description Lists the stream of archived messages of a certain conversation.
     * @tag Messenger
     * @param array $query
     *      - *conversationId* - string - required
     *          - The reference UUID5 of the conversation to start from.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Message
     */
    public function getMessagesForArchivedConversation(array $query): array
    {
        return $this->api(array_merge(["/rest/messages/forArchivedConversation"], $query));
    }
                    
    /**
     * @description Lists the number of messages per page.
     * @tag Messenger
     * @param array $query
     *      - *page* - int - optional
     *          - The number of the returned page of messages. The default value is 1 (the first).
     *      - *itemsPerPage* - int - optional
     *          - The number of messages to be listed (defaults to 50).
     * @return array
     */
    public function getMessagesGet(array $query = []): array
    {
        return $this->api(array_merge(["/rest/messages/get"], $query));
    }
                    
    /**
     * @description Deletes a message by the UUID. The UUID must be specified.
     * @tag Messenger
     * @param string $uuid5 The UUID of the message to be deleted
     */
    public function deleteMessageByUuid5(string $uuid5)
    {
        return $this->api("/rest/messages/{$uuid5}", 'DELETE');
    }
                
    /**
     * @description Gets the message for the given UUID5 and all its associated successors. The UUID must be specified.
     * @tag Messenger
     * @param string $uuid5 The UUID5 of the message
     * @return array
     */
    public function getMessageByUuid5(string $uuid5): array
    {
        return $this->api("/rest/messages/{$uuid5}");
    }
                    
    /**
     * @description Gets an attachment. The UUID of the message and the file name must be specified.
     * @tag Messenger
     * @param string $uuid5 The UUID of the message
     * @param array $query
     *      - *filename* - string - required
     *          - The file name of the attachment
     */
    public function getMessagesAttachmentsByUuid5(string $uuid5, array $query)
    {
        return $this->api(array_merge(["/rest/messages/{$uuid5}/attachments"], $query));
    }
                    
    /**
     * @description Gets all attachments as ZIP file. The UUID of the message must be specified.
     * @tag Messenger
     * @param string $uuid5 The UUID of the message
     */
    public function getMessagesAttachmentsAllByUuid5(string $uuid5)
    {
        return $this->api("/rest/messages/{$uuid5}/attachments/all");
    }
                    
    /**
     * @description Updates the message ui control options in the message meta data and returns the message.
     * @tag Messenger
     * @param int $uuid5 
     * @param array $data 
     * @return array
     *      - *uuid* - string
     *          - The UUID5 identifier of the message
     *      - *plentyIdHash* - string
     *          - The plenty ID hash
     *      - *parentUuid* - string
     *          - The UUID5 of the parent message
     *      - *conversationId* - string
     *          - The UUID5 of the conversation
     *      - *whispered* - boolean
     *          - Whether the message is whispered (not visible for the contact/order linked to the message) or not
     *      - *tags* - array
     *          - An array with tag IDs assigned to the message
     *      - *title* - string
     *          - The title of the message
     *      - *preview* - string
     *          - The first two lines of the message without any markup
     *      - *message* - string
     *          - The content of the message
     *      - *plainMessage* - string
     *          - The content of the message as plain text
     *      - *attachedFilesCount* - integer
     *          - The amount of attached files (readonly)
     *      - *doneAt* - string
     *          - The date the messages was set to done
     *      - *createdAt* - string
     *          - The creation date of the message
     *      - *updatedAt* - string
     *          - The date of the last update of the message
     *      - *deletedAt* - string
     *          - The date the message was deleted
     *      - *deletedBy* - integer
     *          - The ID of the user who deleted the message
     */
    public function updateMessagesControlByUuid5(int $uuid5, array $data): array
    {
        return $this->api("/rest/messages/{$uuid5}/controls", 'PUT', $data);
    }
                    
    /**
     * @description Sets or unsets the doneAt date of the message. The UUID {uuid5} must be specified.
     * @tag Messenger
     * @param string $uuid5 The UUID5 of the message
     * @param array $data 
     * @param array $query
     *      - *doneAt* - string - optional
     *          - Set (or unset, if doneAt is not given) the doneAt date in the message.
     * @return array
     */
    public function updateMessagesDoneByUuid5(string $uuid5, array $data, array $query = []): array
    {
        return $this->api(array_merge(["/rest/messages/{$uuid5}/done"], $query), 'PUT', $data);
    }
                    
    /**
     * @description Updates the ReadBy array of the message. The UUID must be specified.
     * @tag Messenger
     * @param string $uuid5 The UUID of the message
     * @param array $query
     *      - *readBy* - int - required
     *          - The ID of the user who read the message
     * @return array
     */
    public function updateMessagesReadByByUuid5(string $uuid5, array $query): array
    {
        return $this->api(array_merge(["/rest/messages/{$uuid5}/readBy"], $query), 'PUT');
    }
                    
    /**
     * @description Updates the tags of the message. The UUID must be specified.
     * @tag Messenger
     * @param string $uuid5 The UUID of the message
     * @param array $query
     *      - *tags* - array - required
     *          - The tags of the message
     * @return array
     *      - *uuid* - string
     *          - The UUID5 identifier of the message
     *      - *plentyIdHash* - string
     *          - The plenty ID hash
     *      - *parentUuid* - string
     *          - The UUID5 of the parent message
     *      - *conversationId* - string
     *          - The UUID5 of the conversation
     *      - *whispered* - boolean
     *          - Whether the message is whispered (not visible for the contact/order linked to the message) or not
     *      - *tags* - array
     *          - An array with tag IDs assigned to the message
     *      - *title* - string
     *          - The title of the message
     *      - *preview* - string
     *          - The first two lines of the message without any markup
     *      - *message* - string
     *          - The content of the message
     *      - *plainMessage* - string
     *          - The content of the message as plain text
     *      - *attachedFilesCount* - integer
     *          - The amount of attached files (readonly)
     *      - *doneAt* - string
     *          - The date the messages was set to done
     *      - *createdAt* - string
     *          - The creation date of the message
     *      - *updatedAt* - string
     *          - The date of the last update of the message
     *      - *deletedAt* - string
     *          - The date the message was deleted
     *      - *deletedBy* - integer
     *          - The ID of the user who deleted the message
     */
    public function updateMessagesTagByUuid5(string $uuid5, array $query): array
    {
        return $this->api(array_merge(["/rest/messages/{$uuid5}/tags"], $query), 'PUT');
    }
                    
    /**
     * @description Updates the message visibility. The UUID must be specified.
     * @tag Messenger
     * @param string $uuid5 The UUID of the message
     * @param array $data 
     * @return array
     */
    public function updateMessagesVisibilityByUuid5(string $uuid5, array $data): array
    {
        return $this->api("/rest/messages/{$uuid5}/visibility", 'PUT', $data);
    }
                    
    /**
     * @description Retrieves the general settings object
     * @tag Messenger

     */
    public function getMessengerSettings()
    {
        return $this->api("/rest/messenger/settings");
    }
                
    /**
     * @description Updates the general settings object
     * @tag Messenger

     */
    public function updateMessengerSetting()
    {
        return $this->api("/rest/messenger/settings", 'PUT');
    }
    
}
