<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Order extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Creates an advance order.
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createAdvanceOrder(): array
    {
        return $this->api("/rest/advance_orders", 'POST');
    }
                    
    /**
     * @description Change an order item of type "unassigned variation" to "variation". The ID of the order item and variation ID must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createAdvanceOrdersItemsAssignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/advance_orders/items/{$orderItemId}/assign_variation", 'POST');
    }
                    
    /**
     * @description Change an order item of type "variation" to "unassigned variation". The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createAdvanceOrdersItemsUnassignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/advance_orders/items/{$orderItemId}/unassign_variation", 'POST');
    }
                    
    /**
     * @description Returns an advance order preview for the given order data without creating an advance order.
     * @tag Order
     * @return array
     */
    public function createAdvanceOrdersPreview(): array
    {
        return $this->api("/rest/advance_orders/preview", 'POST');
    }
                    
    /**
     * @description Deletes an advance order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteAdvanceOrderByOrderId(int $orderId): void
    {
        $this->api("/rest/advance_orders/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates an advance order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateAdvanceOrderByOrderId(int $orderId): array
    {
        return $this->api("/rest/advance_orders/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Returns an advance order preview for the given order data without updating an advance order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateAdvanceOrdersPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/advance_orders/{$orderId}/preview", 'PUT');
    }
                    
    /**
     * @description Creates a credit note.
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createCreditNote(): array
    {
        return $this->api("/rest/credit_notes", 'POST');
    }
                    
    /**
     * @description Change an order item of type "unassigned variation" to "variation". The ID of the order item and variation ID must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createCreditNotesItemsAssignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/credit_notes/items/{$orderItemId}/assign_variation", 'POST');
    }
                    
    /**
     * @description Change an order item of type "variation" to "unassigned variation". The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createCreditNotesItemsUnassignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/credit_notes/items/{$orderItemId}/unassign_variation", 'POST');
    }
                    
    /**
     * @description Returns a credit note preview for the given order data without creating a credit note.
     * @tag Order
     * @return array
     */
    public function createCreditNotesPreview(): array
    {
        return $this->api("/rest/credit_notes/preview", 'POST');
    }
                    
    /**
     * @description Deletes a credit note. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteCreditNoteByOrderId(int $orderId): void
    {
        $this->api("/rest/credit_notes/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates a credit note. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateCreditNoteByOrderId(int $orderId): array
    {
        return $this->api("/rest/credit_notes/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Returns a credit note preview for the given order data without updating a credit note. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateCreditNotesPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/credit_notes/{$orderId}/preview", 'PUT');
    }
                    
    /**
     * @description Creates a new delivery order.
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createDeliveryOrder(): array
    {
        return $this->api("/rest/delivery_orders", 'POST');
    }
                    
    /**
     * @description Change an order item of type "unassigned variation" to "variation". The ID of the order item and variation ID must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createDeliveryOrdersItemsAssignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/delivery_orders/items/{$orderItemId}/assign_variation", 'POST');
    }
                    
    /**
     * @description Change an order item of type "variation" to "unassigned variation". The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createDeliveryOrdersItemsUnassignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/delivery_orders/items/{$orderItemId}/unassign_variation", 'POST');
    }
                    
    /**
     * @description Returns a delivery order preview for the given order data without creating a delivery order.
     * @tag Order
     * @return array
     */
    public function createDeliveryOrdersPreview(): array
    {
        return $this->api("/rest/delivery_orders/preview", 'POST');
    }
                    
    /**
     * @description Deletes a delivery order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteDeliveryOrderByOrderId(int $orderId): void
    {
        $this->api("/rest/delivery_orders/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates a delivery order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateDeliveryOrderByOrderId(int $orderId): array
    {
        return $this->api("/rest/delivery_orders/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Books out the order items of an order. The ID of the order must be specified and a booking date can be specified. The current date and time will be used if no date is specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     */
    public function createDeliveryOrdersBookByOrderId(int $orderId, array $data): void
    {
        $this->api("/rest/delivery_orders/{$orderId}/book", 'POST', $data);
    }
                    
    /**
     * @description Cancellation the booking of an order. The ID of the order must be specified. With the array 'quantities' the items to cancel can be defined. If 'quantities' is not given, the whole order will be cancelled and the booking date will be deleted. If 'quantities' is defined, the booking date won't be reset.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     */
    public function createDeliveryOrdersCancelBookingByOrderId(int $orderId, array $data): void
    {
        $this->api("/rest/delivery_orders/{$orderId}/cancel_booking", 'POST', $data);
    }
                    
    /**
     * @description Validates cancellation of the booking of an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createDeliveryOrdersCancelBookingValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/delivery_orders/{$orderId}/cancel_booking/validate", 'POST');
    }
                    
    /**
     * @description Returns a delivery order preview for the given order data without updating a delivery order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateDeliveryOrdersPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/delivery_orders/{$orderId}/preview", 'PUT');
    }
                    
    /**
     * @description Updates a multi credit note. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateMultiCreditNoteByOrderId(int $orderId): array
    {
        return $this->api("/rest/multi_credit_notes/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Updates a multi order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateMultiOrderByOrderId(int $orderId): array
    {
        return $this->api("/rest/multi_orders/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Creates an offer.
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOffer(): array
    {
        return $this->api("/rest/offers", 'POST');
    }
                    
    /**
     * @description Change an order item of type "unassigned variation" to "variation". The ID of the order item and variation ID must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOffersItemsAssignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/offers/items/{$orderItemId}/assign_variation", 'POST');
    }
                    
    /**
     * @description Change an order item of type "variation" to "unassigned variation". The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOffersItemsUnassignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/offers/items/{$orderItemId}/unassign_variation", 'POST');
    }
                    
    /**
     * @description Returns an offer preview for the given order data without creating an offer.
     * @tag Order
     * @return array
     */
    public function createOffersPreview(): array
    {
        return $this->api("/rest/offers/preview", 'POST');
    }
                    
    /**
     * @description Deletes an offer. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteOfferByOrderId(int $orderId): void
    {
        $this->api("/rest/offers/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates an offer. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateOfferByOrderId(int $orderId): array
    {
        return $this->api("/rest/offers/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Returns an offer preview for the given order data without updating an offer. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateOffersPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/offers/{$orderId}/preview", 'PUT');
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: GET /rest/orders/search</b>
Searches for orders. The results can be restricted by using filter options.
     * @tag Order
     * @param array $query
     *      - *orderType* - string - optional
     *          - Filter that restricts the search result to orders of specific order types. The ID of the order types must be specified. Several order type IDs can be entered separated by commas. @see order model typeId
     *      - *contactId* - int - optional
     *          - Filter that restricts the search result to orders of a contact. The ID of the contact must be specified.
     *      - *contactData* - string - optional
     *          - Filter that restricts the search result to orders with a specific contact data.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to orders of a specific order referrer. The ID of the order referrer must be specified.
     *      - *shippingProfileId* - int - optional
     *          - Filter that restricts the search result to orders with a specific shipping profile. The ID of shipping profile must be specified.
     *      - *shippingServiceProviderId* - int - optional
     *          - Filter that restricts the search result to orders with a specific shipping service provider (like DHL, UPS, etc.). The ID of shipping service provider must be specified.
     *      - *ownerUserId* - int - optional
     *          - Filter that restricts the search result to orders with a specific owner. The user ID of the owner must be specified.
     *      - *warehouseId* - int - optional
     *          - Filter that restricts the search result to orders with a specific main warehouse. The ID of the warehouse must be specified.
     *      - *isEbayPlus* - boolean - optional
     *          - Filter that restricts the search result to orders with the referrer eBay PLUS.
     *      - *includedVariation* - int - optional
     *          - Filter that restricts the search result to orders including a specific variation. The ID of the variation must be specified.
     *      - *includedItem* - int - optional
     *          - Filter that restricts the search result to orders including a specific item. The ID of the item must be specified.
     *      - *orderIds* - array - optional
     *          - Filter that restricts the search result to orders with a specific ID. To list several orders, the order IDs must be enetered separated by commas.
     *      - *countryId* - int - optional
     *          - Filter that restricts the search result to orders with a specific delivery or invoice country. The ID of the country must be specified.
     *      - *orderItemName* - string - optional
     *          - Filter that restricts the search result to orders including a specific item name. The name of the item must be specified.
     *      - *variationNumber* - int - optional
     *          - Filter that restricts the search result to orders including a specific variation number. The number of the variation must be specified.
     *      - *packageNumber* - string - optional
     *          - Filter that restricts the search result to orders including a specific package number. The number of the package must be specified.
     *      - *sender.contact* - int - optional
     *          - Filter that restricts the search result to orders including a specific sender of the type contact. For example, the supplier is a sender of the type contact for reorders. The ID of the sender must be specified.
     *      - *sender.warehouse* - int - optional
     *          - Filter that restricts the search result to orders including a specific sender of the type warehouse. For example, the sending warehouse is a sender of the type warehouse for redistributions. The ID of the sender must be specified.
     *      - *receiver.contact* - int - optional
     *          - Filter that restricts the search result to orders including a specific receiver of the type contact. For example, a receiver of the type contact is the recipient of a main order. The ID of the receiver must be specified.
     *      - *receiver.warehouse* - int - optional
     *          - Filter that restricts the search result to orders with a specific receiver of the type warehouse. TFor example, the receiving receiving warehouse is a receiver of the type warehouse for redistributions. The ID of the receiver must be specified.
     *      - *externalOrderId* - string - optional
     *          - Filter that restricts the search result to orders including a specific external order ID. The external order ID must be specified.
     *      - *clientId* - int - optional
     *          - Filter that restricts the search result to orders belonging to a specific client. The ID of the client must be specified.
     *      - *paymentStatus* - string - optional
     *          - Filter that restricts the search result to orders with a specific payment status. Valid values are unpaid, partlyPaid, fullyPaid, overpaid. One of these values must be specified.
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to orders that were last updated on a specified date. This filter can be used alone or can be combined with the UpdatedAtTo filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to orders that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *createdAtFrom* - string - optional
     *          - Filter that restricts the search result to orders that were created from a specified date up to the present date. This filter can be used alone or can be combined with the CreatedAtTo filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *createdAtTo* - string - optional
     *          - Filter that restricts the search result to orders that were created within a certain period of time. This filter can be used alone or can be combined with the CreatedAtFrom filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *paidAtFrom* - string - optional
     *          - Filter that restricts the search result to orders that received a payment on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *paidAtTo* - string - optional
     *          - Filter that restricts the search result to orders that received a payment within a certain period of time. This filter can be used alone or can be combined with the paidAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *outgoingItemsBookedAtFrom* - string - optional
     *          - Filter that restricts the search result to orders where the outgoing items were booked on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *outgoingItemsBookedAtTo* - string - optional
     *          - Filter that restricts the search result to orders where the outgoing items were booked within a specified period of time. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *statusFrom* - number - optional
     *          - Filter that restricts the search result to orders in a specific order status. The value of the order status must be specified.
     *      - *statusTo* - number - optional
     *          - Filter that restricts the search result to orders within a range of order statuses. This filter can be used alone or can be combined with the statusFrom filter. The value of the order status must be specified.
     *      - *hasDocument* - string - optional
     *          - Filter that restricts the search result to orders which hold the given document type. Valid values are <i>multi_invoice</i>, <i>multi_credit_note</i>, <i>success_confirmation</i>, <i>return_note</i>, <i>pickup_delivery</i>, <i>repair_bill</i>, <i>dunning_letter</i>, <i>offer</i>, <i>order_confirmation</i>, <i>credit_note</i>, <i>correction_document</i>, <i>delivery_note</i>, <i>invoice</i>, <i>invoice_external</i>, <i>receipt</i>
     *      - *hasDocumentNumber* - string - optional
     *          - Filter that restricts the search result to orders which hold documents with given number.
     *      - *parentOrderId* - int - optional
     *          - Filter that restricts the search result to orders which have the given order ID as parent.
     *      - *addOrderItems* - boolean - optional
     *          - Add the order items to the results. Default = true.
     *      - *externalItemId* - string - optional
     *          - Filter that restricts the search result to orders that have order items with the given external item ID.
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order. Currently possible are:
    <ul>
    <li>'addresses' = The address objects that are associated with the order.</li>
    <li>'relations' = The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.</li>
    <li>'comments' = The order comments.</li>
    <li>'location' = The accounting location of the order.</li>
    <li>'payments' = The payments that are associated with the order.</li>
    <li>'documents' = The documents that are associated with the order.</li>
    <li>'contactSender' = The associated contact for the contact-sender relation.</li>
    <li>'contactReceiver' = The associated contact for the contact-receiver relation.</li>
    <li>'warehouseSender' = The associated warehouse for the warehouse-sender relation.</li>
    <li>'warehouseReceiver' = The associated warehouse for the warehouse-receiver relation.</li>
    <li>'orderItems.variation' = The variation that is associated with the order item.</li>
    <li>'orderItems.variation.propertiesV2' = The properties belonging to the variation.</li>
    <li>'orderItems.giftCardCodes' = The gift card codes that are associated with the order item.</li>
    <li>'orderItems.transactions' = The transactions that are associated with the order item.</li>
    <li>'orderItems.serialNumbers' = The serial numbers that are associated with the order item.</li>
    <li>'orderItems.variationBarcodes' = The barcodes that are associated with variation of the order item.</li>
    <li>'orderItems.comments' = The comments that are associated with the order item.</li>
    <li>'originOrderReferences' = The references to other orders, e.g. returns or credit notes, associated with this order.</li>
    <li>'shippingPackages' = The shipping packages that are associated with the order.</li>
    <li>'shippingPackages.items' = The orderPackageItems associated with the package.</li>
    <li>'shippingInformation' = The shipping information for the order.</li>
    <li>'paymentTerms' = The payment terms that are associated with the order.</li>
    <li><b>deprecated</b> 'orderItems.warehouseLocations' = The warehouse locations that are associated with the order item.</li>
    </ul>
    Example: <code>?with[]=addresses&with[]=orderItems.variation</code>
     *      - *sortBy* - string - optional
     *          - Sort the result. Possible values are
     <ul>
        <li>'id': Sort by order ID (default)</li>
        <li>'statusId': Sort by order status ID</li>
        <li>'createdAt': Sort by order creation date</li>
        <li>'orderDocument': Sort by order document number</li>
     </ul>
     
     *      - *sortOrder* - string - optional
     *          - Sorting behaviour. Possible values are
     <ul>
        <li>'asc': Sort by ascending order (default)</li>
        <li>'desc': Sort by descending order</li>
     </ul>
     
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Order
     */
    public function eachOrders(array $query = []): Iterator
    {
        return $this->eachInternal('getOrders', func_get_args());
    }
        
    /**
     * @description <b>DEPRECATED: Use the following route: GET /rest/orders/search</b>
Searches for orders. The results can be restricted by using filter options.
     * @tag Order
     * @param array $query
     *      - *orderType* - string - optional
     *          - Filter that restricts the search result to orders of specific order types. The ID of the order types must be specified. Several order type IDs can be entered separated by commas. @see order model typeId
     *      - *contactId* - int - optional
     *          - Filter that restricts the search result to orders of a contact. The ID of the contact must be specified.
     *      - *contactData* - string - optional
     *          - Filter that restricts the search result to orders with a specific contact data.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to orders of a specific order referrer. The ID of the order referrer must be specified.
     *      - *shippingProfileId* - int - optional
     *          - Filter that restricts the search result to orders with a specific shipping profile. The ID of shipping profile must be specified.
     *      - *shippingServiceProviderId* - int - optional
     *          - Filter that restricts the search result to orders with a specific shipping service provider (like DHL, UPS, etc.). The ID of shipping service provider must be specified.
     *      - *ownerUserId* - int - optional
     *          - Filter that restricts the search result to orders with a specific owner. The user ID of the owner must be specified.
     *      - *warehouseId* - int - optional
     *          - Filter that restricts the search result to orders with a specific main warehouse. The ID of the warehouse must be specified.
     *      - *isEbayPlus* - boolean - optional
     *          - Filter that restricts the search result to orders with the referrer eBay PLUS.
     *      - *includedVariation* - int - optional
     *          - Filter that restricts the search result to orders including a specific variation. The ID of the variation must be specified.
     *      - *includedItem* - int - optional
     *          - Filter that restricts the search result to orders including a specific item. The ID of the item must be specified.
     *      - *orderIds* - array - optional
     *          - Filter that restricts the search result to orders with a specific ID. To list several orders, the order IDs must be enetered separated by commas.
     *      - *countryId* - int - optional
     *          - Filter that restricts the search result to orders with a specific delivery or invoice country. The ID of the country must be specified.
     *      - *orderItemName* - string - optional
     *          - Filter that restricts the search result to orders including a specific item name. The name of the item must be specified.
     *      - *variationNumber* - int - optional
     *          - Filter that restricts the search result to orders including a specific variation number. The number of the variation must be specified.
     *      - *packageNumber* - string - optional
     *          - Filter that restricts the search result to orders including a specific package number. The number of the package must be specified.
     *      - *sender.contact* - int - optional
     *          - Filter that restricts the search result to orders including a specific sender of the type contact. For example, the supplier is a sender of the type contact for reorders. The ID of the sender must be specified.
     *      - *sender.warehouse* - int - optional
     *          - Filter that restricts the search result to orders including a specific sender of the type warehouse. For example, the sending warehouse is a sender of the type warehouse for redistributions. The ID of the sender must be specified.
     *      - *receiver.contact* - int - optional
     *          - Filter that restricts the search result to orders including a specific receiver of the type contact. For example, a receiver of the type contact is the recipient of a main order. The ID of the receiver must be specified.
     *      - *receiver.warehouse* - int - optional
     *          - Filter that restricts the search result to orders with a specific receiver of the type warehouse. TFor example, the receiving receiving warehouse is a receiver of the type warehouse for redistributions. The ID of the receiver must be specified.
     *      - *externalOrderId* - string - optional
     *          - Filter that restricts the search result to orders including a specific external order ID. The external order ID must be specified.
     *      - *clientId* - int - optional
     *          - Filter that restricts the search result to orders belonging to a specific client. The ID of the client must be specified.
     *      - *paymentStatus* - string - optional
     *          - Filter that restricts the search result to orders with a specific payment status. Valid values are unpaid, partlyPaid, fullyPaid, overpaid. One of these values must be specified.
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to orders that were last updated on a specified date. This filter can be used alone or can be combined with the UpdatedAtTo filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to orders that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *createdAtFrom* - string - optional
     *          - Filter that restricts the search result to orders that were created from a specified date up to the present date. This filter can be used alone or can be combined with the CreatedAtTo filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *createdAtTo* - string - optional
     *          - Filter that restricts the search result to orders that were created within a certain period of time. This filter can be used alone or can be combined with the CreatedAtFrom filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *paidAtFrom* - string - optional
     *          - Filter that restricts the search result to orders that received a payment on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *paidAtTo* - string - optional
     *          - Filter that restricts the search result to orders that received a payment within a certain period of time. This filter can be used alone or can be combined with the paidAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *outgoingItemsBookedAtFrom* - string - optional
     *          - Filter that restricts the search result to orders where the outgoing items were booked on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *outgoingItemsBookedAtTo* - string - optional
     *          - Filter that restricts the search result to orders where the outgoing items were booked within a specified period of time. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *statusFrom* - number - optional
     *          - Filter that restricts the search result to orders in a specific order status. The value of the order status must be specified.
     *      - *statusTo* - number - optional
     *          - Filter that restricts the search result to orders within a range of order statuses. This filter can be used alone or can be combined with the statusFrom filter. The value of the order status must be specified.
     *      - *hasDocument* - string - optional
     *          - Filter that restricts the search result to orders which hold the given document type. Valid values are <i>multi_invoice</i>, <i>multi_credit_note</i>, <i>success_confirmation</i>, <i>return_note</i>, <i>pickup_delivery</i>, <i>repair_bill</i>, <i>dunning_letter</i>, <i>offer</i>, <i>order_confirmation</i>, <i>credit_note</i>, <i>correction_document</i>, <i>delivery_note</i>, <i>invoice</i>, <i>invoice_external</i>, <i>receipt</i>
     *      - *hasDocumentNumber* - string - optional
     *          - Filter that restricts the search result to orders which hold documents with given number.
     *      - *parentOrderId* - int - optional
     *          - Filter that restricts the search result to orders which have the given order ID as parent.
     *      - *addOrderItems* - boolean - optional
     *          - Add the order items to the results. Default = true.
     *      - *externalItemId* - string - optional
     *          - Filter that restricts the search result to orders that have order items with the given external item ID.
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order. Currently possible are:
    <ul>
    <li>'addresses' = The address objects that are associated with the order.</li>
    <li>'relations' = The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.</li>
    <li>'comments' = The order comments.</li>
    <li>'location' = The accounting location of the order.</li>
    <li>'payments' = The payments that are associated with the order.</li>
    <li>'documents' = The documents that are associated with the order.</li>
    <li>'contactSender' = The associated contact for the contact-sender relation.</li>
    <li>'contactReceiver' = The associated contact for the contact-receiver relation.</li>
    <li>'warehouseSender' = The associated warehouse for the warehouse-sender relation.</li>
    <li>'warehouseReceiver' = The associated warehouse for the warehouse-receiver relation.</li>
    <li>'orderItems.variation' = The variation that is associated with the order item.</li>
    <li>'orderItems.variation.propertiesV2' = The properties belonging to the variation.</li>
    <li>'orderItems.giftCardCodes' = The gift card codes that are associated with the order item.</li>
    <li>'orderItems.transactions' = The transactions that are associated with the order item.</li>
    <li>'orderItems.serialNumbers' = The serial numbers that are associated with the order item.</li>
    <li>'orderItems.variationBarcodes' = The barcodes that are associated with variation of the order item.</li>
    <li>'orderItems.comments' = The comments that are associated with the order item.</li>
    <li>'originOrderReferences' = The references to other orders, e.g. returns or credit notes, associated with this order.</li>
    <li>'shippingPackages' = The shipping packages that are associated with the order.</li>
    <li>'shippingPackages.items' = The orderPackageItems associated with the package.</li>
    <li>'shippingInformation' = The shipping information for the order.</li>
    <li>'paymentTerms' = The payment terms that are associated with the order.</li>
    <li><b>deprecated</b> 'orderItems.warehouseLocations' = The warehouse locations that are associated with the order item.</li>
    </ul>
    Example: <code>?with[]=addresses&with[]=orderItems.variation</code>
     *      - *sortBy* - string - optional
     *          - Sort the result. Possible values are
     <ul>
        <li>'id': Sort by order ID (default)</li>
        <li>'statusId': Sort by order status ID</li>
        <li>'createdAt': Sort by order creation date</li>
        <li>'orderDocument': Sort by order document number</li>
     </ul>
     
     *      - *sortOrder* - string - optional
     *          - Sorting behaviour. Possible values are
     <ul>
        <li>'asc': Sort by ascending order (default)</li>
        <li>'desc': Sort by descending order</li>
     </ul>
     
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Order
     */
    public function batchOrders(array $query = []): Iterator
    {
        return $this->batchInternal('getOrders', func_get_args());
    }
    
    /**
     * @description <b>DEPRECATED: Use the following route: GET /rest/orders/search</b>
Searches for orders. The results can be restricted by using filter options.
     * @tag Order
     * @param array $query
     *      - *orderType* - string - optional
     *          - Filter that restricts the search result to orders of specific order types. The ID of the order types must be specified. Several order type IDs can be entered separated by commas. @see order model typeId
     *      - *contactId* - int - optional
     *          - Filter that restricts the search result to orders of a contact. The ID of the contact must be specified.
     *      - *contactData* - string - optional
     *          - Filter that restricts the search result to orders with a specific contact data.
     *      - *referrerId* - number - optional
     *          - Filter that restricts the search result to orders of a specific order referrer. The ID of the order referrer must be specified.
     *      - *shippingProfileId* - int - optional
     *          - Filter that restricts the search result to orders with a specific shipping profile. The ID of shipping profile must be specified.
     *      - *shippingServiceProviderId* - int - optional
     *          - Filter that restricts the search result to orders with a specific shipping service provider (like DHL, UPS, etc.). The ID of shipping service provider must be specified.
     *      - *ownerUserId* - int - optional
     *          - Filter that restricts the search result to orders with a specific owner. The user ID of the owner must be specified.
     *      - *warehouseId* - int - optional
     *          - Filter that restricts the search result to orders with a specific main warehouse. The ID of the warehouse must be specified.
     *      - *isEbayPlus* - boolean - optional
     *          - Filter that restricts the search result to orders with the referrer eBay PLUS.
     *      - *includedVariation* - int - optional
     *          - Filter that restricts the search result to orders including a specific variation. The ID of the variation must be specified.
     *      - *includedItem* - int - optional
     *          - Filter that restricts the search result to orders including a specific item. The ID of the item must be specified.
     *      - *orderIds* - array - optional
     *          - Filter that restricts the search result to orders with a specific ID. To list several orders, the order IDs must be enetered separated by commas.
     *      - *countryId* - int - optional
     *          - Filter that restricts the search result to orders with a specific delivery or invoice country. The ID of the country must be specified.
     *      - *orderItemName* - string - optional
     *          - Filter that restricts the search result to orders including a specific item name. The name of the item must be specified.
     *      - *variationNumber* - int - optional
     *          - Filter that restricts the search result to orders including a specific variation number. The number of the variation must be specified.
     *      - *packageNumber* - string - optional
     *          - Filter that restricts the search result to orders including a specific package number. The number of the package must be specified.
     *      - *sender.contact* - int - optional
     *          - Filter that restricts the search result to orders including a specific sender of the type contact. For example, the supplier is a sender of the type contact for reorders. The ID of the sender must be specified.
     *      - *sender.warehouse* - int - optional
     *          - Filter that restricts the search result to orders including a specific sender of the type warehouse. For example, the sending warehouse is a sender of the type warehouse for redistributions. The ID of the sender must be specified.
     *      - *receiver.contact* - int - optional
     *          - Filter that restricts the search result to orders including a specific receiver of the type contact. For example, a receiver of the type contact is the recipient of a main order. The ID of the receiver must be specified.
     *      - *receiver.warehouse* - int - optional
     *          - Filter that restricts the search result to orders with a specific receiver of the type warehouse. TFor example, the receiving receiving warehouse is a receiver of the type warehouse for redistributions. The ID of the receiver must be specified.
     *      - *externalOrderId* - string - optional
     *          - Filter that restricts the search result to orders including a specific external order ID. The external order ID must be specified.
     *      - *clientId* - int - optional
     *          - Filter that restricts the search result to orders belonging to a specific client. The ID of the client must be specified.
     *      - *paymentStatus* - string - optional
     *          - Filter that restricts the search result to orders with a specific payment status. Valid values are unpaid, partlyPaid, fullyPaid, overpaid. One of these values must be specified.
     *      - *updatedAtFrom* - string - optional
     *          - Filter that restricts the search result to orders that were last updated on a specified date. This filter can be used alone or can be combined with the UpdatedAtTo filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *updatedAtTo* - string - optional
     *          - Filter that restricts the search result to orders that were last updated within a specified period of time. This filter can be used alone or can be combined with the UpdatedAtFrom filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *createdAtFrom* - string - optional
     *          - Filter that restricts the search result to orders that were created from a specified date up to the present date. This filter can be used alone or can be combined with the CreatedAtTo filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *createdAtTo* - string - optional
     *          - Filter that restricts the search result to orders that were created within a certain period of time. This filter can be used alone or can be combined with the CreatedAtFrom filter. The date has to be entered in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *paidAtFrom* - string - optional
     *          - Filter that restricts the search result to orders that received a payment on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *paidAtTo* - string - optional
     *          - Filter that restricts the search result to orders that received a payment within a certain period of time. This filter can be used alone or can be combined with the paidAtFrom filter. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *outgoingItemsBookedAtFrom* - string - optional
     *          - Filter that restricts the search result to orders where the outgoing items were booked on the specified date. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *outgoingItemsBookedAtTo* - string - optional
     *          - Filter that restricts the search result to orders where the outgoing items were booked within a specified period of time. The date has to be in the W3C format, e.g. '2016-10-24T13:33:23+02:00'.
     *      - *statusFrom* - number - optional
     *          - Filter that restricts the search result to orders in a specific order status. The value of the order status must be specified.
     *      - *statusTo* - number - optional
     *          - Filter that restricts the search result to orders within a range of order statuses. This filter can be used alone or can be combined with the statusFrom filter. The value of the order status must be specified.
     *      - *hasDocument* - string - optional
     *          - Filter that restricts the search result to orders which hold the given document type. Valid values are <i>multi_invoice</i>, <i>multi_credit_note</i>, <i>success_confirmation</i>, <i>return_note</i>, <i>pickup_delivery</i>, <i>repair_bill</i>, <i>dunning_letter</i>, <i>offer</i>, <i>order_confirmation</i>, <i>credit_note</i>, <i>correction_document</i>, <i>delivery_note</i>, <i>invoice</i>, <i>invoice_external</i>, <i>receipt</i>
     *      - *hasDocumentNumber* - string - optional
     *          - Filter that restricts the search result to orders which hold documents with given number.
     *      - *parentOrderId* - int - optional
     *          - Filter that restricts the search result to orders which have the given order ID as parent.
     *      - *addOrderItems* - boolean - optional
     *          - Add the order items to the results. Default = true.
     *      - *externalItemId* - string - optional
     *          - Filter that restricts the search result to orders that have order items with the given external item ID.
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order. Currently possible are:
    <ul>
    <li>'addresses' = The address objects that are associated with the order.</li>
    <li>'relations' = The order relation reference instances that are associated with the order. These instances contain information such as the the reference type, the ID of the reference and the relation itself.</li>
    <li>'comments' = The order comments.</li>
    <li>'location' = The accounting location of the order.</li>
    <li>'payments' = The payments that are associated with the order.</li>
    <li>'documents' = The documents that are associated with the order.</li>
    <li>'contactSender' = The associated contact for the contact-sender relation.</li>
    <li>'contactReceiver' = The associated contact for the contact-receiver relation.</li>
    <li>'warehouseSender' = The associated warehouse for the warehouse-sender relation.</li>
    <li>'warehouseReceiver' = The associated warehouse for the warehouse-receiver relation.</li>
    <li>'orderItems.variation' = The variation that is associated with the order item.</li>
    <li>'orderItems.variation.propertiesV2' = The properties belonging to the variation.</li>
    <li>'orderItems.giftCardCodes' = The gift card codes that are associated with the order item.</li>
    <li>'orderItems.transactions' = The transactions that are associated with the order item.</li>
    <li>'orderItems.serialNumbers' = The serial numbers that are associated with the order item.</li>
    <li>'orderItems.variationBarcodes' = The barcodes that are associated with variation of the order item.</li>
    <li>'orderItems.comments' = The comments that are associated with the order item.</li>
    <li>'originOrderReferences' = The references to other orders, e.g. returns or credit notes, associated with this order.</li>
    <li>'shippingPackages' = The shipping packages that are associated with the order.</li>
    <li>'shippingPackages.items' = The orderPackageItems associated with the package.</li>
    <li>'shippingInformation' = The shipping information for the order.</li>
    <li>'paymentTerms' = The payment terms that are associated with the order.</li>
    <li><b>deprecated</b> 'orderItems.warehouseLocations' = The warehouse locations that are associated with the order item.</li>
    </ul>
    Example: <code>?with[]=addresses&with[]=orderItems.variation</code>
     *      - *sortBy* - string - optional
     *          - Sort the result. Possible values are
     <ul>
        <li>'id': Sort by order ID (default)</li>
        <li>'statusId': Sort by order status ID</li>
        <li>'createdAt': Sort by order creation date</li>
        <li>'orderDocument': Sort by order document number</li>
     </ul>
     
     *      - *sortOrder* - string - optional
     *          - Sorting behaviour. Possible values are
     <ul>
        <li>'asc': Sort by ascending order (default)</li>
        <li>'desc': Sort by descending order</li>
     </ul>
     
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Order
     */
    public function getOrders(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders"], $query));
    }
                
    /**
     * @description Creates an order. The parameters included in the example below must be specified.
     * @tag Order
     * @param array $data 
     * @param array $query
     *      - *coupon* - array - optional
     *          - One or multiple coupon code to be redeemed with order creation
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrder(array $data, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders"], $query), 'POST', $data);
    }
                    
    /**
     * @description Gets orders. The IDs of the orders must be specified.
     * @tag Order
     * @param array $query
     *      - *orderIds* - array - required
     *          - The IDs of the orders.
     *      - *with* - array - optional
     *          - Load additional relations for an order. The following relations are available:
     * <ul>
    <li>'addresses' = The address objects linked to the order.</li>
    <li>'relations' = The order relation reference instances that are associated with the order. These instances contain information such as the reference type. The available reference types are parent and reorder. The ID of the reference and the relation itself are also available.</li>
    <li>'comments' = The order comments.</li>
    <li>'location' = The accounting location linked to the order.</li>
    <li>'payments' = The payments linked to the order.</li>
    <li>'documents' = The documents linked to the order.</li>
    <li>'contactSender' = The contact belonging the contact-sender relation.</li>
    <li>'contactReceiver' = The contact belonging to the contact-receiver relation.</li>
    <li>'warehouseSender' = The warehouse belonging to the warehouse-sender relation.</li>
    <li>'warehouseReceiver' = The warehouse belonging to the warehouse-receiver relation.</li>
    <li>'orderItems.variation' = The variation data belonging to the order item.</li>
    <li>'orderItems.variation.propertiesV2' = The properties belonging to the variation.</li>
    <li>'orderItems.giftCardCodes' = The gift card codes belonging to the order item.</li>
    <li>'orderItems.transactions' = The transactions belonging to the order item.</li>
    <li>'orderItems.serialNumbers' = The serial numbers belonging to the order item.</li>
    <li>'orderItems.variationBarcodes' = The barcodes belonging to the order item.</li>
    <li>'orderItems.comments' = The comments belonging to the order item.</li>
    <li>'shippingPackages' = The shipping packages that are associated with the order.</li>
    <li>'paymentTerms' = The payment terms that are associated with the order.</li>
    <li><b>deprecated</b> 'orderItems.warehouseLocations' = The warehouse locations linked to the order item.</li>
    </ul>
    Example: <code>?with[]=addresses&with[]=orderItems.variation</code>
     *      - *addOrderItems* - boolean - optional
     *          - Add the order items to the result. Default = true.
     */
    public function getOrdersBatch(array $query): void
    {
        $this->api(array_merge(["/rest/orders/batch"], $query));
    }
                
    /**
     * @description Lists all orders of a contact. The ID of the contact must be specified.
     * @tag Order
     * @param int $contactId The ID of the contact.
     * @param array $query
     *      - *page* - int - required
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order. The following relations are available:
     * <ul>
       <li>'addresses' = The address objects linked to the order.</li>
       <li>'relations' = The order relation reference instances that are associated with the order. These instances contain information such as the reference type. The available reference types are parent and reorder. The ID of the reference and the relation itself are also available.</li>
       <li>'comments' = The order comments.</li>
       <li>'location' = The accounting location linked to the order.</li>
       <li>'payments' = The payments linked to the order.</li>
       <li>'documents' = The documents linked to the order.</li>
       <li>'contactSender' = The contact belonging the contact-sender relation.</li>
       <li>'contactReceiver' = The contact belonging to the contact-receiver relation.</li>
       <li>'warehouseSender' = The warehouse belonging to the warehouse-sender relation.</li>
       <li>'warehouseReceiver' = The warehouse belonging to the warehouse-receiver relation.</li>
       <li>'orderItems.variation' = The variation data belonging to the order item.</li>
       <li>'orderItems.variation.propertiesV2' = The properties belonging to the variation.</li>
       <li>'orderItems.giftCardCodes' = The gift card codes belonging to the order item.</li>
       <li>'orderItems.transactions' = The transactions belonging to the order item.</li>
       <li>'orderItems.serialNumbers' = The serial numbers belonging to the order item.</li>
       <li>'orderItems.variationBarcodes' = The barcodes belonging to the order item.</li>
       <li>'orderItems.comments' = The comments belonging to the order item.</li>
       <li>'shippingPackages' = The shipping packages that are associated with the order.</li>
       <li>'paymentTerms' = The payment terms that are associated with the order.</li>
       <li><b>deprecated</b> 'orderItems.warehouseLocations' = The warehouse locations linked to the order item.</li>
     </ul>
    Example: <code>?with[]=addresses&with[]=orderItems.variation</code>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Order
     */
    public function eachOrdersContactByContactId(int $contactId, array $query): Iterator
    {
        return $this->eachInternal('getOrdersContactByContactId', func_get_args());
    }
        
    /**
     * @description Lists all orders of a contact. The ID of the contact must be specified.
     * @tag Order
     * @param int $contactId The ID of the contact.
     * @param array $query
     *      - *page* - int - required
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order. The following relations are available:
     * <ul>
       <li>'addresses' = The address objects linked to the order.</li>
       <li>'relations' = The order relation reference instances that are associated with the order. These instances contain information such as the reference type. The available reference types are parent and reorder. The ID of the reference and the relation itself are also available.</li>
       <li>'comments' = The order comments.</li>
       <li>'location' = The accounting location linked to the order.</li>
       <li>'payments' = The payments linked to the order.</li>
       <li>'documents' = The documents linked to the order.</li>
       <li>'contactSender' = The contact belonging the contact-sender relation.</li>
       <li>'contactReceiver' = The contact belonging to the contact-receiver relation.</li>
       <li>'warehouseSender' = The warehouse belonging to the warehouse-sender relation.</li>
       <li>'warehouseReceiver' = The warehouse belonging to the warehouse-receiver relation.</li>
       <li>'orderItems.variation' = The variation data belonging to the order item.</li>
       <li>'orderItems.variation.propertiesV2' = The properties belonging to the variation.</li>
       <li>'orderItems.giftCardCodes' = The gift card codes belonging to the order item.</li>
       <li>'orderItems.transactions' = The transactions belonging to the order item.</li>
       <li>'orderItems.serialNumbers' = The serial numbers belonging to the order item.</li>
       <li>'orderItems.variationBarcodes' = The barcodes belonging to the order item.</li>
       <li>'orderItems.comments' = The comments belonging to the order item.</li>
       <li>'shippingPackages' = The shipping packages that are associated with the order.</li>
       <li>'paymentTerms' = The payment terms that are associated with the order.</li>
       <li><b>deprecated</b> 'orderItems.warehouseLocations' = The warehouse locations linked to the order item.</li>
     </ul>
    Example: <code>?with[]=addresses&with[]=orderItems.variation</code>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Order
     */
    public function batchOrdersContactByContactId(int $contactId, array $query): Iterator
    {
        return $this->batchInternal('getOrdersContactByContactId', func_get_args());
    }
    
    /**
     * @description Lists all orders of a contact. The ID of the contact must be specified.
     * @tag Order
     * @param int $contactId The ID of the contact.
     * @param array $query
     *      - *page* - int - required
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - required
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order. The following relations are available:
     * <ul>
       <li>'addresses' = The address objects linked to the order.</li>
       <li>'relations' = The order relation reference instances that are associated with the order. These instances contain information such as the reference type. The available reference types are parent and reorder. The ID of the reference and the relation itself are also available.</li>
       <li>'comments' = The order comments.</li>
       <li>'location' = The accounting location linked to the order.</li>
       <li>'payments' = The payments linked to the order.</li>
       <li>'documents' = The documents linked to the order.</li>
       <li>'contactSender' = The contact belonging the contact-sender relation.</li>
       <li>'contactReceiver' = The contact belonging to the contact-receiver relation.</li>
       <li>'warehouseSender' = The warehouse belonging to the warehouse-sender relation.</li>
       <li>'warehouseReceiver' = The warehouse belonging to the warehouse-receiver relation.</li>
       <li>'orderItems.variation' = The variation data belonging to the order item.</li>
       <li>'orderItems.variation.propertiesV2' = The properties belonging to the variation.</li>
       <li>'orderItems.giftCardCodes' = The gift card codes belonging to the order item.</li>
       <li>'orderItems.transactions' = The transactions belonging to the order item.</li>
       <li>'orderItems.serialNumbers' = The serial numbers belonging to the order item.</li>
       <li>'orderItems.variationBarcodes' = The barcodes belonging to the order item.</li>
       <li>'orderItems.comments' = The comments belonging to the order item.</li>
       <li>'shippingPackages' = The shipping packages that are associated with the order.</li>
       <li>'paymentTerms' = The payment terms that are associated with the order.</li>
       <li><b>deprecated</b> 'orderItems.warehouseLocations' = The warehouse locations linked to the order item.</li>
     </ul>
    Example: <code>?with[]=addresses&with[]=orderItems.variation</code>
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Order
     */
    public function getOrdersContactByContactId(int $contactId, array $query): array
    {
        return $this->api(array_merge(["/rest/orders/contacts/{$contactId}"], $query));
    }
                    
    /**
     * @description Creates a multi-order for a contact. The ID of the contact must be specified. Options chosen in the System » Orders » Order types » Multi-order menu are relevant for this call.
     * @tag Order
     * @param int $contactId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersContactsMultiOrderByContactId(int $contactId): array
    {
        return $this->api("/rest/orders/contacts/{$contactId}/multi_order", 'POST');
    }
                    
    /**
     * @description Deletes a coupon by the coupon code.
     * @tag Order
     * @param int $code 
     * @param array $query
     *      - *withoutUsed* - int - optional
     *          - Do not delete used coupons
     */
    public function deleteOrdersCouponsCampaignsCodeByCode(int $code, array $query = []): void
    {
        $this->api(array_merge(["/rest/orders/coupons/campaigns/codes/{$code}"], $query), 'DELETE');
    }
                
    /**
     * @description Gets coupon code information. The code must be specified.
     * @tag Order
     * @param string $code The coupon code
     * @param array $query
     *      - *with* - string - optional
     *          - Load additional relations for a coupon code. Currently possible are:
     * <ul>
     *   <li>'campaign' = The coupon campaign to which this code belongs to.</li>
     * </ul>
     * Example: <code>?with=campaign</code>
     * @return array
     *      - *code* - string
     *          - The coupon code
     *      - *campaignId* - integer
     *          - The ID of the campaign that the code belongs to
     *      - *disable* - integer
     *          - Flag that indicates if a code is active or deactivated.
<ul><li>True = the code is deactivated</li>
    <li>False = the code is active</li></ul>
     *      - *consumed* - integer
     *          - Flag that indicates if a code was redeemed or not.
<ul><li>True = the code was redeemed</li>
    <li>False = the code is not redeemed</li></ul>
     *      - *usedCount* - integer
     *          - How many times a code has been redeemed
     *      - *usedAmount* - number
     *          - The amount that is already redeemed. The total amount that can be redeemed is defined in the campaign as coupon value, because the value applies to all codes of a campaign.
     *      - *value* - number
     *          - The value of the coupon if it differs from the campaign value. The value is null if the campaign value is used.
     */
    public function getOrdersCouponsCampaignsCodeByCode(string $code, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/coupons/campaigns/codes/{$code}"], $query));
    }
                    
    /**
     * @description Sets the coupon disable field.
     * @tag Order
     * @param int $code 
     * @param int $isDisabled 
     */
    public function updateOrdersCouponsCampaignsCodesDisabledByCodeIsDisabled(int $code, int $isDisabled): void
    {
        $this->api("/rest/orders/coupons/campaigns/codes/{$code}/disabled/{$isDisabled}", 'PUT');
    }
                    
    /**
     * @description Creates a coupon code. The ID of the campaign must be specified. A code can optionally be specified. A random code will be generated if the code is not specified. A coupon value can also be optionally specified. The value of the campaign will be used if no individual value is specified.
     * @tag Order
     * @param int $campaignId 
     * @param array $data 
     * @return array
     *      - *code* - string
     *          - The coupon code
     *      - *campaignId* - integer
     *          - The ID of the campaign that the code belongs to
     *      - *disable* - integer
     *          - Flag that indicates if a code is active or deactivated.
<ul><li>True = the code is deactivated</li>
    <li>False = the code is active</li></ul>
     *      - *consumed* - integer
     *          - Flag that indicates if a code was redeemed or not.
<ul><li>True = the code was redeemed</li>
    <li>False = the code is not redeemed</li></ul>
     *      - *usedCount* - integer
     *          - How many times a code has been redeemed
     *      - *usedAmount* - number
     *          - The amount that is already redeemed. The total amount that can be redeemed is defined in the campaign as coupon value, because the value applies to all codes of a campaign.
     *      - *value* - number
     *          - The value of the coupon if it differs from the campaign value. The value is null if the campaign value is used.
     */
    public function createOrdersCouponsCampaignsCodeByCampaignId(int $campaignId, array $data): array
    {
        return $this->api("/rest/orders/coupons/campaigns/{$campaignId}/codes", 'POST', $data);
    }
                    
    /**
     * @description Validates if multiple coupon codes can be used for the specified items, contact ID, etc. At least one code must be specified. Only one coupon code for special offers (promotional code) can be specified. Promotional codes are validated first. Gift card codes are validated and redeemed after the promotional code to ensure that any discounts are calculated correctly.
If any coupon code is invalid, a CouponCodeValidation object with an exception parameter will be added to the list. If the coupon code is valid, a CouponCodeValidation object will be added to the list.
     * @tag Order
     * @param array $data 
     * @param array $query
     *      - *coupons* - array - required
     *          - The coupons to validate.
     *      - *callFromScheduler* - boolean - optional
     *          - Flag that indicates whether the validation is requested by a subscription order or not. TRUE = The validation is requested by a subscription order. FALSE = The validation is not requested by a subscription order.
     *      - *plentyId* - int - required
     *          - The plenty id.
     *      - *shipToCountry* - int - required
     *          - The country of delivery.
     *      - *taxIdNumber* - string - optional
     *          - The tax id number.
     *      - *contactClass* - int - optional
     *          - The contact class.
     *      - *contactType* - int - optional
     *          - The contact type.
     * @return array
     */
    public function createOrdersCouponsCode(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/orders/coupons/codes"], $query), 'POST', $data);
    }
                
    /**
     * @description Lists the redeemed coupon codes of contact. The ID of the contact must be specified.
     * @tag Order
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of coupons to be displayed per page. The default number of coupons per page is 50.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of CouponCodeContact
     */
    public function eachOrdersCouponsCodesContactByContactId(int $contactId, array $query = []): Iterator
    {
        return $this->eachInternal('getOrdersCouponsCodesContactByContactId', func_get_args());
    }
        
    /**
     * @description Lists the redeemed coupon codes of contact. The ID of the contact must be specified.
     * @tag Order
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of coupons to be displayed per page. The default number of coupons per page is 50.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of CouponCodeContact
     */
    public function batchOrdersCouponsCodesContactByContactId(int $contactId, array $query = []): Iterator
    {
        return $this->batchInternal('getOrdersCouponsCodesContactByContactId', func_get_args());
    }
    
    /**
     * @description Lists the redeemed coupon codes of contact. The ID of the contact must be specified.
     * @tag Order
     * @param int $contactId The ID of the contact
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of coupons to be displayed per page. The default number of coupons per page is 50.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of CouponCodeContact
     */
    public function getOrdersCouponsCodesContactByContactId(int $contactId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/coupons/codes/contacts/{$contactId}"], $query));
    }
                    
    /**
     * @description Validates if a coupon code can be used for the specified items, contact ID, etc. The code must be specified. If the coupon code is invalid, a ValidationException will be thrown. If the coupon code is valid, a CouponCodeValidation object will be returned.
     * @tag Order
     * @param string $coupon The coupon to validate.
     * @param array $data 
     * @param array $query
     *      - *callFromScheduler* - boolean - optional
     *          - Flag that indicates whether the validation is requested by a subscription order or not. TRUE = The validation is requested by a subscription order. FALSE = The validation is not requested by a subscription order.
     *      - *plentyId* - int - required
     *          - The plenty id.
     *      - *shipToCountry* - int - required
     *          - The country of delivery.
     *      - *taxIdNumber* - string - optional
     *          - The tax id number.
     *      - *contactClass* - int - optional
     *          - The contact class.
     *      - *contactType* - int - optional
     *          - The contact type.
     * @return array
     *      - *campaignId* - integer
     *          - The ID of the campaign
     *      - *validationType* - string
     *          - The type of the campaign. Currently the only type available is plentymarkets.
     *      - *contactId* - integer
     *          - The ID of the contact that wants to redeem the coupon
     *      - *couponCode* - string
     *          - The coupon code
     *      - *currency* - string
     *          - The currency of the purchase
     *      - *exchangeRate* - number
     *          - The exchange rate of the purchase (optional, is loaded from settings if not given)
     *      - *referrer* - number
     *          - The order referrer
     *      - *salesDiscount* - number
     *          - The total discount from a coupon applied to an order. The discount is given as gross amount.
     *      - *salesDiscountNet* - number
     *          - The net discount from a coupon applied to an order. The net discount is the total discount minus the vat amount.
     *      - *itemDiscount* - number
     *          - The discount amount applied to items.
     *      - *itemDiscountNet* - number
     *          - The net discount applied to items.
     *      - *shippingDiscount* - number
     *          - The discount applied to shipping costs.
     *      - *shippingDiscountNet* - number
     *          - The net discount applied to shipping costs.
     *      - *usedVatFields* - array
     *          - The vat fields used for the validation
     *      - *restCouponAmount* - number
     *          - The remaining coupon amount
     *      - *checkedItems* - array
     *          - The list of variations that passed the validation
     *      - *validateParams* - array
     *          - Validation parameters
     *      - *couponCampaignType* - string
     *          - The campaign type
     */
    public function createOrdersCouponsCodeByCoupon(string $coupon, array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/orders/coupons/codes/{$coupon}"], $query), 'POST', $data);
    }
                    
    /**
     * @description List currencies supported in the system.
     * @tag Order
     * @param array $query
     *      - *columns* - array - optional
     *          - The attributes to be loaded
     *      - *with* - array - optional
     *          - The relations to be loaded. Valid relations are 'names' or 'countries'.
     * @return array
     */
    public function getOrdersCurrencies(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/currencies"], $query));
    }
                    
    /**
     * @description Get a currency for a country. The ID of the country must be specified.
     * @tag Order
     * @param int $countryId 
     * @param array $query
     *      - *columns* - array - optional
     *          - The attributes to be loaded
     *      - *with* - array - optional
     *          - The relations to be loaded. Valid relations are 'names' or 'countries').
     * @return array
     *      - *currency* - string
     *          - The ISO 4217 code and id of the currency.
     *      - *htmlCode* - string
     *          - The html code (entity) for the currency.
     *      - *unicodeSign* - string
     *          - The unicode symbol for the currency. If no unicode symbol exists, the html code will be used.
     *      - *isActive* - boolean
     *          - Flag that indicates if the currency is active in the system or not. Currencies are activated per sales price.
     *      - *isErasable* - boolean
     *          - Flag that indicates if this currency can be deleted or not. <ul><li>False = Currency cannot be deleted</li><li>True = Currency can be deleted</li></ul>
     *      - *exchangeRate* - number
     *          - The current exchange rate for this currency.
     */
    public function getOrdersCurrenciesCountryByCountryId(int $countryId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/currencies/countries/{$countryId}"], $query));
    }
                    
    /**
     * @description Gets the exchange rates from a currency. The ISO 4271 code of the currency must be specified.
     * @tag Order
     * @param int $currencyIso 
     * @return array
     */
    public function getOrdersCurrenciesExchangeRatesFromByCurrencyIso(int $currencyIso): array
    {
        return $this->api("/rest/orders/currencies/exchange_rates/from/{$currencyIso}");
    }
                    
    /**
     * @description Gets the exchange rates to a currency. The ISO 4271 code of the currency must be specified.
     * @tag Order
     * @param int $currencyIso 
     * @return array
     */
    public function getOrdersCurrenciesExchangeRatesToByCurrencyIso(int $currencyIso): array
    {
        return $this->api("/rest/orders/currencies/exchange_rates/to/{$currencyIso}");
    }
                    
    /**
     * @description Get a currency. The ISO 4217 code of the currency must be specified.
     * @tag Order
     * @param string $currencyIso The ISO 4217 code of the currency
     * @param array $query
     *      - *columns* - array - optional
     *          - The attributes to be loaded
     *      - *with* - array - optional
     *          - The relations to be loaded. Valid relations are 'names' or 'countries'
     * @return array
     *      - *currency* - string
     *          - The ISO 4217 code and id of the currency.
     *      - *htmlCode* - string
     *          - The html code (entity) for the currency.
     *      - *unicodeSign* - string
     *          - The unicode symbol for the currency. If no unicode symbol exists, the html code will be used.
     *      - *isActive* - boolean
     *          - Flag that indicates if the currency is active in the system or not. Currencies are activated per sales price.
     *      - *isErasable* - boolean
     *          - Flag that indicates if this currency can be deleted or not. <ul><li>False = Currency cannot be deleted</li><li>True = Currency can be deleted</li></ul>
     *      - *exchangeRate* - number
     *          - The current exchange rate for this currency.
     */
    public function getOrdersCurrencyByCurrencyIso(string $currencyIso, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/currencies/{$currencyIso}"], $query));
    }
                    
    /**
     * @description List countries for a currency. The ISO 4271 code of the currency must be specified.
     * @tag Order
     * @param string $currencyIso The ISO 4217 code of the currency
     * @param array $query
     *      - *columns* - array - optional
     *          - The attributes to be loaded
     * @return array
     */
    public function getOrdersCurrenciesCountriesByCurrencyIso(string $currencyIso, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/currencies/{$currencyIso}/countries"], $query));
    }
                    
    /**
     * @description Gets the exchange rate for a currency. The ISO 4271 code of the currency must be specified.
     * @tag Order
     * @param int $currencyIso 
     * @return array
     *      - *exchangeRate* - number
     *          - The exchange rate
     */
    public function getOrdersCurrenciesExchangeRateByCurrencyIso(int $currencyIso): array
    {
        return $this->api("/rest/orders/currencies/{$currencyIso}/exchangeRate");
    }
                    
    /**
     * @description Lists all available order date types.
<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
<li>13 = Subscription cancelled on</li>
<li>14 = Subscription last run</li>
<li>15 = Subscription next run</li>
</ul>
     * @tag Order
     * @return array
     */
    public function getOrdersDatesTypes(): array
    {
        return $this->api("/rest/orders/dates/types");
    }
                    
    /**
     * @description Finds an order date type. The ID of the type must be specified. The following IDs are available:
<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
<li>13 = Subscription cancelled on</li>
<li>14 = Subscription last run</li>
<li>15 = Subscription next run</li>
</ul>
     * @tag Order
     * @param int $typeId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order date type. The following date types are available:

* Deleted on = 1
* Created on = 2
* Paid date = 3
* Last update = 4
* Completed on = 5
* Return date = 6
* Payment due date = 7
* Estimated shipping date = 8
* Start date = 9
* End date = 10
* Possible delivery date = 11
* Market transfer date = 12
* Subscription cancelled on = 13
* Subscription last run = 14
* Subscription next run = 15
* Confirmation link valid until  = 19
     *      - *isErasable* - boolean
     *          - Flag that indicates if this type can be deleted or not.
     *      - *position* - integer
     *          - The position for sorting
     */
    public function getOrdersDatesTypeByTypeId(int $typeId): array
    {
        return $this->api("/rest/orders/dates/types/{$typeId}");
    }
                    
    /**
     * @description Lists names in all languages available of an order date type. The ID of the date type must be specified. The following IDs are available:
<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
<li>13 = Subscription cancelled on</li>
<li>14 = Subscription last run</li>
<li>15 = Subscription next run</li>
</ul>
     * @tag Order
     * @param int $typeId The Id of the OrderDateType to be found
     * @return array
     */
    public function getOrdersDatesTypesNamesByTypeId(int $typeId): array
    {
        return $this->api("/rest/orders/dates/types/{$typeId}/names");
    }
                    
    /**
     * @description Gets a name of an order date type. The ID of the date type must be specified. The language of the order date type name must be specified by setting the ISO code of the language. The following IDs are available:

<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
<li>13 = Subscription cancelled on</li>
<li>14 = Subscription last run</li>
<li>15 = Subscription next run</li>
</ul>
     * @tag Order
     * @param int $typeId The ID of the order date type that should be found
     * @param string $lang The language of the order date type name
     * @return array
     *      - *id* - integer
     *          - The ID of the order date type name
     *      - *typeId* - integer
     *          - The ID of the date type that this name belongs to. The following date types are available:

* Deleted on = 1
* Created on = 2
* Paid date = 3
* Last update = 4
* Completed on = 5
* Return date = 6
* Payment due date = 7
* Estimated shipping date = 8
* Start date = 9
* End date = 10
* Possible delivery date = 11
* Market transfer date = 12
     *      - *lang* - string
     *          - The ISO 639-1 language code for the name, e.g. "en" for English
     *      - *name* - string
     *          - The name of the order date type
     */
    public function getOrdersDatesTypesNameByTypeIdLang(int $typeId, string $lang): array
    {
        return $this->api("/rest/orders/dates/types/{$typeId}/names/{$lang}");
    }
                
    /**
     * @description Lists document accounting summaries. A document accounting summary is saved along with each reversal document (for invoice and credit note). It contains accounting information about the order for this point in time. The summary is saved because an order can be updated after a reversal document is generated. The information about the order before the update is needed for accounting purposes.
     * @tag Order
     * @param array $query
     *      - *orderId* - int - optional
     *          - The ID of the order.
     *      - *documentType* - string - optional
     *          - The document type. The types that can be returned are the following: reversal_document (reversal document for an invoice) and reversal_refund (reversal document for an invoice).
     *      - *createdAtFrom* - string - optional
     *          - Get entries with createdAt date after this date.
     *      - *createdAtTo* - string - optional
     *          - Get entries with createdAt date before this date.
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of summaries that should be displayed per page. The default number of orders per page is 10.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StorageObject
     */
    public function eachOrdersDocumentsAccountingSummary(array $query = []): Iterator
    {
        return $this->eachInternal('getOrdersDocumentsAccountingSummary', func_get_args());
    }
        
    /**
     * @description Lists document accounting summaries. A document accounting summary is saved along with each reversal document (for invoice and credit note). It contains accounting information about the order for this point in time. The summary is saved because an order can be updated after a reversal document is generated. The information about the order before the update is needed for accounting purposes.
     * @tag Order
     * @param array $query
     *      - *orderId* - int - optional
     *          - The ID of the order.
     *      - *documentType* - string - optional
     *          - The document type. The types that can be returned are the following: reversal_document (reversal document for an invoice) and reversal_refund (reversal document for an invoice).
     *      - *createdAtFrom* - string - optional
     *          - Get entries with createdAt date after this date.
     *      - *createdAtTo* - string - optional
     *          - Get entries with createdAt date before this date.
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of summaries that should be displayed per page. The default number of orders per page is 10.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StorageObject
     */
    public function batchOrdersDocumentsAccountingSummary(array $query = []): Iterator
    {
        return $this->batchInternal('getOrdersDocumentsAccountingSummary', func_get_args());
    }
    
    /**
     * @description Lists document accounting summaries. A document accounting summary is saved along with each reversal document (for invoice and credit note). It contains accounting information about the order for this point in time. The summary is saved because an order can be updated after a reversal document is generated. The information about the order before the update is needed for accounting purposes.
     * @tag Order
     * @param array $query
     *      - *orderId* - int - optional
     *          - The ID of the order.
     *      - *documentType* - string - optional
     *          - The document type. The types that can be returned are the following: reversal_document (reversal document for an invoice) and reversal_refund (reversal document for an invoice).
     *      - *createdAtFrom* - string - optional
     *          - Get entries with createdAt date after this date.
     *      - *createdAtTo* - string - optional
     *          - Get entries with createdAt date before this date.
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of summaries that should be displayed per page. The default number of orders per page is 10.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StorageObject
     */
    public function getOrdersDocumentsAccountingSummary(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/documents/accounting_summary"], $query));
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Creates a date for an order item. The ID of the order item and the order item date must be specified. Also, an array containing the order item ID, the type ID of the order item date must be set. The following order item date type IDs are available:

<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
</ul>
     * @tag Order
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order date
     *      - *orderItemId* - integer
     *          - The ID of the order item that the date belongs to
     *      - *typeId* - integer
     *          - The ID of the date type. The following types are available:

* Start date = 9
* End date = 10
* Estimated delivery date = 11
     *      - *createdAt* - string
     *          - The date when the date was created
     *      - *updatedAt* - string
     *          - The date when the date was last updated
     */
    public function createOrdersItemsDate(array $data): array
    {
        return $this->api("/rest/orders/items/dates", 'POST', $data);
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Deletes the date of an order item. The ID of the date must be specified.
     * @tag Order
     * @param int $id The ID of the order item date
     */
    public function deleteOrdersItemsDateById(int $id): void
    {
        $this->api("/rest/orders/items/dates/{$id}", 'DELETE');
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: GET /rest/orders/{orderId}</b>
Gets a date of an order item. The ID of the date must be specified. The following IDs are available:
<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
</ul>
     * @tag Order
     * @param int $id The ID of the order item date
     * @return array
     *      - *id* - integer
     *          - The ID of the order date
     *      - *orderItemId* - integer
     *          - The ID of the order item that the date belongs to
     *      - *typeId* - integer
     *          - The ID of the date type. The following types are available:

* Start date = 9
* End date = 10
* Estimated delivery date = 11
     *      - *createdAt* - string
     *          - The date when the date was created
     *      - *updatedAt* - string
     *          - The date when the date was last updated
     */
    public function getOrdersItemsDateById(int $id): array
    {
        return $this->api("/rest/orders/items/dates/{$id}");
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Updates a date of an order item. The ID of the date must be specified.
     * @tag Order
     * @param int $id The ID of the order item date
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order date
     *      - *orderItemId* - integer
     *          - The ID of the order item that the date belongs to
     *      - *typeId* - integer
     *          - The ID of the date type. The following types are available:

* Start date = 9
* End date = 10
* Estimated delivery date = 11
     *      - *createdAt* - string
     *          - The date when the date was created
     *      - *updatedAt* - string
     *          - The date when the date was last updated
     */
    public function updateOrdersItemsDateById(int $id, array $data): array
    {
        return $this->api("/rest/orders/items/dates/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: POST /rest/{orderType}/{orderId}/cancel_booking</b>
Reverts the booking of the given order items of an order. The order items have to be specified.
     * @tag Order
     * @param array $data 
     */
    public function deleteOrdersItemsOutgoingStock(array $data): void
    {
        $this->api("/rest/orders/items/outgoing_stocks", 'DELETE', $data);
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Creates an order item property. The request data must contain the order item ID, the order item property type ID and the value depending on the property type. The following property types are available by default:

<br><ul>
<li>1 = WAREHOUSE</li>
<li>2 = SHIPPING_PROFILE</li>
<li>3 = PAYMENT_METHOD</li>
<li>11 = WEIGHT</li>
<li>12 = WIDTH</li>
<li>13 = LENGTH</li>
<li>14 = HEIGHT</li>
<li>16 = EXTERNAL_TOKEN_ID</li>
<li>17 = EXTERNAL_ITEM_ID</li>
<li>18 = COUPON_CODE</li>
<li>19 = COUPON_TYPE</li>
<li>20 = ORIGINAL_WAREHOUSE</li>
<li>21 = ORIGINAL_QUANTITY</li>
<li>22 = CATEGORY_ID</li>
<li>23 = MARKET_FEE</li>
<li>24 = STOCK_REVERSING</li>
<li>25 = DISPUTE_STATUS</li>
<li>26 = NO_CHANGE_BY_CONTACT</li>
<li>29 = SIZE</li>
<li>30 = LOCATION_RESERVED</li>
<li>31 = EXTERNAL_SHIPMENT_ITEM_ID</li>
<li>32 = PARTIAL_SHIPPING_COSTS</li>
<li>33 = MAIN_DOCUMENT_NUMBER</li>
<li>34 = SALES_TAX_ID_NUMBER</li>
<li>35 = RETURNS_REASON</li>
<li>36 = RETURNS_ITEM_STATUS</li>
<li>37 = FULFILLMENT_CENTER_ID</li>
<li>38 = FULFILLMENT_CENTER_COUNTRY_ISO</li>
<li>39 = REORDER_ITEM_ID</li>
<li>40 = LISTING_TYPE</li>
<li>46 = SOLD_COUPON_CODE</li>
<li>48 = ORDER_ITEM_STATE</li>
</ul>
     * @tag Order
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order item property.
     *      - *orderItemId* - integer
     *          - The ID of the order item that the property belongs to.
     *      - *typeId* - integer
     *          - The ID of the property type.

* WAREHOUSE		              =	1
* SHIPPING_PROFILE	              =	2
* PAYMENT_METHOD	              =	3
* WEIGHT			              =	11
* WIDTH			              =	12
* LENGTH		                  =	13
* HEIGHT	      		          = 14
* EXTERNAL_TOKEN_ID              =	16
* EXTERNAL_ITEM_ID               =	17
* COUPON_CODE	      	          =	18
* COUPON_TYPE		              =	19
* ORIGINAL_WAREHOUSE	          =	20
* ORIGINAL_QUANTITY              =	21
* CATEGORY_ID                    = 22
* MARKET_FEE		              =	23
* STOCK_REVERSING	              =	24
* DISPUTE_STATUS      	          =	25
* NO_CHANGE_BY_CONTACT           = 26
* SIZE 			              =	29
* LOCATION_RESERVED	          =	30
* EXTERNAL_SHIPMENT_ITEM_ID      =	31
* PARTIAL_SHIPPING_COSTS         =	32
* MAIN_DOCUMENT_NUMBER           =	33
* SALES_TAX_ID_NUMBER            =	34
* RETURNS_REASON                 =	35
* RETURNS_ITEM_STATUS            =	36
* FULFILLMENT_CENTER_ID          = 37
* FULFILLMENT_CENTER_COUNTRY_ISO = 38
* REORDER_ITEM_ID                = 39
* LISTING_TYPE                   = 40
* SOLD_COUPON_CODE               = 46
* ORDER_ITEM_STATE               = 48
* SAP_ORDER_NUMBER               = 50
* DISCOUNT                       = 52
* REORDER_ITEM_PACKAGE_UNIT      = 53
* REORDER_ITEM_MINIMUM_PURCHASE  = 54
* REORDER_ITEM_DELIVERY_TIME_IN_DAYS = 55
* REORDER_ITEM_DISCOUNTABLE      = 56
* RETURNS_REMAINING_PERCENTAGE   = 57
* ORDER_PROPERTY_ID              = 81
* ORDER_PROPERTY_VALUE           = 82
* ORDER_PROPERTY_GROUP_ID        = 83
* WEEE_PICK_UP = 92
     *      - *value* - string
     *          - The value of the property. The value depends on type.
     *      - *createdAt* - string
     *          - The date that the property was created.
     *      - *updatedAt* - string
     *          - The date that the property was last updated.
     */
    public function createOrdersItemsProperty(array $data): array
    {
        return $this->api("/rest/orders/items/properties", 'POST', $data);
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Deletes an order item property. The ID of the order item property must be specified.
     * @tag Order
     * @param int $id The ID of the order item property.
     */
    public function deleteOrdersItemsPropertyById(int $id): void
    {
        $this->api("/rest/orders/items/properties/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets an order item property. The ID of the order item property must be specified.
<b>DEPRECATED: Use the following route: GET /rest/orders/{orderId}</b>
     * @tag Order
     * @param int $id The ID of the order item property.
     * @return array
     *      - *id* - integer
     *          - The ID of the order item property.
     *      - *orderItemId* - integer
     *          - The ID of the order item that the property belongs to.
     *      - *typeId* - integer
     *          - The ID of the property type.

* WAREHOUSE		              =	1
* SHIPPING_PROFILE	              =	2
* PAYMENT_METHOD	              =	3
* WEIGHT			              =	11
* WIDTH			              =	12
* LENGTH		                  =	13
* HEIGHT	      		          = 14
* EXTERNAL_TOKEN_ID              =	16
* EXTERNAL_ITEM_ID               =	17
* COUPON_CODE	      	          =	18
* COUPON_TYPE		              =	19
* ORIGINAL_WAREHOUSE	          =	20
* ORIGINAL_QUANTITY              =	21
* CATEGORY_ID                    = 22
* MARKET_FEE		              =	23
* STOCK_REVERSING	              =	24
* DISPUTE_STATUS      	          =	25
* NO_CHANGE_BY_CONTACT           = 26
* SIZE 			              =	29
* LOCATION_RESERVED	          =	30
* EXTERNAL_SHIPMENT_ITEM_ID      =	31
* PARTIAL_SHIPPING_COSTS         =	32
* MAIN_DOCUMENT_NUMBER           =	33
* SALES_TAX_ID_NUMBER            =	34
* RETURNS_REASON                 =	35
* RETURNS_ITEM_STATUS            =	36
* FULFILLMENT_CENTER_ID          = 37
* FULFILLMENT_CENTER_COUNTRY_ISO = 38
* REORDER_ITEM_ID                = 39
* LISTING_TYPE                   = 40
* SOLD_COUPON_CODE               = 46
* ORDER_ITEM_STATE               = 48
* SAP_ORDER_NUMBER               = 50
* DISCOUNT                       = 52
* REORDER_ITEM_PACKAGE_UNIT      = 53
* REORDER_ITEM_MINIMUM_PURCHASE  = 54
* REORDER_ITEM_DELIVERY_TIME_IN_DAYS = 55
* REORDER_ITEM_DISCOUNTABLE      = 56
* RETURNS_REMAINING_PERCENTAGE   = 57
* ORDER_PROPERTY_ID              = 81
* ORDER_PROPERTY_VALUE           = 82
* ORDER_PROPERTY_GROUP_ID        = 83
* WEEE_PICK_UP = 92
     *      - *value* - string
     *          - The value of the property. The value depends on type.
     *      - *createdAt* - string
     *          - The date that the property was created.
     *      - *updatedAt* - string
     *          - The date that the property was last updated.
     */
    public function getOrdersItemsPropertyById(int $id): array
    {
        return $this->api("/rest/orders/items/properties/{$id}");
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Updates an order item property. The ID of the order item property must be specified.
     * @tag Order
     * @param int $id The ID of the order item property instance to be updated.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order item property.
     *      - *orderItemId* - integer
     *          - The ID of the order item that the property belongs to.
     *      - *typeId* - integer
     *          - The ID of the property type.

* WAREHOUSE		              =	1
* SHIPPING_PROFILE	              =	2
* PAYMENT_METHOD	              =	3
* WEIGHT			              =	11
* WIDTH			              =	12
* LENGTH		                  =	13
* HEIGHT	      		          = 14
* EXTERNAL_TOKEN_ID              =	16
* EXTERNAL_ITEM_ID               =	17
* COUPON_CODE	      	          =	18
* COUPON_TYPE		              =	19
* ORIGINAL_WAREHOUSE	          =	20
* ORIGINAL_QUANTITY              =	21
* CATEGORY_ID                    = 22
* MARKET_FEE		              =	23
* STOCK_REVERSING	              =	24
* DISPUTE_STATUS      	          =	25
* NO_CHANGE_BY_CONTACT           = 26
* SIZE 			              =	29
* LOCATION_RESERVED	          =	30
* EXTERNAL_SHIPMENT_ITEM_ID      =	31
* PARTIAL_SHIPPING_COSTS         =	32
* MAIN_DOCUMENT_NUMBER           =	33
* SALES_TAX_ID_NUMBER            =	34
* RETURNS_REASON                 =	35
* RETURNS_ITEM_STATUS            =	36
* FULFILLMENT_CENTER_ID          = 37
* FULFILLMENT_CENTER_COUNTRY_ISO = 38
* REORDER_ITEM_ID                = 39
* LISTING_TYPE                   = 40
* SOLD_COUPON_CODE               = 46
* ORDER_ITEM_STATE               = 48
* SAP_ORDER_NUMBER               = 50
* DISCOUNT                       = 52
* REORDER_ITEM_PACKAGE_UNIT      = 53
* REORDER_ITEM_MINIMUM_PURCHASE  = 54
* REORDER_ITEM_DELIVERY_TIME_IN_DAYS = 55
* REORDER_ITEM_DISCOUNTABLE      = 56
* RETURNS_REMAINING_PERCENTAGE   = 57
* ORDER_PROPERTY_ID              = 81
* ORDER_PROPERTY_VALUE           = 82
* ORDER_PROPERTY_GROUP_ID        = 83
* WEEE_PICK_UP = 92
     *      - *value* - string
     *          - The value of the property. The value depends on type.
     *      - *createdAt* - string
     *          - The date that the property was created.
     *      - *updatedAt* - string
     *          - The date that the property was last updated.
     */
    public function updateOrdersItemsPropertyById(int $id, array $data): array
    {
        return $this->api("/rest/orders/items/properties/{$id}", 'PUT', $data);
    }
                
    /**
     * @description Searches for order item transactions by filter parameters.
     * @tag Order
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *columns* - array - optional
     *          - Specifies the properties of the order item transactions to be loaded.
     *      - *with* - array - optional
     *          - Loads additional relations of the order item transactions. The available relations are 'orderItem' and 'warehouseLocation'.
     *      - *sortBy* - string - optional
     *          - Sort search result according to createdAt, updatedAt, orderItemId, receiptId or quantity. The default value is orderItemId.
     *      - *sortOrder* - string - optional
     *          - Sort direction desc or asc. The default value is asc.
     *      - *orderItemId* - int - optional
     *          - The ID of the order item
     *      - *orderId* - int - optional
     *          - The ID of the order
     *      - *direction* - string - optional
     *          - The direction of the order item transactions
     *      - *status* - string - optional
     *          - The status of the order item transactions ('in' for incoming or 'out' for outgoing)
     *      - *isBooked* - boolean - optional
     *          - Returns all booked order item transactions.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderItemTransaction
     */
    public function eachOrdersItemsTransactions(array $query = []): Iterator
    {
        return $this->eachInternal('getOrdersItemsTransactions', func_get_args());
    }
        
    /**
     * @description Searches for order item transactions by filter parameters.
     * @tag Order
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *columns* - array - optional
     *          - Specifies the properties of the order item transactions to be loaded.
     *      - *with* - array - optional
     *          - Loads additional relations of the order item transactions. The available relations are 'orderItem' and 'warehouseLocation'.
     *      - *sortBy* - string - optional
     *          - Sort search result according to createdAt, updatedAt, orderItemId, receiptId or quantity. The default value is orderItemId.
     *      - *sortOrder* - string - optional
     *          - Sort direction desc or asc. The default value is asc.
     *      - *orderItemId* - int - optional
     *          - The ID of the order item
     *      - *orderId* - int - optional
     *          - The ID of the order
     *      - *direction* - string - optional
     *          - The direction of the order item transactions
     *      - *status* - string - optional
     *          - The status of the order item transactions ('in' for incoming or 'out' for outgoing)
     *      - *isBooked* - boolean - optional
     *          - Returns all booked order item transactions.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderItemTransaction
     */
    public function batchOrdersItemsTransactions(array $query = []): Iterator
    {
        return $this->batchInternal('getOrdersItemsTransactions', func_get_args());
    }
    
    /**
     * @description Searches for order item transactions by filter parameters.
     * @tag Order
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *columns* - array - optional
     *          - Specifies the properties of the order item transactions to be loaded.
     *      - *with* - array - optional
     *          - Loads additional relations of the order item transactions. The available relations are 'orderItem' and 'warehouseLocation'.
     *      - *sortBy* - string - optional
     *          - Sort search result according to createdAt, updatedAt, orderItemId, receiptId or quantity. The default value is orderItemId.
     *      - *sortOrder* - string - optional
     *          - Sort direction desc or asc. The default value is asc.
     *      - *orderItemId* - int - optional
     *          - The ID of the order item
     *      - *orderId* - int - optional
     *          - The ID of the order
     *      - *direction* - string - optional
     *          - The direction of the order item transactions
     *      - *status* - string - optional
     *          - The status of the order item transactions ('in' for incoming or 'out' for outgoing)
     *      - *isBooked* - boolean - optional
     *          - Returns all booked order item transactions.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderItemTransaction
     */
    public function getOrdersItemsTransactions(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/items/transactions"], $query));
    }
                    
    /**
     * @description Books order item transactions. Transactions are order item movements. These are incoming and outgoing items. The IDs of the order item transactions must be specified. To get the transactions first, use the <a href="#/Order/get_rest_orders_items_transactions">Search transactions</a> call.
     * @tag Order
     * @param array $query
     *      - *transactionIds* - array - required
     *          - The IDs of the order item transactions.
     *      - *deliveryNoteNumber* - string - optional
     *          - If desired, set a delivery note number. The delivery note number has to match the type of order item transaction. For incoming items, set an external delivery note number. For outgoing items, set an external or an internal delivery note number.
     */
    public function createOrdersItemsTransactionsBooking(array $query): void
    {
        $this->api(array_merge(["/rest/orders/items/transactions/booking"], $query), 'POST');
    }
                    
    /**
     * @description Deletes an order item transaction. Transactions are order item movements. These are incoming and outgoing items. The ID of the transaction must be specified.
     * @tag Order
     * @param int $transactionId 
     */
    public function deleteOrdersItemsTransactionByTransactionId(int $transactionId): void
    {
        $this->api("/rest/orders/items/transactions/{$transactionId}", 'DELETE');
    }
                
    /**
     * @description Updates an order item transaction. Transactions are order item movements. These are incoming and outgoing items.
     * @tag Order
     * @param int $transactionId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the transaction
     *      - *orderItemId* - integer
     *          - The ID of the order item
     *      - *quantity* - number
     *          - The quantity
     *      - *userId* - integer
     *          - The ID of the user
     *      - *identification* - string
     *          - External identification. Can be an arbitrary string.
     *      - *direction* - string
     *          - The direction. Possible values are 'in' and 'out'.
     *      - *status* - string
     *          - The status. Possible values are 'regular' and 'cancelled'.
     *      - *receiptId* - integer
     *          - The receipt ID
     *      - *warehouseLocationId* - integer
     *          - The ID of the warehouse location
     *      - *batch* - string
     *          - The batch
     *      - *bestBeforeDate* - string
     *          - The best before date
     *      - *batchBestBeforeDateId* - integer
     *          - Deprecated. Replaced by $batch and $bestBeforeDate.
     *      - *createdAt* - string
     *          - The date the transaction was created
     *      - *updatedAt* - string
     *          - The date the transaction was last updated
     */
    public function updateOrdersItemsTransactionByTransactionId(int $transactionId, array $data): array
    {
        return $this->api("/rest/orders/items/transactions/{$transactionId}", 'PUT', $data);
    }
                    
    /**
     * @description Books an order item in. The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId The ID of the order item.
     * @param array $query
     *      - *deliveryNoteNumber* - string - optional
     *          - If desired, set the delivery note number provided by the supplier.
     */
    public function createOrdersItemsBookingByOrderItemId(int $orderItemId, array $query = []): void
    {
        $this->api(array_merge(["/rest/orders/items/{$orderItemId}/booking"], $query), 'POST');
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: GET /rest/orders/{orderId}</b>
Lists all dates of an order item. The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId The ID of the order item
     * @return array
     */
    public function getOrdersItemsDatesByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/orders/items/{$orderItemId}/dates");
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Deletes a date of an order item. The ID of the order item and the ID of the date type must be specified. The following order item date type IDs are available:

<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
</ul>
     * @tag Order
     * @param int $orderItemId The ID of the order item
     * @param int $typeId The ID of the order date
     */
    public function deleteOrdersItemsDateByOrderItemIdTypeId(int $orderItemId, int $typeId): void
    {
        $this->api("/rest/orders/items/{$orderItemId}/dates/{$typeId}", 'DELETE');
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: GET /rest/orders/{orderId}</b>
Gets a date of an order item. The ID of the order item and the ID of the date type must be specified.
<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
</ul>
     * @tag Order
     * @param int $orderItemId The ID of the order item
     * @param int $typeId The ID of the order date type
     * @return array
     *      - *id* - integer
     *          - The ID of the order date
     *      - *orderItemId* - integer
     *          - The ID of the order item that the date belongs to
     *      - *typeId* - integer
     *          - The ID of the date type. The following types are available:

* Start date = 9
* End date = 10
* Estimated delivery date = 11
     *      - *createdAt* - string
     *          - The date when the date was created
     *      - *updatedAt* - string
     *          - The date when the date was last updated
     */
    public function getOrdersItemsDateByOrderItemIdTypeId(int $orderItemId, int $typeId): array
    {
        return $this->api("/rest/orders/items/{$orderItemId}/dates/{$typeId}");
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Creates a date for an order item. The ID of the order item and the ID of the date type must be specified. The following order item date type IDs are available:

<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
</ul>
     * @tag Order
     * @param int $orderItemId The ID of the order item
     * @param int $typeId The ID of the order date type
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order date
     *      - *orderItemId* - integer
     *          - The ID of the order item that the date belongs to
     *      - *typeId* - integer
     *          - The ID of the date type. The following types are available:

* Start date = 9
* End date = 10
* Estimated delivery date = 11
     *      - *createdAt* - string
     *          - The date when the date was created
     *      - *updatedAt* - string
     *          - The date when the date was last updated
     */
    public function createOrdersItemsDateByOrderItemIdTypeId(int $orderItemId, int $typeId, array $data): array
    {
        return $this->api("/rest/orders/items/{$orderItemId}/dates/{$typeId}", 'POST', $data);
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Updates the date of an order item. The ID of the order item and the ID of the date type must be specified. The following order item date type IDs are available:

<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
</ul>
     * @tag Order
     * @param int $orderItemId The ID of the order item
     * @param int $typeId The ID of the order date type
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order date
     *      - *orderItemId* - integer
     *          - The ID of the order item that the date belongs to
     *      - *typeId* - integer
     *          - The ID of the date type. The following types are available:

* Start date = 9
* End date = 10
* Estimated delivery date = 11
     *      - *createdAt* - string
     *          - The date when the date was created
     *      - *updatedAt* - string
     *          - The date when the date was last updated
     */
    public function updateOrdersItemsDateByOrderItemIdTypeId(int $orderItemId, int $typeId, array $data): array
    {
        return $this->api("/rest/orders/items/{$orderItemId}/dates/{$typeId}", 'PUT', $data);
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: GET /rest/orders/{orderId}</b>
Gets all order item properties for one order item. The order item ID must be specified.
     * @tag Order
     * @param int $orderItemId The order item ID.
     * @return array
     */
    public function getOrdersItemsPropertiesByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/orders/items/{$orderItemId}/properties");
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Deletes an order item property. The order item ID and the order item property type ID must be specified. The following property types are available by default:

<br><ul>
<li>1 = WAREHOUSE</li>
<li>2 = SHIPPING_PROFILE</li>
<li>3 = PAYMENT_METHOD</li>
<li>11 = WEIGHT</li>
<li>12 = WIDTH</li>
<li>13 = LENGTH</li>
<li>14 = HEIGHT</li>
<li>16 = EXTERNAL_TOKEN_ID</li>
<li>17 = EXTERNAL_ITEM_ID</li>
<li>18 = COUPON_CODE</li>
<li>19 = COUPON_TYPE</li>
<li>20 = ORIGINAL_WAREHOUSE</li>
<li>21 = ORIGINAL_QUANTITY</li>
<li>22 = CATEGORY_ID</li>
<li>23 = MARKET_FEE</li>
<li>24 = STOCK_REVERSING</li>
<li>25 = DISPUTE_STATUS</li>
<li>26 = NO_CHANGE_BY_CONTACT</li>
<li>29 = SIZE</li>
<li>30 = LOCATION_RESERVED</li>
<li>31 = EXTERNAL_SHIPMENT_ITEM_ID</li>
<li>32 = PARTIAL_SHIPPING_COSTS</li>
<li>33 = MAIN_DOCUMENT_NUMBER</li>
<li>34 = SALES_TAX_ID_NUMBER</li>
<li>35 = RETURNS_REASON</li>
<li>36 = RETURNS_ITEM_STATUS</li>
<li>37 = FULFILLMENT_CENTER_ID</li>
<li>38 = FULFILLMENT_CENTER_COUNTRY_ISO</li>
<li>39 = REORDER_ITEM_ID</li>
<li>40 = LISTING_TYPE</li>
<li>46 = SOLD_COUPON_CODE</li>
<li>48 = ORDER_ITEM_STATE</li>
</ul>
     * @tag Order
     * @param int $orderItemId The order item ID.
     * @param int $typeId The order item property type ID.
     */
    public function deleteOrdersItemsPropertyByOrderItemIdTypeId(int $orderItemId, int $typeId): void
    {
        $this->api("/rest/orders/items/{$orderItemId}/properties/{$typeId}", 'DELETE');
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: GET /rest/orders/{orderId}</b>
Gets an order item property. The order item ID and the order item property type ID must be specified. The following property types are available by default:

<br><ul>
<li>1 = WAREHOUSE</li>
<li>2 = SHIPPING_PROFILE</li>
<li>3 = PAYMENT_METHOD</li>
<li>11 = WEIGHT</li>
<li>12 = WIDTH</li>
<li>13 = LENGTH</li>
<li>14 = HEIGHT</li>
<li>16 = EXTERNAL_TOKEN_ID</li>
<li>17 = EXTERNAL_ITEM_ID</li>
<li>18 = COUPON_CODE</li>
<li>19 = COUPON_TYPE</li>
<li>20 = ORIGINAL_WAREHOUSE</li>
<li>21 = ORIGINAL_QUANTITY</li>
<li>22 = CATEGORY_ID</li>
<li>23 = MARKET_FEE</li>
<li>24 = STOCK_REVERSING</li>
<li>25 = DISPUTE_STATUS</li>
<li>26 = NO_CHANGE_BY_CONTACT</li>
<li>29 = SIZE</li>
<li>30 = LOCATION_RESERVED</li>
<li>31 = EXTERNAL_SHIPMENT_ITEM_ID</li>
<li>32 = PARTIAL_SHIPPING_COSTS</li>
<li>33 = MAIN_DOCUMENT_NUMBER</li>
<li>34 = SALES_TAX_ID_NUMBER</li>
<li>35 = RETURNS_REASON</li>
<li>36 = RETURNS_ITEM_STATUS</li>
<li>37 = FULFILLMENT_CENTER_ID</li>
<li>38 = FULFILLMENT_CENTER_COUNTRY_ISO</li>
<li>39 = REORDER_ITEM_ID</li>
<li>40 = LISTING_TYPE</li>
<li>46 = SOLD_COUPON_CODE</li>
<li>48 = ORDER_ITEM_STATE</li>
</ul>
     * @tag Order
     * @param int $orderItemId The ID of the order item.
     * @param int $typeId The ID of the order item property type.
     * @return array
     *      - *id* - integer
     *          - The ID of the order item property.
     *      - *orderItemId* - integer
     *          - The ID of the order item that the property belongs to.
     *      - *typeId* - integer
     *          - The ID of the property type.

* WAREHOUSE		              =	1
* SHIPPING_PROFILE	              =	2
* PAYMENT_METHOD	              =	3
* WEIGHT			              =	11
* WIDTH			              =	12
* LENGTH		                  =	13
* HEIGHT	      		          = 14
* EXTERNAL_TOKEN_ID              =	16
* EXTERNAL_ITEM_ID               =	17
* COUPON_CODE	      	          =	18
* COUPON_TYPE		              =	19
* ORIGINAL_WAREHOUSE	          =	20
* ORIGINAL_QUANTITY              =	21
* CATEGORY_ID                    = 22
* MARKET_FEE		              =	23
* STOCK_REVERSING	              =	24
* DISPUTE_STATUS      	          =	25
* NO_CHANGE_BY_CONTACT           = 26
* SIZE 			              =	29
* LOCATION_RESERVED	          =	30
* EXTERNAL_SHIPMENT_ITEM_ID      =	31
* PARTIAL_SHIPPING_COSTS         =	32
* MAIN_DOCUMENT_NUMBER           =	33
* SALES_TAX_ID_NUMBER            =	34
* RETURNS_REASON                 =	35
* RETURNS_ITEM_STATUS            =	36
* FULFILLMENT_CENTER_ID          = 37
* FULFILLMENT_CENTER_COUNTRY_ISO = 38
* REORDER_ITEM_ID                = 39
* LISTING_TYPE                   = 40
* SOLD_COUPON_CODE               = 46
* ORDER_ITEM_STATE               = 48
* SAP_ORDER_NUMBER               = 50
* DISCOUNT                       = 52
* REORDER_ITEM_PACKAGE_UNIT      = 53
* REORDER_ITEM_MINIMUM_PURCHASE  = 54
* REORDER_ITEM_DELIVERY_TIME_IN_DAYS = 55
* REORDER_ITEM_DISCOUNTABLE      = 56
* RETURNS_REMAINING_PERCENTAGE   = 57
* ORDER_PROPERTY_ID              = 81
* ORDER_PROPERTY_VALUE           = 82
* ORDER_PROPERTY_GROUP_ID        = 83
* WEEE_PICK_UP = 92
     *      - *value* - string
     *          - The value of the property. The value depends on type.
     *      - *createdAt* - string
     *          - The date that the property was created.
     *      - *updatedAt* - string
     *          - The date that the property was last updated.
     */
    public function getOrdersItemsPropertyByOrderItemIdTypeId(int $orderItemId, int $typeId): array
    {
        return $this->api("/rest/orders/items/{$orderItemId}/properties/{$typeId}");
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Creates an order item property. The order item ID and the order item property type ID must be specified. The following properties are available by default:

<br><ul>
<li>1 = WAREHOUSE</li>
<li>2 = SHIPPING_PROFILE</li>
<li>3 = PAYMENT_METHOD</li>
<li>11 = WEIGHT</li>
<li>12 = WIDTH</li>
<li>13 = LENGTH</li>
<li>14 = HEIGHT</li>
<li>16 = EXTERNAL_TOKEN_ID</li>
<li>17 = EXTERNAL_ITEM_ID</li>
<li>18 = COUPON_CODE</li>
<li>19 = COUPON_TYPE</li>
<li>20 = ORIGINAL_WAREHOUSE</li>
<li>21 = ORIGINAL_QUANTITY</li>
<li>22 = CATEGORY_ID</li>
<li>23 = MARKET_FEE</li>
<li>24 = STOCK_REVERSING</li>
<li>25 = DISPUTE_STATUS</li>
<li>26 = NO_CHANGE_BY_CONTACT</li>
<li>29 = SIZE</li>
<li>30 = LOCATION_RESERVED</li>
<li>31 = EXTERNAL_SHIPMENT_ITEM_ID</li>
<li>32 = PARTIAL_SHIPPING_COSTS</li>
<li>33 = MAIN_DOCUMENT_NUMBER</li>
<li>34 = SALES_TAX_ID_NUMBER</li>
<li>35 = RETURNS_REASON</li>
<li>36 = RETURNS_ITEM_STATUS</li>
<li>37 = FULFILLMENT_CENTER_ID</li>
<li>38 = FULFILLMENT_CENTER_COUNTRY_ISO</li>
<li>39 = REORDER_ITEM_ID</li>
<li>40 = LISTING_TYPE</li>
<li>46 = SOLD_COUPON_CODE</li>
<li>48 = ORDER_ITEM_STATE</li>
</ul>
     * @tag Order
     * @param int $orderItemId The order item ID.
     * @param int $typeId The order item property type ID.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order item property.
     *      - *orderItemId* - integer
     *          - The ID of the order item that the property belongs to.
     *      - *typeId* - integer
     *          - The ID of the property type.

* WAREHOUSE		              =	1
* SHIPPING_PROFILE	              =	2
* PAYMENT_METHOD	              =	3
* WEIGHT			              =	11
* WIDTH			              =	12
* LENGTH		                  =	13
* HEIGHT	      		          = 14
* EXTERNAL_TOKEN_ID              =	16
* EXTERNAL_ITEM_ID               =	17
* COUPON_CODE	      	          =	18
* COUPON_TYPE		              =	19
* ORIGINAL_WAREHOUSE	          =	20
* ORIGINAL_QUANTITY              =	21
* CATEGORY_ID                    = 22
* MARKET_FEE		              =	23
* STOCK_REVERSING	              =	24
* DISPUTE_STATUS      	          =	25
* NO_CHANGE_BY_CONTACT           = 26
* SIZE 			              =	29
* LOCATION_RESERVED	          =	30
* EXTERNAL_SHIPMENT_ITEM_ID      =	31
* PARTIAL_SHIPPING_COSTS         =	32
* MAIN_DOCUMENT_NUMBER           =	33
* SALES_TAX_ID_NUMBER            =	34
* RETURNS_REASON                 =	35
* RETURNS_ITEM_STATUS            =	36
* FULFILLMENT_CENTER_ID          = 37
* FULFILLMENT_CENTER_COUNTRY_ISO = 38
* REORDER_ITEM_ID                = 39
* LISTING_TYPE                   = 40
* SOLD_COUPON_CODE               = 46
* ORDER_ITEM_STATE               = 48
* SAP_ORDER_NUMBER               = 50
* DISCOUNT                       = 52
* REORDER_ITEM_PACKAGE_UNIT      = 53
* REORDER_ITEM_MINIMUM_PURCHASE  = 54
* REORDER_ITEM_DELIVERY_TIME_IN_DAYS = 55
* REORDER_ITEM_DISCOUNTABLE      = 56
* RETURNS_REMAINING_PERCENTAGE   = 57
* ORDER_PROPERTY_ID              = 81
* ORDER_PROPERTY_VALUE           = 82
* ORDER_PROPERTY_GROUP_ID        = 83
* WEEE_PICK_UP = 92
     *      - *value* - string
     *          - The value of the property. The value depends on type.
     *      - *createdAt* - string
     *          - The date that the property was created.
     *      - *updatedAt* - string
     *          - The date that the property was last updated.
     */
    public function createOrdersItemsPropertyByOrderItemIdTypeId(int $orderItemId, int $typeId, array $data): array
    {
        return $this->api("/rest/orders/items/{$orderItemId}/properties/{$typeId}", 'POST', $data);
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Updates an order item property. The order item ID and the order item property type ID must be specified. The following property types are available by default:

<br><ul>
<li>1 = WAREHOUSE</li>
<li>2 = SHIPPING_PROFILE</li>
<li>3 = PAYMENT_METHOD</li>
<li>11 = WEIGHT</li>
<li>12 = WIDTH</li>
<li>13 = LENGTH</li>
<li>14 = HEIGHT</li>
<li>16 = EXTERNAL_TOKEN_ID</li>
<li>17 = EXTERNAL_ITEM_ID</li>
<li>18 = COUPON_CODE</li>
<li>19 = COUPON_TYPE</li>
<li>20 = ORIGINAL_WAREHOUSE</li>
<li>21 = ORIGINAL_QUANTITY</li>
<li>22 = CATEGORY_ID</li>
<li>23 = MARKET_FEE</li>
<li>24 = STOCK_REVERSING</li>
<li>25 = DISPUTE_STATUS</li>
<li>26 = NO_CHANGE_BY_CONTACT</li>
<li>29 = SIZE</li>
<li>30 = LOCATION_RESERVED</li>
<li>31 = EXTERNAL_SHIPMENT_ITEM_ID</li>
<li>32 = PARTIAL_SHIPPING_COSTS</li>
<li>33 = MAIN_DOCUMENT_NUMBER</li>
<li>34 = SALES_TAX_ID_NUMBER</li>
<li>35 = RETURNS_REASON</li>
<li>36 = RETURNS_ITEM_STATUS</li>
<li>37 = FULFILLMENT_CENTER_ID</li>
<li>38 = FULFILLMENT_CENTER_COUNTRY_ISO</li>
<li>39 = REORDER_ITEM_ID</li>
<li>40 = LISTING_TYPE</li>
<li>46 = SOLD_COUPON_CODE</li>
<li>48 = ORDER_ITEM_STATE</li>
</ul>
     * @tag Order
     * @param int $orderItemId The order item ID.
     * @param int $typeId The order item property type ID.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order item property.
     *      - *orderItemId* - integer
     *          - The ID of the order item that the property belongs to.
     *      - *typeId* - integer
     *          - The ID of the property type.

* WAREHOUSE		              =	1
* SHIPPING_PROFILE	              =	2
* PAYMENT_METHOD	              =	3
* WEIGHT			              =	11
* WIDTH			              =	12
* LENGTH		                  =	13
* HEIGHT	      		          = 14
* EXTERNAL_TOKEN_ID              =	16
* EXTERNAL_ITEM_ID               =	17
* COUPON_CODE	      	          =	18
* COUPON_TYPE		              =	19
* ORIGINAL_WAREHOUSE	          =	20
* ORIGINAL_QUANTITY              =	21
* CATEGORY_ID                    = 22
* MARKET_FEE		              =	23
* STOCK_REVERSING	              =	24
* DISPUTE_STATUS      	          =	25
* NO_CHANGE_BY_CONTACT           = 26
* SIZE 			              =	29
* LOCATION_RESERVED	          =	30
* EXTERNAL_SHIPMENT_ITEM_ID      =	31
* PARTIAL_SHIPPING_COSTS         =	32
* MAIN_DOCUMENT_NUMBER           =	33
* SALES_TAX_ID_NUMBER            =	34
* RETURNS_REASON                 =	35
* RETURNS_ITEM_STATUS            =	36
* FULFILLMENT_CENTER_ID          = 37
* FULFILLMENT_CENTER_COUNTRY_ISO = 38
* REORDER_ITEM_ID                = 39
* LISTING_TYPE                   = 40
* SOLD_COUPON_CODE               = 46
* ORDER_ITEM_STATE               = 48
* SAP_ORDER_NUMBER               = 50
* DISCOUNT                       = 52
* REORDER_ITEM_PACKAGE_UNIT      = 53
* REORDER_ITEM_MINIMUM_PURCHASE  = 54
* REORDER_ITEM_DELIVERY_TIME_IN_DAYS = 55
* REORDER_ITEM_DISCOUNTABLE      = 56
* RETURNS_REMAINING_PERCENTAGE   = 57
* ORDER_PROPERTY_ID              = 81
* ORDER_PROPERTY_VALUE           = 82
* ORDER_PROPERTY_GROUP_ID        = 83
* WEEE_PICK_UP = 92
     *      - *value* - string
     *          - The value of the property. The value depends on type.
     *      - *createdAt* - string
     *          - The date that the property was created.
     *      - *updatedAt* - string
     *          - The date that the property was last updated.
     */
    public function updateOrdersItemsPropertyByOrderItemIdTypeId(int $orderItemId, int $typeId, array $data): array
    {
        return $this->api("/rest/orders/items/{$orderItemId}/properties/{$typeId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists transactions for an order item. Transactions are order item movements. These are incoming and outgoing items. The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId The ID of the order item
     * @param array $query
     *      - *columns* - array - optional
     *          - The properties to be loaded
     *      - *with* - array - optional
     *          - Load additional relations for a transaction. Currently possible are 'orderItem' and 'warehouseLocation'.
     * @return array
     */
    public function getOrdersItemsTransactionsByOrderItemId(int $orderItemId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/items/{$orderItemId}/transactions"], $query));
    }
                
    /**
     * @description Creates an order item transaction. Transactions are order item movements. These are incoming and outgoing items. The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the transaction
     *      - *orderItemId* - integer
     *          - The ID of the order item
     *      - *quantity* - number
     *          - The quantity
     *      - *userId* - integer
     *          - The ID of the user
     *      - *identification* - string
     *          - External identification. Can be an arbitrary string.
     *      - *direction* - string
     *          - The direction. Possible values are 'in' and 'out'.
     *      - *status* - string
     *          - The status. Possible values are 'regular' and 'cancelled'.
     *      - *receiptId* - integer
     *          - The receipt ID
     *      - *warehouseLocationId* - integer
     *          - The ID of the warehouse location
     *      - *batch* - string
     *          - The batch
     *      - *bestBeforeDate* - string
     *          - The best before date
     *      - *batchBestBeforeDateId* - integer
     *          - Deprecated. Replaced by $batch and $bestBeforeDate.
     *      - *createdAt* - string
     *          - The date the transaction was created
     *      - *updatedAt* - string
     *          - The date the transaction was last updated
     */
    public function createOrdersItemsTransactionByOrderItemId(int $orderItemId, array $data): array
    {
        return $this->api("/rest/orders/items/{$orderItemId}/transactions", 'POST', $data);
    }
                    
    /**
     * @description Lists property types and their names in all languages. Optionally, one or more languages can be specified to get a limited response. The following property types are available by default:
<br><ul>
<li>1 = WAREHOUSE</li>
<li>2 = SHIPPING_PROFILE</li>
<li>3 = PAYMENT_METHOD</li>
<li>4 = PAYMENT_STATUS</li>
<li>5 = EXTERNAL_SHIPPING_PROFILE</li>
<li>6 = DOCUMENT_LANGUAGE</li>
<li>7 = EXTERNAL_ORDER_ID</li>
<li>8 = CUSTOMER_SIGN</li>
<li>9 = DUNNING_LEVEL</li>
<li>10 = SELLER_ACCOUNT</li>
<li>11 = WEIGHT</li>
<li>12 = WIDTH</li>
<li>13 = LENGTH</li>
<li>14 = HEIGHT</li>
<li>15 = FLAG</li>
<li>16 = EXTERNAL_TOKEN_ID</li>
<li>17 = EXTERNAL_ITEM_ID</li>
<li>18 = COUPON_CODE</li>
<li>19 = COUPON_TYPE</li>
<li>33 = MAIN_DOCUMENT_NUMBER</li>
<li>34 = SALES_TAX_ID_NUMBER</li>
<li>45 = PAYMENT_TRANSACTION_ID</li>
<li>47 = EXTERNAL_TAX_SERVICE</li>
<li>60 = MERCHANT_ID</li>
<li>61 = REPORT_ID</li>
<li>63 = PREFERRED_STORAGE_LOCATION_ID</li>
<li>64 = AMAZON_SHIPPING_LABEL</li>
<li>994 = EBAY_PLUS</li>
<li>995 = FULFILLMENT_SERVICE</li>
</ul>
     * @tag Order
     * @param array $query
     *      - *lang* - array - optional
     *          - If no parameter is set here, all languages are loaded by default. Optionally, enter an arry containing the ISO codes of the desired languages.
     * @return array
     */
    public function getOrdersPropertiesTypes(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/properties/types"], $query));
    }
                
    /**
     * @description Creates an order property type. After creating the order property type, it can be linked to an existing order using the property type ID.
     * @tag Order
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property type
     *      - *isErasable* - boolean
     *          - Flag that states if this type can be deleted or not.
     *      - *position* - integer
     *          - The position for sorting
     *      - *cast* - string
     *          - The data type of the values of this property type. Valid types are:

* string
* int
* numeric
* bool
* enum(val1,val2,val3,...)
     */
    public function createOrdersPropertiesType(array $data): array
    {
        return $this->api("/rest/orders/properties/types", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property type and all names for it from the database. The ID of the property type must be specified. Property type IDs lower than 1,000 cannot be deleted because they are system defaults.
     * @tag Order
     * @param int $typeId The ID of the property type
     */
    public function deleteOrdersPropertiesTypeByTypeId(int $typeId): void
    {
        $this->api("/rest/orders/properties/types/{$typeId}", 'DELETE');
    }
                
    /**
     * @description Gets a property type and its names in all languages. Optionally, one or more languages can be specified to get a limited response. The following property types are available by default:

<br><ul>
<li>1 = WAREHOUSE</li>
<li>2 = SHIPPING_PROFILE</li>
<li>3 = PAYMENT_METHOD</li>
<li>4 = PAYMENT_STATUS</li>
<li>5 = EXTERNAL_SHIPPING_PROFILE</li>
<li>6 = DOCUMENT_LANGUAGE</li>
<li>7 = EXTERNAL_ORDER_ID</li>
<li>8 = CUSTOMER_SIGN</li>
<li>9 = DUNNING_LEVEL</li>
<li>10 = SELLER_ACCOUNT</li>
<li>11 = WEIGHT</li>
<li>12 = WIDTH</li>
<li>13 = LENGTH</li>
<li>14 = HEIGHT</li>
<li>15 = FLAG</li>
<li>16 = EXTERNAL_TOKEN_ID</li>
<li>17 = EXTERNAL_ITEM_ID</li>
<li>18 = COUPON_CODE</li>
<li>19 = COUPON_TYPE</li>
<li>33 = MAIN_DOCUMENT_NUMBER</li>
<li>34 = SALES_TAX_ID_NUMBER</li>
<li>45 = PAYMENT_TRANSACTION_ID</li>
<li>47 = EXTERNAL_TAX_SERVICE</li>
<li>60 = MERCHANT_ID</li>
<li>61 = REPORT_ID</li>
<li>63 = PREFERRED_STORAGE_LOCATION_ID</li>
<li>64 = AMAZON_SHIPPING_LABEL</li>
<li>994 = EBAY_PLUS</li>
<li>995 = FULFILLMENT_SERVICE</li>
</ul>
     * @tag Order
     * @param int $typeId The ID of the type.
     * @param array $query
     *      - *lang* - array - optional
     *          - If no parameter is set here, all languages for the property are loaded by default. Optionally, enter an arry containing the ISO codes of the desired languages.
     * @return array
     *      - *id* - integer
     *          - The ID of the property type
     *      - *isErasable* - boolean
     *          - Flag that states if this type can be deleted or not.
     *      - *position* - integer
     *          - The position for sorting
     *      - *cast* - string
     *          - The data type of the values of this property type. Valid types are:

* string
* int
* numeric
* bool
* enum(val1,val2,val3,...)
     */
    public function getOrdersPropertiesTypeByTypeId(int $typeId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/properties/types/{$typeId}"], $query));
    }
                
    /**
     * @description Updates a property type and its names. The ID of the property type must be specified. If names that do not yet exist for a language are provided, they will be created. Property type IDs lower than 1,000 cannot be updated because they are system defaults.
     * @tag Order
     * @param int $typeId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property type
     *      - *isErasable* - boolean
     *          - Flag that states if this type can be deleted or not.
     *      - *position* - integer
     *          - The position for sorting
     *      - *cast* - string
     *          - The data type of the values of this property type. Valid types are:

* string
* int
* numeric
* bool
* enum(val1,val2,val3,...)
     */
    public function updateOrdersPropertiesTypeByTypeId(int $typeId, array $data): array
    {
        return $this->api("/rest/orders/properties/types/{$typeId}", 'PUT', $data);
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Deletes a property of an order. The ID of the property must be specified.
     * @tag Order
     * @param int $id The ID of the property to be deleted.
     */
    public function deleteOrdersPropertyById(int $id): void
    {
        $this->api("/rest/orders/properties/{$id}", 'DELETE');
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Updates the value of a property. The ID of the property must be specified.
     * @tag Order
     * @param int $id 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order property
     *      - *orderId* - integer
     *          - The ID of the order that the property belongs to
     *      - *typeId* - integer
     *          - The ID of the property type. The following types are available:

* WAREHOUSE		=	1
* SHIPPING_PROFILE	=	2
* PAYMENT_METHOD			=	3
* PAYMENT_STATUS			=	4
* EXTERNAL_SHIPPING_PROFILE			=	5
* DOCUMENT_LANGUAGE			=	6
* EXTERNAL_ORDER_ID			=	7
* CUSTOMER_SIGN			=	8
* DUNNING_LEVEL			=	9
* SELLER_ACCOUNT			=	10
* WEIGHT			=	11
* WIDTH			=	12
* LENGTH          =	13
* HEIGHT		=	14
* FLAG			=	15
* EXTERNAL_TOKEN_ID			=	16
* EXTERNAL_ITEM_ID			=	17
* COUPON_CODE			=	18
* COUPON_TYPE         =   19
* SALES_TAX_ID_NUMBER =   34
* MAIN_DOCUMENT_NUMBER = 33
* PAYMENT_TRANSACTION_ID = 45
* EXTERNAL_TAX_SERVICE = 47
* MERCHANT_ID = 60
* REPORT_ID = 61
* PREFERRED_STORAGE_LOCATION_ID = 63
* AMAZON_SHIPPING_LABEL = 64
* MARKET_TAX_ID = 88
* MARKET_EORI = 89
* IS_REVERSE_CHARGED = 90
* DISALLOW_INTERNAL_TAX_RELEVANT_DOCUMENTS = 91
* EBAY_PLUS = 994
* FULFILLMENT_SERVICE = 995
     *      - *value* - string
     *          - The value of the property. The value depends on the type.
     */
    public function updateOrdersPropertyById(int $id, array $data): array
    {
        return $this->api("/rest/orders/properties/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description Lists referrers with the desired columns/attributes.
     * @tag Order
     * @param array $query
     *      - *columns* - array - optional
     *          - The desired columns/attributes of the order referrer to be loaded.
     * @return array
     */
    public function getOrdersReferrers(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/referrers"], $query));
    }
                    
    /**
     * @description Gets the next free main referrer ID. If no more free main referrers are available, an exception is thrown.
     * @tag Order

     */
    public function getOrdersReferrersNextFreeMain(): void
    {
        $this->api("/rest/orders/referrers/next_free_main");
    }
                
    /**
     * @description Search for referrers by filter parameters.
     * @tag Order
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of referrers per page is 20.
     *      - *sortBy* - string - optional
     *          - Sort search result according to specified field. The default value is id.
     *      - *sortOrder* - string - optional
     *          - Sort direction desc or asc. The default value is asc.
     *      - *id* - int - optional
     *          - The ID of the referrer.
     *      - *name* - int - optional
     *          - The name of the referrer.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderReferrer
     */
    public function eachOrdersReferrersSearch(array $query = []): Iterator
    {
        return $this->eachInternal('getOrdersReferrersSearch', func_get_args());
    }
        
    /**
     * @description Search for referrers by filter parameters.
     * @tag Order
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of referrers per page is 20.
     *      - *sortBy* - string - optional
     *          - Sort search result according to specified field. The default value is id.
     *      - *sortOrder* - string - optional
     *          - Sort direction desc or asc. The default value is asc.
     *      - *id* - int - optional
     *          - The ID of the referrer.
     *      - *name* - int - optional
     *          - The name of the referrer.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderReferrer
     */
    public function batchOrdersReferrersSearch(array $query = []): Iterator
    {
        return $this->batchInternal('getOrdersReferrersSearch', func_get_args());
    }
    
    /**
     * @description Search for referrers by filter parameters.
     * @tag Order
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of referrers per page is 20.
     *      - *sortBy* - string - optional
     *          - Sort search result according to specified field. The default value is id.
     *      - *sortOrder* - string - optional
     *          - Sort direction desc or asc. The default value is asc.
     *      - *id* - int - optional
     *          - The ID of the referrer.
     *      - *name* - int - optional
     *          - The name of the referrer.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderReferrer
     */
    public function getOrdersReferrersSearch(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/referrers/search"], $query));
    }
                    
    /**
     * @description Create an order referrer. The ID can be specified, a parent ID can be specified to create a sub referrer or if no ID is specified, a referrer ID will be assigned automatically.
If an ID is specified, the ID may not be used already. If the ID is used already, the referrer will only be created.
If the ID is automatically assigned, the first ID that has not been used before will be set.
If the ID is not specified, but a parent referrer ID is given, then the new referrer ID will be a sub referrer of the given parent.
     * @tag Order
     * @param int $parentReferrerId 
     * @param array $query
     *      - *data* - array - required
     *          - The attributes of the order referrer to be created.
     * @return array
     *      - *id* - number
     *          - The ID of the order referrer
     *      - *isEditable* - boolean
     *          - Flag that indicates if this referrer can be updated as well as deleted or not
<ul><li>True = the referrer can be edited and deleted</li>
<li>False = the referrer can neither be edited nor deleted</li></ul>
     *      - *backendName* - string
     *          - The backend name of the referrer
     *      - *name* - string
     *          - The public name of the referrer as it is displayed e.g. on documents
     *      - *orderOwnerId* - integer
     *          - The user ID of whoever owns new orders from this referrer
     *      - *isFilterable* - boolean
     *          - Flag that indicates if this referrer can be used as a filter or not
<ul><li>True = Can be used as a filter</li>
<li>False = Cannot be used as a filter</li></ul>
     *      - *origin* - string
     *          - The origin of this referrer
     *      - *showInLeads* - boolean
     *          - Referrer is showed in list when creating a new lead
     */
    public function createOrdersReferrersParentReferrerIdByParentReferrerId(int $parentReferrerId, array $query): array
    {
        return $this->api(array_merge(["/rest/orders/referrers/{$parentReferrerId}"], $query), 'POST');
    }
                    
    /**
     * @description Delete a referrer. The ID of the referrer must be specified.
     * @tag Order
     * @param int $referrerId The ID of the referrer.
     */
    public function deleteOrdersReferrerByReferrerId(int $referrerId): void
    {
        $this->api("/rest/orders/referrers/{$referrerId}", 'DELETE');
    }
                
    /**
     * @description Gets a referrer. The ID of the referrer must be specified.
     * @tag Order
     * @param int $referrerId The ID of the referrer.
     * @return array
     *      - *id* - number
     *          - The ID of the order referrer
     *      - *isEditable* - boolean
     *          - Flag that indicates if this referrer can be updated as well as deleted or not
<ul><li>True = the referrer can be edited and deleted</li>
<li>False = the referrer can neither be edited nor deleted</li></ul>
     *      - *backendName* - string
     *          - The backend name of the referrer
     *      - *name* - string
     *          - The public name of the referrer as it is displayed e.g. on documents
     *      - *orderOwnerId* - integer
     *          - The user ID of whoever owns new orders from this referrer
     *      - *isFilterable* - boolean
     *          - Flag that indicates if this referrer can be used as a filter or not
<ul><li>True = Can be used as a filter</li>
<li>False = Cannot be used as a filter</li></ul>
     *      - *origin* - string
     *          - The origin of this referrer
     *      - *showInLeads* - boolean
     *          - Referrer is showed in list when creating a new lead
     */
    public function getOrdersReferrerByReferrerId(int $referrerId): array
    {
        return $this->api("/rest/orders/referrers/{$referrerId}");
    }
                
    /**
     * @description Update a referrer. The ID of the referrer must be specified.
     * @tag Order
     * @param int $referrerId The ID of the referrer.
     * @return array
     *      - *id* - number
     *          - The ID of the order referrer
     *      - *isEditable* - boolean
     *          - Flag that indicates if this referrer can be updated as well as deleted or not
<ul><li>True = the referrer can be edited and deleted</li>
<li>False = the referrer can neither be edited nor deleted</li></ul>
     *      - *backendName* - string
     *          - The backend name of the referrer
     *      - *name* - string
     *          - The public name of the referrer as it is displayed e.g. on documents
     *      - *orderOwnerId* - integer
     *          - The user ID of whoever owns new orders from this referrer
     *      - *isFilterable* - boolean
     *          - Flag that indicates if this referrer can be used as a filter or not
<ul><li>True = Can be used as a filter</li>
<li>False = Cannot be used as a filter</li></ul>
     *      - *origin* - string
     *          - The origin of this referrer
     *      - *showInLeads* - boolean
     *          - Referrer is showed in list when creating a new lead
     */
    public function updateOrdersReferrerByReferrerId(int $referrerId): array
    {
        return $this->api("/rest/orders/referrers/{$referrerId}", 'PUT');
    }
                
    /**
     * @description Searches for orders. The results can be restricted by using filters. For more information on the order search, refer to the <a href='https://developers.plentymarkets.com/en-gb/developers/main/rest-api-guides/order-search.html' target='_blank'>REST API guide</a>.
     * @tag Order
     * @param array $query
     *      - *orderId* - int - optional
     *          - This filter restricts the search results to orders with a specific ID.
     *      - *plentyId* - int - optional
     *          - This filter restricts the search results to orders with a specific plenty ID.
     *      - *orderTypeId* - string - optional
     *          - This filter restricts the search results to orders with a specific order type ID.
     *      - *statusId* - number - optional
     *          - This filter restricts the search results to orders with a specific status ID.
     *      - *referrerId* - number - optional
     *          - This filter restricts the search results to orders with a specific referrer ID.
     *      - *ownerId* - int - optional
     *          - This filter restricts the search results to orders with a specific owner ID.
     *      - *locationId* - int - optional
     *          - This filter restricts the search results to orders with a specific location ID.
     *      - *updatedAt* - string - optional
     *          - This filter restricts the search results to orders with a specific update date.
     *      - *createdAt* - string - optional
     *          - This filter restricts the search results to orders with a specific creation date.
     *      - *lockStatus* - string - optional
     *          - This filter restricts the search results to orders with a specific lock status.
     *      - *orderAddressData* - string - optional
     *          - This filter restricts the search results to orders with specific address data.
     *      - *contactData* - string - optional
     *          - This filter restricts the search results to orders with specific contact data.
     *      - *orderItemTypeId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item type ID.
     *      - *itemId* - int - optional
     *          - This filter restricts the search results to orders including a specific item.
     *      - *itemVariationId* - int - optional
     *          - This filter restricts the search results to orders including a specific item variation.
     *      - *variationNumber* - string - optional
     *          - This filter restricts the search results to orders including a specific variation number.
     *      - *orderItemName* - string - optional
     *          - This filter restricts the search results to orders including a specific order item name.
     *      - *documentNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific document number.
     *      - *hasValidInvoice* - boolean - optional
     *          - This filter restricts the search results to orders for which a valid invoice exists.
     *      - *packageNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific package number.
     *      - *contactClassId* - int - optional
     *          - This filter restricts the search results to orders with a specific contact class ID.
     *      - *itemManufacturerId* - int - optional
     *          - This filter restricts the search results to orders with a specific item manufacturer ID.
     *      - *orderItemWarehouseId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item warehouse ID.
     *      - *invoiceTotalSystemCurrency* - number - optional
     *          - This filter restricts the search results to orders with a specific invoice total (in system currency).
     *      - *isDeliveryAddressPackingStation* - boolean - optional
     *          - This filter restricts the search results to orders for which the delivery address is a packing station.
     *      - *serialNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific serial number.
     *      - *isGuestContact* - boolean - optional
     *          - This filter restricts the search results to orders with a guest contact.
     *      - *variationSupplierId* - int - optional
     *          - This filter restricts the search results to orders with a specific variation supplier ID.
     *      - *orderItemReferrerId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item referrer ID.
     *      - *tag* - int - optional
     *          - This filter restricts the search results to orders with a specific tag.
     *      - *excludeMainOrders* - boolean - optional
     *          - This filter restricts the search results to orders for which no delivery orders exist.
     *      - *orderProperty_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order property with a specific value. The order property type ID has to be replaced in the filter name.
     *      - *orderDate_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order date with a specific value. The order date type ID has to be replaced in the filter name.
     *      - *orderReference_{referenceType}* - int - optional
     *          - This filter restricts the search results to orders with an order reference with a specific value. The order reference type has to be replaced in the filter name.
     *      - *orderItemReference_{referenceType}* - int - optional
     *          - This filter restricts the search results to orders with an order item reference with a specific value. The order item reference type has to be replaced in the filter name.
     *      - *relationReference_{referenceType}_{relationType}* - int - optional
     *          - This filter restricts the search results to orders with a relation reference with a specific value. The reference type and relation type has to be replaced in the filter name.
     *      - *soldCouponCode* - string - optional
     *          - This filter restricts the search results to orders with a specific sold coupon code.
     *      - *redeemedCouponCode* - string - optional
     *          - This filter restricts the search results to orders with a specific redeemed coupon code.
     *      - *orderBillingAddressCountryId* - int - optional
     *          - This filter restricts the search results to orders with a specific invoice address country ID.
     *      - *orderDeliveryAddressCountryId* - int - optional
     *          - This filter restricts the search results to orders with a specific delivery address country ID.
     *      - *documentNumber_{documentType}* - string - optional
     *          - This filter restricts the search results to orders with a document number with a specific value. The document type has to be replaced in the filter name.
     *      - *orderItemProperty_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order item property with a specific value. The order property type ID has to be replaced in the filter name.
     *      - *addressRelation_{typeId}* - int - optional
     *          - This filter restricts the search results to orders with an address relation with a specific value. The address relation type ID has to be replaced in the filter name.
     *      - *shippingServiceProviderId* - int - optional
     *          - This filter restricts the search results to orders with a specific shipping service provider ID.
     *      - *shippingServiceProviderType* - string - optional
     *          - This filter restricts the search results to orders with a specific shipping service provider type.
     *      - *shippingStatus* - string - optional
     *          - This filter restricts the search results to orders with a specific shipping status.
     *      - *shippingShipmentDate* - string - optional
     *          - This filter restricts the search results to orders with a specific shipment date.
     *      - *sortBy* - string - optional
     *          - This field is used for sorting. Default is 'orderId'. Possible values are 'orderId', 'statusId', 'orderDeliveryAddressPostCode', 'invoiceNumber', 'orderDate_{2,3,5,8}', 'orderProperty_33'
     *      - *sortOrder* - string - optional
     *          - The order to sort by. Possible values are 'asc' and 'desc'.
     *      - *page* - int - optional
     *          - The page to get. The returned default page is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders displayed per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order.
     *      - *lazyLoaded* - boolean - optional
     *          - If true, no default relations are loaded. Default = true.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Order
     */
    public function eachOrdersSearch(array $query = []): Iterator
    {
        return $this->eachInternal('getOrdersSearch', func_get_args());
    }
        
    /**
     * @description Searches for orders. The results can be restricted by using filters. For more information on the order search, refer to the <a href='https://developers.plentymarkets.com/en-gb/developers/main/rest-api-guides/order-search.html' target='_blank'>REST API guide</a>.
     * @tag Order
     * @param array $query
     *      - *orderId* - int - optional
     *          - This filter restricts the search results to orders with a specific ID.
     *      - *plentyId* - int - optional
     *          - This filter restricts the search results to orders with a specific plenty ID.
     *      - *orderTypeId* - string - optional
     *          - This filter restricts the search results to orders with a specific order type ID.
     *      - *statusId* - number - optional
     *          - This filter restricts the search results to orders with a specific status ID.
     *      - *referrerId* - number - optional
     *          - This filter restricts the search results to orders with a specific referrer ID.
     *      - *ownerId* - int - optional
     *          - This filter restricts the search results to orders with a specific owner ID.
     *      - *locationId* - int - optional
     *          - This filter restricts the search results to orders with a specific location ID.
     *      - *updatedAt* - string - optional
     *          - This filter restricts the search results to orders with a specific update date.
     *      - *createdAt* - string - optional
     *          - This filter restricts the search results to orders with a specific creation date.
     *      - *lockStatus* - string - optional
     *          - This filter restricts the search results to orders with a specific lock status.
     *      - *orderAddressData* - string - optional
     *          - This filter restricts the search results to orders with specific address data.
     *      - *contactData* - string - optional
     *          - This filter restricts the search results to orders with specific contact data.
     *      - *orderItemTypeId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item type ID.
     *      - *itemId* - int - optional
     *          - This filter restricts the search results to orders including a specific item.
     *      - *itemVariationId* - int - optional
     *          - This filter restricts the search results to orders including a specific item variation.
     *      - *variationNumber* - string - optional
     *          - This filter restricts the search results to orders including a specific variation number.
     *      - *orderItemName* - string - optional
     *          - This filter restricts the search results to orders including a specific order item name.
     *      - *documentNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific document number.
     *      - *hasValidInvoice* - boolean - optional
     *          - This filter restricts the search results to orders for which a valid invoice exists.
     *      - *packageNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific package number.
     *      - *contactClassId* - int - optional
     *          - This filter restricts the search results to orders with a specific contact class ID.
     *      - *itemManufacturerId* - int - optional
     *          - This filter restricts the search results to orders with a specific item manufacturer ID.
     *      - *orderItemWarehouseId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item warehouse ID.
     *      - *invoiceTotalSystemCurrency* - number - optional
     *          - This filter restricts the search results to orders with a specific invoice total (in system currency).
     *      - *isDeliveryAddressPackingStation* - boolean - optional
     *          - This filter restricts the search results to orders for which the delivery address is a packing station.
     *      - *serialNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific serial number.
     *      - *isGuestContact* - boolean - optional
     *          - This filter restricts the search results to orders with a guest contact.
     *      - *variationSupplierId* - int - optional
     *          - This filter restricts the search results to orders with a specific variation supplier ID.
     *      - *orderItemReferrerId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item referrer ID.
     *      - *tag* - int - optional
     *          - This filter restricts the search results to orders with a specific tag.
     *      - *excludeMainOrders* - boolean - optional
     *          - This filter restricts the search results to orders for which no delivery orders exist.
     *      - *orderProperty_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order property with a specific value. The order property type ID has to be replaced in the filter name.
     *      - *orderDate_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order date with a specific value. The order date type ID has to be replaced in the filter name.
     *      - *orderReference_{referenceType}* - int - optional
     *          - This filter restricts the search results to orders with an order reference with a specific value. The order reference type has to be replaced in the filter name.
     *      - *orderItemReference_{referenceType}* - int - optional
     *          - This filter restricts the search results to orders with an order item reference with a specific value. The order item reference type has to be replaced in the filter name.
     *      - *relationReference_{referenceType}_{relationType}* - int - optional
     *          - This filter restricts the search results to orders with a relation reference with a specific value. The reference type and relation type has to be replaced in the filter name.
     *      - *soldCouponCode* - string - optional
     *          - This filter restricts the search results to orders with a specific sold coupon code.
     *      - *redeemedCouponCode* - string - optional
     *          - This filter restricts the search results to orders with a specific redeemed coupon code.
     *      - *orderBillingAddressCountryId* - int - optional
     *          - This filter restricts the search results to orders with a specific invoice address country ID.
     *      - *orderDeliveryAddressCountryId* - int - optional
     *          - This filter restricts the search results to orders with a specific delivery address country ID.
     *      - *documentNumber_{documentType}* - string - optional
     *          - This filter restricts the search results to orders with a document number with a specific value. The document type has to be replaced in the filter name.
     *      - *orderItemProperty_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order item property with a specific value. The order property type ID has to be replaced in the filter name.
     *      - *addressRelation_{typeId}* - int - optional
     *          - This filter restricts the search results to orders with an address relation with a specific value. The address relation type ID has to be replaced in the filter name.
     *      - *shippingServiceProviderId* - int - optional
     *          - This filter restricts the search results to orders with a specific shipping service provider ID.
     *      - *shippingServiceProviderType* - string - optional
     *          - This filter restricts the search results to orders with a specific shipping service provider type.
     *      - *shippingStatus* - string - optional
     *          - This filter restricts the search results to orders with a specific shipping status.
     *      - *shippingShipmentDate* - string - optional
     *          - This filter restricts the search results to orders with a specific shipment date.
     *      - *sortBy* - string - optional
     *          - This field is used for sorting. Default is 'orderId'. Possible values are 'orderId', 'statusId', 'orderDeliveryAddressPostCode', 'invoiceNumber', 'orderDate_{2,3,5,8}', 'orderProperty_33'
     *      - *sortOrder* - string - optional
     *          - The order to sort by. Possible values are 'asc' and 'desc'.
     *      - *page* - int - optional
     *          - The page to get. The returned default page is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders displayed per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order.
     *      - *lazyLoaded* - boolean - optional
     *          - If true, no default relations are loaded. Default = true.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Order
     */
    public function batchOrdersSearch(array $query = []): Iterator
    {
        return $this->batchInternal('getOrdersSearch', func_get_args());
    }
    
    /**
     * @description Searches for orders. The results can be restricted by using filters. For more information on the order search, refer to the <a href='https://developers.plentymarkets.com/en-gb/developers/main/rest-api-guides/order-search.html' target='_blank'>REST API guide</a>.
     * @tag Order
     * @param array $query
     *      - *orderId* - int - optional
     *          - This filter restricts the search results to orders with a specific ID.
     *      - *plentyId* - int - optional
     *          - This filter restricts the search results to orders with a specific plenty ID.
     *      - *orderTypeId* - string - optional
     *          - This filter restricts the search results to orders with a specific order type ID.
     *      - *statusId* - number - optional
     *          - This filter restricts the search results to orders with a specific status ID.
     *      - *referrerId* - number - optional
     *          - This filter restricts the search results to orders with a specific referrer ID.
     *      - *ownerId* - int - optional
     *          - This filter restricts the search results to orders with a specific owner ID.
     *      - *locationId* - int - optional
     *          - This filter restricts the search results to orders with a specific location ID.
     *      - *updatedAt* - string - optional
     *          - This filter restricts the search results to orders with a specific update date.
     *      - *createdAt* - string - optional
     *          - This filter restricts the search results to orders with a specific creation date.
     *      - *lockStatus* - string - optional
     *          - This filter restricts the search results to orders with a specific lock status.
     *      - *orderAddressData* - string - optional
     *          - This filter restricts the search results to orders with specific address data.
     *      - *contactData* - string - optional
     *          - This filter restricts the search results to orders with specific contact data.
     *      - *orderItemTypeId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item type ID.
     *      - *itemId* - int - optional
     *          - This filter restricts the search results to orders including a specific item.
     *      - *itemVariationId* - int - optional
     *          - This filter restricts the search results to orders including a specific item variation.
     *      - *variationNumber* - string - optional
     *          - This filter restricts the search results to orders including a specific variation number.
     *      - *orderItemName* - string - optional
     *          - This filter restricts the search results to orders including a specific order item name.
     *      - *documentNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific document number.
     *      - *hasValidInvoice* - boolean - optional
     *          - This filter restricts the search results to orders for which a valid invoice exists.
     *      - *packageNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific package number.
     *      - *contactClassId* - int - optional
     *          - This filter restricts the search results to orders with a specific contact class ID.
     *      - *itemManufacturerId* - int - optional
     *          - This filter restricts the search results to orders with a specific item manufacturer ID.
     *      - *orderItemWarehouseId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item warehouse ID.
     *      - *invoiceTotalSystemCurrency* - number - optional
     *          - This filter restricts the search results to orders with a specific invoice total (in system currency).
     *      - *isDeliveryAddressPackingStation* - boolean - optional
     *          - This filter restricts the search results to orders for which the delivery address is a packing station.
     *      - *serialNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific serial number.
     *      - *isGuestContact* - boolean - optional
     *          - This filter restricts the search results to orders with a guest contact.
     *      - *variationSupplierId* - int - optional
     *          - This filter restricts the search results to orders with a specific variation supplier ID.
     *      - *orderItemReferrerId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item referrer ID.
     *      - *tag* - int - optional
     *          - This filter restricts the search results to orders with a specific tag.
     *      - *excludeMainOrders* - boolean - optional
     *          - This filter restricts the search results to orders for which no delivery orders exist.
     *      - *orderProperty_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order property with a specific value. The order property type ID has to be replaced in the filter name.
     *      - *orderDate_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order date with a specific value. The order date type ID has to be replaced in the filter name.
     *      - *orderReference_{referenceType}* - int - optional
     *          - This filter restricts the search results to orders with an order reference with a specific value. The order reference type has to be replaced in the filter name.
     *      - *orderItemReference_{referenceType}* - int - optional
     *          - This filter restricts the search results to orders with an order item reference with a specific value. The order item reference type has to be replaced in the filter name.
     *      - *relationReference_{referenceType}_{relationType}* - int - optional
     *          - This filter restricts the search results to orders with a relation reference with a specific value. The reference type and relation type has to be replaced in the filter name.
     *      - *soldCouponCode* - string - optional
     *          - This filter restricts the search results to orders with a specific sold coupon code.
     *      - *redeemedCouponCode* - string - optional
     *          - This filter restricts the search results to orders with a specific redeemed coupon code.
     *      - *orderBillingAddressCountryId* - int - optional
     *          - This filter restricts the search results to orders with a specific invoice address country ID.
     *      - *orderDeliveryAddressCountryId* - int - optional
     *          - This filter restricts the search results to orders with a specific delivery address country ID.
     *      - *documentNumber_{documentType}* - string - optional
     *          - This filter restricts the search results to orders with a document number with a specific value. The document type has to be replaced in the filter name.
     *      - *orderItemProperty_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order item property with a specific value. The order property type ID has to be replaced in the filter name.
     *      - *addressRelation_{typeId}* - int - optional
     *          - This filter restricts the search results to orders with an address relation with a specific value. The address relation type ID has to be replaced in the filter name.
     *      - *shippingServiceProviderId* - int - optional
     *          - This filter restricts the search results to orders with a specific shipping service provider ID.
     *      - *shippingServiceProviderType* - string - optional
     *          - This filter restricts the search results to orders with a specific shipping service provider type.
     *      - *shippingStatus* - string - optional
     *          - This filter restricts the search results to orders with a specific shipping status.
     *      - *shippingShipmentDate* - string - optional
     *          - This filter restricts the search results to orders with a specific shipment date.
     *      - *sortBy* - string - optional
     *          - This field is used for sorting. Default is 'orderId'. Possible values are 'orderId', 'statusId', 'orderDeliveryAddressPostCode', 'invoiceNumber', 'orderDate_{2,3,5,8}', 'orderProperty_33'
     *      - *sortOrder* - string - optional
     *          - The order to sort by. Possible values are 'asc' and 'desc'.
     *      - *page* - int - optional
     *          - The page to get. The returned default page is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders displayed per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order.
     *      - *lazyLoaded* - boolean - optional
     *          - If true, no default relations are loaded. Default = true.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Order
     */
    public function getOrdersSearch(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/search"], $query));
    }
                
    /**
     * @description Searches for orders. The results can be restricted by using filters. For more information on the order search, refer to the <a href='https://developers.plentymarkets.com/en-gb/developers/main/rest-api-guides/order-search.html' target='_blank'>REST API guide</a>.
     * @tag Order
     * @param array $query
     *      - *orderId* - int - optional
     *          - This filter restricts the search results to orders with a specific ID.
     *      - *plentyId* - int - optional
     *          - This filter restricts the search results to orders with a specific plenty ID.
     *      - *orderTypeId* - string - optional
     *          - This filter restricts the search results to orders with a specific order type ID.
     *      - *statusId* - number - optional
     *          - This filter restricts the search results to orders with a specific status ID.
     *      - *referrerId* - number - optional
     *          - This filter restricts the search results to orders with a specific referrer ID.
     *      - *ownerId* - int - optional
     *          - This filter restricts the search results to orders with a specific owner ID.
     *      - *locationId* - int - optional
     *          - This filter restricts the search results to orders with a specific location ID.
     *      - *updatedAt* - string - optional
     *          - This filter restricts the search results to orders with a specific update date.
     *      - *createdAt* - string - optional
     *          - This filter restricts the search results to orders with a specific creation date.
     *      - *lockStatus* - string - optional
     *          - This filter restricts the search results to orders with a specific lock status.
     *      - *orderAddressData* - string - optional
     *          - This filter restricts the search results to orders with specific address data.
     *      - *contactData* - string - optional
     *          - This filter restricts the search results to orders with specific contact data.
     *      - *orderItemTypeId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item type ID.
     *      - *itemId* - int - optional
     *          - This filter restricts the search results to orders including a specific item.
     *      - *itemVariationId* - int - optional
     *          - This filter restricts the search results to orders including a specific item variation.
     *      - *variationNumber* - string - optional
     *          - This filter restricts the search results to orders including a specific variation number.
     *      - *orderItemName* - string - optional
     *          - This filter restricts the search results to orders including a specific order item name.
     *      - *documentNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific document number.
     *      - *hasValidInvoice* - boolean - optional
     *          - This filter restricts the search results to orders for which a valid invoice exists.
     *      - *packageNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific package number.
     *      - *contactClassId* - int - optional
     *          - This filter restricts the search results to orders with a specific contact class ID.
     *      - *itemManufacturerId* - int - optional
     *          - This filter restricts the search results to orders with a specific item manufacturer ID.
     *      - *orderItemWarehouseId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item warehouse ID.
     *      - *invoiceTotalSystemCurrency* - number - optional
     *          - This filter restricts the search results to orders with a specific invoice total (in system currency).
     *      - *isDeliveryAddressPackingStation* - boolean - optional
     *          - This filter restricts the search results to orders for which the delivery address is a packing station.
     *      - *serialNumber* - string - optional
     *          - This filter restricts the search results to orders with a specific serial number.
     *      - *isGuestContact* - boolean - optional
     *          - This filter restricts the search results to orders with a guest contact.
     *      - *variationSupplierId* - int - optional
     *          - This filter restricts the search results to orders with a specific variation supplier ID.
     *      - *orderItemReferrerId* - int - optional
     *          - This filter restricts the search results to orders with a specific order item referrer ID.
     *      - *tag* - int - optional
     *          - This filter restricts the search results to orders with a specific tag.
     *      - *excludeMainOrders* - boolean - optional
     *          - This filter restricts the search results to orders for which no delivery orders exist.
     *      - *orderProperty_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order property with a specific value. The order property type ID has to be replaced in the filter name.
     *      - *orderDate_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order date with a specific value. The order date type ID has to be replaced in the filter name.
     *      - *orderReference_{referenceType}* - int - optional
     *          - This filter restricts the search results to orders with an order reference with a specific value. The order reference type has to be replaced in the filter name.
     *      - *orderItemReference_{referenceType}* - int - optional
     *          - This filter restricts the search results to orders with an order item reference with a specific value. The order item reference type has to be replaced in the filter name.
     *      - *relationReference_{referenceType}_{relationType}* - int - optional
     *          - This filter restricts the search results to orders with a relation reference with a specific value. The reference type and relation type has to be replaced in the filter name.
     *      - *soldCouponCode* - string - optional
     *          - This filter restricts the search results to orders with a specific sold coupon code.
     *      - *redeemedCouponCode* - string - optional
     *          - This filter restricts the search results to orders with a specific redeemed coupon code.
     *      - *orderBillingAddressCountryId* - int - optional
     *          - This filter restricts the search results to orders with a specific invoice address country ID.
     *      - *orderDeliveryAddressCountryId* - int - optional
     *          - This filter restricts the search results to orders with a specific delivery address country ID.
     *      - *documentNumber_{documentType}* - string - optional
     *          - This filter restricts the search results to orders with a document number with a specific value. The document type has to be replaced in the filter name.
     *      - *orderItemProperty_{typeId}* - string - optional
     *          - This filter restricts the search results to orders with an order item property with a specific value. The order property type ID has to be replaced in the filter name.
     *      - *addressRelation_{typeId}* - int - optional
     *          - This filter restricts the search results to orders with an address relation with a specific value. The address relation type ID has to be replaced in the filter name.
     *      - *shippingServiceProviderId* - int - optional
     *          - This filter restricts the search results to orders with a specific shipping service provider ID.
     *      - *shippingServiceProviderType* - string - optional
     *          - This filter restricts the search results to orders with a specific shipping service provider type.
     *      - *shippingStatus* - string - optional
     *          - This filter restricts the search results to orders with a specific shipping status.
     *      - *shippingShipmentDate* - string - optional
     *          - This filter restricts the search results to orders with a specific shipment date.
     *      - *sortBy* - string - optional
     *          - This field is used for sorting. Default is 'orderId'. Possible values are 'orderId', 'statusId', 'orderDeliveryAddressPostCode', 'invoiceNumber', 'orderDate_{2,3,5,8}', 'orderProperty_33'
     *      - *sortOrder* - string - optional
     *          - The order to sort by. Possible values are 'asc' and 'desc'.
     *      - *page* - int - optional
     *          - The page to get. The returned default page is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders displayed per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order.
     *      - *lazyLoaded* - boolean - optional
     *          - If true, no default relations are loaded. Default = true.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Order
     */
    public function createOrdersSearch(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/search"], $query), 'POST');
    }
                    
    /**
     * @description Get all the active shipping service providers for registration
     * @tag Order
     * @param array $query
     *      - *includePlugins* - boolean - optional
     *          - The flag that indicates if the plugin providers should be also returned in the list
     * @return array
     */
    public function getOrdersShippingActiveShippingServiceProviders(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/active_shipping_service_providers"], $query));
    }
                    
    /**
     * @description Lists all shipping countries.
     * @tag Order
     * @param array $query
     *      - *active* - int - optional
     *          - Returns only the active shipping countries.
     *      - *with* - array - optional
     *          - The relations to be loaded. Possible values are 'states' and 'names'.
     *      - *onlyEUCountries* - int - optional
     *          - Returns only the EU shipping countries.
     */
    public function getOrdersShippingCountries(array $query = []): void
    {
        $this->api(array_merge(["/rest/orders/shipping/countries"], $query));
    }
                    
    /**
     * @description Return a paginated list containing all the orders with their shipping information
     * @tag Order
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - 
     */
    public function getOrdersShippingListShippingInformation(): array
    {
        return $this->api("/rest/orders/shipping/list_shipping_information");
    }
                    
    /**
     * @description Lists all shipping packages types.
     * @tag Order
     * @return array
     */
    public function getOrdersShippingPackageTypes(): array
    {
        return $this->api("/rest/orders/shipping/package_types");
    }
                    
    /**
     * @description Gets a shipping package type. The ID of the shipping package type must be specified.
     * @tag Order
     * @param int $shippingPackageTypeId The ID of the shipping package type
     * @return array
     *      - *id* - integer
     *          - The ID of the shipping package type
     *      - *name* - string
     *          - The name of the shipping package type
     *      - *width* - integer
     *          - The width of the shipping package type
     *      - *height* - integer
     *          - The height of the shipping package type
     *      - *length* - integer
     *          - The length of the shipping package type
     *      - *unit* - string
     *          - The unit of the shipping package type dimension
     *      - *maxWeight* - integer
     *          - The maximum weight of the shipping package type
     *      - *maxVolume* - integer
     *          - The maximum volume of the shipping package type
     *      - *volumeType* - integer
     *          - The volume type of the shipping package type
     */
    public function getOrdersShippingPackageTypeByShippingPackageTypeId(int $shippingPackageTypeId): array
    {
        return $this->api("/rest/orders/shipping/package_types/{$shippingPackageTypeId}");
    }
                    
    /**
     * @description Deletes the package, variation or quantity in a package. The ID of the order package item variation is mandatory.
     * @tag Order
     * @param int $id The ID of the order package item variation
     */
    public function deleteOrdersShippingPackagesItemById(int $id): void
    {
        $this->api("/rest/orders/shipping/packages/items/{$id}", 'DELETE');
    }
                
    /**
     * @description Updates the package, variation or quantity in a package. The ID of the order package item variation is mandatory.
     * @tag Order
     * @param int $id The ID of the order package item variation
     */
    public function updateOrdersShippingPackagesItemById(int $id): void
    {
        $this->api("/rest/orders/shipping/packages/items/{$id}", 'PUT');
    }
                    
    /**
     * @description Deletes the items of an order package. The ID of the package, of the item and of the variation are mandatory.
     * @tag Order
     * @param int $packageId The ID of the package
     * @param int $itemId The ID of the item
     * @param int $variationId The ID of the variation
     */
    public function deleteOrdersShippingPackagesItemByPackageIdItemIdVariationId(int $packageId, int $itemId, int $variationId): void
    {
        $this->api("/rest/orders/shipping/packages/items/{$packageId}/{$itemId}/{$variationId}", 'DELETE');
    }
                
    /**
     * @description Updates the items of an order package. The ID of the package, of the item and of the variation are mandatory.
     * @tag Order
     * @param int $packageId The ID of the package
     * @param int $itemId The ID of the item
     * @param int $variationId The ID of the variation
     */
    public function updateOrdersShippingPackagesItemByPackageIdItemIdVariationId(int $packageId, int $itemId, int $variationId): void
    {
        $this->api("/rest/orders/shipping/packages/items/{$packageId}/{$itemId}/{$variationId}", 'PUT');
    }
                    
    /**
     * @description Updates an order shipping package. The ID of the order shipping package must be specified.
     * @tag Order
     * @param int $orderShippingPackageId The ID of the order shipping package
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping package
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *packageId* - integer
     *          - The ID of the package
     *      - *weight* - integer
     *          - The weight of the package in grams
     *      - *packageNumber* - string
     *          - The package number
     *      - *labelPath* - string
     *          - The path to the label
     *      - *labelBase64* - string
     *          - The base64 encoded label
     *      - *exportLabelBase64* - string
     *          - The base64 encoded export label
     *      - *returnPackageNumber* - string
     *          - The return package number
     *      - *packageType* - integer
     *          - The type of the package. The following types are valid:
<ul>
 <li>0: unpacked</li>
 <li>1: Bale</li>
 <li>2: Dispenser</li>
 <li>3: Coil</li>
 <li>4: Roll pallet</li>
 <li>5: Colli</li>
 <li>6: Container</li>
 <li>7: Bucket</li>
 <li>8: Cask</li>
 <li>9: Bottles</li>
 <li>10: European flat pallet</li>
 <li>11: Structural frame</li>
 <li>12: Gas cylinder</li>
 <li>13: Pallet cage</li>
 <li>14: Hobbock</li>
 <li>15: Half pallet</li>
 <li>16: Pallet of food items</li>
 <li>17: Wooden coaster</li>
 <li>18: IBC container</li>
 <li>19: Pitcher</li>
 <li>20: Wicker bottle</li>
 <li>21: Case</li>
 <li>22: Canister</li>
 <li>23: Customer pallet</li>
 <li>24: Cardboard box</li>
 <li>25: Composite packaging</li>
 <li>26: Package</li>
 <li>27: Ring</li>
 <li>28: Role</li>
 <li>29: Sack</li>
 <li>30: units</li>
 <li>31: Tank</li>
 <li>32: Drum</li>
 <li>34: Crate</li>
 <li>35: Quarter pallet</li>
 <li>36: Other pallets</li>
 <li>37: Bin</li>
 <li>38: One-way pallet</li>
 <li>39: Foil bag</li>
</ul>
     *      - *volume* - number
     *          - The volume of the package
     *      - *palletId* - integer
     *          - The id of the pallet of which the package belong to
     *      - *isClosed* - boolean
     *          - Flag to say if the package is editable or not
     *      - *createdAt* - string
     *      - *updatedAt* - string
     *      - *packageSscc* - string
     *          - Amazon Vendor PackageSscc
     */
    public function updateOrdersShippingPackageByOrderShippingPackageId(int $orderShippingPackageId, array $data): array
    {
        return $this->api("/rest/orders/shipping/packages/{$orderShippingPackageId}", 'PUT', $data);
    }
                    
    /**
     * @description Lists items of an order package. The ID of the package must be specified.
     * @tag Order
     * @param int $packageId The ID of the order package
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping package item. Primary key auto-increment
     *      - *packageId* - integer
     *          - The ID of the package (id column from plenty_package_type2order)
     *      - *itemId* - integer
     *          - The ID of the item (plenty_item_variation_base_item_id column from plenty_item_variation_base)
     *      - *variationId* - integer
     *          - The ID of the variation (plenty_item_variation_base_id column from plenty_item_variation_base)
     *      - *itemQuantity* - number
     *          - The quantity of the item in the package
     */
    public function getOrdersShippingPackagesItemsByPackageId(int $packageId): array
    {
        return $this->api("/rest/orders/shipping/packages/{$packageId}/items");
    }
                
    /**
     * @description Creates the package, variation or quantity in a package. The ID of the order package item variation is mandatory.
     * @tag Order
     * @param int $packageId The ID of the order package
     * @return array
     */
    public function createOrdersShippingPackagesItemByPackageId(int $packageId): array
    {
        return $this->api("/rest/orders/shipping/packages/{$packageId}/items", 'POST');
    }
                    
    /**
     * @description Get all the packed items from a given package
     * @tag Order
     * @param int $packageId The ID of the package
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping package item. Primary key auto-increment
     *      - *packageId* - integer
     *          - The ID of the package (id column from plenty_package_type2order)
     *      - *itemId* - integer
     *          - The ID of the item (plenty_item_variation_base_item_id column from plenty_item_variation_base)
     *      - *variationId* - integer
     *          - The ID of the variation (plenty_item_variation_base_id column from plenty_item_variation_base)
     *      - *itemQuantity* - number
     *          - The quantity of the item in the package
     */
    public function getOrdersShippingPackagesPackedItemsByPackageId(int $packageId): array
    {
        return $this->api("/rest/orders/shipping/packages/{$packageId}/packed_items");
    }
                    
    /**
     * @description Lists order shipping pallets. The ID of the order must be specified.
     * @tag Order
     * @param array $query
     *      - *orderId* - string - required
     *          - The ID of the order
     * @return array
     */
    public function getOrdersShippingPallets(array $query): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/pallets"], $query));
    }
                
    /**
     * @description Creates order shipping pallets.
     * @tag Order
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping pallet
     *      - *weight* - number
     *          - The weight of the order shipping pallet, including it's contents
     *      - *individualWeight* - number
     *          - The weight of the order shipping pallet
     *      - *width* - number
     *          - The width of the order shipping pallet
     *      - *height* - number
     *          - The height of the order shipping pallet
     *      - *length* - number
     *          - The length of the order shipping pallet
     *      - *isStackable* - boolean
     *          - Flag to tell if the pallet is stackable or not. If true, another pallet can be placed over the current one
     *      - *additionalInfo* - integer
     *          - Additional info
     *      - *barcode* - string
     *          - The barcode
     *      - *isClosed* - boolean
     *          - Flag to tell if the pallet is closed or not. If true, the information within the pallet should not be changed anymore
     *      - *palletSscc* - string
     *          - Amazon Vendor PalletSscc
     *      - *orderId* - integer
     *          - The id of the order
     */
    public function createOrdersShippingPallet(array $data): array
    {
        return $this->api("/rest/orders/shipping/pallets", 'POST', $data);
    }
                    
    /**
     * @description Deletes all pallets of an order. The ID of the pallet must be specified.
     * @tag Order
     * @param int $palletId The ID of the pallet
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping pallet
     *      - *weight* - number
     *          - The weight of the order shipping pallet, including it's contents
     *      - *individualWeight* - number
     *          - The weight of the order shipping pallet
     *      - *width* - number
     *          - The width of the order shipping pallet
     *      - *height* - number
     *          - The height of the order shipping pallet
     *      - *length* - number
     *          - The length of the order shipping pallet
     *      - *isStackable* - boolean
     *          - Flag to tell if the pallet is stackable or not. If true, another pallet can be placed over the current one
     *      - *additionalInfo* - integer
     *          - Additional info
     *      - *barcode* - string
     *          - The barcode
     *      - *isClosed* - boolean
     *          - Flag to tell if the pallet is closed or not. If true, the information within the pallet should not be changed anymore
     *      - *palletSscc* - string
     *          - Amazon Vendor PalletSscc
     *      - *orderId* - integer
     *          - The id of the order
     */
    public function deleteOrdersShippingPalletByPalletId(int $palletId, array $data): array
    {
        return $this->api("/rest/orders/shipping/pallets/{$palletId}", 'DELETE', $data);
    }
                
    /**
     * @description Lists all pallets of an order. The ID of the pallet must be specified.
     * @tag Order
     * @param int $palletId The ID of the pallet
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping pallet
     *      - *weight* - number
     *          - The weight of the order shipping pallet, including it's contents
     *      - *individualWeight* - number
     *          - The weight of the order shipping pallet
     *      - *width* - number
     *          - The width of the order shipping pallet
     *      - *height* - number
     *          - The height of the order shipping pallet
     *      - *length* - number
     *          - The length of the order shipping pallet
     *      - *isStackable* - boolean
     *          - Flag to tell if the pallet is stackable or not. If true, another pallet can be placed over the current one
     *      - *additionalInfo* - integer
     *          - Additional info
     *      - *barcode* - string
     *          - The barcode
     *      - *isClosed* - boolean
     *          - Flag to tell if the pallet is closed or not. If true, the information within the pallet should not be changed anymore
     *      - *palletSscc* - string
     *          - Amazon Vendor PalletSscc
     *      - *orderId* - integer
     *          - The id of the order
     */
    public function getOrdersShippingPalletByPalletId(int $palletId): array
    {
        return $this->api("/rest/orders/shipping/pallets/{$palletId}");
    }
                
    /**
     * @description Updates all pallets of an order. The ID of the pallet must be specified.
     * @tag Order
     * @param int $palletId The ID of the pallet
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping pallet
     *      - *weight* - number
     *          - The weight of the order shipping pallet, including it's contents
     *      - *individualWeight* - number
     *          - The weight of the order shipping pallet
     *      - *width* - number
     *          - The width of the order shipping pallet
     *      - *height* - number
     *          - The height of the order shipping pallet
     *      - *length* - number
     *          - The length of the order shipping pallet
     *      - *isStackable* - boolean
     *          - Flag to tell if the pallet is stackable or not. If true, another pallet can be placed over the current one
     *      - *additionalInfo* - integer
     *          - Additional info
     *      - *barcode* - string
     *          - The barcode
     *      - *isClosed* - boolean
     *          - Flag to tell if the pallet is closed or not. If true, the information within the pallet should not be changed anymore
     *      - *palletSscc* - string
     *          - Amazon Vendor PalletSscc
     *      - *orderId* - integer
     *          - The id of the order
     */
    public function updateOrdersShippingPalletByPalletId(int $palletId, array $data): array
    {
        return $this->api("/rest/orders/shipping/pallets/{$palletId}", 'PUT', $data);
    }
                    
    /**
     * @description Return all the packages linked for the given pallet. The ID of the pallet must be specified
     * @tag Order
     * @param int $palletId The ID of the pallet.
     * @param array $query
     *      - *with* - array - optional
     *          - Possible value is 'items'.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of packages to list per page.
     *      - *sortBy* - string - optional
     *          - The column to be sorted by
     *      - *sortOrder* - string - optional
     *          - The sort direction
     * @return array
     */
    public function getOrdersShippingPalletsPackagesByPalletId(int $palletId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/pallets/{$palletId}/packages"], $query));
    }
                    
    /**
     * @description Gets an parcel service region. The ID of the parcel service region must be specified.
     * @tag Order
     * @param int $parcelServiceRegionId The ID of the parcel service region
     * @param array $query
     *      - *columns* - array - optional
     *          - The properties to be loaded
     * @return array
     *      - *id* - integer
     *          - The ID of the parcel service region
     *      - *shippingRegionId* - integer
     *          - The ID of the shipping region
     *      - *parcelServicePresetId* - integer
     *          - The ID of the parcel service preset
     *      - *shippingRegionName* - string
     *          - The name of the shipping region
     *      - *serviceType* - integer
     *          - Type of the parcel service
     */
    public function getOrdersShippingParcelServiceRegionByParcelServiceRegionId(int $parcelServiceRegionId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/parcel_service_regions/{$parcelServiceRegionId}"], $query));
    }
                    
    /**
     * @description Get a preview list for parcel services.
     * @tag Order
     * @param string $language Language for parcel preset name
     * @return array
     */
    public function getOrdersShippingParcelsPreviewLanguageByLanguage(string $language): array
    {
        return $this->api("/rest/orders/shipping/parcels/preview/{language?}");
    }
                    
    /**
     * @description Lists all shipping profiles.
     * @tag Order
     * @param array $query
     *      - *columns* - array - optional
     *          - The attributes to be loaded in the shipping profile
     *      - *parcelServiceName* - string - optional
     *          - Filter that restricts the search result to parcel service presets with a specified service name (e.g. 'DHL' for DHL)
     *      - *shippingServiceProvider* - string - optional
     *          - Filter that restricts the search result to a shipping service provider
     *      - *with* - string - optional
     *          - The name of an relation to the preset. The following parameter is available: parcelServiceRegion, parcelServiceRegionConstraint, parcelServicePresetNames and parcelServiceNames.
     *      - *updatedAtBefore* - string - optional
     *          - Filter that restricts the search result to presets that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss
     *      - *updatedAtAfter* - string - optional
     *          - Filter that restricts the search result to presets that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss
     * @return array
     */
    public function getOrdersShippingPresets(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/presets"], $query));
    }
                    
    /**
     * @description Get a preview list for parcel service presets.
     * @tag Order
     * @param string $language Language for parcel preset name
     * @return array
     */
    public function getOrdersShippingPresetsPreviewLanguageByLanguage(string $language): array
    {
        return $this->api("/rest/orders/shipping/presets/preview/{language?}");
    }
                    
    /**
     * @description Gets a shipping profile. The ID of the shipping profile must be specified.
     * @tag Order
     * @param int $presetId The ID of the shipping profile
     * @param array $query
     *      - *columns* - array - optional
     *          - The attributes to be loaded in the shipping profile
     * @return array
     *      - *id* - integer
     *          - The ID of the shipping profile (autoincrement value)
     *      - *parcelServiceId* - integer
     *          - The ID of the shipping service provider
     *      - *backendName* - string
     *          - The back end name of the shipping profile
     *      - *flag* - integer
     *          - The icon of the shipping profile
     *      - *priority* - integer
     *          - The priority of the shipping profile
     *      - *category* - integer
     *          - The category of the shipping profile
     *      - *useArticlePorto* - integer
     *          - Flag that indicates if the extra shipping charge saved in the item data record is used
     *      - *isInsured* - integer
     *          - Flag that indicates if the shipping profile is insured
     *      - *isExpress* - integer
     *          - Flag that indicates if the shipping profile is used for express delivery
     *      - *isPostident* - integer
     *          - Flag that indicates if the shipping profile includes an authority verification
     *      - *isDefaultEnabled* - integer
     *          - Flag that indicates if the shipping profile is automatically assigned to new items
     *      - *islandFee* - number
     *          - The extra charge for islands saved in the shipping profile
     *      - *isCod* - integer
     *          - Flag that indicates Cash on Delivery
     *      - *supportedMultishop* - array
     *          - The clients (stores) that are activated for the shipping profile
     *      - *supportedReferrer* - array
     *          - The order referrers that are activated for the shipping profile
     *      - *subreferrerSupport* - array
     *          - This field is currently without any function.
     *      - *excludedPaymentMethods* - array
     *          - The blocked payment methods that are not offered for the shipping profile
     *      - *excludedCustomerGroups* - array
     *          - The blocked customer groups for the shipping profile. Blocked customer groups cannot select the shipping profile during checkout.
     *      - *shippingGroup* - string
     *          - The group of the shipping profile
     *      - *dispatchIdentifier* - string
     *          - This field is currently without any function.
     *      - *auctionType* - integer
     *          - The eBay listing type for the shipping profile
     *      - *supportedLoyaltyPrograms* - array
     *          - The loyalty programs that are supported by the shipping profile
     *      - *updatedAt* - string
     *          - The date the shipping profile was last updated
     *      - *showDataPrivacyAgreementHint* - integer
     *      - *transmitPrivacyRule* - string
     *      - *alternativeEmail* - string
     *      - *alternativePhone* - string
     *      - *isParcelBox* - integer
     *          - Indicates whether the e.g. paketshop is supported
     *      - *isPostOffice* - integer
     *          - Indicates whether the e.g. postfiliale is supported
     */
    public function getOrdersShippingPresetByPresetId(int $presetId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/presets/{$presetId}"], $query));
    }
                    
    /**
     * @description Lists parcel service regions. The ID of the parcel service preset must be specified.
     * @tag Order
     * @param int $presetId  The ID of the preset
     * @param array $query
     *      - *columns* - array - optional
     *          - The properties to be loaded
     * @return array
     */
    public function getOrdersShippingPresetsParcelServiceRegionsByPresetId(int $presetId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/presets/{$presetId}/parcel_service_regions"], $query));
    }
                    
    /**
     * @description Lists all returns service providers.
     * @tag Order
     * @param array $query
     *      - *isPlugin* - int - optional
     *          - Possible values are 1 (true) and 0 (false).
     *      - *pluginId* - int - optional
     *          - The ID of the plugin
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ReturnsServiceProvider
     */
    public function getOrdersShippingReturnsReturnsServiceProviders(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/returns/returns_service_providers"], $query));
    }
                    
    /**
     * @description Lists all returns service provider plugins.
     * @tag Order
     * @return array
     */
    public function getOrdersShippingReturnsReturnsServiceProvidersPlugins(): array
    {
        return $this->api("/rest/orders/shipping/returns/returns_service_providers/plugins");
    }
                    
    /**
     * @description Gets a specific returns service provider. The ID of the returns service provider must be specified.
     * @tag Order
     * @param int $providerId The ID of the returns service provider
     * @return array
     *      - *id* - integer
     *          - The ID of the returns service provider
     *      - *name* - string
     *          - The name of the returns service provider
     *      - *pluginId* - integer
     *          - The optional ID of the plugin when the returns service provider is registered as a plugin
     *      - *createdAt* - string
     *          - The time the returns service provider was created
     *      - *updatedAt* - string
     *          - The time the returns service provider was updated
     */
    public function getOrdersShippingReturnsReturnsServiceProviderByProviderId(int $providerId): array
    {
        return $this->api("/rest/orders/shipping/returns/returns_service_providers/{$providerId}");
    }
                    
    /**
     * @description Lists all the orders with their shipping information.
     * @tag Order
     * @return array
     */
    public function getOrdersShippingShippingInformation(): array
    {
        return $this->api("/rest/orders/shipping/shipping_information");
    }
                
    /**
     * @description Creates the shipping information.
     * @tag Order
     * @return array
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *shippingServiceProvider* - string
     *          - The name of the shipping service provider
     *      - *transactionId* - string
     *          - The ID of the transaction
     *      - *shippingStatus* - string
     *          - The shipping status. Possible values are 'open', 'prepared' and 'registered'.
     *      - *shippingCosts* - number
     *          - The shipping costs
     *      - *additionalData* - string
     *          - The additional data. Depending on the shipping service provider selected, this data may contain different information, e.g. shipping service, email address and order ID.
     *      - *registrationAt* - integer
     *          - The date and time the shipment was registered
     *      - *shipmentAt* - integer
     *          - The date the items will be shipped
     */
    public function createOrdersShippingShippingInformation(): array
    {
        return $this->api("/rest/orders/shipping/shipping_information", 'POST');
    }
                    
    /**
     * @description Lists all shipping service providers.
     * @tag Order
     * @param array $query
     *      - *updatedAtBefore* - string - optional
     *          - Filter that restricts the search result to shipping providers that were updated before a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss
     *      - *updatedAtAfter* - string - optional
     *          - Filter that restricts the search result to shipping providers that were updated after a specific date. Possible formats: yyyy-mm-dd or yyyy-mm-dd hh:mm:ss
     *      - *with* - string - optional
     *          - The name of an relation to the shipping provider. The following parameter is available: ownShippingServiceProviders.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of ShippingServiceProvider
     */
    public function getOrdersShippingShippingServiceProviders(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/shipping_service_providers"], $query));
    }
                
    /**
     * @description Saves a shipping service provider. The name of the shipping service provider must be specified.
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the shipping service provider
     *      - *name* - string
     *          - The name of the shipping service provider
     *      - *pluginId* - integer
     *          - The optional ID of the plugin when the shipping service provider is registered as a plugin
     *      - *icon* - string
     *          - The optional path of the icon
     *      - *createdAt* - string
     *          - The time the shipping service provider was created
     *      - *updatedAt* - string
     *          - The time the shipping service provider was updated
     */
    public function createOrdersShippingShippingServiceProvider(): array
    {
        return $this->api("/rest/orders/shipping/shipping_service_providers", 'POST');
    }
                    
    /**
     * @description Lists all shipping service provider plugins.
     * @tag Order
     * @return array
     */
    public function getOrdersShippingShippingServiceProvidersPlugins(): array
    {
        return $this->api("/rest/orders/shipping/shipping_service_providers/plugins");
    }
                    
    /**
     * @description Gets a shipping service provider. The ID of the shipping service provider must be specified.
     * @tag Order
     * @param int $shippingServiceProviderId 
     * @param array $query
     *      - *shippingServiceProviderId* - int - required
     *          - The ID of the shipping service provider
     * @return array
     *      - *id* - integer
     *          - The ID of the shipping service provider
     *      - *name* - string
     *          - The name of the shipping service provider
     *      - *pluginId* - integer
     *          - The optional ID of the plugin when the shipping service provider is registered as a plugin
     *      - *icon* - string
     *          - The optional path of the icon
     *      - *createdAt* - string
     *          - The time the shipping service provider was created
     *      - *updatedAt* - string
     *          - The time the shipping service provider was updated
     */
    public function getOrdersShippingShippingServiceProviderByShipping_service_provider_id(int $shippingServiceProviderId, array $query): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/shipping_service_providers/{$shippingServiceProviderId}"], $query));
    }
                    
    /**
     * @description Lists the status histories of all orders. The result can be limited to an order specified by an ID, a status with a particular ID, a period of time or a user specified by the user ID.
     * @tag Order
     * @param array $query
     *      - *orderId* - int - optional
     *          - The ID of the order
     *      - *statusId* - number - optional
     *          - The ID of the status
     *      - *createdAtFrom* - string - optional
     *          - Set a start date to get status history entries beginning with this date
     *      - *createdAtTo* - string - optional
     *          - Set an end date to get status history entries up to this date
     *      - *userId* - string - optional
     *          - The ID of the user
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of StatusHistoryEntry
     */
    public function getOrdersStatusHistory(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/status-history"], $query));
    }
                    
    /**
     * @description Searches for a list of order statuses. The search results are specified by providing filter parameters in the form of order status IDs.
     * @tag Order
     * @param array $query
     *      - *statusIdFrom* - number - optional
     *          - Define an ID as a start value for the filter. Filter that restricts the search for order statuses to IDs from a defined value.
     *      - *statusIdTo* - number - optional
     *          - Define an ID as an end value for the filter.
     *      - *language* - string - optional
     *          - Filter that restricts the search for order statuses to a defined language.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderStatus
     */
    public function getOrdersStatuses(array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/statuses"], $query));
    }
                
    /**
     * @description Creates an order status. The ID of the order status must be specified.
     * @tag Order
     * @param array $data 
     * @return array
     *      - *statusId* - number
     *          - The ID of the status.
     *      - *isErasable* - boolean
     *          - Flag that indicates whether the status is erasable or not.
     *      - *createdAt* - string
     *          - The date, when the status was created.
     *      - *updatedAt* - string
     *          - The date, when the status was updated.
     *      - *isFrontendVisible* - boolean
     *          - Indicates visibility in frontend.
     *      - *isReorderVisible* - boolean
     *          - Indicates visibility in reorder.
     *      - *isRedistributionVisible* - boolean
     *          - Indicates visibility in redistribution.
     *      - *color* - string
     *          - The color of the status.
     */
    public function createOrdersStatus(array $data): array
    {
        return $this->api("/rest/orders/statuses", 'POST', $data);
    }
                    
    /**
     * @description Gets all order statuses.
     * @tag Order

     */
    public function getOrdersStatusesAll(): void
    {
        $this->api("/rest/orders/statuses/all");
    }
                    
    /**
     * @description Change properties of an order status. Properties are colour of the order status, visibility in the online store and availability for orders of the type reorder or redistribution.
     * @tag Order
     * @param array $query
     *      - *newStatusValues* - array - required
     *          - Set an array of new order status properties consisting of one key and one value for each property. The status colour must be set as a hexadecimal code. All other properties must be specified either by value 0 (inactive) or 1 (active).
     *      - *selectedStatusList* - array - required
     *          - Set a list with the IDs of the order statuses that should be changed.
     */
    public function createOrdersStatusesGroupFunction(array $query): void
    {
        $this->api(array_merge(["/rest/orders/statuses/group_functions"], $query), 'POST');
    }
                    
    /**
     * @description Deletes an order status. The ID of the order status must be specified.
     * @tag Order
     * @param number $statusId The ID of the status, which shall be deleted.
     */
    public function deleteOrdersStatusByStatusId(number $statusId): void
    {
        $this->api("/rest/orders/statuses/{$statusId}", 'DELETE');
    }
                
    /**
     * @description Gets an order status. The status has to be specified by providing a status ID.
     * @tag Order
     * @param number $statusId The ID of the order status.
     * @return array
     *      - *statusId* - number
     *          - The ID of the status.
     *      - *isErasable* - boolean
     *          - Flag that indicates whether the status is erasable or not.
     *      - *createdAt* - string
     *          - The date, when the status was created.
     *      - *updatedAt* - string
     *          - The date, when the status was updated.
     *      - *isFrontendVisible* - boolean
     *          - Indicates visibility in frontend.
     *      - *isReorderVisible* - boolean
     *          - Indicates visibility in reorder.
     *      - *isRedistributionVisible* - boolean
     *          - Indicates visibility in redistribution.
     *      - *color* - string
     *          - The color of the status.
     */
    public function getOrdersStatusByStatusId(number $statusId): array
    {
        return $this->api("/rest/orders/statuses/{$statusId}");
    }
                
    /**
     * @description Updates an order status. The ID of the order status must be specified.
     * @tag Order
     * @param number $statusId The ID of the order status that should be updated.
     * @param array $data 
     * @return array
     *      - *statusId* - number
     *          - The ID of the status.
     *      - *isErasable* - boolean
     *          - Flag that indicates whether the status is erasable or not.
     *      - *createdAt* - string
     *          - The date, when the status was created.
     *      - *updatedAt* - string
     *          - The date, when the status was updated.
     *      - *isFrontendVisible* - boolean
     *          - Indicates visibility in frontend.
     *      - *isReorderVisible* - boolean
     *          - Indicates visibility in reorder.
     *      - *isRedistributionVisible* - boolean
     *          - Indicates visibility in redistribution.
     *      - *color* - string
     *          - The color of the status.
     */
    public function updateOrdersStatusByStatusId(number $statusId, array $data): array
    {
        return $this->api("/rest/orders/statuses/{$statusId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order to be deleted.
     */
    public function deleteOrderByOrderId(int $orderId): void
    {
        $this->api("/rest/orders/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Gets an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order.
     * @param array $query
     *      - *with* - array - optional
     *          - Load additional relations for an order. The following relations are available:
     * <ul>
       <li>'addresses' = The address objects linked to the order.</li>
       <li>'relations' = The order relation reference instances that are associated with the order. These instances contain information such as the reference type. The available reference types are parent and reorder. The ID of the reference and the relation itself are also available.</li>
       <li>'comments' = The order comments.</li>
       <li>'location' = The accounting location linked to the order.</li>
       <li>'payments' = The payments linked to the order.</li>
       <li>'documents' = The documents linked to the order.</li>
       <li>'contactSender' = The contact belonging the contact-sender relation.</li>
       <li>'contactReceiver' = The contact belonging to the contact-receiver relation.</li>
       <li>'warehouseSender' = The warehouse belonging to the warehouse-sender relation.</li>
       <li>'warehouseReceiver' = The warehouse belonging to the warehouse-receiver relation.</li>
       <li>'orderItems.variation' = The variation data belonging to the order item.</li>
       <li>'orderItems.variation.propertiesV2' = The properties belonging to the variation.</li>
       <li>'orderItems.giftCardCodes' = The gift card codes belonging to the order item.</li>
       <li>'orderItems.transactions' = The transactions belonging to the order item.</li>
       <li>'orderItems.serialNumbers' = The serial numbers belonging to the order item.</li>
       <li>'orderItems.variationBarcodes' = The barcodes belonging to the order item.</li>
       <li>'orderItems.comments' = The comments belonging to the order item.</li>
       <li>'shippingPallets' = The shipping pallets that are associated with the order.</li>
       <li>'shippingPackages' = The shipping packages that are associated with the order.</li>
       <li>'paymentTerms' = The payment terms that are associated with the order.</li>
       <li><b>deprecated</b> 'orderItems.warehouseLocations' = The warehouse locations linked to the order item.</li>
     </ul>
     Example: <code>?with[]=addresses&with[]=orderItems.variation</code>
     *      - *addOrderItems* - boolean - optional
     *          - Add the order items to the result. Default = true.
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function getOrderByOrderId(int $orderId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/{$orderId}"], $query));
    }
                
    /**
     * @description Updates an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateOrderByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}", 'PUT', $data);
    }
                    
    /**
     * @description Creates an advance order from a parent order. The parent order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersAdvanceOrderByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/advance_orders", 'POST', $data);
    }
                    
    /**
     * @description Converts a sales order into an advance order. The order ID of the sales order must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateOrdersAdvanceOrdersConvertByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/advance_orders/convert", 'PUT');
    }
                    
    /**
     * @description Books an order in, e.g. an order of the type reorder. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order.
     * @param array $query
     *      - *deliveryNoteNumber* - string - optional
     *          - If desired, set the delivery note number provided by the supplier.
     */
    public function createOrdersBookingByOrderId(int $orderId, array $query = []): void
    {
        $this->api(array_merge(["/rest/orders/{$orderId}/booking"], $query), 'POST');
    }
                    
    /**
     * @description Cancels an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order to be canceled.
     * @param array $data 
     */
    public function updateOrdersCancelByOrderId(int $orderId, array $data): void
    {
        $this->api("/rest/orders/{$orderId}/cancel", 'PUT', $data);
    }
                    
    /**
     * @description Gets the contact wish for an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     *      - *text* - string
     *          - The text of the contact wish
     */
    public function getOrdersContactWishByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/contactWish");
    }
                    
    /**
     * @description Redeems a coupon code and applies it to an order. The ID of the order must be specified. If the coupon was successfully redeemed, the coupon data will be returned. If the coupon can not be redeemed, a validation exception will be thrown.
     * @tag Order
     * @param int $orderId The ID of the order to redeem the coupon
     * @param string $coupon The coupon code to be redeemed
     * @return array
     *      - *campaignId* - integer
     *          - The ID of the campaign
     *      - *validationType* - string
     *          - The type of the campaign. Currently the only type available is plentymarkets.
     *      - *contactId* - integer
     *          - The ID of the contact that wants to redeem the coupon
     *      - *couponCode* - string
     *          - The coupon code
     *      - *currency* - string
     *          - The currency of the purchase
     *      - *exchangeRate* - number
     *          - The exchange rate of the purchase (optional, is loaded from settings if not given)
     *      - *referrer* - number
     *          - The order referrer
     *      - *salesDiscount* - number
     *          - The total discount from a coupon applied to an order. The discount is given as gross amount.
     *      - *salesDiscountNet* - number
     *          - The net discount from a coupon applied to an order. The net discount is the total discount minus the vat amount.
     *      - *itemDiscount* - number
     *          - The discount amount applied to items.
     *      - *itemDiscountNet* - number
     *          - The net discount applied to items.
     *      - *shippingDiscount* - number
     *          - The discount applied to shipping costs.
     *      - *shippingDiscountNet* - number
     *          - The net discount applied to shipping costs.
     *      - *usedVatFields* - array
     *          - The vat fields used for the validation
     *      - *restCouponAmount* - number
     *          - The remaining coupon amount
     *      - *checkedItems* - array
     *          - The list of variations that passed the validation
     *      - *validateParams* - array
     *          - Validation parameters
     *      - *couponCampaignType* - string
     *          - The campaign type
     */
    public function createOrdersCouponByOrderIdCoupon(int $orderId, string $coupon): array
    {
        return $this->api("/rest/orders/{$orderId}/coupons/{$coupon}", 'POST');
    }
                    
    /**
     * @description Validates a coupon for an order.
     * @tag Order
     * @param int $orderId 
     * @param int $coupon 
     * @return array
     */
    public function createOrdersCouponsValidateByOrderIdCoupon(int $orderId, int $coupon): array
    {
        return $this->api("/rest/orders/{$orderId}/coupons/{$coupon}/validate", 'POST');
    }
                    
    /**
     * @description Creates a credit note from a parent order. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersCreditNoteByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/credit_notes", 'POST', $data);
    }
                    
    /**
     * @description Validate order items for create a credit note from a parent order. The parent order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createOrdersCreditNotesValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/credit_notes/validate", 'POST');
    }
                    
    /**
     * @description Updates the order currency. The currency and the exchange rate must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateOrdersCurrencyByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/currency", 'PUT');
    }
                    
    /**
     * @description Lists all dates of an order. The ID of the order must be specified.
<b>DEPRECATED: Use the following route: GET /rest/orders/{orderId}</b>
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     */
    public function getOrdersDatesByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/dates");
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: GET /rest/orders/{orderId}</b>
Gets a date. The ID of the order and the ID of the date type must be specified. The following IDs are available:

<br><ul>
<li>1 = Deleted on</li>
<li>2 = Created on</li>
<li>3 = Paid date</li>
<li>4 = Last update</li>
<li>5 = Completed on</li>
<li>6 = Return date</li>
<li>7 = Payment due date</li>
<li>8 = Estimated shipping date</li>
<li>9 = Start date</li>
<li>10 = End date</li>
<li>11 = Possible delivery date</li>
<li>12 = Market transfer date</li>
<li>13 = Subscription cancelled on</li>
<li>14 = Subscription last run</li>
<li>15 = Subscription next run</li>
</ul>
     * @tag Order
     * @param int $typeId The ID of the order date type that should be found
     * @param int $orderId The ID of the order
     * @return array
     *      - *id* - integer
     *          - The ID of the order date
     *      - *orderId* - integer
     *          - The ID of the order that the date belongs to
     *      - *typeId* - integer
     *          - The ID of the date type. The following types are available:

* Deleted on = 1
* Created on = 2
* Paid date = 3
* Last update = 4
* Completed date = 5
* Return date = 6
* Payment due date = 7
* Estimated shipping date = 8
* Start date = 9
* End date = 10
* Estimated delivery date = 11
* Market transfer date = 12
* Subscription cancelled on = 13
* Subscription last run = 14
* Subscription next run = 15
* Purchase date = 16
* Finish date = 17
     *      - *createdAt* - string
     *          - The date when the date was created
     *      - *updatedAt* - string
     *          - The date when the date was last updated
     */
    public function getOrdersDateByTypeIdOrderId(int $typeId, int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/dates/{$typeId}");
    }
                    
    /**
     * @description Creates a delivery order from a parent order. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersDeliveryOrderByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/delivery_orders", 'POST', $data);
    }
                    
    /**
     * @description Create delivery orders automatically for all order items. The order ID must be specified.
     * @tag Order
     * @param int $orderId The ID of the order.
     */
    public function createOrdersDeliveryOrdersAutomaticByOrderId(int $orderId): void
    {
        $this->api("/rest/orders/{$orderId}/delivery_orders/automatic", 'POST');
    }
                    
    /**
     * @description Validate order items for create a delivery order from a parent order. The parent order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createOrdersDeliveryOrdersValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/delivery_orders/validate", 'POST');
    }
                    
    /**
     * @description Gets information about the order family. All related orders can be shown as tree when the parameter 'with' is given with the value 'tree'.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *originOrderId* - integer
     *      - *mainSalesOrderId* - integer
     */
    public function getOrdersFamilyByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/family");
    }
                
    /**
     * @description Searches order items. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of order items to be displayed per page. The default number of order items per page is 50. The maximum number is 250.
     *      - *sortBy* - string - optional
     *          - Sort search result according to itemVariationId, orderItemName, createdAt, updatedAt or id. The default value is orderItemId.
     *      - *sortOrder* - string - optional
     *          - Sort direction desc or asc. The default value is asc.
     *      - *with* - array - optional
     *          - Load additional relations for an order item. Currently possible are:
    <ul>
    <li>'variation' = The variation that is associated with the order item.</li>
    <li>'giftCardCodes' = The gift card codes that are associated with the order item.</li>
    <li>'transactions' = The transactions that are associated with the order item.</li>
    <li>'serialNumbers' = The serial numbers that are associated with the order item.</li>
    <li>'variationBarcodes' = The barcodes that are associated with variation of the order item.</li>
    </ul>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderItem
     */
    public function eachOrdersItemsByOrderId(int $orderId, array $query = []): Iterator
    {
        return $this->eachInternal('getOrdersItemsByOrderId', func_get_args());
    }
        
    /**
     * @description Searches order items. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of order items to be displayed per page. The default number of order items per page is 50. The maximum number is 250.
     *      - *sortBy* - string - optional
     *          - Sort search result according to itemVariationId, orderItemName, createdAt, updatedAt or id. The default value is orderItemId.
     *      - *sortOrder* - string - optional
     *          - Sort direction desc or asc. The default value is asc.
     *      - *with* - array - optional
     *          - Load additional relations for an order item. Currently possible are:
    <ul>
    <li>'variation' = The variation that is associated with the order item.</li>
    <li>'giftCardCodes' = The gift card codes that are associated with the order item.</li>
    <li>'transactions' = The transactions that are associated with the order item.</li>
    <li>'serialNumbers' = The serial numbers that are associated with the order item.</li>
    <li>'variationBarcodes' = The barcodes that are associated with variation of the order item.</li>
    </ul>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderItem
     */
    public function batchOrdersItemsByOrderId(int $orderId, array $query = []): Iterator
    {
        return $this->batchInternal('getOrdersItemsByOrderId', func_get_args());
    }
    
    /**
     * @description Searches order items. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $query
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of order items to be displayed per page. The default number of order items per page is 50. The maximum number is 250.
     *      - *sortBy* - string - optional
     *          - Sort search result according to itemVariationId, orderItemName, createdAt, updatedAt or id. The default value is orderItemId.
     *      - *sortOrder* - string - optional
     *          - Sort direction desc or asc. The default value is asc.
     *      - *with* - array - optional
     *          - Load additional relations for an order item. Currently possible are:
    <ul>
    <li>'variation' = The variation that is associated with the order item.</li>
    <li>'giftCardCodes' = The gift card codes that are associated with the order item.</li>
    <li>'transactions' = The transactions that are associated with the order item.</li>
    <li>'serialNumbers' = The serial numbers that are associated with the order item.</li>
    <li>'variationBarcodes' = The barcodes that are associated with variation of the order item.</li>
    </ul>
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderItem
     */
    public function getOrdersItemsByOrderId(int $orderId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/{$orderId}/items"], $query));
    }
                    
    /**
     * @description Creates or updates reorders for given order items.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createOrdersItemsReordersGenerateByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/items/reorders/generate", 'POST');
    }
                    
    /**
     * @description Lists all serial numbers of an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     */
    public function getOrdersItemsSerialNumbersByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/items/serialNumbers");
    }
                    
    /**
     * @description Attach warehouse locations. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function createOrdersItemsWarehouseLocationsAttachByOrderId(int $orderId): void
    {
        $this->api("/rest/orders/{$orderId}/items/warehouse_locations/attach", 'POST');
    }
                    
    /**
     * @description Detach warehouse locations. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function createOrdersItemsWarehouseLocationsDetachByOrderId(int $orderId): void
    {
        $this->api("/rest/orders/{$orderId}/items/warehouse_locations/detach", 'POST');
    }
                    
    /**
     * @description Deletes an order item. The ID of the order and the ID of the order item must be specified.
     * @tag Order
     * @param int $orderId The ID of the order that the item belongs to.
     * @param int $orderItemId The ID of the order item to be deleted.
     */
    public function deleteOrdersItemByOrderIdOrderItemId(int $orderId, int $orderItemId): void
    {
        $this->api("/rest/orders/{$orderId}/items/{$orderItemId}", 'DELETE');
    }
                    
    /**
     * @description Lists all serial numbers of an order item. The ID of the order and the ID of the order item must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param int $orderItemId The ID of the order item
     * @return array
     */
    public function getOrdersItemsSerialNumbersByOrderIdOrderItemId(int $orderId, int $orderItemId): array
    {
        return $this->api("/rest/orders/{$orderId}/items/{$orderItemId}/serialNumbers");
    }
                
    /**
     * @description Creates item serial number and bind it to order item. The ID of the order and the ID of the order item must be specified.
     * @tag Order
     * @param int $orderId 
     * @param int $orderItemId 
     * @return array
     *      - *serialNumberId* - integer
     *          - The ID of the serial number
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *orderItemId* - integer
     *          - The ID of the order item
     *      - *serialNumber* - string
     *          - The serial number
     */
    public function createOrdersItemsSerialNumberByOrderIdOrderItemId(int $orderId, int $orderItemId): array
    {
        return $this->api("/rest/orders/{$orderId}/items/{$orderItemId}/serialNumbers", 'POST');
    }
                    
    /**
     * @description Gets the My Account url of the order
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function getOrdersMyAccountUrlByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/my_account_url");
    }
                    
    /**
     * @description Creates an offer from a parent order. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersOfferByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/offers", 'POST', $data);
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: POST /rest/{orderType}/{orderId}/cancel_booking</b>
Cancellation the booking of an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     */
    public function deleteOrdersOutgoingStockByOrderId(int $orderId): void
    {
        $this->api("/rest/orders/{$orderId}/outgoing_stocks", 'DELETE');
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: POST /rest/{orderType}/{orderId}/book</b>
Books out the order items of an order. The ID of the order must be specified and a booking date can be specified. The current date and time will be used if no date is specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param array $query
     *      - *date* - string - optional
     *          - The date that is saved as booking date for the outgoing stock.
     */
    public function createOrdersOutgoingStockByOrderId(int $orderId, array $query = []): void
    {
        $this->api(array_merge(["/rest/orders/{$orderId}/outgoing_stocks"], $query), 'POST');
    }
                    
    /**
     * @description Lists the package numbers of an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     */
    public function getOrdersPackagenumbersByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/packagenumbers");
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Creates a property and links it to an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order property
     *      - *orderId* - integer
     *          - The ID of the order that the property belongs to
     *      - *typeId* - integer
     *          - The ID of the property type. The following types are available:

* WAREHOUSE		=	1
* SHIPPING_PROFILE	=	2
* PAYMENT_METHOD			=	3
* PAYMENT_STATUS			=	4
* EXTERNAL_SHIPPING_PROFILE			=	5
* DOCUMENT_LANGUAGE			=	6
* EXTERNAL_ORDER_ID			=	7
* CUSTOMER_SIGN			=	8
* DUNNING_LEVEL			=	9
* SELLER_ACCOUNT			=	10
* WEIGHT			=	11
* WIDTH			=	12
* LENGTH          =	13
* HEIGHT		=	14
* FLAG			=	15
* EXTERNAL_TOKEN_ID			=	16
* EXTERNAL_ITEM_ID			=	17
* COUPON_CODE			=	18
* COUPON_TYPE         =   19
* SALES_TAX_ID_NUMBER =   34
* MAIN_DOCUMENT_NUMBER = 33
* PAYMENT_TRANSACTION_ID = 45
* EXTERNAL_TAX_SERVICE = 47
* MERCHANT_ID = 60
* REPORT_ID = 61
* PREFERRED_STORAGE_LOCATION_ID = 63
* AMAZON_SHIPPING_LABEL = 64
* MARKET_TAX_ID = 88
* MARKET_EORI = 89
* IS_REVERSE_CHARGED = 90
* DISALLOW_INTERNAL_TAX_RELEVANT_DOCUMENTS = 91
* EBAY_PLUS = 994
* FULFILLMENT_SERVICE = 995
     *      - *value* - string
     *          - The value of the property. The value depends on the type.
     */
    public function createOrdersPropertyByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/properties", 'POST', $data);
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: GET /rest/orders/{orderId}</b>
Lists properties of an order. The ID of the order must be specified. Optionally, the ID of the property type can be specified. The following property types are available by default:

<br><ul>
<li>1 = WAREHOUSE</li>
<li>2 = SHIPPING_PROFILE</li>
<li>3 = PAYMENT_METHOD</li>
<li>4 = PAYMENT_STATUS</li>
<li>5 = EXTERNAL_SHIPPING_PROFILE</li>
<li>6 = DOCUMENT_LANGUAGE</li>
<li>7 = EXTERNAL_ORDER_ID</li>
<li>8 = CUSTOMER_SIGN</li>
<li>9 = DUNNING_LEVEL</li>
<li>10 = SELLER_ACCOUNT</li>
<li>11 = WEIGHT</li>
<li>12 = WIDTH</li>
<li>13 = LENGTH</li>
<li>14 = HEIGHT</li>
<li>15 = FLAG</li>
<li>16 = EXTERNAL_TOKEN_ID</li>
<li>17 = EXTERNAL_ITEM_ID</li>
<li>18 = COUPON_CODE</li>
<li>19 = COUPON_TYPE</li>
<li>33 = MAIN_DOCUMENT_NUMBER</li>
<li>34 = SALES_TAX_ID_NUMBER</li>
<li>45 = PAYMENT_TRANSACTION_ID</li>
<li>47 = EXTERNAL_TAX_SERVICE</li>
<li>60 = MERCHANT_ID</li>
<li>61 = REPORT_ID</li>
<li>63 = PREFERRED_STORAGE_LOCATION_ID</li>
<li>64 = AMAZON_SHIPPING_LABEL</li>
<li>994 = EBAY_PLUS</li>
<li>995 = FULFILLMENT_SERVICE</li>
</ul>
     * @tag Order
     * @param int $orderId The ID of the order
     * @param int $typeId The property type ID
     * @return array
     */
    public function getOrdersPropertiesTypeIdByOrderIdTypeId(int $orderId, int $typeId): array
    {
        return $this->api("/rest/orders/{$orderId}/properties/{typeId?}");
    }
                    
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Deletes a property of an order. The ID of the order and the ID of the order property type must be specified. The following property types are available by default:

<br><ul>
<li>1 = WAREHOUSE</li>
<li>2 = SHIPPING_PROFILE</li>
<li>3 = PAYMENT_METHOD</li>
<li>4 = PAYMENT_STATUS</li>
<li>5 = EXTERNAL_SHIPPING_PROFILE</li>
<li>6 = DOCUMENT_LANGUAGE</li>
<li>7 = EXTERNAL_ORDER_ID</li>
<li>8 = CUSTOMER_SIGN</li>
<li>9 = DUNNING_LEVEL</li>
<li>10 = SELLER_ACCOUNT</li>
<li>11 = WEIGHT</li>
<li>12 = WIDTH</li>
<li>13 = LENGTH</li>
<li>14 = HEIGHT</li>
<li>15 = FLAG</li>
<li>16 = EXTERNAL_TOKEN_ID</li>
<li>17 = EXTERNAL_ITEM_ID</li>
<li>18 = COUPON_CODE</li>
<li>19 = COUPON_TYPE</li>
<li>33 = MAIN_DOCUMENT_NUMBER</li>
<li>34 = SALES_TAX_ID_NUMBER</li>
<li>45 = PAYMENT_TRANSACTION_ID</li>
<li>47 = EXTERNAL_TAX_SERVICE</li>
<li>60 = MERCHANT_ID</li>
<li>61 = REPORT_ID</li>
<li>63 = PREFERRED_STORAGE_LOCATION_ID</li>
<li>64 = AMAZON_SHIPPING_LABEL</li>
<li>994 = EBAY_PLUS</li>
<li>995 = FULFILLMENT_SERVICE</li>
</ul>
     * @tag Order
     * @param int $orderId 
     * @param int $typeId 
     * @param array $data 
     */
    public function deleteOrdersPropertyByOrderIdTypeId(int $orderId, int $typeId, array $data): void
    {
        $this->api("/rest/orders/{$orderId}/properties/{$typeId}", 'DELETE', $data);
    }
                
    /**
     * @description <b>DEPRECATED: Use the following route: PUT /rest/orders/{orderId}</b>
Updates the value of a property already linked to an order. The ID of the order and the ID of the order property type must be specified. The following property types are available by default:

<br><ul>
<li>1 = WAREHOUSE</li>
<li>2 = SHIPPING_PROFILE</li>
<li>3 = PAYMENT_METHOD</li>
<li>4 = PAYMENT_STATUS</li>
<li>5 = EXTERNAL_SHIPPING_PROFILE</li>
<li>6 = DOCUMENT_LANGUAGE</li>
<li>7 = EXTERNAL_ORDER_ID</li>
<li>8 = CUSTOMER_SIGN</li>
<li>9 = DUNNING_LEVEL</li>
<li>10 = SELLER_ACCOUNT</li>
<li>11 = WEIGHT</li>
<li>12 = WIDTH</li>
<li>13 = LENGTH</li>
<li>14 = HEIGHT</li>
<li>15 = FLAG</li>
<li>16 = EXTERNAL_TOKEN_ID</li>
<li>17 = EXTERNAL_ITEM_ID</li>
<li>18 = COUPON_CODE</li>
<li>19 = COUPON_TYPE</li>
<li>33 = MAIN_DOCUMENT_NUMBER</li>
<li>34 = SALES_TAX_ID_NUMBER</li>
<li>45 = PAYMENT_TRANSACTION_ID</li>
<li>47 = EXTERNAL_TAX_SERVICE</li>
<li>60 = MERCHANT_ID</li>
<li>61 = REPORT_ID</li>
<li>63 = PREFERRED_STORAGE_LOCATION_ID</li>
<li>64 = AMAZON_SHIPPING_LABEL</li>
<li>994 = EBAY_PLUS</li>
<li>995 = FULFILLMENT_SERVICE</li>
</ul>
     * @tag Order
     * @param int $orderId 
     * @param int $typeId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order property
     *      - *orderId* - integer
     *          - The ID of the order that the property belongs to
     *      - *typeId* - integer
     *          - The ID of the property type. The following types are available:

* WAREHOUSE		=	1
* SHIPPING_PROFILE	=	2
* PAYMENT_METHOD			=	3
* PAYMENT_STATUS			=	4
* EXTERNAL_SHIPPING_PROFILE			=	5
* DOCUMENT_LANGUAGE			=	6
* EXTERNAL_ORDER_ID			=	7
* CUSTOMER_SIGN			=	8
* DUNNING_LEVEL			=	9
* SELLER_ACCOUNT			=	10
* WEIGHT			=	11
* WIDTH			=	12
* LENGTH          =	13
* HEIGHT		=	14
* FLAG			=	15
* EXTERNAL_TOKEN_ID			=	16
* EXTERNAL_ITEM_ID			=	17
* COUPON_CODE			=	18
* COUPON_TYPE         =   19
* SALES_TAX_ID_NUMBER =   34
* MAIN_DOCUMENT_NUMBER = 33
* PAYMENT_TRANSACTION_ID = 45
* EXTERNAL_TAX_SERVICE = 47
* MERCHANT_ID = 60
* REPORT_ID = 61
* PREFERRED_STORAGE_LOCATION_ID = 63
* AMAZON_SHIPPING_LABEL = 64
* MARKET_TAX_ID = 88
* MARKET_EORI = 89
* IS_REVERSE_CHARGED = 90
* DISALLOW_INTERNAL_TAX_RELEVANT_DOCUMENTS = 91
* EBAY_PLUS = 994
* FULFILLMENT_SERVICE = 995
     *      - *value* - string
     *          - The value of the property. The value depends on the type.
     */
    public function updateOrdersPropertyByOrderIdTypeId(int $orderId, int $typeId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/properties/{$typeId}", 'PUT', $data);
    }
                    
    /**
     * @description Creates a redistribution from a parent order. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersRedistributionByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/redistributions", 'POST');
    }
                    
    /**
     * @description Creates a reorder from a parent order. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersReorderByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/reorders", 'POST');
    }
                    
    /**
     * @description Creates reorders for a given order.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createOrdersReordersGenerateByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/reorders/generate", 'POST');
    }
                    
    /**
     * @description Validate order items for create a reorder from a sales order, delivery order, repair and warranty. The parent order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createOrdersReordersGenerateValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/reorders/generate/validate", 'POST');
    }
                    
    /**
     * @description Creates a repair order from a parent order. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersRepairByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/repairs", 'POST', $data);
    }
                    
    /**
     * @description Validate order items for create a repair from a parent order. The parent order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createOrdersRepairsValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/repairs/validate", 'POST');
    }
                    
    /**
     * @description Creates a return from a parent order. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersReturnByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/returns", 'POST', $data);
    }
                    
    /**
     * @description Validate order items for create a return from a parent order. The parent order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createOrdersReturnsValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/returns/validate", 'POST');
    }
                    
    /**
     * @description Creates a sales order from a parent order. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersSalesOrderByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/sales_orders", 'POST', $data);
    }
                    
    /**
     * @description Converts an advance order into a sales order. The order ID of the advance order must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateOrdersSalesOrdersConvertByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/sales_orders/convert", 'PUT');
    }
                    
    /**
     * @description Cancel a shipment for an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     */
    public function deleteOrdersShippingCancelShipmentByOrderId(int $orderId): void
    {
        $this->api("/rest/orders/{$orderId}/shipping/cancel_shipment", 'DELETE');
    }
                    
    /**
     * @description Deletes all order shipping packages for an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     */
    public function deleteOrdersShippingPackageByOrderId(int $orderId): void
    {
        $this->api("/rest/orders/{$orderId}/shipping/packages", 'DELETE');
    }
                
    /**
     * @description Lists order shipping packages. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param array $query
     *      - *columns* - array - optional
     *          - The properties to be loaded
     *      - *with* - string - optional
     *          - Possible values are 'labelBase64', 'items'
     * @return array
     */
    public function getOrdersShippingPackagesByOrderId(int $orderId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/{$orderId}/shipping/packages"], $query));
    }
                
    /**
     * @description Creates an order shipping package. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping package
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *packageId* - integer
     *          - The ID of the package
     *      - *weight* - integer
     *          - The weight of the package in grams
     *      - *packageNumber* - string
     *          - The package number
     *      - *labelPath* - string
     *          - The path to the label
     *      - *labelBase64* - string
     *          - The base64 encoded label
     *      - *exportLabelBase64* - string
     *          - The base64 encoded export label
     *      - *returnPackageNumber* - string
     *          - The return package number
     *      - *packageType* - integer
     *          - The type of the package. The following types are valid:
<ul>
 <li>0: unpacked</li>
 <li>1: Bale</li>
 <li>2: Dispenser</li>
 <li>3: Coil</li>
 <li>4: Roll pallet</li>
 <li>5: Colli</li>
 <li>6: Container</li>
 <li>7: Bucket</li>
 <li>8: Cask</li>
 <li>9: Bottles</li>
 <li>10: European flat pallet</li>
 <li>11: Structural frame</li>
 <li>12: Gas cylinder</li>
 <li>13: Pallet cage</li>
 <li>14: Hobbock</li>
 <li>15: Half pallet</li>
 <li>16: Pallet of food items</li>
 <li>17: Wooden coaster</li>
 <li>18: IBC container</li>
 <li>19: Pitcher</li>
 <li>20: Wicker bottle</li>
 <li>21: Case</li>
 <li>22: Canister</li>
 <li>23: Customer pallet</li>
 <li>24: Cardboard box</li>
 <li>25: Composite packaging</li>
 <li>26: Package</li>
 <li>27: Ring</li>
 <li>28: Role</li>
 <li>29: Sack</li>
 <li>30: units</li>
 <li>31: Tank</li>
 <li>32: Drum</li>
 <li>34: Crate</li>
 <li>35: Quarter pallet</li>
 <li>36: Other pallets</li>
 <li>37: Bin</li>
 <li>38: One-way pallet</li>
 <li>39: Foil bag</li>
</ul>
     *      - *volume* - number
     *          - The volume of the package
     *      - *palletId* - integer
     *          - The id of the pallet of which the package belong to
     *      - *isClosed* - boolean
     *          - Flag to say if the package is editable or not
     *      - *createdAt* - string
     *      - *updatedAt* - string
     *      - *packageSscc* - string
     *          - Amazon Vendor PackageSscc
     */
    public function createOrdersShippingPackageByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/packages", 'POST', $data);
    }
                    
    /**
     * @description Lists items contained in packages of a specific order. The ID of the order is mandatory.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping package item. Primary key auto-increment
     *      - *packageId* - integer
     *          - The ID of the package (id column from plenty_package_type2order)
     *      - *itemId* - integer
     *          - The ID of the item (plenty_item_variation_base_item_id column from plenty_item_variation_base)
     *      - *variationId* - integer
     *          - The ID of the variation (plenty_item_variation_base_id column from plenty_item_variation_base)
     *      - *itemQuantity* - number
     *          - The quantity of the item in the package
     */
    public function getOrdersShippingPackagesItemsByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/packages/items");
    }
                    
    /**
     * @description Lists packed items of a shipping package by a specific order ID. The ID of the order is mandatory.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     */
    public function getOrdersShippingPackagesPackedItemsByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/packages/packed_items");
    }
                    
    /**
     * @description Lists unpacked items of a shipping package by a specific order ID. The ID of the order is mandatory.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     */
    public function getOrdersShippingPackagesUnpackedItemsByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/packages/unpacked_items");
    }
                    
    /**
     * @description Lists unpacked items from a specific order ID. The ID of the order is mandatory.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping package item. Primary key auto-increment
     *      - *packageId* - integer
     *          - The ID of the package (id column from plenty_package_type2order)
     *      - *itemId* - integer
     *          - The ID of the item (plenty_item_variation_base_item_id column from plenty_item_variation_base)
     *      - *variationId* - integer
     *          - The ID of the variation (plenty_item_variation_base_id column from plenty_item_variation_base)
     *      - *itemQuantity* - number
     *          - The quantity of the item in the package
     */
    public function getOrdersShippingPackagesUnpackedItemsPaginatedByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/packages/unpacked_items_paginated");
    }
                    
    /**
     * @description Deletes an order shipping package. The ID of the order and the ID of the order shipping package must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param int $orderShippingPackageId The ID of the order shipping package
     */
    public function deleteOrdersShippingPackageByOrderIdOrderShippingPackageId(int $orderId, int $orderShippingPackageId): void
    {
        $this->api("/rest/orders/{$orderId}/shipping/packages/{$orderShippingPackageId}", 'DELETE');
    }
                
    /**
     * @description Gets an order shipping package. The ID of the order and the ID of the order shipping package must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param int $orderShippingPackageId The ID of the order shipping package
     * @param array $query
     *      - *columns* - array - optional
     *          - The properties to be loaded
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping package
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *packageId* - integer
     *          - The ID of the package
     *      - *weight* - integer
     *          - The weight of the package in grams
     *      - *packageNumber* - string
     *          - The package number
     *      - *labelPath* - string
     *          - The path to the label
     *      - *labelBase64* - string
     *          - The base64 encoded label
     *      - *exportLabelBase64* - string
     *          - The base64 encoded export label
     *      - *returnPackageNumber* - string
     *          - The return package number
     *      - *packageType* - integer
     *          - The type of the package. The following types are valid:
<ul>
 <li>0: unpacked</li>
 <li>1: Bale</li>
 <li>2: Dispenser</li>
 <li>3: Coil</li>
 <li>4: Roll pallet</li>
 <li>5: Colli</li>
 <li>6: Container</li>
 <li>7: Bucket</li>
 <li>8: Cask</li>
 <li>9: Bottles</li>
 <li>10: European flat pallet</li>
 <li>11: Structural frame</li>
 <li>12: Gas cylinder</li>
 <li>13: Pallet cage</li>
 <li>14: Hobbock</li>
 <li>15: Half pallet</li>
 <li>16: Pallet of food items</li>
 <li>17: Wooden coaster</li>
 <li>18: IBC container</li>
 <li>19: Pitcher</li>
 <li>20: Wicker bottle</li>
 <li>21: Case</li>
 <li>22: Canister</li>
 <li>23: Customer pallet</li>
 <li>24: Cardboard box</li>
 <li>25: Composite packaging</li>
 <li>26: Package</li>
 <li>27: Ring</li>
 <li>28: Role</li>
 <li>29: Sack</li>
 <li>30: units</li>
 <li>31: Tank</li>
 <li>32: Drum</li>
 <li>34: Crate</li>
 <li>35: Quarter pallet</li>
 <li>36: Other pallets</li>
 <li>37: Bin</li>
 <li>38: One-way pallet</li>
 <li>39: Foil bag</li>
</ul>
     *      - *volume* - number
     *          - The volume of the package
     *      - *palletId* - integer
     *          - The id of the pallet of which the package belong to
     *      - *isClosed* - boolean
     *          - Flag to say if the package is editable or not
     *      - *createdAt* - string
     *      - *updatedAt* - string
     *      - *packageSscc* - string
     *          - Amazon Vendor PackageSscc
     */
    public function getOrdersShippingPackageByOrderIdOrderShippingPackageId(int $orderId, int $orderShippingPackageId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/{$orderId}/shipping/packages/{$orderShippingPackageId}"], $query));
    }
                
    /**
     * @description Updates an order shipping package. The ID of the order and the ID of the order shipping package must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param int $orderShippingPackageId The ID of the order shipping package
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping package
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *packageId* - integer
     *          - The ID of the package
     *      - *weight* - integer
     *          - The weight of the package in grams
     *      - *packageNumber* - string
     *          - The package number
     *      - *labelPath* - string
     *          - The path to the label
     *      - *labelBase64* - string
     *          - The base64 encoded label
     *      - *exportLabelBase64* - string
     *          - The base64 encoded export label
     *      - *returnPackageNumber* - string
     *          - The return package number
     *      - *packageType* - integer
     *          - The type of the package. The following types are valid:
<ul>
 <li>0: unpacked</li>
 <li>1: Bale</li>
 <li>2: Dispenser</li>
 <li>3: Coil</li>
 <li>4: Roll pallet</li>
 <li>5: Colli</li>
 <li>6: Container</li>
 <li>7: Bucket</li>
 <li>8: Cask</li>
 <li>9: Bottles</li>
 <li>10: European flat pallet</li>
 <li>11: Structural frame</li>
 <li>12: Gas cylinder</li>
 <li>13: Pallet cage</li>
 <li>14: Hobbock</li>
 <li>15: Half pallet</li>
 <li>16: Pallet of food items</li>
 <li>17: Wooden coaster</li>
 <li>18: IBC container</li>
 <li>19: Pitcher</li>
 <li>20: Wicker bottle</li>
 <li>21: Case</li>
 <li>22: Canister</li>
 <li>23: Customer pallet</li>
 <li>24: Cardboard box</li>
 <li>25: Composite packaging</li>
 <li>26: Package</li>
 <li>27: Ring</li>
 <li>28: Role</li>
 <li>29: Sack</li>
 <li>30: units</li>
 <li>31: Tank</li>
 <li>32: Drum</li>
 <li>34: Crate</li>
 <li>35: Quarter pallet</li>
 <li>36: Other pallets</li>
 <li>37: Bin</li>
 <li>38: One-way pallet</li>
 <li>39: Foil bag</li>
</ul>
     *      - *volume* - number
     *          - The volume of the package
     *      - *palletId* - integer
     *          - The id of the pallet of which the package belong to
     *      - *isClosed* - boolean
     *          - Flag to say if the package is editable or not
     *      - *createdAt* - string
     *      - *updatedAt* - string
     *      - *packageSscc* - string
     *          - Amazon Vendor PackageSscc
     */
    public function updateOrdersShippingPackageByOrderIdOrderShippingPackageId(int $orderId, int $orderShippingPackageId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/packages/{$orderShippingPackageId}", 'PUT', $data);
    }
                    
    /**
     * @description Return all the packages linked for the given order. The ID of the order must be specified
     * @tag Order
     * @param int $orderId The ID of the order.
     * @param array $query
     *      - *with* - array - optional
     *          - Possible value is 'items'.
     *      - *page* - int - optional
     *          - The page of results to search for.
     *      - *itemsPerPage* - int - optional
     *          - The number of packages to list per page.
     *      - *sortBy* - string - optional
     *          - The column to be sorted by
     *      - *sortOrder* - string - optional
     *          - The sort direction
     * @return array
     */
    public function getOrdersShippingPackagesPaginatedByOrderId(int $orderId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/{$orderId}/shipping/packages_paginated"], $query));
    }
                    
    /**
     * @description Lists items contained in package pallets of an order. The ID of the order is mandatory.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     *      - *id* - integer
     *          - The ID of the order shipping package item. Primary key auto-increment
     *      - *packageId* - integer
     *          - The ID of the package (id column from plenty_package_type2order)
     *      - *itemId* - integer
     *          - The ID of the item (plenty_item_variation_base_item_id column from plenty_item_variation_base)
     *      - *variationId* - integer
     *          - The ID of the variation (plenty_item_variation_base_id column from plenty_item_variation_base)
     *      - *itemQuantity* - number
     *          - The quantity of the item in the package
     */
    public function getOrdersShippingPalletsPackagesItemsByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/pallets/packages/items");
    }
                    
    /**
     * @description Deletes all order shipping packages in a pallet. The ID of the order and the ID of the pallet must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param int $palletId The ID of the pallet
     */
    public function deleteOrdersShippingPalletsPackageByOrderIdPalletId(int $orderId, int $palletId): void
    {
        $this->api("/rest/orders/{$orderId}/shipping/pallets/{$palletId}/packages", 'DELETE');
    }
                
    /**
     * @description Lists all packages contained in pallets of an order. The ID of the order and of the pallet must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param int $palletId The ID of the pallet
     * @return array
     */
    public function getOrdersShippingPalletsPackagesByOrderIdPalletId(int $orderId, int $palletId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/pallets/{$palletId}/packages");
    }
                
    /**
     * @description Updates all the packages in a pallet. The ID of the order and the ID of the pallet must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param int $palletId The ID of the pallet
     */
    public function updateOrdersShippingPalletsPackageByOrderIdPalletId(int $orderId, int $palletId): void
    {
        $this->api("/rest/orders/{$orderId}/shipping/pallets/{$palletId}/packages", 'PUT');
    }
                    
    /**
     * @description Register a shipment for an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param array $query
     *      - *shippingProviderCode* - string - optional
     *          - The code of the shipping service provider
     */
    public function createOrdersShippingRegisterShipmentByOrderId(int $orderId, array $query = []): void
    {
        $this->api(array_merge(["/rest/orders/{$orderId}/shipping/register_shipment"], $query), 'POST');
    }
                    
    /**
     * @description Reset a shipment for an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     */
    public function deleteOrdersShippingResetShipmentByOrderId(int $orderId): void
    {
        $this->api("/rest/orders/{$orderId}/shipping/reset_shipment", 'DELETE');
    }
                    
    /**
     * @description Deletes the shipping information. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *shippingServiceProvider* - string
     *          - The name of the shipping service provider
     *      - *transactionId* - string
     *          - The ID of the transaction
     *      - *shippingStatus* - string
     *          - The shipping status. Possible values are 'open', 'prepared' and 'registered'.
     *      - *shippingCosts* - number
     *          - The shipping costs
     *      - *additionalData* - string
     *          - The additional data. Depending on the shipping service provider selected, this data may contain different information, e.g. shipping service, email address and order ID.
     *      - *registrationAt* - integer
     *          - The date and time the shipment was registered
     *      - *shipmentAt* - integer
     *          - The date the items will be shipped
     */
    public function deleteOrdersShippingShippingInformationByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/shipping_information", 'DELETE');
    }
                
    /**
     * @description Gets the shipping information. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *shippingServiceProvider* - string
     *          - The name of the shipping service provider
     *      - *transactionId* - string
     *          - The ID of the transaction
     *      - *shippingStatus* - string
     *          - The shipping status. Possible values are 'open', 'prepared' and 'registered'.
     *      - *shippingCosts* - number
     *          - The shipping costs
     *      - *additionalData* - string
     *          - The additional data. Depending on the shipping service provider selected, this data may contain different information, e.g. shipping service, email address and order ID.
     *      - *registrationAt* - integer
     *          - The date and time the shipment was registered
     *      - *shipmentAt* - integer
     *          - The date the items will be shipped
     */
    public function getOrdersShippingShippingInformationByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/shipping_information");
    }
                    
    /**
     * @description Updates additional data of the shipping information. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *shippingServiceProvider* - string
     *          - The name of the shipping service provider
     *      - *transactionId* - string
     *          - The ID of the transaction
     *      - *shippingStatus* - string
     *          - The shipping status. Possible values are 'open', 'prepared' and 'registered'.
     *      - *shippingCosts* - number
     *          - The shipping costs
     *      - *additionalData* - string
     *          - The additional data. Depending on the shipping service provider selected, this data may contain different information, e.g. shipping service, email address and order ID.
     *      - *registrationAt* - integer
     *          - The date and time the shipment was registered
     *      - *shipmentAt* - integer
     *          - The date the items will be shipped
     */
    public function updateOrdersShippingShippingInformationAdditionalDatumByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/shipping_information/additional_data", 'PUT');
    }
                    
    /**
     * @description Get Export label for an order ID.
     * @tag Order
     * @param int $orderId The ID of the order
     */
    public function getOrdersShippingShippingInformationExportLabelByOrderId(int $orderId): void
    {
        $this->api("/rest/orders/{$orderId}/shipping/shipping_information/export_label");
    }
                    
    /**
     * @description Updates the shipping status of the shipping information. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *shippingServiceProvider* - string
     *          - The name of the shipping service provider
     *      - *transactionId* - string
     *          - The ID of the transaction
     *      - *shippingStatus* - string
     *          - The shipping status. Possible values are 'open', 'prepared' and 'registered'.
     *      - *shippingCosts* - number
     *          - The shipping costs
     *      - *additionalData* - string
     *          - The additional data. Depending on the shipping service provider selected, this data may contain different information, e.g. shipping service, email address and order ID.
     *      - *registrationAt* - integer
     *          - The date and time the shipment was registered
     *      - *shipmentAt* - integer
     *          - The date the items will be shipped
     */
    public function updateOrdersShippingShippingInformationStatusByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/shipping_information/status", 'PUT');
    }
                    
    /**
     * @description Gets the status history of an order. The status history is a list that contains information of status changes of the order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @return array
     */
    public function getOrdersStatusHistoryByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/status-history");
    }
                    
    /**
     * @description Creates a subscription from a parent order. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersSubscriptionByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/subscriptions", 'POST', $data);
    }
                    
    /**
     * @description Validate order items for subscription creation from a parent order. The parent order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createOrdersSubscriptionsValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/subscriptions/validate", 'POST');
    }
                    
    /**
     * @description Creates transactions including the full quantity for every order item that does not have an existing transaction. The order ID must be specified.
     * @tag Order
     * @param int $orderId The ID of the order
     * @param array $data 
     * @return array
     */
    public function createOrdersTransactionByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/transactions", 'POST', $data);
    }
                    
    /**
     * @description Creates a warranty from a parent order. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createOrdersWarrantyByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/orders/{$orderId}/warranties", 'POST', $data);
    }
                    
    /**
     * @description Validate order items for create a warranty from a parent order. The parent order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createOrdersWarrantiesValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/warranties/validate", 'POST');
    }
                    
    /**
     * @description Create a redistribution
     * @tag Order
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createRedistribution(array $data): array
    {
        return $this->api("/rest/redistributions", 'POST', $data);
    }
                    
    /**
     * @description Returns a redistribution preview for the given order data without creating a redistribution.
     * @tag Order
     * @return array
     */
    public function createRedistributionsPreview(): array
    {
        return $this->api("/rest/redistributions/preview", 'POST');
    }
                    
    /**
     * @description Deletes a redistribution. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteRedistributionByOrderId(int $orderId): void
    {
        $this->api("/rest/redistributions/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates a redistribution. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateRedistributionByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/redistributions/{$orderId}", 'PUT', $data);
    }
                    
    /**
     * @description Books an order in, e.g. an order of the type reorder. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order.
     * @param array $query
     *      - *deliveryNoteNumber* - string - optional
     *          - If desired, set the delivery note number provided by the supplier.
     */
    public function createRedistributionsBookByOrderId(int $orderId, array $query = []): void
    {
        $this->api(array_merge(["/rest/redistributions/{$orderId}/book"], $query), 'POST');
    }
                    
    /**
     * @description Returns a redistribution preview for the given order data without updating a redistribution. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateRedistributionsPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/redistributions/{$orderId}/preview", 'PUT');
    }
                    
    /**
     * @description Creates a new reorder.
     * @tag Order
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createReorder(array $data): array
    {
        return $this->api("/rest/reorders", 'POST', $data);
    }
                    
    /**
     * @description Returns a reorder preview for the given order data without creating a reorder.
     * @tag Order
     * @return array
     */
    public function createReordersPreview(): array
    {
        return $this->api("/rest/reorders/preview", 'POST');
    }
                    
    /**
     * @description Deletes a reorder. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteReorderByOrderId(int $orderId): void
    {
        $this->api("/rest/reorders/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates a reorder. The order ID must be specified.
     * @tag Order
     * @param int $orderId The ID of the order.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateReorderByOrderId(int $orderId, array $data): array
    {
        return $this->api("/rest/reorders/{$orderId}", 'PUT', $data);
    }
                    
    /**
     * @description Books an order in, e.g. an order of the type reorder. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId The ID of the order.
     * @param array $query
     *      - *deliveryNoteNumber* - string - optional
     *          - If desired, set the delivery note number provided by the supplier.
     */
    public function createReordersBookByOrderId(int $orderId, array $query = []): void
    {
        $this->api(array_merge(["/rest/reorders/{$orderId}/book"], $query), 'POST');
    }
                    
    /**
     * @description Update the currency for a reorder
     * @tag Order
     * @param int $orderId The ID of the order.
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateReordersCurrencyByOrderId(int $orderId): array
    {
        return $this->api("/rest/reorders/{$orderId}/currency", 'PUT');
    }
                    
    /**
     * @description Get the delivery date for a reorder
     * @tag Order
     * @param int $orderId The ID of the order.
     */
    public function getReordersDeliveryDateByOrderId(int $orderId): void
    {
        $this->api("/rest/reorders/{$orderId}/delivery_date");
    }
                    
    /**
     * @description Calculates and saves the delivery dates for the reorder and the reorder items. The order ID must be specified.
     * @tag Order
     * @param int $orderId The ID of the order.
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateReordersDeliveryDateByOrderId(int $orderId): array
    {
        return $this->api("/rest/reorders/{$orderId}/delivery_dates", 'PUT');
    }
                    
    /**
     * @description Returns a reorder preview for the given order data without updating a reorder. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateReordersPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/reorders/{$orderId}/preview", 'PUT');
    }
                    
    /**
     * @description Creates a repair.
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createRepair(): array
    {
        return $this->api("/rest/repairs", 'POST');
    }
                    
    /**
     * @description Change an order item of type "unassigned variation" to "variation". The ID of the order item and variation ID must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createRepairsItemsAssignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/repairs/items/{$orderItemId}/assign_variation", 'POST');
    }
                    
    /**
     * @description Change an order item of type "variation" to "unassigned variation". The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createRepairsItemsUnassignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/repairs/items/{$orderItemId}/unassign_variation", 'POST');
    }
                    
    /**
     * @description Returns a repair order preview for the given order data without creating a repair order.
     * @tag Order
     * @return array
     */
    public function createRepairsPreview(): array
    {
        return $this->api("/rest/repairs/preview", 'POST');
    }
                    
    /**
     * @description Gets all order repair reasons.
     * @tag Order
     * @return array
     */
    public function getRepairsReasons(): array
    {
        return $this->api("/rest/repairs/reasons");
    }
                
    /**
     * @description Sets an order repair reason.
     * @tag Order
     * @return array
     */
    public function createRepairsReason(): array
    {
        return $this->api("/rest/repairs/reasons", 'POST');
    }
                    
    /**
     * @description Deletes an order repair reason. The repair reason ID must be specified.
     * @tag Order
     * @param int $repairReasonId 
     */
    public function deleteRepairsReasonByRepairReasonId(int $repairReasonId): void
    {
        $this->api("/rest/repairs/reasons/{$repairReasonId}", 'DELETE');
    }
                
    /**
     * @description Gets an order repair reason. The repair reason has to be specified by providing a repair reason ID.
     * @tag Order
     * @param int $repairReasonId 
     * @return array
     *      - *id* - integer
     *          - The ID of the repair reason.
     *      - *reason* - string
     *          - The specified reason in system language.
     */
    public function getRepairsReasonByRepairReasonId(int $repairReasonId): array
    {
        return $this->api("/rest/repairs/reasons/{$repairReasonId}");
    }
                    
    /**
     * @description Gets all order repair status.
     * @tag Order
     * @return array
     */
    public function getRepairsStatus(): array
    {
        return $this->api("/rest/repairs/status");
    }
                
    /**
     * @description Sets an order repair status.
     * @tag Order
     * @return array
     */
    public function createRepairsStatus(): array
    {
        return $this->api("/rest/repairs/status", 'POST');
    }
                    
    /**
     * @description Deletes an order repair status. The repair status ID must be specified.
     * @tag Order
     * @param int $repairStatusId 
     */
    public function deleteRepairsStatusByRepairStatusId(int $repairStatusId): void
    {
        $this->api("/rest/repairs/status/{$repairStatusId}", 'DELETE');
    }
                
    /**
     * @description Gets an order repair status. The repair status has to be specified by providing a repair status ID.
     * @tag Order
     * @param int $repairStatusId 
     * @return array
     *      - *id* - integer
     *          - The ID of the repair status.
     *      - *status* - string
     *          - The specified status in system language.
     */
    public function getRepairsStatusByRepairStatusId(int $repairStatusId): array
    {
        return $this->api("/rest/repairs/status/{$repairStatusId}");
    }
                    
    /**
     * @description Deletes a repair. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteRepairByOrderId(int $orderId): void
    {
        $this->api("/rest/repairs/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates a repair. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateRepairByOrderId(int $orderId): array
    {
        return $this->api("/rest/repairs/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Books out the order items of an order. The ID of the order must be specified and a booking date can be specified. The current date and time will be used if no date is specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     */
    public function createRepairsBookByOrderId(int $orderId, array $data): void
    {
        $this->api("/rest/repairs/{$orderId}/book", 'POST', $data);
    }
                    
    /**
     * @description Cancellation the booking of an order. The ID of the order must be specified. With the array 'quantities' the items to cancel can be defined. If 'quantities' is not given, the whole order will be cancelled and the booking date will be deleted. If 'quantities' is defined, the booking date won't be reset.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     */
    public function createRepairsCancelBookingByOrderId(int $orderId, array $data): void
    {
        $this->api("/rest/repairs/{$orderId}/cancel_booking", 'POST', $data);
    }
                    
    /**
     * @description Validates cancellation of the booking of an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createRepairsCancelBookingValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/repairs/{$orderId}/cancel_booking/validate", 'POST');
    }
                    
    /**
     * @description Returns a repair order preview for the given order data without updating a repair order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateRepairsPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/repairs/{$orderId}/preview", 'PUT');
    }
                    
    /**
     * @description Creates a return.
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createReturn(): array
    {
        return $this->api("/rest/returns", 'POST');
    }
                    
    /**
     * @description Change an order item of type "unassigned variation" to "variation". The ID of the order item and variation ID must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createReturnsItemsAssignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/returns/items/{$orderItemId}/assign_variation", 'POST');
    }
                    
    /**
     * @description Change an order item of type "variation" to "unassigned variation". The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createReturnsItemsUnassignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/returns/items/{$orderItemId}/unassign_variation", 'POST');
    }
                    
    /**
     * @description Returns a return preview for the given order data without creating a return.
     * @tag Order
     * @return array
     */
    public function createReturnsPreview(): array
    {
        return $this->api("/rest/returns/preview", 'POST');
    }
                    
    /**
     * @description Gets all order return reasons.
     * @tag Order
     * @return array
     */
    public function getReturnsReasons(): array
    {
        return $this->api("/rest/returns/reasons");
    }
                
    /**
     * @description Sets an order return reason.
     * @tag Order
     * @return array
     */
    public function createReturnsReason(): array
    {
        return $this->api("/rest/returns/reasons", 'POST');
    }
                    
    /**
     * @description Deletes an order return reason. The return reason ID must be specified.
     * @tag Order
     * @param int $returnReasonsId 
     */
    public function deleteReturnsReasonByReturnReasonsId(int $returnReasonsId): void
    {
        $this->api("/rest/returns/reasons/{$returnReasonsId}", 'DELETE');
    }
                
    /**
     * @description Gets an order return reason. The return reason has to be specified by providing a return reason ID.
     * @tag Order
     * @param int $returnReasonsId 
     * @return array
     *      - *id* - integer
     *          - The ID of the return reason.
     *      - *reason* - string
     *          - The specified reason in system language.
     */
    public function getReturnsReasonByReturnReasonsId(int $returnReasonsId): array
    {
        return $this->api("/rest/returns/reasons/{$returnReasonsId}");
    }
                    
    /**
     * @description Gets all order return status.
     * @tag Order
     * @return array
     */
    public function getReturnsStatus(): array
    {
        return $this->api("/rest/returns/status");
    }
                
    /**
     * @description Sets an order return status.
     * @tag Order
     * @return array
     */
    public function createReturnsStatus(): array
    {
        return $this->api("/rest/returns/status", 'POST');
    }
                    
    /**
     * @description Deletes an order return status. The return status ID must be specified.
     * @tag Order
     * @param int $returnStatusId 
     */
    public function deleteReturnsStatusByReturnStatusId(int $returnStatusId): void
    {
        $this->api("/rest/returns/status/{$returnStatusId}", 'DELETE');
    }
                
    /**
     * @description Gets an order return status. The return status has to be specified by providing a return status ID.
     * @tag Order
     * @param int $returnStatusId 
     * @return array
     *      - *id* - integer
     *          - The ID of the return status.
     *      - *status* - string
     *          - The specified status in system language.
     */
    public function getReturnsStatusByReturnStatusId(int $returnStatusId): array
    {
        return $this->api("/rest/returns/status/{$returnStatusId}");
    }
                    
    /**
     * @description Deletes a return. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteReturnByOrderId(int $orderId): void
    {
        $this->api("/rest/returns/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates a return. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateReturnByOrderId(int $orderId): array
    {
        return $this->api("/rest/returns/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Books order items of return. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     */
    public function createReturnsBookByOrderId(int $orderId, array $data): void
    {
        $this->api("/rest/returns/{$orderId}/book", 'POST', $data);
    }
                    
    /**
     * @description Validates booking of an return. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createReturnsBookValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/returns/{$orderId}/book/validate", 'POST');
    }
                    
    /**
     * @description Returns a return preview for the given order data without updating a return. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateReturnsPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/returns/{$orderId}/preview", 'PUT');
    }
                    
    /**
     * @description Creates a sales order.
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createSalesOrder(): array
    {
        return $this->api("/rest/sales_orders", 'POST');
    }
                    
    /**
     * @description Groups multiple orders in one order. The IDs of the orders to group must be specified.
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createSalesOrdersGroup(): array
    {
        return $this->api("/rest/sales_orders/group", 'POST');
    }
                    
    /**
     * @description Returns a sales order preview for the given incomplete order data without creating a sales order.
     * @tag Order
     * @return array
     */
    public function createSalesOrdersIncompletePreview(): array
    {
        return $this->api("/rest/sales_orders/incomplete/preview", 'POST');
    }
                    
    /**
     * @description Change an order item of type "unassigned variation" to "variation". The ID of the order item and variation ID must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createSalesOrdersItemsAssignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/sales_orders/items/{$orderItemId}/assign_variation", 'POST');
    }
                    
    /**
     * @description Change an order item of type "variation" to "unassigned variation". The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createSalesOrdersItemsUnassignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/sales_orders/items/{$orderItemId}/unassign_variation", 'POST');
    }
                    
    /**
     * @description Returns a sales order preview for the given order data without creating a sales order.
     * @tag Order
     * @return array
     */
    public function createSalesOrdersPreview(): array
    {
        return $this->api("/rest/sales_orders/preview", 'POST');
    }
                    
    /**
     * @description Deletes a sales order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteSalesOrderByOrderId(int $orderId): void
    {
        $this->api("/rest/sales_orders/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates a sales order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateSalesOrderByOrderId(int $orderId): array
    {
        return $this->api("/rest/sales_orders/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Books out the order items of an order. The ID of the order must be specified and a booking date can be specified. The current date and time will be used if no date is specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     */
    public function createSalesOrdersBookByOrderId(int $orderId, array $data): void
    {
        $this->api("/rest/sales_orders/{$orderId}/book", 'POST', $data);
    }
                    
    /**
     * @description Cancellation the booking of an order. The ID of the order must be specified. With the array 'quantities' the items to cancel can be defined. If 'quantities' is not given, the whole order will be cancelled and the booking date will be deleted. If 'quantities' is defined, the booking date won't be reset.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     */
    public function createSalesOrdersCancelBookingByOrderId(int $orderId, array $data): void
    {
        $this->api("/rest/sales_orders/{$orderId}/cancel_booking", 'POST', $data);
    }
                    
    /**
     * @description Validates cancellation of the booking of an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createSalesOrdersCancelBookingValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/sales_orders/{$orderId}/cancel_booking/validate", 'POST');
    }
                    
    /**
     * @description Returns a sales order preview for the given order data without updating a sales order. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateSalesOrdersPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/sales_orders/{$orderId}/preview", 'PUT');
    }
                    
    /**
     * @description Splits a sales order into at least two sales orders. The parent order ID and the quantities to use must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function createSalesOrdersSplitByOrderId(int $orderId): void
    {
        $this->api("/rest/sales_orders/{$orderId}/split", 'POST');
    }
                    
    /**
     * @description Reset the shipments for the given order IDs. At least one ID of an order must be specified.
     * @tag Order
     * @param array $query
     *      - *orderIds* - array - required
     *          - The IDs of the orders that you want to reset the shipments for
     */
    public function deleteShippingCenterResetShipment(array $query): void
    {
        $this->api(array_merge(["/rest/shipping_center/reset_shipments"], $query), 'DELETE');
    }
                    
    /**
     * @description Creates a subscription
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createSubscription(): array
    {
        return $this->api("/rest/subscriptions", 'POST');
    }
                    
    /**
     * @description Returns a subscription preview for the given order data without creating a subscription.
     * @tag Order
     * @return array
     */
    public function createSubscriptionsPreview(): array
    {
        return $this->api("/rest/subscriptions/preview", 'POST');
    }
                    
    /**
     * @description Deletes a subscription. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteSubscriptionByOrderId(int $orderId): void
    {
        $this->api("/rest/subscriptions/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates a subscription. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateSubscriptionByOrderId(int $orderId): array
    {
        return $this->api("/rest/subscriptions/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Update the currency for a subscription
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateSubscriptionsCurrencyByOrderId(int $orderId): array
    {
        return $this->api("/rest/subscriptions/{$orderId}/currency", 'PUT');
    }
                    
    /**
     * @description Creates an order for today for a given subscription.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createSubscriptionsManualRunByOrderId(int $orderId): array
    {
        return $this->api("/rest/subscriptions/{$orderId}/manual_run", 'POST');
    }
                    
    /**
     * @description Returns a subscription preview for the given order data without updating a subscription. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateSubscriptionsPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/subscriptions/{$orderId}/preview", 'PUT');
    }
                
    /**
     * @description Lists the specified taric vat assignments in the request. This checks the results for the page and items per page
specified in the request.
     * @tag Order
     * @param array $query
     *      - *page* - int - optional
     *          - The requested page of results
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page
     *      - *countryId* - int - optional
     *          - The country ID of the taric vat assignments
     *      - *taricCode* - int - optional
     *          - The taric code of the taric vat assignments
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of TaricVatAssignment
     */
    public function eachSystemSettingsTaricVatAssignment(array $query = []): Iterator
    {
        return $this->eachInternal('getSystemSettingsTaricVatAssignment', func_get_args());
    }
        
    /**
     * @description Lists the specified taric vat assignments in the request. This checks the results for the page and items per page
specified in the request.
     * @tag Order
     * @param array $query
     *      - *page* - int - optional
     *          - The requested page of results
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page
     *      - *countryId* - int - optional
     *          - The country ID of the taric vat assignments
     *      - *taricCode* - int - optional
     *          - The taric code of the taric vat assignments
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of TaricVatAssignment
     */
    public function batchSystemSettingsTaricVatAssignment(array $query = []): Iterator
    {
        return $this->batchInternal('getSystemSettingsTaricVatAssignment', func_get_args());
    }
    
    /**
     * @description Lists the specified taric vat assignments in the request. This checks the results for the page and items per page
specified in the request.
     * @tag Order
     * @param array $query
     *      - *page* - int - optional
     *          - The requested page of results
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page
     *      - *countryId* - int - optional
     *          - The country ID of the taric vat assignments
     *      - *taricCode* - int - optional
     *          - The taric code of the taric vat assignments
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of TaricVatAssignment
     */
    public function getSystemSettingsTaricVatAssignment(array $query = []): array
    {
        return $this->api(array_merge(["/rest/system/settings/taric_vat_assignment"], $query));
    }
                    
    /**
     * @description Deletes a taric code. The taric code and the country ID must be specified.
     * @tag Order
     * @param string $taricCode The taric code.
     * @param int $countryId The country id.
     * @param array $data 
     */
    public function deleteSystemSettingsTaricVatAssignmentByTaricCodeCountryId(string $taricCode, int $countryId, array $data): void
    {
        $this->api("/rest/system/settings/taric_vat_assignment/{$taricCode}/{$countryId}", 'DELETE', $data);
    }
                
    /**
     * @description Gets a taric vat assignment. The taric code and the country ID must be specified.
     * @tag Order
     * @param string $taricCode The taric code.
     * @param int $countryId The country id.
     * @return array
     *      - *id* - integer
     *          - The ID of the taric vat assignment
     *      - *taricCode* - integer
     *          - The taric code
     *      - *countryId* - integer
     *          - The ID of the country that the taric code configuration belongs to
     *      - *vatField* - string
     *          - The ID of the VAT rate of the taric code / country id combination.
     */
    public function getSystemSettingsTaricVatAssignmentByTaricCodeCountryId(string $taricCode, int $countryId): array
    {
        return $this->api("/rest/system/settings/taric_vat_assignment/{$taricCode}/{$countryId}");
    }
                
    /**
     * @description Creates a taric vat assignment. The taric code and the country ID must be specified.
     * @tag Order
     * @param string $taricCode The taric code.
     * @param int $countryId The country id.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the taric vat assignment
     *      - *taricCode* - integer
     *          - The taric code
     *      - *countryId* - integer
     *          - The ID of the country that the taric code configuration belongs to
     *      - *vatField* - string
     *          - The ID of the VAT rate of the taric code / country id combination.
     */
    public function createSystemSettingsTaricVatAssignmentByTaricCodeCountryId(string $taricCode, int $countryId, array $data): array
    {
        return $this->api("/rest/system/settings/taric_vat_assignment/{$taricCode}/{$countryId}", 'POST', $data);
    }
                
    /**
     * @description Updates a taric vat assignment. The taric code and the country ID must be specified.
     * @tag Order
     * @param string $taricCode The taric code.
     * @param int $countryId The country id.
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the taric vat assignment
     *      - *taricCode* - integer
     *          - The taric code
     *      - *countryId* - integer
     *          - The ID of the country that the taric code configuration belongs to
     *      - *vatField* - string
     *          - The ID of the VAT rate of the taric code / country id combination.
     */
    public function updateSystemSettingsTaricVatAssignmentByTaricCodeCountryId(string $taricCode, int $countryId, array $data): array
    {
        return $this->api("/rest/system/settings/taric_vat_assignment/{$taricCode}/{$countryId}", 'PUT', $data);
    }
                    
    /**
     * @description Creates a warranty.
     * @tag Order
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createWarranty(): array
    {
        return $this->api("/rest/warranties", 'POST');
    }
                    
    /**
     * @description Change an order item of type "unassigned variation" to "variation". The ID of the order item and variation ID must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createWarrantiesItemsAssignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/warranties/items/{$orderItemId}/assign_variation", 'POST');
    }
                    
    /**
     * @description Change an order item of type "variation" to "unassigned variation". The ID of the order item must be specified.
     * @tag Order
     * @param int $orderItemId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function createWarrantiesItemsUnassignVariationByOrderItemId(int $orderItemId): array
    {
        return $this->api("/rest/warranties/items/{$orderItemId}/unassign_variation", 'POST');
    }
                    
    /**
     * @description Returns a warranty preview for the given order data without creating a warranty.
     * @tag Order
     * @return array
     */
    public function createWarrantiesPreview(): array
    {
        return $this->api("/rest/warranties/preview", 'POST');
    }
                    
    /**
     * @description Deletes a warranty. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     */
    public function deleteWarrantyByOrderId(int $orderId): void
    {
        $this->api("/rest/warranties/{$orderId}", 'DELETE');
    }
                
    /**
     * @description Updates a warranty. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the order
     *      - *typeId* - integer
     *          - The ID of the order type
                                                          It is possible to define individual order types. However,
                                                          the following types are available by default:

* 1 = Sales order
* 2 = Delivery
* 3 = Returns
* 4 = Credit note
* 5 = Warranty
* 6 = Repair
* 7 = Offer
* 8 = Advance order
* 9 = Multi-order
* 10 = Multi credit note
* 11 = Multi delivery
* 12 = Reorder
* 13 = Partial delivery
* 14 = Subscription
* 15 = Redistribution
     *      - *statusId* - number
     *          - The ID of the order status
     *      - *statusName* - string
     *          - The name for the status ID (read only)
     *      - *ownerId* - integer
     *          - The user ID of the order's owner
     *      - *referrerId* - number
     *          - The referrer ID of the order
     *      - *createdAt* - string
     *          - The date that the order was created
     *      - *updatedAt* - string
     *          - The date that the order was updated last
     *      - *plentyId* - integer
     *          - The plenty ID of the client that the order belongs to
     *      - *locationId* - integer
     *          - The ID of the location that the order belongs to
     *      - *roundTotalsOnly* - boolean
     *          - True means only the order's total amounts are rounded, false the order item price is rounded too. (read-only)
     *      - *numberOfDecimals* - integer
     *          - The number of decimals this order was rounded with. (read-only)
     *      - *lockStatus* - string
     *          - The lock status of the order. The following statuses are available:

* unlocked
* permanentlyLocked
* reversibleLocked
     *      - *isLocked* - boolean
     *          - True, if the order has the lock status "unlocked". False otherwise.
     *      - *hasTaxRelevantDocuments* - boolean
     *      - *hasDeliveryOrders* - boolean
     *          - Has the order delivery orders?
     *      - *legacyOrderType* - string
     *          - The legacy order type as string
     *      - *contactSenderId* - integer
     *      - *contactReceiverId* - integer
     *      - *warehouseSenderId* - integer
     *      - *warehouseReceiverId* - integer
     */
    public function updateWarrantyByOrderId(int $orderId): array
    {
        return $this->api("/rest/warranties/{$orderId}", 'PUT');
    }
                    
    /**
     * @description Books out the order items of an order. The ID of the order must be specified and a booking date can be specified. The current date and time will be used if no date is specified.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     */
    public function createWarrantiesBookByOrderId(int $orderId, array $data): void
    {
        $this->api("/rest/warranties/{$orderId}/book", 'POST', $data);
    }
                    
    /**
     * @description Cancellation the booking of an order. The ID of the order must be specified. With the array 'quantities' the items to cancel can be defined. If 'quantities' is not given, the whole order will be cancelled and the booking date will be deleted. If 'quantities' is defined, the booking date won't be reset.
     * @tag Order
     * @param int $orderId 
     * @param array $data 
     */
    public function createWarrantiesCancelBookingByOrderId(int $orderId, array $data): void
    {
        $this->api("/rest/warranties/{$orderId}/cancel_booking", 'POST', $data);
    }
                    
    /**
     * @description Validates cancellation of the booking of an order. The ID of the order must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function createWarrantiesCancelBookingValidateByOrderId(int $orderId): array
    {
        return $this->api("/rest/warranties/{$orderId}/cancel_booking/validate", 'POST');
    }
                    
    /**
     * @description Returns a warranty preview for the given order data without updating a warranty. The order ID must be specified.
     * @tag Order
     * @param int $orderId 
     * @return array
     */
    public function updateWarrantiesPreviewByOrderId(int $orderId): array
    {
        return $this->api("/rest/warranties/{$orderId}/preview", 'PUT');
    }
    
}
