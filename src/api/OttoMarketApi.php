<?php

namespace lujie\otto\api;

use Yii;
use Iterator;

/**
 * This class is autogenerated by the OpenAPI gii generator
 */
class OttoMarketApi extends \lujie\otto\BaseOttoRestClient
{

    public $apiBaseUrl = 'https://api.otto.market';


    /**
     * @description The total number of results could be limited by specifying query parameters. Generally the resulting product variations will be paginated. The default page length is 100 product variations per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search for product variations by their productReference value
     *      - *category* - string - optional
     *          - search for product variations by their category value
     *      - *brandId* - string - optional
     *          - search for product variations by their brandId value
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of products per response page (at most 100)
     * @return Iterator
     *      - *productVariations* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function eachV3Products(array $query = []): Iterator
    {
        return $this->eachInternal('getV3Products', func_get_args());
    }

    /**
     * @description The total number of results could be limited by specifying query parameters. Generally the resulting product variations will be paginated. The default page length is 100 product variations per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search for product variations by their productReference value
     *      - *category* - string - optional
     *          - search for product variations by their category value
     *      - *brandId* - string - optional
     *          - search for product variations by their brandId value
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of products per response page (at most 100)
     * @return Iterator
     *      - *productVariations* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function batchV3Products(array $query = []): Iterator
    {
        return $this->batchInternal('getV3Products', func_get_args());
    }

    /**
     * @description The total number of results could be limited by specifying query parameters. Generally the resulting product variations will be paginated. The default page length is 100 product variations per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search for product variations by their productReference value
     *      - *category* - string - optional
     *          - search for product variations by their category value
     *      - *brandId* - string - optional
     *          - search for product variations by their brandId value
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of products per response page (at most 100)
     * @return array
     *      - *productVariations* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function getV3Products(array $query = []): array
    {
        return $this->api(array_merge(["/v3/products"], $query));
    }

    /**
     * @description Returns a process-id to query results. The limit for the number of product variations in one request is 500.
     * @tag Products-V3
     * @param array $data list of
     *      - *productReference* - string
     *          - The productReference groups all variations, that you want to combine into one product. This is not visible to the customer. The productReference can be freely assigned and may consist of maximum 50 characters. You can only use the productReference once within your product catalog. You should therefore use a value that makes sense for all variations of the product and does not refer to any specifics of a particular variation. You will find the product reference, for example, in the product overview in the portal.
     *      - *sku* - string
     *          - Identifier for a product variation, provided by the partner, must be unique for a partner. It is mandatory and may consist of a maximum of 50 characters.
     *      - *ean* - string
     *          - External identifier of a product, must be unique in a partner assortment, must not start with a 2.
     *      - *pzn* - string
     *          - Pharmazentralnummer, a german standard for identifying pharmaceutical products.
     *      - *mpn* - string
     *          - Manufacturer part number, may consist of a maximum of 50 characters.
     *      - *moin* - string
     *          - Is an identifier, generated by the OTTO marketplace, for a product variation together with the associated content. Is used in the context of "Wettbewerb am Artikel" to confirm the content of the existing variation and its correctness and to put the own offer live for this variation.
     *      - *releaseDate* - string
     *          - Date to which the product is released by the manufacturer, e.g. computer games.
     *      - *productDescription* -
     *      - *mediaAssets* - array
     *          - A list of media assets describing this product variation. Currently these may only be static images of the types JPG or PNG with a RGB color space. Furthermore the images have to have a minimum size of 500 x 1000 pixel and a maximum width of 4500 pixel.
     *      - *order* -
     *      - *delivery* -
     *      - *pricing* -
     *      - *logistics* -
     * @return array
     *      - *state* - string
     *          - the current state of the process
     *      - *message* - string
     *          - a human-readable message describing the current state of the process
     *      - *total* - integer
     *          - the total work to complete for this process
     *      - *progress* - integer
     *          - the fraction of work that is already completed, as compared to the total work
     *      - *succeeded* - integer
     *          - the number of successfully processed variations
     *      - *failed* - integer
     *          - the number of failed processed variations
     *      - *unchanged* - integer
     *          - the number of unchanged and not processed variations
     *      - *pingAfter* - string
     *          - recommendation when to poll this resource again to receive a meaningful update
     *      - *links* - array
     *          - a list of links that can be used to access detailed information about the process result
     */
    public function createOrUpdateV3ProductVariations(array $data): array
    {
        return $this->api("/v3/products", 'POST', $data);
    }

    /**
     * @description The total number of results could be limited by specifying query parameters. Generally the resulting active status values will be paginated. The default page length is 100 active status entries per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search for product variations by their productReference value
     *      - *category* - string - optional
     *          - search for product variations by their category value
     *      - *brandId* - string - optional
     *          - search for product variations by their brand ID value
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of active status values per response page (at most 100)
     * @return Iterator
     *      - *status* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination (among others).
     */
    public function eachV3ProductActiveStatus(array $query = []): Iterator
    {
        return $this->eachInternal('getV3ProductActiveStatus', func_get_args());
    }

    /**
     * @description The total number of results could be limited by specifying query parameters. Generally the resulting active status values will be paginated. The default page length is 100 active status entries per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search for product variations by their productReference value
     *      - *category* - string - optional
     *          - search for product variations by their category value
     *      - *brandId* - string - optional
     *          - search for product variations by their brand ID value
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of active status values per response page (at most 100)
     * @return Iterator
     *      - *status* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination (among others).
     */
    public function batchV3ProductActiveStatus(array $query = []): Iterator
    {
        return $this->batchInternal('getV3ProductActiveStatus', func_get_args());
    }

    /**
     * @description The total number of results could be limited by specifying query parameters. Generally the resulting active status values will be paginated. The default page length is 100 active status entries per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search for product variations by their productReference value
     *      - *category* - string - optional
     *          - search for product variations by their category value
     *      - *brandId* - string - optional
     *          - search for product variations by their brand ID value
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of active status values per response page (at most 100)
     * @return array
     *      - *status* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination (among others).
     */
    public function getV3ProductActiveStatus(array $query = []): array
    {
        return $this->api(array_merge(["/v3/products/active-status"], $query));
    }

    /**
     * @description Returns a process-id to query results. The limit for the number of product active statuses in one request is 500.
     * @tag Products-V3
     * @param array $data
     *      - *status* - array
     * @return array
     *      - *state* - string
     *          - the current state of the process
     *      - *message* - string
     *          - a human-readable message describing the current state of the process
     *      - *total* - integer
     *          - the total work to complete for this process
     *      - *progress* - integer
     *          - the fraction of work that is already completed, as compared to the total work
     *      - *succeeded* - integer
     *          - the number of successfully processed variations
     *      - *failed* - integer
     *          - the number of failed processed variations
     *      - *unchanged* - integer
     *          - the number of unchanged and not processed variations
     *      - *pingAfter* - string
     *          - recommendation when to poll this resource again to receive a meaningful update
     *      - *links* - array
     *          - a list of links that can be used to access detailed information about the process result
     */
    public function updateV3ProductActiveStatus(array $data): array
    {
        return $this->api("/v3/products/active-status", 'POST', $data);
    }

    /**
     * @description Read the list of brands that are known on the Otto market place. The list of brands will be paginated. Brands consist of a name, a brand Id, a (link to a) logo and a boolean useable that lets you know wheter you are allowed to set up variants with this brand on the Otto Marketplace. The default page length is 100 entries per response, the page size upper limit is 1000. The links specified in the result can be used to page through the total result space. Note that there will be no prev link on the first page and no next link on the last page.
     * @tag Products-V3
     * @param array $query
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          -
     * @return Iterator
     *      - *brands* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination (among others).
     */
    public function eachV3ProductBrands(array $query = []): Iterator
    {
        return $this->eachInternal('getV3ProductBrands', func_get_args());
    }

    /**
     * @description Read the list of brands that are known on the Otto market place. The list of brands will be paginated. Brands consist of a name, a brand Id, a (link to a) logo and a boolean useable that lets you know wheter you are allowed to set up variants with this brand on the Otto Marketplace. The default page length is 100 entries per response, the page size upper limit is 1000. The links specified in the result can be used to page through the total result space. Note that there will be no prev link on the first page and no next link on the last page.
     * @tag Products-V3
     * @param array $query
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          -
     * @return Iterator
     *      - *brands* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination (among others).
     */
    public function batchV3ProductBrands(array $query = []): Iterator
    {
        return $this->batchInternal('getV3ProductBrands', func_get_args());
    }

    /**
     * @description Read the list of brands that are known on the Otto market place. The list of brands will be paginated. Brands consist of a name, a brand Id, a (link to a) logo and a boolean useable that lets you know wheter you are allowed to set up variants with this brand on the Otto Marketplace. The default page length is 100 entries per response, the page size upper limit is 1000. The links specified in the result can be used to page through the total result space. Note that there will be no prev link on the first page and no next link on the last page.
     * @tag Products-V3
     * @param array $query
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          -
     * @return array
     *      - *brands* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination (among others).
     */
    public function getV3ProductBrands(array $query = []): array
    {
        return $this->api(array_merge(["/v3/products/brands"], $query));
    }

    /**
     * @description Returns product categories and associated attributes of the OTTO market place. The total number of results could be limited by specifying query parameters. Generally the resulting product categories values will be paginated. The default page length is 100 product categories per response, the page size limit is 2000. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *page* - integer - optional
     *          - the number (starting with 0) of the page, that should be delivered.
     *      - *limit* - integer - optional
     *          - proposed limit for the number of product categories per response page  (at most 2000)
     *      - *category* - string - optional
     *          - read a single category
     * @return Iterator
     *      - *categoryGroups* - array
     *          - a list of the category groups defined on the OTTO market place.
     *      - *links* - array
     *          - a list of links that can be used for pagination (among others).
     */
    public function eachV3ProductCategoryGroups(array $query = []): Iterator
    {
        return $this->eachInternal('getV3ProductCategoryGroups', func_get_args());
    }

    /**
     * @description Returns product categories and associated attributes of the OTTO market place. The total number of results could be limited by specifying query parameters. Generally the resulting product categories values will be paginated. The default page length is 100 product categories per response, the page size limit is 2000. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *page* - integer - optional
     *          - the number (starting with 0) of the page, that should be delivered.
     *      - *limit* - integer - optional
     *          - proposed limit for the number of product categories per response page  (at most 2000)
     *      - *category* - string - optional
     *          - read a single category
     * @return Iterator
     *      - *categoryGroups* - array
     *          - a list of the category groups defined on the OTTO market place.
     *      - *links* - array
     *          - a list of links that can be used for pagination (among others).
     */
    public function batchV3ProductCategoryGroups(array $query = []): Iterator
    {
        return $this->batchInternal('getV3ProductCategoryGroups', func_get_args());
    }

    /**
     * @description Returns product categories and associated attributes of the OTTO market place. The total number of results could be limited by specifying query parameters. Generally the resulting product categories values will be paginated. The default page length is 100 product categories per response, the page size limit is 2000. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *page* - integer - optional
     *          - the number (starting with 0) of the page, that should be delivered.
     *      - *limit* - integer - optional
     *          - proposed limit for the number of product categories per response page  (at most 2000)
     *      - *category* - string - optional
     *          - read a single category
     * @return array
     *      - *categoryGroups* - array
     *          - a list of the category groups defined on the OTTO market place.
     *      - *links* - array
     *          - a list of links that can be used for pagination (among others).
     */
    public function getV3ProductCategoryGroups(array $query = []): array
    {
        return $this->api(array_merge(["/v3/products/categories"], $query));
    }

    /**
     * @description Read the content changes for all your product variations within a specific time period. You can also use this endpoint to read the content changes for more than one variation or if the sku value contains slash ('/') or dot ('.') characters, so that you cannot use the other endpoint with one dedicated sku value in the path. The resulting content changes will be paginated. The default page length is 100 entries per response, which also is the page size upper limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - array - optional
     *          - search for product variations by their sku value. Use this to query for multiple variations or if your sku values contain slash ('/') or dot ('.') characters. You may separate multiple sku values by comma or state each one with a &sku= in front of the value. Please note that if you like to query for a single variation whose value contains a comma you have to add one empty &sku= at the end of the query string or use the other endpoint.
     *      - *fromDate* - string - optional
     *          - search for content changes from this time on. The maxmimum and default value is 28 days before now. Future values can be specified, but lead to an empty result.
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of content changes per response page (at most 100)
     * @return Iterator
     *      - *contentChanges* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function eachV3ProductContentChanges2(array $query = []): Iterator
    {
        return $this->eachInternal('getV3ProductContentChanges2', func_get_args());
    }

    /**
     * @description Read the content changes for all your product variations within a specific time period. You can also use this endpoint to read the content changes for more than one variation or if the sku value contains slash ('/') or dot ('.') characters, so that you cannot use the other endpoint with one dedicated sku value in the path. The resulting content changes will be paginated. The default page length is 100 entries per response, which also is the page size upper limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - array - optional
     *          - search for product variations by their sku value. Use this to query for multiple variations or if your sku values contain slash ('/') or dot ('.') characters. You may separate multiple sku values by comma or state each one with a &sku= in front of the value. Please note that if you like to query for a single variation whose value contains a comma you have to add one empty &sku= at the end of the query string or use the other endpoint.
     *      - *fromDate* - string - optional
     *          - search for content changes from this time on. The maxmimum and default value is 28 days before now. Future values can be specified, but lead to an empty result.
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of content changes per response page (at most 100)
     * @return Iterator
     *      - *contentChanges* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function batchV3ProductContentChanges2(array $query = []): Iterator
    {
        return $this->batchInternal('getV3ProductContentChanges2', func_get_args());
    }

    /**
     * @description Read the content changes for all your product variations within a specific time period. You can also use this endpoint to read the content changes for more than one variation or if the sku value contains slash ('/') or dot ('.') characters, so that you cannot use the other endpoint with one dedicated sku value in the path. The resulting content changes will be paginated. The default page length is 100 entries per response, which also is the page size upper limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - array - optional
     *          - search for product variations by their sku value. Use this to query for multiple variations or if your sku values contain slash ('/') or dot ('.') characters. You may separate multiple sku values by comma or state each one with a &sku= in front of the value. Please note that if you like to query for a single variation whose value contains a comma you have to add one empty &sku= at the end of the query string or use the other endpoint.
     *      - *fromDate* - string - optional
     *          - search for content changes from this time on. The maxmimum and default value is 28 days before now. Future values can be specified, but lead to an empty result.
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of content changes per response page (at most 100)
     * @return array
     *      - *contentChanges* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function getV3ProductContentChanges2(array $query = []): array
    {
        return $this->api(array_merge(["/v3/products/content-changes"], $query));
    }

    /**
     * @description The total number of results could be limited by specifying query parameters. Generally the resulting marketplace status will be paginated. The default page length is 100 product variations per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search marketplace status by the productReference value of the related product variations
     *      - *category* - string - optional
     *          - search marketplace status by the category value of the related product variations
     *      - *brandId* - string - optional
     *          - search marketplace status by the brand ID value of the related product variations
     *      - *fromDate* - string - optional
     *          - search marketplace status for a time range starting with the given date (in ISO8601, like '2021-10-09T07:52:19.820Z' or '2021-10-09T07:52:19.820+01:00')
     *      - *page* - integer - optional
     *          - page to load
     *      - *limit* - integer - optional
     *          - proposed limit for the number of marketplace status per response page (at most 1000)
     *      - *marketPlaceStatus* - array - optional
     *          - only include items that match any of the provided status
     * @return Iterator
     *      - *marketPlaceStatus* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function eachV3ProductMarketPlaceStatusList(array $query = []): Iterator
    {
        return $this->eachInternal('getV3ProductMarketPlaceStatusList', func_get_args());
    }

    /**
     * @description The total number of results could be limited by specifying query parameters. Generally the resulting marketplace status will be paginated. The default page length is 100 product variations per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search marketplace status by the productReference value of the related product variations
     *      - *category* - string - optional
     *          - search marketplace status by the category value of the related product variations
     *      - *brandId* - string - optional
     *          - search marketplace status by the brand ID value of the related product variations
     *      - *fromDate* - string - optional
     *          - search marketplace status for a time range starting with the given date (in ISO8601, like '2021-10-09T07:52:19.820Z' or '2021-10-09T07:52:19.820+01:00')
     *      - *page* - integer - optional
     *          - page to load
     *      - *limit* - integer - optional
     *          - proposed limit for the number of marketplace status per response page (at most 1000)
     *      - *marketPlaceStatus* - array - optional
     *          - only include items that match any of the provided status
     * @return Iterator
     *      - *marketPlaceStatus* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function batchV3ProductMarketPlaceStatusList(array $query = []): Iterator
    {
        return $this->batchInternal('getV3ProductMarketPlaceStatusList', func_get_args());
    }

    /**
     * @description The total number of results could be limited by specifying query parameters. Generally the resulting marketplace status will be paginated. The default page length is 100 product variations per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search marketplace status by the productReference value of the related product variations
     *      - *category* - string - optional
     *          - search marketplace status by the category value of the related product variations
     *      - *brandId* - string - optional
     *          - search marketplace status by the brand ID value of the related product variations
     *      - *fromDate* - string - optional
     *          - search marketplace status for a time range starting with the given date (in ISO8601, like '2021-10-09T07:52:19.820Z' or '2021-10-09T07:52:19.820+01:00')
     *      - *page* - integer - optional
     *          - page to load
     *      - *limit* - integer - optional
     *          - proposed limit for the number of marketplace status per response page (at most 1000)
     *      - *marketPlaceStatus* - array - optional
     *          - only include items that match any of the provided status
     * @return array
     *      - *marketPlaceStatus* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function getV3ProductMarketPlaceStatusList(array $query = []): array
    {
        return $this->api(array_merge(["/v3/products/marketplace-status"], $query));
    }

    /**
     * @description Read your product variations prices. The total number of results could be limited by specifying query parameters. Generally the resulting product variations will be paginated. The default page length is 100 product variations per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search for product variations by their productReference value
     *      - *category* - string - optional
     *          - search for product variations by their category value
     *      - *brandId* - string - optional
     *          - search for product variations by their ID value
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of products per response page (at most 100)
     * @return Iterator
     *      - *variationPrices* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function eachV3ProductVariationPrices(array $query = []): Iterator
    {
        return $this->eachInternal('getV3ProductVariationPrices', func_get_args());
    }

    /**
     * @description Read your product variations prices. The total number of results could be limited by specifying query parameters. Generally the resulting product variations will be paginated. The default page length is 100 product variations per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search for product variations by their productReference value
     *      - *category* - string - optional
     *          - search for product variations by their category value
     *      - *brandId* - string - optional
     *          - search for product variations by their ID value
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of products per response page (at most 100)
     * @return Iterator
     *      - *variationPrices* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function batchV3ProductVariationPrices(array $query = []): Iterator
    {
        return $this->batchInternal('getV3ProductVariationPrices', func_get_args());
    }

    /**
     * @description Read your product variations prices. The total number of results could be limited by specifying query parameters. Generally the resulting product variations will be paginated. The default page length is 100 product variations per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param array $query
     *      - *sku* - string - optional
     *          - search for product variations by their sku value. Use this if your sku values contain slash ('/') or dot ('.') characters.
     *      - *productReference* - string - optional
     *          - search for product variations by their productReference value
     *      - *category* - string - optional
     *          - search for product variations by their category value
     *      - *brandId* - string - optional
     *          - search for product variations by their ID value
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of products per response page (at most 100)
     * @return array
     *      - *variationPrices* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function getV3ProductVariationPrices(array $query = []): array
    {
        return $this->api(array_merge(["/v3/products/prices"], $query));
    }

    /**
     * @description Update your product variation prices and get a process-id to query results. The limit for the number of product variation prices in one request is 500.
     * @tag Products-V3
     * @param array $data list of
     *      - *sku* - string
     *          - Partner-unique identifier for a product variation provided by the partner.
     *      - *standardPrice* -
     *      - *sale* -
     * @return array
     *      - *state* - string
     *          - the current state of the process
     *      - *message* - string
     *          - a human-readable message describing the current state of the process
     *      - *total* - integer
     *          - the total work to complete for this process
     *      - *progress* - integer
     *          - the fraction of work that is already completed, as compared to the total work
     *      - *succeeded* - integer
     *          - the number of successfully processed variations
     *      - *failed* - integer
     *          - the number of failed processed variations
     *      - *unchanged* - integer
     *          - the number of unchanged and not processed variations
     *      - *pingAfter* - string
     *          - recommendation when to poll this resource again to receive a meaningful update
     *      - *links* - array
     *          - a list of links that can be used to access detailed information about the process result
     */
    public function updateV3ProductVariationPrices(array $data): array
    {
        return $this->api("/v3/products/prices", 'POST', $data);
    }

    /**
     * @description The response will contain the links for the different parts of the result: products successfully created or updated, products with failures, products which did not contain any changes compared to the last sent version.
     * @tag Products-V3
     * @param string $processUuid search for a product data delivery result by its processUuid.
     * @return array
     *      - *state* - string
     *          - the current state of the process
     *      - *message* - string
     *          - a human-readable message describing the current state of the process
     *      - *total* - integer
     *          - the total work to complete for this process
     *      - *progress* - integer
     *          - the fraction of work that is already completed, as compared to the total work
     *      - *succeeded* - integer
     *          - the number of successfully processed variations
     *      - *failed* - integer
     *          - the number of failed processed variations
     *      - *unchanged* - integer
     *          - the number of unchanged and not processed variations
     *      - *pingAfter* - string
     *          - recommendation when to poll this resource again to receive a meaningful update
     *      - *links* - array
     *          - a list of links that can be used to access detailed information about the process result
     */
    public function getV3ProductProgressByProcessId(string $processUuid): array
    {
        return $this->api("/v3/products/update-tasks/{$processUuid}");
    }

    /**
     * @description Request the failed products of the product data delivery with the linked processUuid. The response will contain a list of failed products with associated error details.
     * @tag Products-V3
     * @param string $processUuid search for the failed products of a product data delivery identified by its processUuid.
     * @return array
     *      - *results* - array
     */
    public function getV3ProductFailedByProcessId(string $processUuid): array
    {
        return $this->api("/v3/products/update-tasks/{$processUuid}/failed");
    }

    /**
     * @description Request the succeeded products of the product data delivery with the linked processUuid. The response will contain a list of successfully delivered products.
     * @tag Products-V3
     * @param string $processUuid search for the succeeded products of a product data delivery identified by its processUuid.
     * @return array
     *      - *results* - array
     */
    public function getV3ProductSucceededByProcessId(string $processUuid): array
    {
        return $this->api("/v3/products/update-tasks/{$processUuid}/succeeded");
    }

    /**
     * @description Request the unchanged products of the product data delivery with the linked processUuid. The response will contain a list of unchanged products.
     * @tag Products-V3
     * @param string $processUuid search for the unchanged products of a product data delivery identified by its processUuid.
     * @return array
     *      - *results* - array
     */
    public function getV3ProductUnchangedByProcessId(string $processUuid): array
    {
        return $this->api("/v3/products/update-tasks/{$processUuid}/unchanged");
    }

    /**
     * @description Returns a single product variation by SKU.
     * @tag Products-V3
     * @param string $sku search for a product variation by its SKU value
     * @return array
     *      - *productReference* - string
     *          - The productReference groups all variations, that you want to combine into one product. This is not visible to the customer. The productReference can be freely assigned and may consist of maximum 50 characters. You can only use the productReference once within your product catalog. You should therefore use a value that makes sense for all variations of the product and does not refer to any specifics of a particular variation. You will find the product reference, for example, in the product overview in the portal.
     *      - *sku* - string
     *          - Identifier for a product variation, provided by the partner, must be unique for a partner. It is mandatory and may consist of a maximum of 50 characters.
     *      - *ean* - string
     *          - External identifier of a product, must be unique in a partner assortment, must not start with a 2.
     *      - *pzn* - string
     *          - Pharmazentralnummer, a german standard for identifying pharmaceutical products.
     *      - *mpn* - string
     *          - Manufacturer part number, may consist of a maximum of 50 characters.
     *      - *moin* - string
     *          - Is an identifier, generated by the OTTO marketplace, for a product variation together with the associated content. Is used in the context of "Wettbewerb am Artikel" to confirm the content of the existing variation and its correctness and to put the own offer live for this variation.
     *      - *releaseDate* - string
     *          - Date to which the product is released by the manufacturer, e.g. computer games.
     *      - *productDescription* -
     *      - *mediaAssets* - array
     *          - A list of media assets describing this product variation. Currently these may only be static images of the types JPG or PNG with a RGB color space. Furthermore the images have to have a minimum size of 500 x 1000 pixel and a maximum width of 4500 pixel.
     *      - *order* -
     *      - *delivery* -
     *      - *pricing* -
     *      - *logistics* -
     */
    public function getV3ProductVariation(string $sku): array
    {
        return $this->api("/v3/products/{$sku}");
    }

    /**
     * @description Returns active status of the requested product variation by SKU.
     * @tag Products-V3
     * @param string $sku search for a product variation by its SKU value
     * @return array
     *      - *sku* - string
     *          - Partner-unique identifier for a product variation provided by the partner
     *      - *active* - boolean
     *          - The product variation is supposed to be active or not
     *      - *lastModified* - string
     *          - the timestamp (GMT date and time) of the last modification of the active status
     */
    public function getV3ProductVariationActiveStatus(string $sku): array
    {
        return $this->api("/v3/products/{$sku}/active-status");
    }

    /**
     * @description Returns the content changes info for a single product variation within a specific time period. The resulting content changes will be paginated. The default page length is 100 entries per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param string $sku search for a product variation by its SKU value
     * @param array $query
     *      - *fromDate* - string - optional
     *          - search for content changes from this time on. The maxmimum and default value is 28 days before now. Future values can be specified, but lead to an empty result.
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of entries per response page (at most 100)
     * @return Iterator
     *      - *contentChanges* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function eachV3ProductContentChanges(string $sku, array $query = []): Iterator
    {
        return $this->eachInternal('getV3ProductContentChanges', func_get_args());
    }

    /**
     * @description Returns the content changes info for a single product variation within a specific time period. The resulting content changes will be paginated. The default page length is 100 entries per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param string $sku search for a product variation by its SKU value
     * @param array $query
     *      - *fromDate* - string - optional
     *          - search for content changes from this time on. The maxmimum and default value is 28 days before now. Future values can be specified, but lead to an empty result.
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of entries per response page (at most 100)
     * @return Iterator
     *      - *contentChanges* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function batchV3ProductContentChanges(string $sku, array $query = []): Iterator
    {
        return $this->batchInternal('getV3ProductContentChanges', func_get_args());
    }

    /**
     * @description Returns the content changes info for a single product variation within a specific time period. The resulting content changes will be paginated. The default page length is 100 entries per response, also the page size limit. The links specified in the result can be used to page through the total result space.
     * @tag Products-V3
     * @param string $sku search for a product variation by its SKU value
     * @param array $query
     *      - *fromDate* - string - optional
     *          - search for content changes from this time on. The maxmimum and default value is 28 days before now. Future values can be specified, but lead to an empty result.
     *      - *page* - integer - optional
     *          -
     *      - *limit* - integer - optional
     *          - proposed limit for the number of entries per response page (at most 100)
     * @return array
     *      - *contentChanges* - array
     *      - *links* - array
     *          - a list of links that can be used for pagination.
     */
    public function getV3ProductContentChanges(string $sku, array $query = []): array
    {
        return $this->api(array_merge(["/v3/products/{$sku}/content-changes"], $query));
    }

    /**
     * @description Returns marketplace status for a single product variation by SKU.
     * @tag Products-V3
     * @param string $sku search for a marketplace status by its SKU value
     * @return array
     *      - *sku* - string
     *          - Partner-unique identifier for a product variation provided by the partner
     *      - *moin* - string
     *          - Is an identifier, generated by the OTTO marketplace, for a product variation together with the associated content. Is used in the context of "Wettbewerb am Artikel" to confirm the content of the existing variation and its correctness and to put the own offer live for this variation.
     *      - *status* - string
     *          - the status of the variation on the OTTO market place
     *      - *errors* - array
     *          - errors that occurred when processing the variation
     *      - *information* - array
     *          - information for product optimization on the OTTO market place
     *      - *links* - array
     *          - contains the link to the partner variation data and to the product in OTTO shop
     *      - *lastModified* - string
     *          - last change of the marketplace status
     */
    public function getV3ProductMarketPlaceStatus(string $sku): array
    {
        return $this->api("/v3/products/{$sku}/marketplace-status");
    }

    /**
     * @description Read the price data of a single product variation.
     * @tag Products-V3
     * @param string $sku search for a product variation by its SKU value
     * @return array
     *      - *sku* - string
     *          - Partner-unique identifier for a product variation provided by the partner.
     *      - *standardPrice* -
     *      - *sale* -
     */
    public function getV3ProductVariationPrice(string $sku): array
    {
        return $this->api("/v3/products/{$sku}/prices");
    }

    /**
     * @description
     * @tag Quantities-V2
     * @param array $data list of availableQuantityRequestDTO
     *      - *lastModified* - string
     *          - The last modified date and time of available quantity as a ISO8601 format (yyyy-MM-dd'T'HH:mm:ss.SSSX). This date should not be neither in future nor older than previous lastModified value from partner. If it is future date/time, then it will lead to an error response. If it is older than previous lastModified value from partner, then the quantity update will be ignored. It is used to ensure the current status of the updated quantities.
     *      - *quantity* - integer
     *          - The available quantity of a specific SKU, which can be any integer value >= 0.
     *      - *sku* - string
     *          - StockKeepingUnit given by partner configuration. e.g. 'shirt-red-M', external identifier of article variation.
     * @return array|null
     */
    public function storeV2AvailableQuantities(array $data): ?array
    {
        return $this->api("/v2/quantities", 'POST', $data);
    }

    /**
     * @description Retrieve available quantities sorted by sku name in ascending.The maximum number of returned quantities is limited to 200.
     * @tag Quantities-V2
     * @param array $query
     *      - *limit* - integer - optional
     *          - The maximum number of available quantities to be returned in each response.
     *      - *page* - integer - optional
     *          - Page number (0..N)
     *      - *cursor* - string - optional
     *          - Cursor for paging requests. If a cursor is provided, the only other request parameter being considered is 'limit'. The cursor value is the last evaluted sku in the request response (Needs to be a valid sku value)
     * @return Iterator
     *      - *resources* - object
     *      - *links* - array
     *          - contains links to prev, self and next page url's
     */
    public function eachV2AvailableQuantities(array $query = []): Iterator
    {
        return $this->eachInternal('getV2AvailableQuantities', func_get_args());
    }

    /**
     * @description Retrieve available quantities sorted by sku name in ascending.The maximum number of returned quantities is limited to 200.
     * @tag Quantities-V2
     * @param array $query
     *      - *limit* - integer - optional
     *          - The maximum number of available quantities to be returned in each response.
     *      - *page* - integer - optional
     *          - Page number (0..N)
     *      - *cursor* - string - optional
     *          - Cursor for paging requests. If a cursor is provided, the only other request parameter being considered is 'limit'. The cursor value is the last evaluted sku in the request response (Needs to be a valid sku value)
     * @return Iterator
     *      - *resources* - object
     *      - *links* - array
     *          - contains links to prev, self and next page url's
     */
    public function batchV2AvailableQuantities(array $query = []): Iterator
    {
        return $this->batchInternal('getV2AvailableQuantities', func_get_args());
    }

    /**
     * @description Retrieve available quantities sorted by sku name in ascending.The maximum number of returned quantities is limited to 200.
     * @tag Quantities-V2
     * @param array $query
     *      - *limit* - integer - optional
     *          - The maximum number of available quantities to be returned in each response.
     *      - *page* - integer - optional
     *          - Page number (0..N)
     *      - *cursor* - string - optional
     *          - Cursor for paging requests. If a cursor is provided, the only other request parameter being considered is 'limit'. The cursor value is the last evaluted sku in the request response (Needs to be a valid sku value)
     * @return array
     *      - *resources* - object
     *      - *links* - array
     *          - contains links to prev, self and next page url's
     */
    public function getV2AvailableQuantities(array $query = []): array
    {
        return $this->api(array_merge(["/v2/quantities"], $query));
    }

    /**
     * @description Fetch a single available quantity by its unique sku name.
     * @tag Quantities-V2
     * @param string $sku The sku for the available quantity
     * @return array
     *      - *lastModified* - string
     *          - The last modified date and time of available quantity as a ISO8601 format (yyyy-MM-dd'T'HH:mm:ss.SSSX). This date should not be neither in future nor older than previous lastModified value from partner. If it is future date/time, then it will lead to an error response. If it is older than previous lastModified value from partner, then the quantity update will be ignored. It is used to ensure the current status of the updated quantities.
     *      - *quantity* - integer
     *          - The available quantity of a specific SKU, which can be any integer value >= 0.
     *      - *sku* - string
     *          - StockKeepingUnit given by partner configuration. e.g. 'shirt-red-M', external identifier of article variation.
     */
    public function getV2AvailableQuantityBySku(string $sku): array
    {
        return $this->api("/v2/quantities/{$sku}");
    }

    /**
     * @description Retrieve orders sorted by order date from oldest to newest. The number of returned orders is limited to 128; cursor based pagination is supported.
     * @tag Orders-V4
     * @param array $query
     *      - *fromDate* - string - optional
     *          - Defines earliest change date (ISO 8601) the returned orders should have
     *      - *fromOrderDate* - string - optional
     *          - Only orders newer than the date specified (ISO 8601) will be returned
     *      - *toOrderDate* - string - optional
     *          - Only orders older than the date specified (ISO 8601) will be returned
     *      - *fulfillmentStatus* - string - optional
     *          -
    ANNOUNCED: Orders with at least one position item in state ANNOUNCED
    PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED
    SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE
    RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT
    CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER
    CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE

    If no state is provided, orders in all possible states are returned.
    Several values can be passed; it will return a combination of these states without duplicates.
    Also see parameter 'mode'.
     *      - *limit* - integer - optional
     *          - The maximum amount of orders to return
     *      - *orderDirection* - string - optional
     *          - Sort result by 'orderColumnType' in ASCending or DESCending order
     *      - *orderColumnType* - string - optional
     *          - The column on which to apply 'orderDirection' parameter
     *      - *mode* - string - optional
     *          - In search mode AT_LEAST_ONE orders with at least one  position item in given 'fulfillmentStatus' will always be returned
     *      - *nextcursor* - string - optional
     *          - Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is 'limit'

    Note: Only the cursor string is required - not the whole link
     * @return Iterator
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     *      - *resources* - array
     *          - The list of queried resources. In this case partner orders.
     */
    public function eachV4Orders(array $query = []): Iterator
    {
        return $this->eachInternal('findV4Orders', func_get_args());
    }

    /**
     * @description Retrieve orders sorted by order date from oldest to newest. The number of returned orders is limited to 128; cursor based pagination is supported.
     * @tag Orders-V4
     * @param array $query
     *      - *fromDate* - string - optional
     *          - Defines earliest change date (ISO 8601) the returned orders should have
     *      - *fromOrderDate* - string - optional
     *          - Only orders newer than the date specified (ISO 8601) will be returned
     *      - *toOrderDate* - string - optional
     *          - Only orders older than the date specified (ISO 8601) will be returned
     *      - *fulfillmentStatus* - string - optional
     *          -
    ANNOUNCED: Orders with at least one position item in state ANNOUNCED
    PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED
    SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE
    RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT
    CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER
    CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE

    If no state is provided, orders in all possible states are returned.
    Several values can be passed; it will return a combination of these states without duplicates.
    Also see parameter 'mode'.
     *      - *limit* - integer - optional
     *          - The maximum amount of orders to return
     *      - *orderDirection* - string - optional
     *          - Sort result by 'orderColumnType' in ASCending or DESCending order
     *      - *orderColumnType* - string - optional
     *          - The column on which to apply 'orderDirection' parameter
     *      - *mode* - string - optional
     *          - In search mode AT_LEAST_ONE orders with at least one  position item in given 'fulfillmentStatus' will always be returned
     *      - *nextcursor* - string - optional
     *          - Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is 'limit'

    Note: Only the cursor string is required - not the whole link
     * @return Iterator
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     *      - *resources* - array
     *          - The list of queried resources. In this case partner orders.
     */
    public function batchV4Orders(array $query = []): Iterator
    {
        return $this->batchInternal('findV4Orders', func_get_args());
    }

    /**
     * @description Retrieve orders sorted by order date from oldest to newest. The number of returned orders is limited to 128; cursor based pagination is supported.
     * @tag Orders-V4
     * @param array $query
     *      - *fromDate* - string - optional
     *          - Defines earliest change date (ISO 8601) the returned orders should have
     *      - *fromOrderDate* - string - optional
     *          - Only orders newer than the date specified (ISO 8601) will be returned
     *      - *toOrderDate* - string - optional
     *          - Only orders older than the date specified (ISO 8601) will be returned
     *      - *fulfillmentStatus* - string - optional
     *          -
    ANNOUNCED: Orders with at least one position item in state ANNOUNCED
    PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED
    SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE
    RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT
    CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER
    CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE

    If no state is provided, orders in all possible states are returned.
    Several values can be passed; it will return a combination of these states without duplicates.
    Also see parameter 'mode'.
     *      - *limit* - integer - optional
     *          - The maximum amount of orders to return
     *      - *orderDirection* - string - optional
     *          - Sort result by 'orderColumnType' in ASCending or DESCending order
     *      - *orderColumnType* - string - optional
     *          - The column on which to apply 'orderDirection' parameter
     *      - *mode* - string - optional
     *          - In search mode AT_LEAST_ONE orders with at least one  position item in given 'fulfillmentStatus' will always be returned
     *      - *nextcursor* - string - optional
     *          - Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is 'limit'

    Note: Only the cursor string is required - not the whole link
     * @return array
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     *      - *resources* - array
     *          - The list of queried resources. In this case partner orders.
     */
    public function findV4Orders(array $query = []): array
    {
        return $this->api(array_merge(["/v4/orders"], $query));
    }

    /**
     * @description Fetch a single order by its unique order number.
     * @tag Orders-V4
     * @param string $orderNumber
     * @return array
     *      - *deliveryAddress* -
     *      - *initialDeliveryFees* - array
     *          - The delivery fees on customer checkout
     *      - *initialDiscounts* - array
     *          - The initial discounts on customer checkout
     *      - *invoiceAddress* -
     *      - *lastModifiedDate* - string
     *          - Last order update date
     *      - *links* - array
     *          - Order related links like the link to fetch the single partner order
     *      - *orderDate* - string
     *          - The date, when this order has been placed
     *      - *orderLifecycleInformation* -
     *      - *orderNumber* - string
     *          - The order number. An unique human readable 10 character(alphanumeric) identifier referring to this order
     *      - *payment* -
     *      - *positionItems* - array
     *          - The physical position items of this order. Multiple position item can refer to the same product
     *      - *salesOrderId* - string
     *          - The id of the corresponding sales order. For one partner the sales order id is unique
     */
    public function getV4OrderByOrderNumber(string $orderNumber): array
    {
        return $this->api("/v4/orders/{$orderNumber}");
    }

    /**
     * @description Fetch a single order by its unique sales order id.
     * @tag Orders-V4
     * @param string $salesOrderId
     * @return array
     *      - *deliveryAddress* -
     *      - *initialDeliveryFees* - array
     *          - The delivery fees on customer checkout
     *      - *initialDiscounts* - array
     *          - The initial discounts on customer checkout
     *      - *invoiceAddress* -
     *      - *lastModifiedDate* - string
     *          - Last order update date
     *      - *links* - array
     *          - Order related links like the link to fetch the single partner order
     *      - *orderDate* - string
     *          - The date, when this order has been placed
     *      - *orderLifecycleInformation* -
     *      - *orderNumber* - string
     *          - The order number. An unique human readable 10 character(alphanumeric) identifier referring to this order
     *      - *payment* -
     *      - *positionItems* - array
     *          - The physical position items of this order. Multiple position item can refer to the same product
     *      - *salesOrderId* - string
     *          - The id of the corresponding sales order. For one partner the sales order id is unique
     */
    public function getV4OrderBySalesOrderId(string $salesOrderId): array
    {
        return $this->api("/v4/orders/{$salesOrderId}");
    }

    /**
     * @description Allows to cancel all position items of one or more orders by salesOrderId.<br>Note: Only position items in state PROCESSABLE can be cancelled. Position items in different states will be ignored. If no position item can be cancelled the operation will respond with a conflict error message.
     * @tag Orders-V4
     * @param string $salesOrderId The salesOrderIds of the orders to cancel
     */
    public function cancelV4Order(string $salesOrderId): void
    {
        $this->api("/v4/orders/{$salesOrderId}/cancellation", 'POST');
    }

    /**
     * @description Allows to cancel specific position items of an order by salesOrderId and positionItemIds.<br>Note: Only position items in state PROCESSABLE can be cancelled. Position items in state CANCELLED_BY_PARTNER will be ignored. If any position item is in a different state the operation will leave the whole order unchanged and respond with a conflict error message.
     * @tag Orders-V4
     * @param string $salesOrderId The salesOrderId of the order
     * @param string $positionItemIds The positionItemIds of the order to cancel
     */
    public function cancelV4OrderPositionItems(string $salesOrderId, string $positionItemIds): void
    {
        $this->api("/v4/orders/{$salesOrderId}/positionItems/{$positionItemIds}/cancellation", 'POST');
    }

    /**
     * @description This endpoint can be used to retrieve the returned shipments for a given authorized partner.
     * @tag ReturnShipments-V1
     * @param array $query
     *      - *datefrom* - string - required
     *          - ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC.
     *      - *limit* - integer - optional
     *          - The maximum number of returnShipments to be returned in each response.
     *      - *next* - string - optional
     *          - The cursor which points to the next returnShipment that should be queried. It is used to paginate the results.
     * @return Iterator
     *      - *links* - array
     *          - Contains one single link, which can be used as pointer for Cursor-based pagination.
     *      - *resources* - array
     */
    public function eachV1ReturnShipments(array $query): Iterator
    {
        return $this->eachInternal('listV1ReturnShipments', func_get_args());
    }

    /**
     * @description This endpoint can be used to retrieve the returned shipments for a given authorized partner.
     * @tag ReturnShipments-V1
     * @param array $query
     *      - *datefrom* - string - required
     *          - ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC.
     *      - *limit* - integer - optional
     *          - The maximum number of returnShipments to be returned in each response.
     *      - *next* - string - optional
     *          - The cursor which points to the next returnShipment that should be queried. It is used to paginate the results.
     * @return Iterator
     *      - *links* - array
     *          - Contains one single link, which can be used as pointer for Cursor-based pagination.
     *      - *resources* - array
     */
    public function batchV1ReturnShipments(array $query): Iterator
    {
        return $this->batchInternal('listV1ReturnShipments', func_get_args());
    }

    /**
     * @description This endpoint can be used to retrieve the returned shipments for a given authorized partner.
     * @tag ReturnShipments-V1
     * @param array $query
     *      - *datefrom* - string - required
     *          - ReturnShipments which are announced after this date or had an status update after this date will be returned for the partner which is determined from the authorization token. The date is considered as UTC.
     *      - *limit* - integer - optional
     *          - The maximum number of returnShipments to be returned in each response.
     *      - *next* - string - optional
     *          - The cursor which points to the next returnShipment that should be queried. It is used to paginate the results.
     * @return array
     *      - *links* - array
     *          - Contains one single link, which can be used as pointer for Cursor-based pagination.
     *      - *resources* - array
     */
    public function listV1ReturnShipments(array $query): array
    {
        return $this->api(array_merge(["/v1/return-shipments"], $query));
    }

    /**
     * @description This endpoint can be used to retrieve a returned shipment by carrier and tracking number.
     * @tag ReturnShipments-V1
     * @param string $carrier The carrier of the returnShipment.
     * @param string $trackingNumber The tracking number of the returnShipment assigned by the carrier.
     * @return array
     *      - *returnShipmentId* - string
     *          - Internal returnShipment identifier assigned by OTTO Market.
     *      - *createdAt* - string
     *      - *trackingKey* -
     *      - *returnPositionItems* - array
     *          - The position items included in the returnShipment.
     *      - *states* - array
     *          - The history of tracking states of the returnShipment
     */
    public function getV1ReturnShipmentByCarrierAndTrackingNumber(string $carrier, string $trackingNumber): array
    {
        return $this->api("/v1/return-shipments/carriers/{$carrier}/trackingnumbers/{$trackingNumber}");
    }

    /**
     * @description This endpoint can be used to retrieve a returned shipment by OTTO internal returnShipment ID.
     * @tag ReturnShipments-V1
     * @param string $returnShipmentId Internal return shipment identifier assigned by OTTO Market.
     * @return array
     *      - *returnShipmentId* - string
     *          - Internal returnShipment identifier assigned by OTTO Market.
     *      - *createdAt* - string
     *      - *trackingKey* -
     *      - *returnPositionItems* - array
     *          - The position items included in the returnShipment.
     *      - *states* - array
     *          - The history of tracking states of the returnShipment
     */
    public function getV1ReturnShipment(string $returnShipmentId): array
    {
        return $this->api("/v1/return-shipments/{$returnShipmentId}");
    }

    /**
     * @description This endpoint should be used to create a shipment with a list of position items. It confirms that the position items in the list have been handed over to the carrier for final delivery to the customer. At this point, the position items are marked with the state ''SENT'' in OTTO Market. This is the trigger for the generation of a purchase receipt.
     * @tag Shipments-V1
     * @param array $data request
     *      - *trackingKey* -
     *      - *shipDate* - string
     *          - The date that the shipment is handed over to the carrier. Must be a valid UTC dateTime according to ISO 8601.
     *      - *shipFromAddress* -
     *      - *positionItems* - array
     *          - The position items included in shipment.
     * @return array
     *      - *shipmentId* - string
     *          - Internal shipment identifier assigned by OTTO Market.
     */
    public function createdAndSentV1Shipment(array $data): array
    {
        return $this->api("/v1/shipments", 'POST', $data);
    }

    /**
     * @description This endpoint can be used to retrieve the shipments for a given authorized partner.
     * @tag Shipments-V1
     * @param array $query
     *      - *datefrom* - string - required
     *          - Shipments created from this date onwards for the given authorized partner will be returned. Can be specified as either an ISO date (`YYYY-MM-DD`), which will be inferred to be in UTC time, or an ISO date time (`YYYY-MM-DD'T'HH:mm:ss.SSSXXX`).

    For example, `2024-01-10` would be interpreted the same as `2024-01-10T00:00:00Z`.
     *      - *limit* - integer - optional
     *          - The maximum number of shipments to be returned in each response.
     *      - *next* - string - optional
     *          - The cursor which points to the next shipment that should be queried. It is used to paginate the results.
     * @return Iterator
     *      - *links* - array
     *          - Contains one single link, which can be used as pointer for Cursor-based pagination.
     *      - *resources* - array
     */
    public function eachV1Shipments(array $query): Iterator
    {
        return $this->eachInternal('listV1Shipments', func_get_args());
    }

    /**
     * @description This endpoint can be used to retrieve the shipments for a given authorized partner.
     * @tag Shipments-V1
     * @param array $query
     *      - *datefrom* - string - required
     *          - Shipments created from this date onwards for the given authorized partner will be returned. Can be specified as either an ISO date (`YYYY-MM-DD`), which will be inferred to be in UTC time, or an ISO date time (`YYYY-MM-DD'T'HH:mm:ss.SSSXXX`).

    For example, `2024-01-10` would be interpreted the same as `2024-01-10T00:00:00Z`.
     *      - *limit* - integer - optional
     *          - The maximum number of shipments to be returned in each response.
     *      - *next* - string - optional
     *          - The cursor which points to the next shipment that should be queried. It is used to paginate the results.
     * @return Iterator
     *      - *links* - array
     *          - Contains one single link, which can be used as pointer for Cursor-based pagination.
     *      - *resources* - array
     */
    public function batchV1Shipments(array $query): Iterator
    {
        return $this->batchInternal('listV1Shipments', func_get_args());
    }

    /**
     * @description This endpoint can be used to retrieve the shipments for a given authorized partner.
     * @tag Shipments-V1
     * @param array $query
     *      - *datefrom* - string - required
     *          - Shipments created from this date onwards for the given authorized partner will be returned. Can be specified as either an ISO date (`YYYY-MM-DD`), which will be inferred to be in UTC time, or an ISO date time (`YYYY-MM-DD'T'HH:mm:ss.SSSXXX`).

    For example, `2024-01-10` would be interpreted the same as `2024-01-10T00:00:00Z`.
     *      - *limit* - integer - optional
     *          - The maximum number of shipments to be returned in each response.
     *      - *next* - string - optional
     *          - The cursor which points to the next shipment that should be queried. It is used to paginate the results.
     * @return array
     *      - *links* - array
     *          - Contains one single link, which can be used as pointer for Cursor-based pagination.
     *      - *resources* - array
     */
    public function listV1Shipments(array $query): array
    {
        return $this->api(array_merge(["/v1/shipments"], $query));
    }

    /**
     * @description This endpoint can be used to retrieve a shipment by carrier and tracking number.
     * @tag Shipments-V1
     * @param string $carrier The carrier of the shipment.
     * @param string $trackingNumber The tracking number of the shipment assigned by the carrier.
     * @return array
     *      - *shipmentId* - string
     *          - Internal shipment identifier assigned by OTTO Market.
     *      - *creationDate* - string
     *      - *trackingKey* -
     *      - *shipDate* - string
     *      - *shipFromAddress* -
     *      - *positionItems* - array
     *          - The position items included in the shipment.
     *      - *states* - array
     *          - The history of tracking states of the shipment
     */
    public function getV1ShipmentByCarrierAndTrackingNumber(string $carrier, string $trackingNumber): array
    {
        return $this->api("/v1/shipments/carriers/{$carrier}/trackingnumbers/{$trackingNumber}");
    }

    /**
     * @description This endpoint can be used to retrieve a shipment by OTTO internal shipment ID.
     * @tag Shipments-V1
     * @param string $shipmentId Internal shipment identifier assigned by OTTO Market.
     * @return array
     *      - *shipmentId* - string
     *          - Internal shipment identifier assigned by OTTO Market.
     *      - *creationDate* - string
     *      - *trackingKey* -
     *      - *shipDate* - string
     *      - *shipFromAddress* -
     *      - *positionItems* - array
     *          - The position items included in the shipment.
     *      - *states* - array
     *          - The history of tracking states of the shipment
     */
    public function getV1Shipment(string $shipmentId): array
    {
        return $this->api("/v1/shipments/{$shipmentId}");
    }

    /**
     * @description This endpoint allows to update an existing shipment with new position items. Note that this is just a correction process for shipments where position items are missing. A separate purchase receipt will be generated for the newly added position items.
     * @tag Shipments-V1
     * @param string $carrier The carrier of the shipment.
     * @param string $trackingNumber The tracking number of the shipment assigned by the carrier.
     * @param array $data list of The position items included in shipment.
     *      - *positionItemId* - string
     *          - The ID of a position item of the sales order from the OTTO Market, as defined in the Order API.
     *      - *salesOrderId* - string
     *          - The ID of the sales order from the OTTO Market, as defined in the Order API.
     *      - *returnTrackingKey* -
     */
    public function appendV1ShipmentPositionItemsByCarrierAndTrackingNumber(string $carrier, string $trackingNumber, array $data): void
    {
        $this->api("/v1/shipments/carriers/{$carrier}/trackingnumbers/{$trackingNumber}/positionitems", 'POST', $data);
    }

    /**
     * @description This endpoint allows to update an existing shipment with new position items. Note that this is just a correction process for shipments where position items are missing. A separate purchase receipt will be generated for the newly added position items.
     * @tag Shipments-V1
     * @param string $shipmentId Internal shipment identifier assigned by OTTO Market.
     * @param array $data list of positionItems
     *      - *positionItemId* - string
     *          - The ID of a position item of the sales order from the OTTO Market, as defined in the Order API.
     *      - *salesOrderId* - string
     *          - The ID of the sales order from the OTTO Market, as defined in the Order API.
     *      - *returnTrackingKey* -
     */
    public function appendV1ShipmentPositionItems(string $shipmentId, array $data): void
    {
        $this->api("/v1/shipments/{$shipmentId}/positionitems", 'POST', $data);
    }

    /**
     * @description This endpoint should be used to create a multiparcel shipment with a list of parcels for one position item. A shipment is a "multiparcel shipment" if one article (position item) is sent in several different shipments. Multiparcel shipments can be created for parcel deliveries where each shipment has its own tracking key. It confirms that the position item in the list has been handed over to the carrier for final delivery to the customer. At this point, the position item is marked with the state ''SENT'' in OTTO Market. This is the trigger for the generation of a purchase receipt.
     * @tag Shipments-V1
     * @param array $data request
     * @return array
     *      - *multiParcelShipmentId* - string
     *          - Internal multiparcel shipment identifier assigned by OTTO Market.
     */
    public function createdAndSentV1MultiparcelShipment(array $data): array
    {
        return $this->api("/v1/multiparcel-shipments", 'POST', $data);
    }

    /**
     * @description The items will be sorted on status modified time in reverse chronological order. Additionally we provide cursor based pagination via next link. This endpoint is limited to at max 50 results per page
     * @tag Returns-V2
     * @param array $query
     *      - *limit* - integer - optional
     *          - Page size to limit the number of items returned in the response. Maximum value for limit can 50
     *      - *page* - integer - optional
     *          - Page number to fetch. This parameter is required to fetch data for specific page number
     *      - *status* - string - optional
     *          - Return status for which items are being queried for (case-insensitive)
     * @return Iterator
     *      - *positionItems* - array
     *          - The list of queried items.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function eachV2ReturnPositionItems(array $query = []): Iterator
    {
        return $this->eachInternal('getV2ReturnPositionItems', func_get_args());
    }

    /**
     * @description The items will be sorted on status modified time in reverse chronological order. Additionally we provide cursor based pagination via next link. This endpoint is limited to at max 50 results per page
     * @tag Returns-V2
     * @param array $query
     *      - *limit* - integer - optional
     *          - Page size to limit the number of items returned in the response. Maximum value for limit can 50
     *      - *page* - integer - optional
     *          - Page number to fetch. This parameter is required to fetch data for specific page number
     *      - *status* - string - optional
     *          - Return status for which items are being queried for (case-insensitive)
     * @return Iterator
     *      - *positionItems* - array
     *          - The list of queried items.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function batchV2ReturnPositionItems(array $query = []): Iterator
    {
        return $this->batchInternal('getV2ReturnPositionItems', func_get_args());
    }

    /**
     * @description The items will be sorted on status modified time in reverse chronological order. Additionally we provide cursor based pagination via next link. This endpoint is limited to at max 50 results per page
     * @tag Returns-V2
     * @param array $query
     *      - *limit* - integer - optional
     *          - Page size to limit the number of items returned in the response. Maximum value for limit can 50
     *      - *page* - integer - optional
     *          - Page number to fetch. This parameter is required to fetch data for specific page number
     *      - *status* - string - optional
     *          - Return status for which items are being queried for (case-insensitive)
     * @return array
     *      - *positionItems* - array
     *          - The list of queried items.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function getV2ReturnPositionItems(array $query = []): array
    {
        return $this->api(array_merge(["/v2/returns"], $query));
    }

    /**
     * @description
     * @tag Returns-V2
     * @param array $data acceptedPartnerReturn
     *      - *positionItems* - array
     *          - List of all the items received from partner
     */
    public function receiveV2AcceptedReturn(array $data): void
    {
        $this->api("/v2/returns/acceptance", 'POST', $data);
    }

    /**
     * @description
     * @tag Returns-V2
     * @param array $data rejectedPartnerReturn
     *      - *positionItems* - array
     *          - List of all the items received from partner
     */
    public function receiveV2RejectedReturn(array $data): void
    {
        $this->api("/v2/returns/rejection", 'POST', $data);
    }

    /**
     * @description The items will be sorted on status modified time in reverse chronological order. Additionally we provide cursor based pagination via next link. This endpoint is limited to at max 50 results per page
     * @tag Returns-V3
     * @param array $query
     *      - *limit* - integer - optional
     *          - Page size to limit the number of items returned in the response. Maximum value for limit can 50
     *      - *page* - integer - optional
     *          - Page number to fetch. This parameter is required to fetch data for specific page number
     *      - *status* - string - optional
     *          - Return status for which items are being queried for (case-insensitive)
     * @return Iterator
     *      - *positionItems* - array
     *          - The list of queried items.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function eachV3ReturnPositionItems(array $query = []): Iterator
    {
        return $this->eachInternal('getV3ReturnPositionItems', func_get_args());
    }

    /**
     * @description The items will be sorted on status modified time in reverse chronological order. Additionally we provide cursor based pagination via next link. This endpoint is limited to at max 50 results per page
     * @tag Returns-V3
     * @param array $query
     *      - *limit* - integer - optional
     *          - Page size to limit the number of items returned in the response. Maximum value for limit can 50
     *      - *page* - integer - optional
     *          - Page number to fetch. This parameter is required to fetch data for specific page number
     *      - *status* - string - optional
     *          - Return status for which items are being queried for (case-insensitive)
     * @return Iterator
     *      - *positionItems* - array
     *          - The list of queried items.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function batchV3ReturnPositionItems(array $query = []): Iterator
    {
        return $this->batchInternal('getV3ReturnPositionItems', func_get_args());
    }

    /**
     * @description The items will be sorted on status modified time in reverse chronological order. Additionally we provide cursor based pagination via next link. This endpoint is limited to at max 50 results per page
     * @tag Returns-V3
     * @param array $query
     *      - *limit* - integer - optional
     *          - Page size to limit the number of items returned in the response. Maximum value for limit can 50
     *      - *page* - integer - optional
     *          - Page number to fetch. This parameter is required to fetch data for specific page number
     *      - *status* - string - optional
     *          - Return status for which items are being queried for (case-insensitive)
     * @return array
     *      - *positionItems* - array
     *          - The list of queried items.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function getV3ReturnPositionItems(array $query = []): array
    {
        return $this->api(array_merge(["/v3/returns"], $query));
    }

    /**
     * @description
     * @tag Returns-V3
     * @param array $data acceptedPartnerReturn
     *      - *positionItems* - array
     *          - List of all the items received from partner
     */
    public function receiveV3AcceptedReturn(array $data): void
    {
        $this->api("/v3/returns/acceptance", 'POST', $data);
    }

    /**
     * @description
     * @tag Returns-V3
     * @param array $data rejectedPartnerReturn
     *      - *positionItems* - array
     *          - List of all the items received from partner
     */
    public function receiveV3RejectedReturn(array $data): void
    {
        $this->api("/v3/returns/rejection", 'POST', $data);
    }

    /**
     * @description
     * @tag Receipts-V3
     * @param string $receiptNumber ReceiptNumber
     * @return string
     */
    public function getV3ReceiptPdf(string $receiptNumber): string
    {
        return $this->api("/v3/receipts/{$receiptNumber}.pdf");
    }

    /**
     * @description
     * @tag Receipts-V3
     * @param string $receiptNumber ReceiptNumber
     * @return array
     *      - *receiptType* - string
     *          - Categorisation that classifies the receipts according to the main characteristics

    ATTENTION: In previous version the information was called type

     *      - *isRealReceipt* - boolean
     *          -    Counterpart to the sentence "Dies ist kein Beleg/keine Rechnung im Sinne des Umsatzsteuergesetzes und berechtigt nicht zum Vorsteuerabzug." on pdf document.
     * Set to **true** since real customer invoices/refunds for shipments to locations in domestic tax territory are created.
     * Set to **false** for technical receipts not visible to customer or on receipts with delivery addresses on Helgoland or in Büsingen

     *      - *receiptNumber* - string
     *          - Human readable identifier of a receipt known by customer. </br> Guaranteed to be unique per partner
     *      - *creationDate* - string
     *          - Date when receipt is created by system (UTC in ISO-8601 format)
     *      - *salesOrderId* - string
     *          - Technical identifier of corresponding sales order
     *      - *orderNumber* - string
     *          - Order number of corresponding sales order
     *      - *orderDate* - string
     *          - Order date of corresponding sales order (UTC in ISO-8601 format)
     *      - *shipmentDate* - string
     *          - Date when physical items of this receipt were handed over to the carrier to be delivered to the customer (UTC in ISO-8601 format).</br>Only available on receipts of receiptType PURCHASE.
     *      - *shipment* -
     *      - *linkedReceiptNumber* - string
     *          - Human-readable identifier of linked receipt.</br> In case of receiptType PARTIAL_REFUND or REFUND it is the receiptINumber of purchase receipt.

    ATTENTION: In previous version the information was called originalReceiptNumber
     *      - *linkedCreationDate* - string
     *          - Creation date of linked receipt (UTC in ISO-8601 format).</br>Only available if there is a linked receipt.

    ATTENTION: In previous version the information was called originalCreatedDate
     *      - *payment* -
     *      - *partner* -
     *      - *customer* -
     *      - *deliveryAddress* -
     *      - *lineItems* -
     *      - *totals* - array
     *          - Total amounts of receipt per tax type and tax rate
     *      - *refundType* - string
     *          - Describes the business case of a refund. Has an impact on the business flow and the PDF texts.
    </br>Only available on receipts of receiptType REFUND and not reliable provided on older partial refunds receipts.

    The following refundTypes are possible:
     * **RETURN** - Refund due to a return
     * **CANCELLATION** - Refund of delivery fees due to a cancellation

     *      - *partialRefundType* - string
     *          - Business case of partial refund chosen by partner. Has an impact on the business flow and the PDF.
    </br>Only available on receipts of receiptType PARTIAL_REFUND and not reliable provides on older partial refunds receipts.

    Possible values:
     * **REFUND_COMPLAINT_ITEM** - Refund because of justified customer complaint on item
     * **REFUND_PAYPAL_DISPUTE** - Partial or full amount of item price was refunded due to a dispute in Paypal payment
     * **REFUND_ESCALATION** - Partial amount of item price was refunded due to an escalation
     *      - *amountDue* -
     *          - The amountDue documents the gross amount a customer still has to pay or will be refunded respectively owes less (the latter decision depends on the chosen payment method) with this receipt.
    </br>As in case of receiptType PURCHASE and a prepaid payment method we know for sure that the customer has already paid in advance, so the amount is 0 € otherwise the content is identically with totalsGrossAmount
     *      - *totalsGrossAmount* -
     *          - Gross amounts of totals summed up over all prices. Only available on receipts of receiptType PURCHASE
     *      - *totalsReductions* - array
     *          - Reduction amounts on total value of receipts (currently it includes voucher reduction)
     */
    public function getV3Receipt(string $receiptNumber): array
    {
        return $this->api("/v3/receipts/{$receiptNumber}");
    }

    /**
     * @description The receipts will be sorted based on creationDate, latest one comes first. This endpoint is limited to at max 128 results per page
     * @tag Receipts-V3
     * @param array $query
     *      - *limit* - integer - optional
     *          - Page size to limit the number of receipts returned in the response
     *      - *page* - integer - optional
     *          - Page number to fetch. This parameter is required to fetch data for specific page number.
    </br>This field is deprecated, please use `next` parameter
     *      - *receiptTypes* - array - optional
     *          - Search for receipts filtered by multiple receipt types
     *      - *from* - string - optional
     *          - Search for receipts to filter starting from (yyyy-mm-dd)
     *      - *to* - string - optional
     *          - Search for receipts to filter until (yyyy-mm-dd)
     *      - *salesOrderId* - string - optional
     *          - Search for receipts filtered by sales order Id
     *      - *next* - string - optional
     *          - Cursor to fetch next receipts
     * @return Iterator
     *      - *resources* - array
     *          - The list of queried resources. In this case partner receipts.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function eachV3Receipts(array $query = []): Iterator
    {
        return $this->eachInternal('getV3Receipts', func_get_args());
    }

    /**
     * @description The receipts will be sorted based on creationDate, latest one comes first. This endpoint is limited to at max 128 results per page
     * @tag Receipts-V3
     * @param array $query
     *      - *limit* - integer - optional
     *          - Page size to limit the number of receipts returned in the response
     *      - *page* - integer - optional
     *          - Page number to fetch. This parameter is required to fetch data for specific page number.
    </br>This field is deprecated, please use `next` parameter
     *      - *receiptTypes* - array - optional
     *          - Search for receipts filtered by multiple receipt types
     *      - *from* - string - optional
     *          - Search for receipts to filter starting from (yyyy-mm-dd)
     *      - *to* - string - optional
     *          - Search for receipts to filter until (yyyy-mm-dd)
     *      - *salesOrderId* - string - optional
     *          - Search for receipts filtered by sales order Id
     *      - *next* - string - optional
     *          - Cursor to fetch next receipts
     * @return Iterator
     *      - *resources* - array
     *          - The list of queried resources. In this case partner receipts.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function batchV3Receipts(array $query = []): Iterator
    {
        return $this->batchInternal('getV3Receipts', func_get_args());
    }

    /**
     * @description The receipts will be sorted based on creationDate, latest one comes first. This endpoint is limited to at max 128 results per page
     * @tag Receipts-V3
     * @param array $query
     *      - *limit* - integer - optional
     *          - Page size to limit the number of receipts returned in the response
     *      - *page* - integer - optional
     *          - Page number to fetch. This parameter is required to fetch data for specific page number.
    </br>This field is deprecated, please use `next` parameter
     *      - *receiptTypes* - array - optional
     *          - Search for receipts filtered by multiple receipt types
     *      - *from* - string - optional
     *          - Search for receipts to filter starting from (yyyy-mm-dd)
     *      - *to* - string - optional
     *          - Search for receipts to filter until (yyyy-mm-dd)
     *      - *salesOrderId* - string - optional
     *          - Search for receipts filtered by sales order Id
     *      - *next* - string - optional
     *          - Cursor to fetch next receipts
     * @return array
     *      - *resources* - array
     *          - The list of queried resources. In this case partner receipts.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function getV3Receipts(array $query = []): array
    {
        return $this->api(array_merge(["/v3/receipts"], $query));
    }

    /**
     * @description This API can be used to fetch the price reduction for a single positionItemId by providing positionId as a query parameter in the request. If the positionItemId is not specified, then this api would list the price reductions for all your products.
     * @tag Price-Reductions-V1
     * @param array $query
     *      - *positionItemId* - string - optional
     *          - positionItemId for which price reductions are to be fetched
     *      - *page* - integer - optional
     *          - Page number to be fetched. Page number should not be less than 1
     *      - *limit* - integer - optional
     *          - Number of positionItemIds to be fetched per page. Limit should not exceed 128
     * @return Iterator
     *      - *results* - array
     *          - The list of queried resources. In this case partner reductions.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function eachV1PriceAllReductions(array $query = []): Iterator
    {
        return $this->eachInternal('getV1PriceAllReductions', func_get_args());
    }

    /**
     * @description This API can be used to fetch the price reduction for a single positionItemId by providing positionId as a query parameter in the request. If the positionItemId is not specified, then this api would list the price reductions for all your products.
     * @tag Price-Reductions-V1
     * @param array $query
     *      - *positionItemId* - string - optional
     *          - positionItemId for which price reductions are to be fetched
     *      - *page* - integer - optional
     *          - Page number to be fetched. Page number should not be less than 1
     *      - *limit* - integer - optional
     *          - Number of positionItemIds to be fetched per page. Limit should not exceed 128
     * @return Iterator
     *      - *results* - array
     *          - The list of queried resources. In this case partner reductions.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function batchV1PriceAllReductions(array $query = []): Iterator
    {
        return $this->batchInternal('getV1PriceAllReductions', func_get_args());
    }

    /**
     * @description This API can be used to fetch the price reduction for a single positionItemId by providing positionId as a query parameter in the request. If the positionItemId is not specified, then this api would list the price reductions for all your products.
     * @tag Price-Reductions-V1
     * @param array $query
     *      - *positionItemId* - string - optional
     *          - positionItemId for which price reductions are to be fetched
     *      - *page* - integer - optional
     *          - Page number to be fetched. Page number should not be less than 1
     *      - *limit* - integer - optional
     *          - Number of positionItemIds to be fetched per page. Limit should not exceed 128
     * @return array
     *      - *results* - array
     *          - The list of queried resources. In this case partner reductions.
     *      - *links* - array
     *          - Links related to the list. E.g. the link to the successive list used during paging.
     */
    public function getV1PriceAllReductions(array $query = []): array
    {
        return $this->api(array_merge(["/v1/price-reductions"], $query));
    }

    /**
     * @description Apply price reduction on a positionItemId
     * @tag Price-Reductions-V1
     * @param array $data
     *      - *positionItemId* - string
     *      - *salesOrderId* - string
     *      - *priceReduction* -
     *          - The price reduction amount to be applied on the positionItemId.
     * @return array
     *      - *results* -
     */
    public function applyV1PriceReduction(array $data): array
    {
        return $this->api("/v1/price-reductions", 'POST', $data);
    }

}
