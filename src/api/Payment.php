<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Payment extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Create a name of a property type
     * @tag Payment
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the name of the property type
     *      - *typeId* - integer
     *          - The ID of the property type
     *      - *lang* - string
     *          - The language of the name of the property type
     *      - *name* - string
     *          - The name of the property type
     */
    public function createPaymentPropertiesTypesName(array $data): array
    {
        return $this->api("/rest/payment/properties/types/names", 'POST', $data);
    }
                
    /**
     * @description Update a name of a property type
     * @tag Payment
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the name of the property type
     *      - *typeId* - integer
     *          - The ID of the property type
     *      - *lang* - string
     *          - The language of the name of the property type
     *      - *name* - string
     *          - The name of the property type
     */
    public function updatePaymentPropertiesTypesName(array $data): array
    {
        return $this->api("/rest/payment/properties/types/names", 'PUT', $data);
    }
                    
    /**
     * @description List names of property types in the specified language or German if none is specified.
     * @tag Payment
     * @param int $lang 
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentPropertiesTypesNamesLangByLang(int $lang, array $query = []): array
    {
        return $this->api(array_merge(["/rest/payment/properties/types/names/{$lang}"], $query));
    }
                    
    /**
     * @description Gets a name of a property type. The ID of the name must be specified.
     * @tag Payment
     * @param int $nameId 
     * @return array
     */
    public function getPaymentPropertiesTypesNameByNameId(int $nameId): array
    {
        return $this->api("/rest/payment/properties/types/names/{$nameId}");
    }
                    
    /**
     * @description Delete a Payment-Contact-Relation specified by a paymentId.
     * @tag Payment
     * @param int $paymentId 
     */
    public function deletePaymentContactByPaymentId(int $paymentId)
    {
        return $this->api("/rest/payment/{$paymentId}/contact", 'DELETE');
    }
                    
    /**
     * @description Creates a Payment-Contact-Relation specified by a paymentId and contactId.
     * @tag Payment
     * @param int $paymentId 
     * @param int $contactId 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment order relation
     *      - *paymentId* - integer
     *          - The ID of the payment
     *      - *contactId* - integer
     *          - The ID of the contact
     *      - *assignedAt* - string
     *          - The time the payment contact relation was assigned
     */
    public function createPaymentContactByPaymentIdContactId(int $paymentId, int $contactId): array
    {
        return $this->api("/rest/payment/{$paymentId}/contact/{$contactId}", 'POST');
    }
                    
    /**
     * @description Deletes a Payment-Order-Relation specified by a paymentId.
     * @tag Payment
     * @param int $paymentId 
     */
    public function deletePaymentOrderByPaymentId(int $paymentId)
    {
        return $this->api("/rest/payment/{$paymentId}/order", 'DELETE');
    }
                    
    /**
     * @description Create a new order relation with validation by orderId and paymentId.
     * @tag Payment
     * @param int $paymentId 
     * @param int $invoiceNumber 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment order relation
     *      - *paymentId* - integer
     *          - The ID of the payment
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *assignedAt* - string
     *          - The time the payment order relation was assigned
     */
    public function createPaymentOrderInvoiceByPaymentIdInvoiceNumber(int $paymentId, int $invoiceNumber): array
    {
        return $this->api("/rest/payment/{$paymentId}/order/{$invoiceNumber}/invoice", 'POST');
    }
                    
    /**
     * @description Creates a Payment-Order-Relation specified by paymentId and orderId.
     * @tag Payment
     * @param int $paymentId 
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment order relation
     *      - *paymentId* - integer
     *          - The ID of the payment
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *assignedAt* - string
     *          - The time the payment order relation was assigned
     */
    public function createPaymentOrderByPaymentIdOrderId(int $paymentId, int $orderId): array
    {
        return $this->api("/rest/payment/{$paymentId}/order/{$orderId}", 'POST');
    }
                    
    /**
     * @description Create a new order relation with validation by orderId and paymentId.
     * @tag Payment
     * @param int $paymentId 
     * @param int $orderId 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment order relation
     *      - *paymentId* - integer
     *          - The ID of the payment
     *      - *orderId* - integer
     *          - The ID of the order
     *      - *assignedAt* - string
     *          - The time the payment order relation was assigned
     */
    public function createPaymentOrderValidationByPaymentIdOrderId(int $paymentId, int $orderId): array
    {
        return $this->api("/rest/payment/{$paymentId}/order/{$orderId}/validation", 'POST');
    }
                    
    /**
     * @description Get an array of all available payments in the PaymentRepository
     * @tag Payment
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPayments(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments"], $query));
    }
                
    /**
     * @description Create a payment specified by the request.
     * @tag Payment
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment
     *      - *amount* - number
     *          - The amount of the payment
     *      - *exchangeRatio* - number
     *          - The exchange rate. Exchange rates are used if the default currency saved in plentymarkets differs from the currency of the order.
     *      - *parentId* - integer
     *          - The ID of the parent payment
     *      - *deleted* - integer
     *          - A deleted payment. Deleted payments have the value 1 and are not displayed in the plentymarkets back end.
     *      - *unaccountable* - integer
     *          - An unassigned payment. Unassigned payments have the value 1.
     *      - *currency* - string
     *          - The currency of the payment in ISO 4217 code.
     *      - *type* - string
     *          - The payment type. Available types are credit and debit.
     *      - *hash* - string
     *          - The hash code of the payment. The hash code consists of 32 characters and is automatically generated.
     *      - *origin* - integer
     *          - The origin of the payment. The following origins are available:
<ul>
    <li>Undefined = 0</li>
    <li>System = 1</li>
    <li>Manually = 2</li>
    <li>SOAP = 3</li>
    <li>Import = 4</li>
    <li>Split payment = 5</li>
    <li>Plugin = 6</li>
    <li>POS = 7</li>
</ul>
     *      - *receivedAt* - string
     *          - The time the payment was received
     *      - *importedAt* - string
     *          - The time the payment was imported
     *      - *status* - integer
     *          - The <a href="https://developers.plentymarkets.com/en-gb/developers/main/rest-api-guides/getting-started.html#_payment_status_ids"  target="_blank">status</a> of the payment
     *      - *transactionType* - integer
     *          - The transaction type of the payment. The following transaction types are available:
<ul>
    <li>Interim transaction report = 1</li>
    <li>Booked payment = 2</li>
    <li>Split payment = 3</li>
</ul>
     *      - *mopId* - integer
     *          - The ID of the payment method
     *      - *regenerateHash* - boolean
     *          - If $regenerateHash is true, regenerate the payment hash value. Default is false.
     *      - *updateOrderPaymentStatus* - boolean
     *          - If $updateOrderPaymentStatus is true, update the order payment status. Default is false.
     *      - *isSystemCurrency* - boolean
     *          - If $isSystemCurrency is false, the value will be converted to the standard currency with the provided exchange rate. If $isSystemCurrency is true, the value is not converted. Default is true.
     */
    public function createPayment(array $data): array
    {
        return $this->api("/rest/payments", 'POST', $data);
    }
                
    /**
     * @description Update the payment specifed in the request.
     * @tag Payment
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment
     *      - *amount* - number
     *          - The amount of the payment
     *      - *exchangeRatio* - number
     *          - The exchange rate. Exchange rates are used if the default currency saved in plentymarkets differs from the currency of the order.
     *      - *parentId* - integer
     *          - The ID of the parent payment
     *      - *deleted* - integer
     *          - A deleted payment. Deleted payments have the value 1 and are not displayed in the plentymarkets back end.
     *      - *unaccountable* - integer
     *          - An unassigned payment. Unassigned payments have the value 1.
     *      - *currency* - string
     *          - The currency of the payment in ISO 4217 code.
     *      - *type* - string
     *          - The payment type. Available types are credit and debit.
     *      - *hash* - string
     *          - The hash code of the payment. The hash code consists of 32 characters and is automatically generated.
     *      - *origin* - integer
     *          - The origin of the payment. The following origins are available:
<ul>
    <li>Undefined = 0</li>
    <li>System = 1</li>
    <li>Manually = 2</li>
    <li>SOAP = 3</li>
    <li>Import = 4</li>
    <li>Split payment = 5</li>
    <li>Plugin = 6</li>
    <li>POS = 7</li>
</ul>
     *      - *receivedAt* - string
     *          - The time the payment was received
     *      - *importedAt* - string
     *          - The time the payment was imported
     *      - *status* - integer
     *          - The <a href="https://developers.plentymarkets.com/en-gb/developers/main/rest-api-guides/getting-started.html#_payment_status_ids"  target="_blank">status</a> of the payment
     *      - *transactionType* - integer
     *          - The transaction type of the payment. The following transaction types are available:
<ul>
    <li>Interim transaction report = 1</li>
    <li>Booked payment = 2</li>
    <li>Split payment = 3</li>
</ul>
     *      - *mopId* - integer
     *          - The ID of the payment method
     *      - *regenerateHash* - boolean
     *          - If $regenerateHash is true, regenerate the payment hash value. Default is false.
     *      - *updateOrderPaymentStatus* - boolean
     *          - If $updateOrderPaymentStatus is true, update the order payment status. Default is false.
     *      - *isSystemCurrency* - boolean
     *          - If $isSystemCurrency is false, the value will be converted to the standard currency with the provided exchange rate. If $isSystemCurrency is true, the value is not converted. Default is true.
     */
    public function updatePayment(array $data): array
    {
        return $this->api("/rest/payments", 'PUT', $data);
    }
                    
    /**
     * @description Bulk delete payments specified by their ids.
     * @tag Payment
     * @param array $query
     *      - *ids* - array - optional
     *          - An array with payment ids to be deleted. Eg: ['ids' => [1,2,3]]
     * @return array
     */
    public function deletePaymentsBulk(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/bulk"], $query), 'DELETE');
    }
                    
    /**
     * @description Lists all payments by entry date within a certain date range. The start and the end of the date range must be specified.
     * @tag Payment
     * @param array $query
     *      - *startDate* - string - optional
     *          - The start date of the date range for the entry date of the payment
     *      - *endDate* - string - optional
     *          - The end date of the date range for the entry date of the payment
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsEntrydate(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/entrydate"], $query));
    }
                    
    /**
     * @description Lists all payments by import date within a certain date range. The start and the end of the date range must be specified.
     * @tag Payment
     * @param array $query
     *      - *startDate* - string - optional
     *          - The start date of the date range for the import date of the payment
     *      - *endDate* - string - optional
     *          - The end date of the date range for the import date of the payment
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsImportdate(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/importdate"], $query));
    }
                    
    /**
     * @description Lists all payment method names.
     * @tag Payment
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsMethodNames(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/methodNames"], $query));
    }
                    
    /**
     * @description List all payment method names for a payment method id. The payment method id must be specified.
     * @tag Payment
     * @param int $paymentMethodId 
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsMethodNameByPaymentMethodId(int $paymentMethodId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/methodNames/{$paymentMethodId}"], $query));
    }
                    
    /**
     * @description Gets a payment method name by id and lang. The ID and the requested lang of the payment method must be specified.
     * @tag Payment
     * @param int $paymentMethodId 
     * @param int $lang 
     * @return array
     *      - *paymentMethodId* - integer
     *      - *lang* - string
     *      - *name* - string
     */
    public function getPaymentsMethodNameByPaymentMethodIdLang(int $paymentMethodId, int $lang): array
    {
        return $this->api("/rest/payments/methodNames/{$paymentMethodId}/{$lang}");
    }
                    
    /**
     * @description Lists all payment method plugins.
     * @tag Payment
     * @param array $query
     *      - *backendSearchable* - boolean - optional
     *          - Receive only payment methods that are searchable for the backend.
     *      - *backendActive* - boolean - optional
     *          - Receive only payment methods that are active for the backend.
     * @return array
     */
    public function getPaymentsMethods(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/methods"], $query));
    }
                
    /**
     * @description Creates a payment method. The plugin key, the payment key and the name of the payment method must be specified.
     * @tag Payment
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment method
     *      - *pluginKey* - string
     *          - The plugin key of the payment method
     *      - *paymentKey* - string
     *          - The payment key of the payment method
     *      - *name* - string
     *          - The name of the payment method
     *      - *isDocumentBuilderActive* - boolean
     *          - Flag that indicates if payment method is checked for document builder
     */
    public function createPaymentsMethod(array $data): array
    {
        return $this->api("/rest/payments/methods", 'POST', $data);
    }
                
    /**
     * @description Updates the name and isDocumentBuilderActive of the payment method.
     * @tag Payment
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment method
     *      - *pluginKey* - string
     *          - The plugin key of the payment method
     *      - *paymentKey* - string
     *          - The payment key of the payment method
     *      - *name* - string
     *          - The name of the payment method
     *      - *isDocumentBuilderActive* - boolean
     *          - Flag that indicates if payment method is checked for document builder
     */
    public function updatePaymentsMethod(array $data): array
    {
        return $this->api("/rest/payments/methods", 'PUT', $data);
    }
                    
    /**
     * @description Updates multiple payment methods by id
     * @tag Payment
     * @return array
     */
    public function updatePaymentsMethodsBulk(): array
    {
        return $this->api("/rest/payments/methods/bulk", 'PUT');
    }
                    
    /**
     * @description Returns all payment methods with id and name
     * @tag Payment
     * @return array
     */
    public function getPaymentsMethodsList(): array
    {
        return $this->api("/rest/payments/methods/list");
    }
                    
    /**
     * @description Returns all payment methods with id and name which are active for the backend
     * @tag Payment
     * @param string $language Language for backend payment method names
     * @return array
     */
    public function getPaymentsMethodsListBackendActiveByLanguage(string $language): array
    {
        return $this->api("/rest/payments/methods/list/backend_active/{$language}");
    }
                    
    /**
     * @description Returns all payment methods with id and backend icon url
     * @tag Payment
     * @return array
     */
    public function getPaymentsMethodsListBackendIcon(): array
    {
        return $this->api("/rest/payments/methods/list/backend_icon");
    }
                    
    /**
     * @description Returns all payment methods with id and name which are searchable for the backend
     * @tag Payment
     * @param string $language Language for backend payment method names
     * @return array
     */
    public function getPaymentsMethodsListBackendSearchableByLanguage(string $language): array
    {
        return $this->api("/rest/payments/methods/list/backend_searchable/{$language}");
    }
                    
    /**
     * @description Get DocumenBuilder active payment methods
     * @tag Payment
     * @param int $language 
     * @return array
     */
    public function getPaymentsMethodsListDocumentbuilderActiveByLanguage(int $language): array
    {
        return $this->api("/rest/payments/methods/list/documentbuilder_active/{$language}");
    }
                    
    /**
     * @description List all payment methods which can handle subscriptions
     * @tag Payment
     * @param string $language Language for backend payment method names
     * @return array
     */
    public function getPaymentsMethodsListHandleSubscriptionByLanguage(string $language): array
    {
        return $this->api("/rest/payments/methods/list/handle_subscription/{$language}");
    }
                    
    /**
     * @description Gets a payment method plugin. The plugin key must be specified.
     * @tag Payment
     * @param int $pluginKey 
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsMethodsPluginByPluginKey(int $pluginKey, array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/methods/plugins/{$pluginKey}"], $query));
    }
                    
    /**
     * @description Get an array with all payment methods with the ID as key and the name as value.
     * @tag Payment
     * @param string $language Language for payment method names
     * @return array
     */
    public function getPaymentsMethodsPreviewLanguageByLanguage(string $language): array
    {
        return $this->api("/rest/payments/methods/preview/{language?}");
    }
                    
    /**
     * @description Lists all payments of the a payment method. The ID of the payment method must be specified.
     * @tag Payment
     * @param int $methodId 
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsMethodByMethodId(int $methodId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/methods/{$methodId}"], $query));
    }
                    
    /**
     * @description Detach all payments, updates order paid amount,adds an entry in the order history and update order stock based on order settings.
     * @tag Payment
     * @param int $orderId An order ID.
     */
    public function deletePaymentsOrderByOrderId(int $orderId)
    {
        return $this->api("/rest/payments/order/{$orderId}", 'DELETE');
    }
                    
    /**
     * @description Bulk auto assign payments specified by their ids.
     * @tag Payment
     * @param array $query
     *      - *ids* - array - optional
     *          - An array with payment ids to be autoassigned. Eg: ['ids' => [1,2,3]]
     * @return array
     */
    public function createPaymentsOrdersAutoassignBulk(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/orders/autoassign/bulk"], $query), 'POST');
    }
                    
    /**
     * @description Lists all payments of an order. The ID of the order must be specified.
     * @tag Payment
     * @param int $orderId 
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsOrderByOrderId(int $orderId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/orders/{$orderId}"], $query));
    }
                    
    /**
     * @description List all available payment properties.
     * @tag Payment
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsProperties(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/properties"], $query));
    }
                
    /**
     * @description Create a new payment property.
     * @tag Payment
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment property
     *      - *paymentId* - integer
     *          - The ID of the payment
     *      - *typeId* - integer
     *          - The ID of the property type. The following property types are available:
<ul>
    <li>Transaction ID = 1</li>
    <li>Reference ID = 2</li>
    <li>Booking text = 3</li>
    <li>Transaction password = 4</li>
    <li>Transaction code = 5</li>
    <li>Authorisation ID = 6</li>
    <li>Capture ID = 7</li>
    <li>Refund ID = 8</li>
    <li>Credit note ID = 9</li>
    <li>Order reference = 10</li>
    <li>Name of the sender = 11</li>
    <li>Email of the sender = 12</li>
    <li>The sender's sort code = 13</li>
    <li>The sender's bank name = 14</li>
    <li>The sender's bank account number = 15</li>
    <li>The holder of the bank account = 16</li>
    <li>The country of the sender's bank account = 17</li>
    <li>The sender's IBAN = 18</li>
    <li>The sender's BIC = 19</li>
    <li>Name of the recipient = 20</li>
    <li>The recipient's bank account = 21</li>
    <li>Reference text of the payment = 22</li>
    <li>Payment origin = 23</li>
    <li>Shipping address ID = 24</li>
    <li>Invoice address ID = 25</li>
    <li>Item buyer = 26</li>
    <li>Item number = 27</li>
    <li>Item transaction ID = 28</li>
    <li>External transaction type = 29</li>
    <li>External transaction status = 30</li>
    <li>The receiver's IBAN = 31</li>
    <li>The receiver's BIC = 32</li>
    <li>Transaction fee = 33</li>
    <li>Transaction lifespan = 34</li>
    <li>Matching rate = 36</li>
</ul>
     *      - *value* - string
     *          - The value of the property type
     */
    public function createPaymentsProperty(array $data): array
    {
        return $this->api("/rest/payments/properties", 'POST', $data);
    }
                
    /**
     * @description Update a payment property
     * @tag Payment
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment property
     *      - *paymentId* - integer
     *          - The ID of the payment
     *      - *typeId* - integer
     *          - The ID of the property type. The following property types are available:
<ul>
    <li>Transaction ID = 1</li>
    <li>Reference ID = 2</li>
    <li>Booking text = 3</li>
    <li>Transaction password = 4</li>
    <li>Transaction code = 5</li>
    <li>Authorisation ID = 6</li>
    <li>Capture ID = 7</li>
    <li>Refund ID = 8</li>
    <li>Credit note ID = 9</li>
    <li>Order reference = 10</li>
    <li>Name of the sender = 11</li>
    <li>Email of the sender = 12</li>
    <li>The sender's sort code = 13</li>
    <li>The sender's bank name = 14</li>
    <li>The sender's bank account number = 15</li>
    <li>The holder of the bank account = 16</li>
    <li>The country of the sender's bank account = 17</li>
    <li>The sender's IBAN = 18</li>
    <li>The sender's BIC = 19</li>
    <li>Name of the recipient = 20</li>
    <li>The recipient's bank account = 21</li>
    <li>Reference text of the payment = 22</li>
    <li>Payment origin = 23</li>
    <li>Shipping address ID = 24</li>
    <li>Invoice address ID = 25</li>
    <li>Item buyer = 26</li>
    <li>Item number = 27</li>
    <li>Item transaction ID = 28</li>
    <li>External transaction type = 29</li>
    <li>External transaction status = 30</li>
    <li>The receiver's IBAN = 31</li>
    <li>The receiver's BIC = 32</li>
    <li>Transaction fee = 33</li>
    <li>Transaction lifespan = 34</li>
    <li>Matching rate = 36</li>
</ul>
     *      - *value* - string
     *          - The value of the property type
     */
    public function updatePaymentsProperty(array $data): array
    {
        return $this->api("/rest/payments/properties", 'PUT', $data);
    }
                    
    /**
     * @description Lists all properties by creation date. The start and the end of the date range must be specified.
     * @tag Payment
     * @param array $query
     *      - *startDate* - string - optional
     *          - The start date of the date range for the date of creation of the property
     *      - *endDate* - string - optional
     *          - The end date of the date range for the date of creation of the property
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsPropertiesDate(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/properties/date"], $query));
    }
                    
    /**
     * @description Lists all property types. The language must be specified.
     * @tag Payment
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsPropertiesTypes(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/properties/types"], $query));
    }
                
    /**
     * @description Create a property type
     * @tag Payment
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property type
     *      - *erasable* - integer
     *          - Specifies whether the property type can be deleted. Property types that can be deleted have the value 1. Default property types cannot be deleted.
     *      - *position* - integer
     *          - The position number of the property type
     */
    public function createPaymentsPropertiesType(array $data): array
    {
        return $this->api("/rest/payments/properties/types", 'POST', $data);
    }
                
    /**
     * @description Update a property type
     * @tag Payment
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property type
     *      - *erasable* - integer
     *          - Specifies whether the property type can be deleted. Property types that can be deleted have the value 1. Default property types cannot be deleted.
     *      - *position* - integer
     *          - The position number of the property type
     */
    public function updatePaymentsPropertiesType(array $data): array
    {
        return $this->api("/rest/payments/properties/types", 'PUT', $data);
    }
                    
    /**
     * @description Gets a property type. The ID of the type must be specified.
     * @tag Payment
     * @param int $typeId 
     * @return array
     */
    public function getPaymentsPropertiesTypeByTypeId(int $typeId): array
    {
        return $this->api("/rest/payments/properties/types/{$typeId}");
    }
                    
    /**
     * @description Gets a property. The ID of the property must be specified.
     * @tag Payment
     * @param int $propertyId 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment property
     *      - *paymentId* - integer
     *          - The ID of the payment
     *      - *typeId* - integer
     *          - The ID of the property type. The following property types are available:
<ul>
    <li>Transaction ID = 1</li>
    <li>Reference ID = 2</li>
    <li>Booking text = 3</li>
    <li>Transaction password = 4</li>
    <li>Transaction code = 5</li>
    <li>Authorisation ID = 6</li>
    <li>Capture ID = 7</li>
    <li>Refund ID = 8</li>
    <li>Credit note ID = 9</li>
    <li>Order reference = 10</li>
    <li>Name of the sender = 11</li>
    <li>Email of the sender = 12</li>
    <li>The sender's sort code = 13</li>
    <li>The sender's bank name = 14</li>
    <li>The sender's bank account number = 15</li>
    <li>The holder of the bank account = 16</li>
    <li>The country of the sender's bank account = 17</li>
    <li>The sender's IBAN = 18</li>
    <li>The sender's BIC = 19</li>
    <li>Name of the recipient = 20</li>
    <li>The recipient's bank account = 21</li>
    <li>Reference text of the payment = 22</li>
    <li>Payment origin = 23</li>
    <li>Shipping address ID = 24</li>
    <li>Invoice address ID = 25</li>
    <li>Item buyer = 26</li>
    <li>Item number = 27</li>
    <li>Item transaction ID = 28</li>
    <li>External transaction type = 29</li>
    <li>External transaction status = 30</li>
    <li>The receiver's IBAN = 31</li>
    <li>The receiver's BIC = 32</li>
    <li>Transaction fee = 33</li>
    <li>Transaction lifespan = 34</li>
    <li>Matching rate = 36</li>
</ul>
     *      - *value* - string
     *          - The value of the property type
     */
    public function getPaymentsPropertyByPropertyId(int $propertyId): array
    {
        return $this->api("/rest/payments/properties/{$propertyId}");
    }
                    
    /**
     * @description Lists all payments by the given property type ID and the value.
     * @tag Payment
     * @param int $propertyTypeId 
     * @param int $propertyValue 
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsPropertyByPropertyTypeIdPropertyValue(int $propertyTypeId, int $propertyValue, array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/property/{$propertyTypeId}/{$propertyValue}"], $query));
    }
                
    /**
     * @description Search payments by defined filters which can be send with the request.
     * @tag Payment
     * @param array $query
     *      - *paymentId* - int - optional
     *          - Filter restricts the list of results to payments with the given payment ID/IDs. For example, .../search?paymentId=140 will search for payment ID 140 and .../search?paymentId=in:30,31 will search for payment ids 30 and 31
     *      - *status* - int - optional
     *          - Filter restricts the list of results to payments with the given status ID.
     *      - *type* - string - optional
     *          - Filter restricts the list of results to payments with the given payment type. For example, .../search?type=credit will list payments with payment type credit. Available payment types: 'credit' and 'debit'.
     *      - *amount* - int - optional
     *          - Filter restricts the list of results to payments with the given payment amount.  For example, .../search?amount=between:120,250 will list all payments with amount between 120 and 250.
     *      - *transactionType* - int - optional
     *          - Filter restricts the list of results to payments with the given transaction type ID.
     *      - *currency* - string - optional
     *          - Currency iso code. Eg: EUR
     *      - *receivedAt* - string - optional
     *          - Filter restricts the list of results to payments received during the specified period. The end date (to) is optional. If no end date is specified, payments received in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?receivedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments received between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?receivedAt=2020-04-16T00:00:00+03:00 will list payments created on 2020-04-16.
     *      - *importedAt* - string - optional
     *          - Filter restricts the list of results to payments imported during the specified period. The end date (to) is optional. If no end date is specified, payments imported in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?importedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments imported between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?importedAt=2020-04-16T00:00:00+03:00 will list payments imported on 2020-04-16.
     *      - *assignedAt* - string - optional
     *          - Filter restricts the list of results to payments imported during the specified period. The end date (to) is optional. If no end date is specified, payments imported in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?importedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments imported between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?importedAt=2020-04-16T00:00:00+03:00 will list payments imported on 2020-04-16.
     *      - *mopId* - int - optional
     *          - Filter restricts the list of results to payments through the give payment method(mopId).
     *      - *orderId* - int - optional
     *          - Filter restricts the list of results to payments assigned to the given order(orderId). For example, .../search?orderId=14 will search for order ID 14 and .../search?orderId=in:3,4 will search for order ids 3 and 4
     *      - *assignment* - int - optional
     *          - Filter restricts the list of results to payments which are assigned or detached. 1 = Assigned, 0 = Detached.
     *      - *transactionId* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *referenceId* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *bookingText* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *transactionCode* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *orderBy* - string - optional
     *          - Allows you to sort payments by a given column and a certain order. For examople: .../search?orderBy=id:desc will sort payments by column id descending
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *with* - array - optional
     *          - The relations to load with the payment object. The relations available are parent, method, histories, properties, order or contact.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Payment
     */
    public function eachPaymentsSearch(array $query = []): Iterator
    {
        return $this->eachInternal('getPaymentsSearch', func_get_args());
    }
        
    /**
     * @description Search payments by defined filters which can be send with the request.
     * @tag Payment
     * @param array $query
     *      - *paymentId* - int - optional
     *          - Filter restricts the list of results to payments with the given payment ID/IDs. For example, .../search?paymentId=140 will search for payment ID 140 and .../search?paymentId=in:30,31 will search for payment ids 30 and 31
     *      - *status* - int - optional
     *          - Filter restricts the list of results to payments with the given status ID.
     *      - *type* - string - optional
     *          - Filter restricts the list of results to payments with the given payment type. For example, .../search?type=credit will list payments with payment type credit. Available payment types: 'credit' and 'debit'.
     *      - *amount* - int - optional
     *          - Filter restricts the list of results to payments with the given payment amount.  For example, .../search?amount=between:120,250 will list all payments with amount between 120 and 250.
     *      - *transactionType* - int - optional
     *          - Filter restricts the list of results to payments with the given transaction type ID.
     *      - *currency* - string - optional
     *          - Currency iso code. Eg: EUR
     *      - *receivedAt* - string - optional
     *          - Filter restricts the list of results to payments received during the specified period. The end date (to) is optional. If no end date is specified, payments received in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?receivedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments received between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?receivedAt=2020-04-16T00:00:00+03:00 will list payments created on 2020-04-16.
     *      - *importedAt* - string - optional
     *          - Filter restricts the list of results to payments imported during the specified period. The end date (to) is optional. If no end date is specified, payments imported in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?importedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments imported between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?importedAt=2020-04-16T00:00:00+03:00 will list payments imported on 2020-04-16.
     *      - *assignedAt* - string - optional
     *          - Filter restricts the list of results to payments imported during the specified period. The end date (to) is optional. If no end date is specified, payments imported in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?importedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments imported between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?importedAt=2020-04-16T00:00:00+03:00 will list payments imported on 2020-04-16.
     *      - *mopId* - int - optional
     *          - Filter restricts the list of results to payments through the give payment method(mopId).
     *      - *orderId* - int - optional
     *          - Filter restricts the list of results to payments assigned to the given order(orderId). For example, .../search?orderId=14 will search for order ID 14 and .../search?orderId=in:3,4 will search for order ids 3 and 4
     *      - *assignment* - int - optional
     *          - Filter restricts the list of results to payments which are assigned or detached. 1 = Assigned, 0 = Detached.
     *      - *transactionId* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *referenceId* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *bookingText* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *transactionCode* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *orderBy* - string - optional
     *          - Allows you to sort payments by a given column and a certain order. For examople: .../search?orderBy=id:desc will sort payments by column id descending
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *with* - array - optional
     *          - The relations to load with the payment object. The relations available are parent, method, histories, properties, order or contact.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Payment
     */
    public function batchPaymentsSearch(array $query = []): Iterator
    {
        return $this->batchInternal('getPaymentsSearch', func_get_args());
    }
    
    /**
     * @description Search payments by defined filters which can be send with the request.
     * @tag Payment
     * @param array $query
     *      - *paymentId* - int - optional
     *          - Filter restricts the list of results to payments with the given payment ID/IDs. For example, .../search?paymentId=140 will search for payment ID 140 and .../search?paymentId=in:30,31 will search for payment ids 30 and 31
     *      - *status* - int - optional
     *          - Filter restricts the list of results to payments with the given status ID.
     *      - *type* - string - optional
     *          - Filter restricts the list of results to payments with the given payment type. For example, .../search?type=credit will list payments with payment type credit. Available payment types: 'credit' and 'debit'.
     *      - *amount* - int - optional
     *          - Filter restricts the list of results to payments with the given payment amount.  For example, .../search?amount=between:120,250 will list all payments with amount between 120 and 250.
     *      - *transactionType* - int - optional
     *          - Filter restricts the list of results to payments with the given transaction type ID.
     *      - *currency* - string - optional
     *          - Currency iso code. Eg: EUR
     *      - *receivedAt* - string - optional
     *          - Filter restricts the list of results to payments received during the specified period. The end date (to) is optional. If no end date is specified, payments received in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?receivedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments received between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?receivedAt=2020-04-16T00:00:00+03:00 will list payments created on 2020-04-16.
     *      - *importedAt* - string - optional
     *          - Filter restricts the list of results to payments imported during the specified period. The end date (to) is optional. If no end date is specified, payments imported in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?importedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments imported between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?importedAt=2020-04-16T00:00:00+03:00 will list payments imported on 2020-04-16.
     *      - *assignedAt* - string - optional
     *          - Filter restricts the list of results to payments imported during the specified period. The end date (to) is optional. If no end date is specified, payments imported in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?importedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments imported between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?importedAt=2020-04-16T00:00:00+03:00 will list payments imported on 2020-04-16.
     *      - *mopId* - int - optional
     *          - Filter restricts the list of results to payments through the give payment method(mopId).
     *      - *orderId* - int - optional
     *          - Filter restricts the list of results to payments assigned to the given order(orderId). For example, .../search?orderId=14 will search for order ID 14 and .../search?orderId=in:3,4 will search for order ids 3 and 4
     *      - *assignment* - int - optional
     *          - Filter restricts the list of results to payments which are assigned or detached. 1 = Assigned, 0 = Detached.
     *      - *transactionId* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *referenceId* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *bookingText* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *transactionCode* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *orderBy* - string - optional
     *          - Allows you to sort payments by a given column and a certain order. For examople: .../search?orderBy=id:desc will sort payments by column id descending
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *with* - array - optional
     *          - The relations to load with the payment object. The relations available are parent, method, histories, properties, order or contact.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Payment
     */
    public function getPaymentsSearch(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/search"], $query));
    }
                
    /**
     * @description Search payments by defined filters which can be send with the request.
     * @tag Payment
     * @param array $query
     *      - *paymentId* - int - optional
     *          - Filter restricts the list of results to payments with the given payment ID/IDs. For example, .../search?paymentId=140 will search for payment ID 140 and .../search?paymentId=in:30,31 will search for payment ids 30 and 31
     *      - *status* - int - optional
     *          - Filter restricts the list of results to payments with the given status ID.
     *      - *type* - string - optional
     *          - Filter restricts the list of results to payments with the given payment type. For example, .../search?type=credit will list payments with payment type credit. Available payment types: 'credit' and 'debit'.
     *      - *amount* - int - optional
     *          - Filter restricts the list of results to payments with the given payment amount.  For example, .../search?amount=between:120,250 will list all payments with amount between 120 and 250.
     *      - *transactionType* - int - optional
     *          - Filter restricts the list of results to payments with the given transaction type ID.
     *      - *currency* - string - optional
     *          - Currency iso code. Eg: EUR
     *      - *receivedAt* - string - optional
     *          - Filter restricts the list of results to payments received during the specified period. The end date (to) is optional. If no end date is specified, payments received in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?receivedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments received between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?receivedAt=2020-04-16T00:00:00+03:00 will list payments created on 2020-04-16.
     *      - *importedAt* - string - optional
     *          - Filter restricts the list of results to payments imported during the specified period. The end date (to) is optional. If no end date is specified, payments imported in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?importedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments imported between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?importedAt=2020-04-16T00:00:00+03:00 will list payments imported on 2020-04-16.
     *      - *assignedAt* - string - optional
     *          - Filter restricts the list of results to payments imported during the specified period. The end date (to) is optional. If no end date is specified, payments imported in the specified day will be listed. The dates can be specified in the ISO 8601 date format. Start date and optional end date are separated by a comma. For example, .../search?importedAt=2020-04-16T00:00:00+03:00,2020-05-16T00:00:00+03:00 will list payments imported between 2020-04-16 00:00 and 2020-05-16 23:59. .../search?importedAt=2020-04-16T00:00:00+03:00 will list payments imported on 2020-04-16.
     *      - *mopId* - int - optional
     *          - Filter restricts the list of results to payments through the give payment method(mopId).
     *      - *orderId* - int - optional
     *          - Filter restricts the list of results to payments assigned to the given order(orderId). For example, .../search?orderId=14 will search for order ID 14 and .../search?orderId=in:3,4 will search for order ids 3 and 4
     *      - *assignment* - int - optional
     *          - Filter restricts the list of results to payments which are assigned or detached. 1 = Assigned, 0 = Detached.
     *      - *transactionId* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *referenceId* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *bookingText* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *transactionCode* - string - optional
     *          - Filter restricts the list of results to payments that have the property type ID 1 and property value contains a given value. For example, .../search?transactionId=1,test will list all payments that have the property type ID 1 and property value contains the text 'test'.
     *      - *orderBy* - string - optional
     *          - Allows you to sort payments by a given column and a certain order. For examople: .../search?orderBy=id:desc will sort payments by column id descending
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     *      - *with* - array - optional
     *          - The relations to load with the payment object. The relations available are parent, method, histories, properties, order or contact.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Payment
     */
    public function createPaymentsSearch(array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/search"], $query), 'POST');
    }
                    
    /**
     * @description Lists all payments of a payment status. The ID of the <a href='https://developers.plentymarkets.com/en-gb/developers/main/rest-api-guides/getting-started.html#_payment_status_ids'  target='_blank'>payment status</a> must be specified.
     * @tag Payment
     * @param int $statusId 
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsStatusByStatusId(int $statusId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/status/{$statusId}"], $query));
    }
                    
    /**
     * @description Lists all payments of a transaction type. The ID of the transaction type must be specified.
     * @tag Payment
     * @param int $transactionTypeId 
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsTransactionByTransactionTypeId(int $transactionTypeId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/transactions/{$transactionTypeId}"], $query));
    }
                    
    /**
     * @description Delete payment. The ID of the payment must be specified.
     * @tag Payment
     * @param int $paymentId 
     */
    public function deletePaymentByPaymentId(int $paymentId)
    {
        return $this->api("/rest/payments/{$paymentId}", 'DELETE');
    }
                
    /**
     * @description Gets a payment. The ID of the payment must be specified.
     * @tag Payment
     * @param int $paymentId 
     * @return array
     *      - *id* - integer
     *          - The ID of the payment
     *      - *amount* - number
     *          - The amount of the payment
     *      - *exchangeRatio* - number
     *          - The exchange rate. Exchange rates are used if the default currency saved in plentymarkets differs from the currency of the order.
     *      - *parentId* - integer
     *          - The ID of the parent payment
     *      - *deleted* - integer
     *          - A deleted payment. Deleted payments have the value 1 and are not displayed in the plentymarkets back end.
     *      - *unaccountable* - integer
     *          - An unassigned payment. Unassigned payments have the value 1.
     *      - *currency* - string
     *          - The currency of the payment in ISO 4217 code.
     *      - *type* - string
     *          - The payment type. Available types are credit and debit.
     *      - *hash* - string
     *          - The hash code of the payment. The hash code consists of 32 characters and is automatically generated.
     *      - *origin* - integer
     *          - The origin of the payment. The following origins are available:
<ul>
    <li>Undefined = 0</li>
    <li>System = 1</li>
    <li>Manually = 2</li>
    <li>SOAP = 3</li>
    <li>Import = 4</li>
    <li>Split payment = 5</li>
    <li>Plugin = 6</li>
    <li>POS = 7</li>
</ul>
     *      - *receivedAt* - string
     *          - The time the payment was received
     *      - *importedAt* - string
     *          - The time the payment was imported
     *      - *status* - integer
     *          - The <a href="https://developers.plentymarkets.com/en-gb/developers/main/rest-api-guides/getting-started.html#_payment_status_ids"  target="_blank">status</a> of the payment
     *      - *transactionType* - integer
     *          - The transaction type of the payment. The following transaction types are available:
<ul>
    <li>Interim transaction report = 1</li>
    <li>Booked payment = 2</li>
    <li>Split payment = 3</li>
</ul>
     *      - *mopId* - integer
     *          - The ID of the payment method
     *      - *regenerateHash* - boolean
     *          - If $regenerateHash is true, regenerate the payment hash value. Default is false.
     *      - *updateOrderPaymentStatus* - boolean
     *          - If $updateOrderPaymentStatus is true, update the order payment status. Default is false.
     *      - *isSystemCurrency* - boolean
     *          - If $isSystemCurrency is false, the value will be converted to the standard currency with the provided exchange rate. If $isSystemCurrency is true, the value is not converted. Default is true.
     */
    public function getPaymentByPaymentId(int $paymentId): array
    {
        return $this->api("/rest/payments/{$paymentId}");
    }
                    
    /**
     * @description Lists all properties for a payment. The ID of the payment must be specified.
     * @tag Payment
     * @param int $paymentId 
     * @param array $query
     *      - *itemsPerPage* - int - optional
     *          - The number of items to list per page
     *      - *page* - int - optional
     *          - The page of results to search for
     * @return array
     */
    public function getPaymentsPropertiesByPaymentId(int $paymentId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/payments/{$paymentId}/properties"], $query));
    }
    
}
