<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Property extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Lists properties. Filters can be specified . Sort by argument can be specified. Sort order can be specified.
     * @tag Property
     * @return array
     */
    public function getProperties(): array
    {
        return $this->api("/rest/properties");
    }
                
    /**
     * @description Creates a property
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *cast* - string - required
     *          - The cast of the property
     *      - *typeIdentifier* - string - required
     *          - The identifier of the property type
     *      - *position* - int - required
     *          - The position of the property
     * @return array
     *      - *id* - integer
     *          - The ID of the property
     *      - *cast* - string
     *          - The cast of the property (array values: 'empty','int','float','string','selection','text','html','date','file')
     *      - *type* - string
     *          - The type of the property (e.g. 'item' or 'contact')
     *      - *position* - integer
     *          - The position of the property
     */
    public function createProperty(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties"], $query), 'POST', $data);
    }
                    
    /**
     * @description Lists property amazons
     * @tag Property
     * @return array
     */
    public function getPropertiesAmazons(): array
    {
        return $this->api("/rest/properties/amazons");
    }
                
    /**
     * @description Creates one or multiple property amazon.
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *propertyId* - int - required
     *          - The ID of the property
     *      - *platform* - string - required
     *          - The platform of the property amazon
     *      - *category* - string - required
     *          - The category of the property amazon
     *      - *field* - string - required
     *          - The field of the property amazon
     * @return array
     *      - *id* - integer
     *          - The ID of the property amazon
     *      - *propertyId* - integer
     *          - The property ID of the property amazon
     *      - *platform* - string
     *          - The platform of the property amazon
     *      - *category* - string
     *          - The category of the property amazon
     *      - *field* - string
     *          - The field of the property amazon
     */
    public function createPropertiesAmazon(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/amazons"], $query), 'POST', $data);
    }
                
    /**
     * @description Updates one or multiple property amazon
     * @tag Property
     * @return array
     *      - *id* - integer
     *          - The ID of the property amazon
     *      - *propertyId* - integer
     *          - The property ID of the property amazon
     *      - *platform* - string
     *          - The platform of the property amazon
     *      - *category* - string
     *          - The category of the property amazon
     *      - *field* - string
     *          - The field of the property amazon
     */
    public function updatePropertiesAmazon(): array
    {
        return $this->api("/rest/properties/amazons", 'PUT');
    }
                    
    /**
     * @description Deletes a property amazon
     * @tag Property
     * @param int $propertyAmazonId The ID of the property amazon
     */
    public function deletePropertiesAmazonByPropertyAmazonId(int $propertyAmazonId): void
    {
        $this->api("/rest/properties/amazons/{$propertyAmazonId}", 'DELETE');
    }
                
    /**
     * @description Gets a proeprty amazon. The ID of the property amazon must be specified.
     * @tag Property
     * @param int $propertyAmazonId The ID of the property amazon
     * @return array
     *      - *id* - integer
     *          - The ID of the property amazon
     *      - *propertyId* - integer
     *          - The property ID of the property amazon
     *      - *platform* - string
     *          - The platform of the property amazon
     *      - *category* - string
     *          - The category of the property amazon
     *      - *field* - string
     *          - The field of the property amazon
     */
    public function getPropertiesAmazonByPropertyAmazonId(int $propertyAmazonId): array
    {
        return $this->api("/rest/properties/amazons/{$propertyAmazonId}");
    }
                    
    /**
     * @description Lists availabilities.
     * @tag Property
     * @return array
     */
    public function getPropertiesAvailabilities(): array
    {
        return $this->api("/rest/properties/availabilities");
    }
                
    /**
     * @description Creates an availability.
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *propertyId* - int - required
     *          - The ID of the property
     *      - *type* - int - required
     *          - The type of the availability
     *      - *value* - int - required
     *          - The value of the availability
     * @return array
     *      - *id* - integer
     *          - The ID of the property availability
     *      - *propertyId* - integer
     *          - The ID of the property
     *      - *type* - string
     *          - The type of the property availability
     *      - *value* - number
     *          - The value of the property availability
     */
    public function createPropertiesAvailability(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/availabilities"], $query), 'POST', $data);
    }
                    
    /**
     * @description Deletes an availability. The ID ot the availability must be specified.
     * @tag Property
     * @param int $availabilityId The ID of the availability
     */
    public function deletePropertiesAvailabilityByAvailabilityId(int $availabilityId): void
    {
        $this->api("/rest/properties/availabilities/{$availabilityId}", 'DELETE');
    }
                
    /**
     * @description Gets an availability. The ID of the availability must be specified.
     * @tag Property
     * @param int $availabilityId The ID of the property availability
     * @return array
     *      - *id* - integer
     *          - The ID of the property availability
     *      - *propertyId* - integer
     *          - The ID of the property
     *      - *type* - string
     *          - The type of the property availability
     *      - *value* - number
     *          - The value of the property availability
     */
    public function getPropertiesAvailabilityByAvailabilityId(int $availabilityId): array
    {
        return $this->api("/rest/properties/availabilities/{$availabilityId}");
    }
                
    /**
     * @description Updates an availability. The ID of the availabilty must be specified.
     * @tag Property
     * @param int $availabilityId The ID of the availability
     * @return array
     *      - *id* - integer
     *          - The ID of the property availability
     *      - *propertyId* - integer
     *          - The ID of the property
     *      - *type* - string
     *          - The type of the property availability
     *      - *value* - number
     *          - The value of the property availability
     */
    public function updatePropertiesAvailabilityByAvailabilityId(int $availabilityId): array
    {
        return $this->api("/rest/properties/availabilities/{$availabilityId}", 'PUT');
    }
                    
    /**
     * @description Returns a json with the destinations processed: data from providers and translations.
     * @tag Property

     */
    public function getPropertiesDestinations(): void
    {
        $this->api("/rest/properties/destinations");
    }
                    
    /**
     * @description Lists property groups.
     * @tag Property
     * @param array $query
     *      - *groupId* - int - required
     *          - The ID of the group
     * @return array
     */
    public function getPropertiesGroups(array $query): array
    {
        return $this->api(array_merge(["/rest/properties/groups"], $query));
    }
                
    /**
     * @description Creates a property group.
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *position* - int - required
     *          - The position  of the group
     *      - *names* - int - optional
     *          - The names of the group.
     *      - *options* - int - optional
     *          - The options of the group
     * @return array
     *      - *id* - integer
     *          - The ID of the property group
     *      - *position* - integer
     *          - The position of the property group
     */
    public function createPropertiesGroup(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/groups"], $query), 'POST', $data);
    }
                    
    /**
     * @description Lists group names. Filters like propertyGroupId and lang can be provided.
     * @tag Property
     * @return array
     */
    public function getPropertiesGroupsNames(): array
    {
        return $this->api("/rest/properties/groups/names");
    }
                
    /**
     * @description Creates a group name
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *propertyId* - int - required
     *          - The ID of the property
     *      - *lang* - string - required
     *          - The lang of the group name
     *      - *name* - string - required
     *          - The name of the group name
     * @return array
     *      - *id* - integer
     *          - The ID of the property group name
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *lang* - string
     *          - The language of the property group name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property group
     *      - *description* - string
     *          - The description of the property group
     */
    public function createPropertiesGroupsName(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/groups/names"], $query), 'POST', $data);
    }
                    
    /**
     * @description Deletes a group name. The ID of the group name must be specified.
     * @tag Property
     * @param int $groupNameId The ID of the group name
     */
    public function deletePropertiesGroupsNameByGroupNameId(int $groupNameId): void
    {
        $this->api("/rest/properties/groups/names/{$groupNameId}", 'DELETE');
    }
                
    /**
     * @description Gets a group name. The ID of the group name must be specified.
     * @tag Property
     * @param int $groupNameId The ID of the group name
     * @return array
     *      - *id* - integer
     *          - The ID of the property group name
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *lang* - string
     *          - The language of the property group name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property group
     *      - *description* - string
     *          - The description of the property group
     */
    public function getPropertiesGroupsNameByGroupNameId(int $groupNameId): array
    {
        return $this->api("/rest/properties/groups/names/{$groupNameId}");
    }
                
    /**
     * @description Updates a group name. The ID of the group name must be specified.
     * @tag Property
     * @param int $groupNameId The ID of the group name
     * @return array
     *      - *id* - integer
     *          - The ID of the property group name
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *lang* - string
     *          - The language of the property group name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property group
     *      - *description* - string
     *          - The description of the property group
     */
    public function updatePropertiesGroupsNameByGroupNameId(int $groupNameId): array
    {
        return $this->api("/rest/properties/groups/names/{$groupNameId}", 'PUT');
    }
                    
    /**
     * @description Lists group options.
     * @tag Property
     * @return array
     */
    public function getPropertiesGroupsOptions(): array
    {
        return $this->api("/rest/properties/groups/options");
    }
                
    /**
     * @description Creates a group option
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *propertyGroupId* - int - required
     *          - The ID of the property group
     *      - *groupOptionIdentifier* - string - required
     *          - The groupOptionIdentifier of the group name
     *      - *value* - string - required
     *          - The value of the group name
     * @return array
     *      - *id* - integer
     *          - The ID of the property group option
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *type* - string
     *          - The identifier of the property group option
     *      - *value* - string
     *          - The value of the property group option
     */
    public function createPropertiesGroupsOption(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/groups/options"], $query), 'POST', $data);
    }
                    
    /**
     * @description Deletes a group option. The ID of the group option must be specified.
     * @tag Property
     * @param int $groupOptionId The ID of the group option
     */
    public function deletePropertiesGroupsOptionByGroupOptionId(int $groupOptionId): void
    {
        $this->api("/rest/properties/groups/options/{$groupOptionId}", 'DELETE');
    }
                
    /**
     * @description Gets a group option. The ID of the group option must be specified.
     * @tag Property
     * @param int $groupOptionId The ID of the group option
     * @return array
     *      - *id* - integer
     *          - The ID of the property group option
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *type* - string
     *          - The identifier of the property group option
     *      - *value* - string
     *          - The value of the property group option
     */
    public function getPropertiesGroupsOptionByGroupOptionId(int $groupOptionId): array
    {
        return $this->api("/rest/properties/groups/options/{$groupOptionId}");
    }
                
    /**
     * @description Updates a group option. The ID of the group option must be specified.
     * @tag Property
     * @param int $groupOptionId The ID of the group option
     * @return array
     *      - *id* - integer
     *          - The ID of the property group option
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *type* - string
     *          - The identifier of the property group option
     *      - *value* - string
     *          - The value of the property group option
     */
    public function updatePropertiesGroupsOptionByGroupOptionId(int $groupOptionId): array
    {
        return $this->api("/rest/properties/groups/options/{$groupOptionId}", 'PUT');
    }
                    
    /**
     * @description Gets surcharge types from module configuration.
     * @tag Property

     */
    public function getPropertiesGroupsSurchargeTypes(): void
    {
        $this->api("/rest/properties/groups/surcharge/types");
    }
                    
    /**
     * @description Gets group types from module configuration.
     * @tag Property

     */
    public function getPropertiesGroupsTypes(): void
    {
        $this->api("/rest/properties/groups/types");
    }
                    
    /**
     * @description Gets a property group. The ID of the property group must be specified.
     * @tag Property
     * @param int $groupId The ID of the group
     * @return array
     *      - *id* - integer
     *          - The ID of the property group
     *      - *position* - integer
     *          - The position of the property group
     */
    public function getPropertiesGroupByGroupId(int $groupId): array
    {
        return $this->api("/rest/properties/groups/{$groupId}");
    }
                
    /**
     * @description Updates a property group. The ID of the property group must be specified.
     * @tag Property
     * @param int $groupId 
     * @param array $data 
     * @param array $query
     *      - *position* - int - optional
     *          - The position  of the group
     *      - *names* - int - optional
     *          - The names of the group.
     *      - *options* - int - optional
     *          - The options of the group
     * @return array
     *      - *id* - integer
     *          - The ID of the property group
     *      - *position* - integer
     *          - The position of the property group
     */
    public function updatePropertiesGroupByGroupId(int $groupId, array $data, array $query = []): array
    {
        return $this->api(array_merge(["/rest/properties/groups/{$groupId}"], $query), 'PUT', $data);
    }
                    
    /**
     * @description Mass attach property id and group id collection into the pivot table. GroupId must be specified.
     * @tag Property
     * @param int $groupId The ID of the group
     */
    public function createPropertiesGroupsPropertyByGroupId(int $groupId): void
    {
        $this->api("/rest/properties/groups/{$groupId}/properties", 'POST');
    }
                    
    /**
     * @description Detaches a property from a property group. The ID of the property and the ID of the property group must be specified.
     * @tag Property
     * @param int $groupId The ID of the group
     * @param int $propertyId The ID of the property
     */
    public function deletePropertiesGroupsPropertyByGroupIdPropertyId(int $groupId, int $propertyId): void
    {
        $this->api("/rest/properties/groups/{$groupId}/properties/{$propertyId}", 'DELETE');
    }
                
    /**
     * @description Attaches a property to a property group. The ID of the property and the ID of the property group must be specified.
     * @tag Property
     * @param int $groupId The ID of the group
     * @param int $propertyId The ID of the property
     */
    public function createPropertiesGroupsPropertyByGroupIdPropertyId(int $groupId, int $propertyId): void
    {
        $this->api("/rest/properties/groups/{$groupId}/properties/{$propertyId}", 'POST');
    }
                    
    /**
     * @description Deletes a property group. The ID of the property group must be specified.
     * @tag Property
     * @param int $propertyId 
     * @param array $query
     *      - *groupId* - int - required
     *          - The ID of the group
     */
    public function deletePropertiesGroupByPropertyId(int $propertyId, array $query): void
    {
        $this->api(array_merge(["/rest/properties/groups/{$propertyId}"], $query), 'DELETE');
    }
                    
    /**
     * @description Lists property markets
     * @tag Property
     * @return array
     */
    public function getPropertiesMarkets(): array
    {
        return $this->api("/rest/properties/markets");
    }
                
    /**
     * @description Creates a property market.
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *propertyId* - int - required
     *          - Property id
     *      - *referrerId* - number - required
     *          - The referrer id of the property market
     *      - *referrerSubId* - int - required
     *          - The referrer sub id of the property market
     *      - *value* - string - required
     *          - The value of the property market
     * @return array
     *      - *id* - integer
     *          - The ID of the property market
     *      - *propertyId* - integer
     *          - The ID of the property
     *      - *referrerId* - number
     *          - The ID of the referrer
     *      - *referrerSubId* - integer
     *          - The ID of the sub referrer
     *      - *value* - string
     *          - The value of the property market
     */
    public function createPropertiesMarket(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/markets"], $query), 'POST', $data);
    }
                    
    /**
     * @description Deletes a property market. The ID of the property market must be specified.
     * @tag Property
     * @param int $propertiesMarketId 
     * @param array $query
     *      - *propertyMarketId* - int - required
     *          - The ID of the property market
     */
    public function deletePropertiesMarketByPropertiesMarketId(int $propertiesMarketId, array $query): void
    {
        $this->api(array_merge(["/rest/properties/markets/{$propertiesMarketId}"], $query), 'DELETE');
    }
                
    /**
     * @description Gets a property market. The ID of the property market must be specified.
     * @tag Property
     * @param int $propertiesMarketId 
     * @param array $query
     *      - *propertyMarketId* - int - required
     *          - The ID of the property market
     * @return array
     *      - *id* - integer
     *          - The ID of the property market
     *      - *propertyId* - integer
     *          - The ID of the property
     *      - *referrerId* - number
     *          - The ID of the referrer
     *      - *referrerSubId* - integer
     *          - The ID of the sub referrer
     *      - *value* - string
     *          - The value of the property market
     */
    public function getPropertiesMarketByPropertiesMarketId(int $propertiesMarketId, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/markets/{$propertiesMarketId}"], $query));
    }
                
    /**
     * @description Updates a property market. The ID of the property market must be specified.
     * @tag Property
     * @param int $propertiesMarketId 
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property market
     *      - *propertyId* - integer
     *          - The ID of the property
     *      - *referrerId* - number
     *          - The ID of the referrer
     *      - *referrerSubId* - integer
     *          - The ID of the sub referrer
     *      - *value* - string
     *          - The value of the property market
     */
    public function updatePropertiesMarketByPropertiesMarketId(int $propertiesMarketId, array $data): array
    {
        return $this->api("/rest/properties/markets/{$propertiesMarketId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes property options.
     * @tag Property

     */
    public function deletePropertiesMultipleOption(): void
    {
        $this->api("/rest/properties/multiple/options", 'DELETE');
    }
                
    /**
     * @description Creates property options.
     * @tag Property
     * @param array $query
     *      - *propertyId* - int - required
     *          - ID of the property
     *      - *typeOptionIdentifier* - string - required
     *          - The identifier of the property option type
     * @return array
     *      - *id* - integer
     *          - The ID of the property option
     *      - *propertyId* - integer
     *          - The property ID of the property option
     *      - *type* - string
     *          - The identifier type of the option
     *      - *value* - string
     *          - The value of the option
     */
    public function createPropertiesMultipleOption(array $query): array
    {
        return $this->api(array_merge(["/rest/properties/multiple/options"], $query), 'POST');
    }
                    
    /**
     * @description Lists names. Filter like propertyId can be provided.
     * @tag Property
     * @return array
     */
    public function getPropertiesNames(): array
    {
        return $this->api("/rest/properties/names");
    }
                
    /**
     * @description Creates a name. The Property id , language, name must be provided.
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *propertyId* - int - required
     *          - The id of the property name
     *      - *lang* - string - required
     *          - The lang of the property name
     *      - *name* - string - required
     *          - The name of the property name
     *      - *description* - string - optional
     *          - The description of the property name
     * @return array
     *      - *id* - integer
     *          - The ID of the property name
     *      - *propertyId* - integer
     *          - The property ID of the property name
     *      - *lang* - string
     *          - The language of the property name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property name
     *      - *description* - string
     *          - The description of the property name
     */
    public function createPropertiesName(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/names"], $query), 'POST', $data);
    }
                    
    /**
     * @description Deletes a property name. The ID of the property name must be specified.
     * @tag Property
     * @param int $nameId The ID of the property name
     */
    public function deletePropertiesNameByNameId(int $nameId): void
    {
        $this->api("/rest/properties/names/{$nameId}", 'DELETE');
    }
                
    /**
     * @description Gets a proeprty name. The ID of the property name must be specified.
     * @tag Property
     * @param int $nameId The ID of the property name
     * @return array
     *      - *id* - integer
     *          - The ID of the property name
     *      - *propertyId* - integer
     *          - The property ID of the property name
     *      - *lang* - string
     *          - The language of the property name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property name
     *      - *description* - string
     *          - The description of the property name
     */
    public function getPropertiesNameByNameId(int $nameId): array
    {
        return $this->api("/rest/properties/names/{$nameId}");
    }
                
    /**
     * @description Updates a property name. The ID of the property name must be specified
     * @tag Property
     * @param int $nameId The ID of the property name
     * @return array
     *      - *id* - integer
     *          - The ID of the property name
     *      - *propertyId* - integer
     *          - The property ID of the property name
     *      - *lang* - string
     *          - The language of the property name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property name
     *      - *description* - string
     *          - The description of the property name
     */
    public function updatePropertiesNameByNameId(int $nameId): array
    {
        return $this->api("/rest/properties/names/{$nameId}", 'PUT');
    }
                    
    /**
     * @description Lists property options.
     * @tag Property
     * @return array
     */
    public function getPropertiesOptions(): array
    {
        return $this->api("/rest/properties/options");
    }
                
    /**
     * @description Creates a property option.
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *propertyId* - int - required
     *          - ID of the property
     *      - *typeOptionIdentifier* - string - required
     *          - The identifier of the property option type
     * @return array
     *      - *id* - integer
     *          - The ID of the property option
     *      - *propertyId* - integer
     *          - The property ID of the property option
     *      - *type* - string
     *          - The identifier type of the option
     *      - *value* - string
     *          - The value of the option
     */
    public function createPropertiesOption(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/options"], $query), 'POST', $data);
    }
                    
    /**
     * @description Deletes a property option. The ID of the proeprty option must be specified.
     * @tag Property
     * @param int $propertyOptionId The ID of the property option
     */
    public function deletePropertiesOptionByPropertyOptionId(int $propertyOptionId): void
    {
        $this->api("/rest/properties/options/{$propertyOptionId}", 'DELETE');
    }
                
    /**
     * @description Gets a property option. The ID of the property option must be specified.
     * @tag Property
     * @param int $propertyOptionId The ID of the property option
     * @return array
     *      - *id* - integer
     *          - The ID of the property option
     *      - *propertyId* - integer
     *          - The property ID of the property option
     *      - *type* - string
     *          - The identifier type of the option
     *      - *value* - string
     *          - The value of the option
     */
    public function getPropertiesOptionByPropertyOptionId(int $propertyOptionId): array
    {
        return $this->api("/rest/properties/options/{$propertyOptionId}");
    }
                
    /**
     * @description Updates a property option. The ID of the property option must be specified.
     * @tag Property
     * @param int $propertyOptionId 
     * @param array $query
     *      - *$propertyOptionId* - int - required
     *          - The ID of the property option
     * @return array
     *      - *id* - integer
     *          - The ID of the property option
     *      - *propertyId* - integer
     *          - The property ID of the property option
     *      - *type* - string
     *          - The identifier type of the option
     *      - *value* - string
     *          - The value of the option
     */
    public function updatePropertiesOptionByPropertyOptionId(int $propertyOptionId, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/options/{$propertyOptionId}"], $query), 'PUT');
    }
                    
    /**
     * @description Deletes property relations. The ID of the property relations must be specified.
     * @tag Property
     * @param array $query
     *      - *relationId* - int - required
     *          - The ID of the property relation
     */
    public function deletePropertiesRelation(array $query): void
    {
        $this->api(array_merge(["/rest/properties/relations"], $query), 'DELETE');
    }
                
    /**
     * @description Lists property relations.
     * @tag Property
     * @param array $query
     *      - *page* - int - optional
     *          - Current page of the response
     *      - *itemsPerPage* - int - optional
     *          - The requested amount of items per result page
     *      - *paginate* - int - optional
     *          - The condition that determines if the pagination should be used (default value is set to 0)
     *      - *relationTypeIdentifier* - string - optional
     *          - The parameter that decides the type of relation
     *      - *relationTargetId* - int - optional
     *          - The ID of the target of the relation
     *      - *sortBy* - string - optional
     *          - Filter sorts the result of property relations. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'propertyId'</li><li>'groupId'</li><li>'relationType'</li></ul>
     * @return array
     */
    public function getPropertiesRelations(array $query = []): array
    {
        return $this->api(array_merge(["/rest/properties/relations"], $query));
    }
                
    /**
     * @description Creates a property relation
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *propertyId* - int - required
     *          - The ID of the property
     *      - *relationTypeIdentifier* - string - required
     *          - The identifier of the property relation type
     *      - *relationTargetId* - int - required
     *          - The ID of the property relation target
     *      - *selectionRelationId* - int - required
     *          - The ID of the property selection relation
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation
     *      - *propertyId* - integer
     *          - The property ID of the property relation
     *      - *type* - string
     *          - The type of the property relation
     *      - *targetId* - string
     *          - The ID of the target of the property relation
     *      - *groupId* - integer
     *          - The property group ID of the property relation
     *      - *markup* - number
     *          - The mark up of the property relation
     *      - *value* - string
     *          - The value of the property relation for properties of the following type: int, float, date and file.
     */
    public function createPropertiesRelation(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/relations"], $query), 'POST', $data);
    }
                
    /**
     * @description Updates relations. The IDs of the properties relation must be specified.
     * @tag Property
     * @param array $query
     *      - *relationId* - int - required
     *          - The ID of the property relation
     * @return array
     */
    public function updatePropertiesRelation(array $query): array
    {
        return $this->api(array_merge(["/rest/properties/relations"], $query), 'PUT');
    }
                    
    /**
     * @description Lists property relation values.
     * @tag Property
     * @return array
     */
    public function getPropertiesRelationsValues(): array
    {
        return $this->api("/rest/properties/relations/values");
    }
                
    /**
     * @description Creates a property relation value.
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *propertyId* - int - required
     *          - The ID of the property
     *      - *lang* - string - required
     *          - The lang of the property relation value
     *      - *value* - string - required
     *          - The value of the property relation
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation value
     *      - *relationId* - integer
     *          - The ID of the property relation
     *      - *lang* - string
     *          - The language of the property relation value
     *      - *value* - string
     *          - The value of the property relation
     *      - *description* - string
     *          - The description of the property relation value
     */
    public function createPropertiesRelationsValue(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/relations/values"], $query), 'POST', $data);
    }
                
    /**
     * @description Updates multiple property relation value
     * @tag Property
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation value
     *      - *relationId* - integer
     *          - The ID of the property relation
     *      - *lang* - string
     *          - The language of the property relation value
     *      - *value* - string
     *          - The value of the property relation
     *      - *description* - string
     *          - The description of the property relation value
     */
    public function updatePropertiesRelationsValue(): array
    {
        return $this->api("/rest/properties/relations/values", 'PUT');
    }
                    
    /**
     * @description Deletes a property relation value. The ID of the property relation value must be specified.
     * @tag Property
     * @param int $propertiesRelationValueId 
     * @param array $query
     *      - *propertyRelationValueId* - int - required
     *          - The ID of the property relation value
     */
    public function deletePropertiesRelationsValueByPropertiesRelationValueId(int $propertiesRelationValueId, array $query): void
    {
        $this->api(array_merge(["/rest/properties/relations/values/{$propertiesRelationValueId}"], $query), 'DELETE');
    }
                
    /**
     * @description Gets a property relation value. The ID of the property relation value must be specified.
     * @tag Property
     * @param int $propertiesRelationValueId 
     * @param array $query
     *      - *propertyRelationId* - int - required
     *          - The ID of the property relation
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation value
     *      - *relationId* - integer
     *          - The ID of the property relation
     *      - *lang* - string
     *          - The language of the property relation value
     *      - *value* - string
     *          - The value of the property relation
     *      - *description* - string
     *          - The description of the property relation value
     */
    public function getPropertiesRelationsValueByPropertiesRelationValueId(int $propertiesRelationValueId, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/relations/values/{$propertiesRelationValueId}"], $query));
    }
                
    /**
     * @description Updates a property relation value. The ID of the property relation value must be specified.
     * @tag Property
     * @param int $propertiesRelationValueId 
     * @param array $query
     *      - *$propertyRelationValueId* - int - required
     *          - The ID of the property relation value
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation value
     *      - *relationId* - integer
     *          - The ID of the property relation
     *      - *lang* - string
     *          - The language of the property relation value
     *      - *value* - string
     *          - The value of the property relation
     *      - *description* - string
     *          - The description of the property relation value
     */
    public function updatePropertiesRelationsValueByPropertiesRelationValueId(int $propertiesRelationValueId, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/relations/values/{$propertiesRelationValueId}"], $query), 'PUT');
    }
                    
    /**
     * @description Deletes a property relation. The ID of the property relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the property relation
     */
    public function deletePropertiesRelationByRelationId(int $relationId): void
    {
        $this->api("/rest/properties/relations/{$relationId}", 'DELETE');
    }
                
    /**
     * @description Gets a property relation. The ID of the property relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the relation
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation
     *      - *propertyId* - integer
     *          - The property ID of the property relation
     *      - *type* - string
     *          - The type of the property relation
     *      - *targetId* - string
     *          - The ID of the target of the property relation
     *      - *groupId* - integer
     *          - The property group ID of the property relation
     *      - *markup* - number
     *          - The mark up of the property relation
     *      - *value* - string
     *          - The value of the property relation for properties of the following type: int, float, date and file.
     */
    public function getPropertiesRelationByRelationId(int $relationId): array
    {
        return $this->api("/rest/properties/relations/{$relationId}");
    }
                
    /**
     * @description Updates a property relation. The ID of the property relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the property relation
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation
     *      - *propertyId* - integer
     *          - The property ID of the property relation
     *      - *type* - string
     *          - The type of the property relation
     *      - *targetId* - string
     *          - The ID of the target of the property relation
     *      - *groupId* - integer
     *          - The property group ID of the property relation
     *      - *markup* - number
     *          - The mark up of the property relation
     *      - *value* - string
     *          - The value of the property relation for properties of the following type: int, float, date and file.
     */
    public function updatePropertiesRelationByRelationId(int $relationId): array
    {
        return $this->api("/rest/properties/relations/{$relationId}", 'PUT');
    }
                    
    /**
     * @description Saves property relation file to S3.
     * @tag Property
     * @param int $relationId The ID of the property relation
     * @param array $query
     *      - *key* - string - required
     *          - The name of the file that needs to be saved
     *      - *content* - string - required
     *          - The actual file content in text format
     *      - *deleteIfExists* - boolean - required
     *          - Condition for the check of already existing file
     */
    public function createPropertiesRelationsFileByRelationId(int $relationId, array $query): void
    {
        $this->api(array_merge(["/rest/properties/relations/{$relationId}/file"], $query), 'POST');
    }
                    
    /**
     * @description Delete all property relation values of a specified property relation.
     * @tag Property
     * @param int $relationId 
     */
    public function deletePropertiesRelationsValueByRelationId(int $relationId): void
    {
        $this->api("/rest/properties/relations/{$relationId}/values", 'DELETE');
    }
                    
    /**
     * @description Lists property selections
     * @tag Property
     * @return array
     */
    public function getPropertiesSelections(): array
    {
        return $this->api("/rest/properties/selections");
    }
                
    /**
     * @description Creates a property selection.
     * @tag Property
     * @param array $data 
     * @param array $query
     *      - *propertyId* - int - required
     *          - The ID of the property
     *      - *position* - int - required
     *          - The position of the property selection
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection
     *      - *propertyId* - integer
     *          - The property ID of the property selection
     *      - *position* - integer
     *          - The position of the property selection
     */
    public function createPropertiesSelection(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/selections"], $query), 'POST', $data);
    }
                    
    /**
     * @description Deletes a property selection
     * @tag Property
     * @param int $propertySelectionId The ID of the property selection
     */
    public function deletePropertiesSelectionByPropertySelectionId(int $propertySelectionId): void
    {
        $this->api("/rest/properties/selections/{$propertySelectionId}", 'DELETE');
    }
                
    /**
     * @description Gets a property selection. The ID of property selection must be specified.
     * @tag Property
     * @param int $propertySelectionId The ID of the property selection
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection
     *      - *propertyId* - integer
     *          - The property ID of the property selection
     *      - *position* - integer
     *          - The position of the property selection
     */
    public function getPropertiesSelectionByPropertySelectionId(int $propertySelectionId): array
    {
        return $this->api("/rest/properties/selections/{$propertySelectionId}");
    }
                
    /**
     * @description Updates a property selection. The ID of the property selection must be specifed.
     * @tag Property
     * @param int $propertySelectionId 
     * @param array $query
     *      - *$propertySelectionId* - int - required
     *          - The ID of the property selection
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection
     *      - *propertyId* - integer
     *          - The property ID of the property selection
     *      - *position* - integer
     *          - The position of the property selection
     */
    public function updatePropertiesSelectionByPropertySelectionId(int $propertySelectionId, array $query): array
    {
        return $this->api(array_merge(["/rest/properties/selections/{$propertySelectionId}"], $query), 'PUT');
    }
                    
    /**
     * @description Gets the system language.
     * @tag Property

     */
    public function getPropertiesSystemlang(): void
    {
        $this->api("/rest/properties/systemlang");
    }
                    
    /**
     * @description Deletes a property. The ID of the property must be specified
     * @tag Property
     * @param int $propertyId The ID of the property
     */
    public function deletePropertyByPropertyId(int $propertyId): void
    {
        $this->api("/rest/properties/{$propertyId}", 'DELETE');
    }
                
    /**
     * @description Gets a property. The ID of the property must be specified.
     * @tag Property
     * @param int $propertyId The ID of the property
     * @return array
     *      - *id* - integer
     *          - The ID of the property
     *      - *cast* - string
     *          - The cast of the property (array values: 'empty','int','float','string','selection','text','html','date','file')
     *      - *type* - string
     *          - The type of the property (e.g. 'item' or 'contact')
     *      - *position* - integer
     *          - The position of the property
     */
    public function getPropertyByPropertyId(int $propertyId): array
    {
        return $this->api("/rest/properties/{$propertyId}");
    }
                
    /**
     * @description Updates a property. The ID of the property must be specified.
     * @tag Property
     * @param int $propertyId The ID of the property
     * @return array
     *      - *id* - integer
     *          - The ID of the property
     *      - *cast* - string
     *          - The cast of the property (array values: 'empty','int','float','string','selection','text','html','date','file')
     *      - *type* - string
     *          - The type of the property (e.g. 'item' or 'contact')
     *      - *position* - integer
     *          - The position of the property
     */
    public function updatePropertyByPropertyId(int $propertyId): array
    {
        return $this->api("/rest/properties/{$propertyId}", 'PUT');
    }
                
    /**
     * @description Searches for properties. Filters can be specified. Sort by argument can be specified. Sort order can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'names' = The names of the property.</li><li>'amazon' = The amazon values of the property.</li><li>'options' = The options of the property.</li><li>'groups' = The groups of the property.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to properties which have have a matching ID. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *cast* - string - optional
     *          - Filter restricts the list of results to properties which have have a matching cast. Possible search operators are: 'eq', 'in'
     *      - *group* - int - optional
     *          - Filter restricts the list of results to properties which have have a matching group id. Possible search operators are: 'eq', 'in'
     *      - *name* - string - optional
     *          - Filter restricts the list of results to properties which have have a matching name. Possible search operators are: 'eq', 'like'
     *      - *type* - string - optional
     *          - Filter restricts the list of results to properties which have have a matching type. Possible search operators are: 'eq', 'in'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to properties which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     *      - *option.units* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type units. Possible search operators are: 'eq', 'in'.
     *      - *option.vatId* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type vatId. Possible search operators are: 'eq', 'in'.
     *      - *option.displayOrder* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type displayOrder. Possible search operators are: 'eq', 'in'.
     *      - *option.markup* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type markup. Possible search operators are: 'eq', 'in'.
     *      - *option.mandatoryField* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type mandatoryField. Possible search operators are: 'eq', 'in'.
     *      - *option.orderProcess* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type orderProcess. Possible search operators are: 'eq', 'in'.
     *      - *option.customerRegistration* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type customerRegistration. Possible search operators are: 'eq', 'in'.
     *      - *option.contactSearch* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type contactSearch. Possible search operators are: 'eq', 'in'.
     *      - *visibility.referrers* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type referrers. Possible search operators are: 'eq', 'in'.
     *      - *visibility.clients* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type clients. Possible search operators are: 'eq', 'in'.
     *      - *visibility.display* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type display. Possible search operators are: 'eq', 'in'.
     *      - *visibility.opportunityStatus* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type opportunityStatus. Possible search operators are: 'eq', 'in'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Property
     */
    public function eachV2Properties(array $query = []): Iterator
    {
        return $this->eachInternal('getV2Properties', func_get_args());
    }
        
    /**
     * @description Searches for properties. Filters can be specified. Sort by argument can be specified. Sort order can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'names' = The names of the property.</li><li>'amazon' = The amazon values of the property.</li><li>'options' = The options of the property.</li><li>'groups' = The groups of the property.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to properties which have have a matching ID. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *cast* - string - optional
     *          - Filter restricts the list of results to properties which have have a matching cast. Possible search operators are: 'eq', 'in'
     *      - *group* - int - optional
     *          - Filter restricts the list of results to properties which have have a matching group id. Possible search operators are: 'eq', 'in'
     *      - *name* - string - optional
     *          - Filter restricts the list of results to properties which have have a matching name. Possible search operators are: 'eq', 'like'
     *      - *type* - string - optional
     *          - Filter restricts the list of results to properties which have have a matching type. Possible search operators are: 'eq', 'in'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to properties which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     *      - *option.units* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type units. Possible search operators are: 'eq', 'in'.
     *      - *option.vatId* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type vatId. Possible search operators are: 'eq', 'in'.
     *      - *option.displayOrder* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type displayOrder. Possible search operators are: 'eq', 'in'.
     *      - *option.markup* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type markup. Possible search operators are: 'eq', 'in'.
     *      - *option.mandatoryField* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type mandatoryField. Possible search operators are: 'eq', 'in'.
     *      - *option.orderProcess* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type orderProcess. Possible search operators are: 'eq', 'in'.
     *      - *option.customerRegistration* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type customerRegistration. Possible search operators are: 'eq', 'in'.
     *      - *option.contactSearch* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type contactSearch. Possible search operators are: 'eq', 'in'.
     *      - *visibility.referrers* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type referrers. Possible search operators are: 'eq', 'in'.
     *      - *visibility.clients* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type clients. Possible search operators are: 'eq', 'in'.
     *      - *visibility.display* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type display. Possible search operators are: 'eq', 'in'.
     *      - *visibility.opportunityStatus* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type opportunityStatus. Possible search operators are: 'eq', 'in'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Property
     */
    public function batchV2Properties(array $query = []): Iterator
    {
        return $this->batchInternal('getV2Properties', func_get_args());
    }
    
    /**
     * @description Searches for properties. Filters can be specified. Sort by argument can be specified. Sort order can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'names' = The names of the property.</li><li>'amazon' = The amazon values of the property.</li><li>'options' = The options of the property.</li><li>'groups' = The groups of the property.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to properties which have have a matching ID. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *cast* - string - optional
     *          - Filter restricts the list of results to properties which have have a matching cast. Possible search operators are: 'eq', 'in'
     *      - *group* - int - optional
     *          - Filter restricts the list of results to properties which have have a matching group id. Possible search operators are: 'eq', 'in'
     *      - *name* - string - optional
     *          - Filter restricts the list of results to properties which have have a matching name. Possible search operators are: 'eq', 'like'
     *      - *type* - string - optional
     *          - Filter restricts the list of results to properties which have have a matching type. Possible search operators are: 'eq', 'in'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to properties which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     *      - *option.units* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type units. Possible search operators are: 'eq', 'in'.
     *      - *option.vatId* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type vatId. Possible search operators are: 'eq', 'in'.
     *      - *option.displayOrder* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type displayOrder. Possible search operators are: 'eq', 'in'.
     *      - *option.markup* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type markup. Possible search operators are: 'eq', 'in'.
     *      - *option.mandatoryField* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type mandatoryField. Possible search operators are: 'eq', 'in'.
     *      - *option.orderProcess* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type orderProcess. Possible search operators are: 'eq', 'in'.
     *      - *option.customerRegistration* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type customerRegistration. Possible search operators are: 'eq', 'in'.
     *      - *option.contactSearch* - string - optional
     *          - Filter restricts the list of results to properties which have a matching option with the type contactSearch. Possible search operators are: 'eq', 'in'.
     *      - *visibility.referrers* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type referrers. Possible search operators are: 'eq', 'in'.
     *      - *visibility.clients* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type clients. Possible search operators are: 'eq', 'in'.
     *      - *visibility.display* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type display. Possible search operators are: 'eq', 'in'.
     *      - *visibility.opportunityStatus* - string - optional
     *          - Filter restricts the list of results to properties which have a matching visibility with the type opportunityStatus. Possible search operators are: 'eq', 'in'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Property
     */
    public function getV2Properties(array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties"], $query));
    }
                
    /**
     * @description Creates a property. At least one property name must be specified.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property
     *      - *cast* - string
     *          - The cast of the property (array values: 'empty','int','float','string','selection','text','html','date','file')
     *      - *type* - string
     *          - The type of the property (e.g. 'item' or 'contact')
     *      - *position* - integer
     *          - The position of the property
     */
    public function createV2Property(array $data): array
    {
        return $this->api("/rest/v2/properties", 'POST', $data);
    }
                    
    /**
     * @description Creates a property amazon.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property amazon
     *      - *propertyId* - integer
     *          - The property ID of the property amazon
     *      - *platform* - string
     *          - The platform of the property amazon
     *      - *category* - string
     *          - The category of the property amazon
     *      - *field* - string
     *          - The field of the property amazon
     */
    public function createV2PropertiesAmazon(array $data): array
    {
        return $this->api("/rest/v2/properties/amazon", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property amazon. The ID of the property amazon must be specified.
     * @tag Property
     * @param int $amazonId The ID of the property amazon
     */
    public function deleteV2PropertiesAmazonByAmazonId(int $amazonId): void
    {
        $this->api("/rest/v2/properties/amazon/{$amazonId}", 'DELETE');
    }
                
    /**
     * @description Gets a property amazon. The ID of the property amazon must be specified.
     * @tag Property
     * @param int $amazonId The ID of the property amazon
     * @return array
     *      - *id* - integer
     *          - The ID of the property amazon
     *      - *propertyId* - integer
     *          - The property ID of the property amazon
     *      - *platform* - string
     *          - The platform of the property amazon
     *      - *category* - string
     *          - The category of the property amazon
     *      - *field* - string
     *          - The field of the property amazon
     */
    public function getV2PropertiesAmazonByAmazonId(int $amazonId): array
    {
        return $this->api("/rest/v2/properties/amazon/{$amazonId}");
    }
                
    /**
     * @description Updates a property amazon. The ID of the property amazon must be specified.
     * @tag Property
     * @param int $amazonId The ID of the property amazon
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property amazon
     *      - *propertyId* - integer
     *          - The property ID of the property amazon
     *      - *platform* - string
     *          - The platform of the property amazon
     *      - *category* - string
     *          - The category of the property amazon
     *      - *field* - string
     *          - The field of the property amazon
     */
    public function updateV2PropertiesAmazonByAmazonId(int $amazonId, array $data): array
    {
        return $this->api("/rest/v2/properties/amazon/{$amazonId}", 'PUT', $data);
    }
                
    /**
     * @description Searches for property groups.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'names' = The names of the property group.</li><li>'options' = The options of the property group.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyGroup
     */
    public function eachV2PropertiesGroups(array $query = []): Iterator
    {
        return $this->eachInternal('getV2PropertiesGroups', func_get_args());
    }
        
    /**
     * @description Searches for property groups.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'names' = The names of the property group.</li><li>'options' = The options of the property group.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyGroup
     */
    public function batchV2PropertiesGroups(array $query = []): Iterator
    {
        return $this->batchInternal('getV2PropertiesGroups', func_get_args());
    }
    
    /**
     * @description Searches for property groups.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'names' = The names of the property group.</li><li>'options' = The options of the property group.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyGroup
     */
    public function getV2PropertiesGroups(array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/groups"], $query));
    }
                
    /**
     * @description Creates a property group. At least one group name must be specified.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group
     *      - *position* - integer
     *          - The position of the property group
     */
    public function createV2PropertiesGroup(array $data): array
    {
        return $this->api("/rest/v2/properties/groups", 'POST', $data);
    }
                    
    /**
     * @description Creates a group name.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group name
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *lang* - string
     *          - The language of the property group name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property group
     *      - *description* - string
     *          - The description of the property group
     */
    public function createV2PropertiesGroupsName(array $data): array
    {
        return $this->api("/rest/v2/properties/groups/names", 'POST', $data);
    }
                    
    /**
     * @description Deletes a group name. The ID of the group name must be specified.
     * @tag Property
     * @param int $nameId The ID of the group name
     */
    public function deleteV2PropertiesGroupsNameByNameId(int $nameId): void
    {
        $this->api("/rest/v2/properties/groups/names/{$nameId}", 'DELETE');
    }
                
    /**
     * @description Gets a group name. The ID of the group must be specified.
     * @tag Property
     * @param int $nameId The ID of the group name
     * @return array
     *      - *id* - integer
     *          - The ID of the property group name
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *lang* - string
     *          - The language of the property group name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property group
     *      - *description* - string
     *          - The description of the property group
     */
    public function getV2PropertiesGroupsNameByNameId(int $nameId): array
    {
        return $this->api("/rest/v2/properties/groups/names/{$nameId}");
    }
                
    /**
     * @description Updates a group name. The ID of the group name must be specified.
     * @tag Property
     * @param int $nameId The ID of the group name
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group name
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *lang* - string
     *          - The language of the property group name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property group
     *      - *description* - string
     *          - The description of the property group
     */
    public function updateV2PropertiesGroupsNameByNameId(int $nameId, array $data): array
    {
        return $this->api("/rest/v2/properties/groups/names/{$nameId}", 'PUT', $data);
    }
                    
    /**
     * @description Creates a group option.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group option
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *type* - string
     *          - The identifier of the property group option
     *      - *value* - string
     *          - The value of the property group option
     */
    public function createV2PropertiesGroupsOption(array $data): array
    {
        return $this->api("/rest/v2/properties/groups/options", 'POST', $data);
    }
                    
    /**
     * @description Deletes a group option. The ID of the group option must be specified.
     * @tag Property
     * @param int $optionId The ID of the group option
     */
    public function deleteV2PropertiesGroupsOptionByOptionId(int $optionId): void
    {
        $this->api("/rest/v2/properties/groups/options/{$optionId}", 'DELETE');
    }
                
    /**
     * @description Gets a group option. The ID of the group must be specified.
     * @tag Property
     * @param int $optionId The ID of the group option
     * @return array
     *      - *id* - integer
     *          - The ID of the property group option
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *type* - string
     *          - The identifier of the property group option
     *      - *value* - string
     *          - The value of the property group option
     */
    public function getV2PropertiesGroupsOptionByOptionId(int $optionId): array
    {
        return $this->api("/rest/v2/properties/groups/options/{$optionId}");
    }
                
    /**
     * @description Updates a group option. The ID of the group option must be specified.
     * @tag Property
     * @param int $optionId The ID of the group option
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group option
     *      - *groupId* - integer
     *          - The property group ID of the property group
     *      - *type* - string
     *          - The identifier of the property group option
     *      - *value* - string
     *          - The value of the property group option
     */
    public function updateV2PropertiesGroupsOptionByOptionId(int $optionId, array $data): array
    {
        return $this->api("/rest/v2/properties/groups/options/{$optionId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes a group relation. The ID of the group relation must be specified.
     * @tag Property
     * @param array $query
     *      - *relationId* - int - required
     *          - The ID of the group relation
     */
    public function deleteV2PropertiesGroupsRelation(array $query): void
    {
        $this->api(array_merge(["/rest/v2/properties/groups/relations"], $query), 'DELETE');
    }
            
    /**
     * @description Searches for group relations. Filter can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'group' = The related property group.</li><li>'property' = The related property.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyGroupRelation
     */
    public function eachV2PropertiesGroupsRelations(array $query = []): Iterator
    {
        return $this->eachInternal('getV2PropertiesGroupsRelations', func_get_args());
    }
        
    /**
     * @description Searches for group relations. Filter can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'group' = The related property group.</li><li>'property' = The related property.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyGroupRelation
     */
    public function batchV2PropertiesGroupsRelations(array $query = []): Iterator
    {
        return $this->batchInternal('getV2PropertiesGroupsRelations', func_get_args());
    }
    
    /**
     * @description Searches for group relations. Filter can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'group' = The related property group.</li><li>'property' = The related property.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyGroupRelation
     */
    public function getV2PropertiesGroupsRelations(array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/groups/relations"], $query));
    }
                
    /**
     * @description Creates a group relation.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group relation
     *      - *propertyId* - integer
     *          - The ID of the property
     *      - *groupId* - integer
     *          - The ID of the property group
     */
    public function createV2PropertiesGroupsRelation(array $data): array
    {
        return $this->api("/rest/v2/properties/groups/relations", 'POST', $data);
    }
                
    /**
     * @description Creates a group relation.
     * @tag Property
     * @param array $data 
     * @return array
     */
    public function updateV2PropertiesGroupsRelation(array $data): array
    {
        return $this->api("/rest/v2/properties/groups/relations", 'PUT', $data);
    }
                    
    /**
     * @description Deletes a group relation. The ID of the group relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the group relation
     */
    public function deleteV2PropertiesGroupsRelationByRelationId(int $relationId): void
    {
        $this->api("/rest/v2/properties/groups/relations/{$relationId}", 'DELETE');
    }
                
    /**
     * @description Gets a group relation. The ID of the group must be specified.
     * @tag Property
     * @param int $relationId The ID of the group relation
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'group' = The related property group.</li><li>'property' = The related property.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the property group relation
     *      - *propertyId* - integer
     *          - The ID of the property
     *      - *groupId* - integer
     *          - The ID of the property group
     */
    public function getV2PropertiesGroupsRelationByRelationId(int $relationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/groups/relations/{$relationId}"], $query));
    }
                    
    /**
     * @description Deletes a property group. The ID of the group must be specified.
     * @tag Property
     * @param int $groupId The ID of the property
     */
    public function deleteV2PropertiesGroupByGroupId(int $groupId): void
    {
        $this->api("/rest/v2/properties/groups/{$groupId}", 'DELETE');
    }
                
    /**
     * @description Gets a property group. The ID of the group must be specified.
     * @tag Property
     * @param int $groupId The ID of the group
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'names' = The names of the property group.</li><li>'options' = The options of the property group.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the property group
     *      - *position* - integer
     *          - The position of the property group
     */
    public function getV2PropertiesGroupByGroupId(int $groupId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/groups/{$groupId}"], $query));
    }
                
    /**
     * @description Updates a property group. The ID of the group must be specified.
     * @tag Property
     * @param int $groupId The ID of the group
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property group
     *      - *position* - integer
     *          - The position of the property group
     */
    public function updateV2PropertiesGroupByGroupId(int $groupId, array $data): array
    {
        return $this->api("/rest/v2/properties/groups/{$groupId}", 'PUT', $data);
    }
                    
    /**
     * @description Gets group names for the specified group ID.
     * @tag Property
     * @param int $groupId 
     * @return array
     */
    public function getV2PropertiesGroupsNamesByGroupId(int $groupId): array
    {
        return $this->api("/rest/v2/properties/groups/{$groupId}/names");
    }
                    
    /**
     * @description Gets group options for the specified group ID.
     * @tag Property
     * @param int $groupId 
     * @return array
     */
    public function getV2PropertiesGroupsOptionsByGroupId(int $groupId): array
    {
        return $this->api("/rest/v2/properties/groups/{$groupId}/options");
    }
                    
    /**
     * @description Creates a property name.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property name
     *      - *propertyId* - integer
     *          - The property ID of the property name
     *      - *lang* - string
     *          - The language of the property name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property name
     *      - *description* - string
     *          - The description of the property name
     */
    public function createV2PropertiesName(array $data): array
    {
        return $this->api("/rest/v2/properties/names", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property name. The ID of the property name must be specified.
     * @tag Property
     * @param int $nameId The ID of the property name
     */
    public function deleteV2PropertiesNameByNameId(int $nameId): void
    {
        $this->api("/rest/v2/properties/names/{$nameId}", 'DELETE');
    }
                
    /**
     * @description Gets a property name. The ID of the property must be specified.
     * @tag Property
     * @param int $nameId The ID of the property name
     * @return array
     *      - *id* - integer
     *          - The ID of the property name
     *      - *propertyId* - integer
     *          - The property ID of the property name
     *      - *lang* - string
     *          - The language of the property name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property name
     *      - *description* - string
     *          - The description of the property name
     */
    public function getV2PropertiesNameByNameId(int $nameId): array
    {
        return $this->api("/rest/v2/properties/names/{$nameId}");
    }
                
    /**
     * @description Updates a property name. The ID of the property name must be specified.
     * @tag Property
     * @param int $nameId The ID of the property name
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property name
     *      - *propertyId* - integer
     *          - The property ID of the property name
     *      - *lang* - string
     *          - The language of the property name as ISO 639-1 language code, e.g. en for English
     *      - *name* - string
     *          - The name of the property name
     *      - *description* - string
     *          - The description of the property name
     */
    public function updateV2PropertiesNameByNameId(int $nameId, array $data): array
    {
        return $this->api("/rest/v2/properties/names/{$nameId}", 'PUT', $data);
    }
                    
    /**
     * @description Creates a property option
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property option
     *      - *propertyId* - integer
     *          - The property ID of the property option
     *      - *type* - string
     *          - The identifier type of the option
     *      - *value* - string
     *          - The value of the option
     */
    public function createV2PropertiesOption(array $data): array
    {
        return $this->api("/rest/v2/properties/options", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property option. The ID of the property option must be specified.
     * @tag Property
     * @param int $optionId The ID of the property option
     */
    public function deleteV2PropertiesOptionByOptionId(int $optionId): void
    {
        $this->api("/rest/v2/properties/options/{$optionId}", 'DELETE');
    }
                
    /**
     * @description Gets a property option. The ID of the property option must be specified.
     * @tag Property
     * @param int $optionId The ID of the property option
     * @return array
     *      - *id* - integer
     *          - The ID of the property option
     *      - *propertyId* - integer
     *          - The property ID of the property option
     *      - *type* - string
     *          - The identifier type of the option
     *      - *value* - string
     *          - The value of the option
     */
    public function getV2PropertiesOptionByOptionId(int $optionId): array
    {
        return $this->api("/rest/v2/properties/options/{$optionId}");
    }
                
    /**
     * @description Updates a property option. The ID of the property option must be specified.
     * @tag Property
     * @param int $optionId The ID of the property option
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property option
     *      - *propertyId* - integer
     *          - The property ID of the property option
     *      - *type* - string
     *          - The identifier type of the option
     *      - *value* - string
     *          - The value of the option
     */
    public function updateV2PropertiesOptionByOptionId(int $optionId, array $data): array
    {
        return $this->api("/rest/v2/properties/options/{$optionId}", 'PUT', $data);
    }
                
    /**
     * @description Searches for properties relations. Filters can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property relation.</li><li>'group' = The property group of the property relation.</li><li>'values' = The values of the property relation.</li><li>'selectionValues' = The selection values of the property relation.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching ID. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *propertyId* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching propertyId. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *targetId* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching target id. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *property.cast* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching proeprty cast. Possible search operators are: 'eq', 'in'
     *      - *type* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching type. Possible search operators are: 'eq', 'in'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to property relations which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyRelation
     */
    public function eachV2PropertiesRelations(array $query = []): Iterator
    {
        return $this->eachInternal('getV2PropertiesRelations', func_get_args());
    }
        
    /**
     * @description Searches for properties relations. Filters can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property relation.</li><li>'group' = The property group of the property relation.</li><li>'values' = The values of the property relation.</li><li>'selectionValues' = The selection values of the property relation.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching ID. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *propertyId* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching propertyId. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *targetId* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching target id. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *property.cast* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching proeprty cast. Possible search operators are: 'eq', 'in'
     *      - *type* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching type. Possible search operators are: 'eq', 'in'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to property relations which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyRelation
     */
    public function batchV2PropertiesRelations(array $query = []): Iterator
    {
        return $this->batchInternal('getV2PropertiesRelations', func_get_args());
    }
    
    /**
     * @description Searches for properties relations. Filters can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property relation.</li><li>'group' = The property group of the property relation.</li><li>'values' = The values of the property relation.</li><li>'selectionValues' = The selection values of the property relation.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching ID. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *propertyId* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching propertyId. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *targetId* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching target id. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *property.cast* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching proeprty cast. Possible search operators are: 'eq', 'in'
     *      - *type* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching type. Possible search operators are: 'eq', 'in'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to property relations which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyRelation
     */
    public function getV2PropertiesRelations(array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/relations"], $query));
    }
                
    /**
     * @description Creates a list of property relations.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation
     *      - *propertyId* - integer
     *          - The property ID of the property relation
     *      - *type* - string
     *          - The type of the property relation
     *      - *targetId* - string
     *          - The ID of the target of the property relation
     *      - *groupId* - integer
     *          - The property group ID of the property relation
     *      - *markup* - number
     *          - The mark up of the property relation
     *      - *value* - string
     *          - The value of the property relation for properties of the following type: int, float, date and file.
     */
    public function createV2PropertiesRelation(array $data): array
    {
        return $this->api("/rest/v2/properties/relations", 'POST', $data);
    }
                
    /**
     * @description Updates a list of property relations. The ID of the each relation must be specified.
     * @tag Property
     * @param array $data 
     * @return array
     */
    public function updateV2PropertiesRelation(array $data): array
    {
        return $this->api("/rest/v2/properties/relations", 'PUT', $data);
    }
                    
    /**
     * @description Creates a property relation selection.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation selection value
     *      - *relationId* - integer
     *          - The relation ID of the property relation selection value
     *      - *selectionId* - integer
     *          - The selection ID of the property relation selection value
     */
    public function createV2PropertiesRelationsSelection(array $data): array
    {
        return $this->api("/rest/v2/properties/relations/selections", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property relation selection. The ID of the relation selection must be specified.
     * @tag Property
     * @param int $relationSelectionId The ID of the relation selection
     */
    public function deleteV2PropertiesRelationsSelectionByRelationSelectionId(int $relationSelectionId): void
    {
        $this->api("/rest/v2/properties/relations/selections/{$relationSelectionId}", 'DELETE');
    }
                
    /**
     * @description Gets a property relation selection. The ID of the relation selection must be specified.
     * @tag Property
     * @param int $relationSelectionId The ID of the relation selection
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'relation' = The relation of the property relation selection.</li><li>'selection' = The selection of the property relation selection.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation selection value
     *      - *relationId* - integer
     *          - The relation ID of the property relation selection value
     *      - *selectionId* - integer
     *          - The selection ID of the property relation selection value
     */
    public function getV2PropertiesRelationsSelectionByRelationSelectionId(int $relationSelectionId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/relations/selections/{$relationSelectionId}"], $query));
    }
                
    /**
     * @description Updates a property relation selection. The ID of the relation selection must be specified.
     * @tag Property
     * @param int $relationSelectionId The ID of the relation selection
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation selection value
     *      - *relationId* - integer
     *          - The relation ID of the property relation selection value
     *      - *selectionId* - integer
     *          - The selection ID of the property relation selection value
     */
    public function updateV2PropertiesRelationsSelectionByRelationSelectionId(int $relationSelectionId, array $data): array
    {
        return $this->api("/rest/v2/properties/relations/selections/{$relationSelectionId}", 'PUT', $data);
    }
                    
    /**
     * @description Creates a property relation value.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation value
     *      - *relationId* - integer
     *          - The ID of the property relation
     *      - *lang* - string
     *          - The language of the property relation value
     *      - *value* - string
     *          - The value of the property relation
     *      - *description* - string
     *          - The description of the property relation value
     */
    public function createV2PropertiesRelationsValue(array $data): array
    {
        return $this->api("/rest/v2/properties/relations/values", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property relation value. The ID of the relation value must be specified.
     * @tag Property
     * @param int $relationValueId The ID of the relation value
     */
    public function deleteV2PropertiesRelationsValueByRelationValueId(int $relationValueId): void
    {
        $this->api("/rest/v2/properties/relations/values/{$relationValueId}", 'DELETE');
    }
                
    /**
     * @description Gets a property relation value. The ID of the relation value must be specified.
     * @tag Property
     * @param int $relationValueId The ID of the relation value
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'relation' = The relation of the property relation selection.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation value
     *      - *relationId* - integer
     *          - The ID of the property relation
     *      - *lang* - string
     *          - The language of the property relation value
     *      - *value* - string
     *          - The value of the property relation
     *      - *description* - string
     *          - The description of the property relation value
     */
    public function getV2PropertiesRelationsValueByRelationValueId(int $relationValueId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/relations/values/{$relationValueId}"], $query));
    }
                
    /**
     * @description Updates a property relation value. The ID of the relation value must be specified.
     * @tag Property
     * @param int $relationValueId The ID of the relation value
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation value
     *      - *relationId* - integer
     *          - The ID of the property relation
     *      - *lang* - string
     *          - The language of the property relation value
     *      - *value* - string
     *          - The value of the property relation
     *      - *description* - string
     *          - The description of the property relation value
     */
    public function updateV2PropertiesRelationsValueByRelationValueId(int $relationValueId, array $data): array
    {
        return $this->api("/rest/v2/properties/relations/values/{$relationValueId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes a property relation. The ID of the relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the relation
     */
    public function deleteV2PropertiesRelationByRelationId(int $relationId): void
    {
        $this->api("/rest/v2/properties/relations/{$relationId}", 'DELETE');
    }
                
    /**
     * @description Gets a property relation. The ID of the property relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property relation.</li><li>'group' = The property group of the property relation.</li><li>'values' = The values of the property relation.</li><li>'selectionValues' = The selection values of the property relation.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation
     *      - *propertyId* - integer
     *          - The property ID of the property relation
     *      - *type* - string
     *          - The type of the property relation
     *      - *targetId* - string
     *          - The ID of the target of the property relation
     *      - *groupId* - integer
     *          - The property group ID of the property relation
     *      - *markup* - number
     *          - The mark up of the property relation
     *      - *value* - string
     *          - The value of the property relation for properties of the following type: int, float, date and file.
     */
    public function getV2PropertiesRelationByRelationId(int $relationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/relations/{$relationId}"], $query));
    }
                
    /**
     * @description Updates a property relation. The ID of the relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the relation
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation
     *      - *propertyId* - integer
     *          - The property ID of the property relation
     *      - *type* - string
     *          - The type of the property relation
     *      - *targetId* - string
     *          - The ID of the target of the property relation
     *      - *groupId* - integer
     *          - The property group ID of the property relation
     *      - *markup* - number
     *          - The mark up of the property relation
     *      - *value* - string
     *          - The value of the property relation for properties of the following type: int, float, date and file.
     */
    public function updateV2PropertiesRelationByRelationId(int $relationId, array $data): array
    {
        return $this->api("/rest/v2/properties/relations/{$relationId}", 'PUT', $data);
    }
                    
    /**
     * @description Delete the file of a property relation. The ID of the property relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the property relation
     */
    public function deleteV2PropertiesRelationsFileByRelationId(int $relationId): void
    {
        $this->api("/rest/v2/properties/relations/{$relationId}/file", 'DELETE');
    }
                
    /**
     * @description Upload a property relation file. The ID of the property relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the property relation
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation
     *      - *propertyId* - integer
     *          - The property ID of the property relation
     *      - *type* - string
     *          - The type of the property relation
     *      - *targetId* - string
     *          - The ID of the target of the property relation
     *      - *groupId* - integer
     *          - The property group ID of the property relation
     *      - *markup* - number
     *          - The mark up of the property relation
     *      - *value* - string
     *          - The value of the property relation for properties of the following type: int, float, date and file.
     */
    public function createV2PropertiesRelationsFileByRelationId(int $relationId): array
    {
        return $this->api("/rest/v2/properties/relations/{$relationId}/file", 'POST');
    }
                    
    /**
     * @description Gets property relation selections for the specified relation ID.
     * @tag Property
     * @param int $relationId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'relation' = The relation of the property relation selection.</li><li>'selection' = The selection of the property relation selection.</li></ul>
     * @return array
     */
    public function getV2PropertiesRelationsSelectionsByRelationId(int $relationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/relations/{$relationId}/selections"], $query));
    }
                    
    /**
     * @description Gets property relation values for the specified relation ID.
     * @tag Property
     * @param int $relationId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'relation' = The relation of the property relation selection.</li></ul>
     * @return array
     */
    public function getV2PropertiesRelationsValuesByRelationId(int $relationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/relations/{$relationId}/values"], $query));
    }
                    
    /**
     * @description Creates a property selection. At least one selection name must be specified.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection
     *      - *propertyId* - integer
     *          - The property ID of the property selection
     *      - *position* - integer
     *          - The position of the property selection
     */
    public function createV2PropertiesSelection(array $data): array
    {
        return $this->api("/rest/v2/properties/selections", 'POST', $data);
    }
                    
    /**
     * @description Creates a property selection name.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection name
     *      - *selectionId* - integer
     *          - The selection ID of the property selection name
     *      - *lang* - string
     *          - The language of the property selection name
     *      - *name* - string
     *          - The name of the property selection name
     *      - *description* - string
     *          - The description of the property selection name
     */
    public function createV2PropertiesSelectionsName(array $data): array
    {
        return $this->api("/rest/v2/properties/selections/names", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property selection name. The ID of the selection name must be specified.
     * @tag Property
     * @param int $nameId The ID of the selection name
     */
    public function deleteV2PropertiesSelectionsNameByNameId(int $nameId): void
    {
        $this->api("/rest/v2/properties/selections/names/{$nameId}", 'DELETE');
    }
                
    /**
     * @description Gets a property selection name. The ID of the selection name must be specified.
     * @tag Property
     * @param int $nameId The ID of the selection
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection name
     *      - *selectionId* - integer
     *          - The selection ID of the property selection name
     *      - *lang* - string
     *          - The language of the property selection name
     *      - *name* - string
     *          - The name of the property selection name
     *      - *description* - string
     *          - The description of the property selection name
     */
    public function getV2PropertiesSelectionsNameByNameId(int $nameId): array
    {
        return $this->api("/rest/v2/properties/selections/names/{$nameId}");
    }
                
    /**
     * @description Updates a property selection name. The ID of the selection name must be specified.
     * @tag Property
     * @param int $nameId The ID of the selection name
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection name
     *      - *selectionId* - integer
     *          - The selection ID of the property selection name
     *      - *lang* - string
     *          - The language of the property selection name
     *      - *name* - string
     *          - The name of the property selection name
     *      - *description* - string
     *          - The description of the property selection name
     */
    public function updateV2PropertiesSelectionsNameByNameId(int $nameId, array $data): array
    {
        return $this->api("/rest/v2/properties/selections/names/{$nameId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes a property selection. The ID of the selection must be specified.
     * @tag Property
     * @param int $selectionId The ID of the selection
     */
    public function deleteV2PropertiesSelectionBySelectionId(int $selectionId): void
    {
        $this->api("/rest/v2/properties/selections/{$selectionId}", 'DELETE');
    }
                
    /**
     * @description Gets a property selection. The ID of the selection must be specified.
     * @tag Property
     * @param int $selectionId The ID of the selection
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property selection.</li><li>'names' = The names of the property selection.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection
     *      - *propertyId* - integer
     *          - The property ID of the property selection
     *      - *position* - integer
     *          - The position of the property selection
     */
    public function getV2PropertiesSelectionBySelectionId(int $selectionId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/selections/{$selectionId}"], $query));
    }
                
    /**
     * @description Updates a property selection. The ID of the selection must be specified.
     * @tag Property
     * @param int $selectionId The ID of the selection
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property selection
     *      - *propertyId* - integer
     *          - The property ID of the property selection
     *      - *position* - integer
     *          - The position of the property selection
     */
    public function updateV2PropertiesSelectionBySelectionId(int $selectionId, array $data): array
    {
        return $this->api("/rest/v2/properties/selections/{$selectionId}", 'PUT', $data);
    }
                    
    /**
     * @description Gets property selection names for the specified selection ID.
     * @tag Property
     * @param int $selectionId 
     * @return array
     */
    public function getV2PropertiesSelectionsNamesBySelectionId(int $selectionId): array
    {
        return $this->api("/rest/v2/properties/selections/{$selectionId}/names");
    }
                
    /**
     * @description Searches for properties relations. Filters can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property relation.</li><li>'group' = The property group of the property relation.</li><li>'values' = The values of the property relation.</li><li>'selectionValues' = The selection values of the property relation.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching ID. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *propertyId* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching propertyId. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *targetId* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching target id. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *property.cast* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching proeprty cast. Possible search operators are: 'eq', 'in'
     *      - *type* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching type. Possible search operators are: 'eq', 'in'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to property relations which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyRelation
     */
    public function eachV2PropertiesUuidRelations(array $query = []): Iterator
    {
        return $this->eachInternal('getV2PropertiesUuidRelations', func_get_args());
    }
        
    /**
     * @description Searches for properties relations. Filters can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property relation.</li><li>'group' = The property group of the property relation.</li><li>'values' = The values of the property relation.</li><li>'selectionValues' = The selection values of the property relation.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching ID. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *propertyId* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching propertyId. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *targetId* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching target id. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *property.cast* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching proeprty cast. Possible search operators are: 'eq', 'in'
     *      - *type* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching type. Possible search operators are: 'eq', 'in'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to property relations which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyRelation
     */
    public function batchV2PropertiesUuidRelations(array $query = []): Iterator
    {
        return $this->batchInternal('getV2PropertiesUuidRelations', func_get_args());
    }
    
    /**
     * @description Searches for properties relations. Filters can be specified.
     * @tag Property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property relation.</li><li>'group' = The property group of the property relation.</li><li>'values' = The values of the property relation.</li><li>'selectionValues' = The selection values of the property relation.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching ID. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *propertyId* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching propertyId. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *targetId* - int - optional
     *          - Filter restricts the list of results to property relations which have have a matching target id. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *property.cast* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching proeprty cast. Possible search operators are: 'eq', 'in'
     *      - *type* - string - optional
     *          - Filter restricts the list of results to property relations which have have a matching type. Possible search operators are: 'eq', 'in'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to property relations which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertyRelation
     */
    public function getV2PropertiesUuidRelations(array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/uuid/relations"], $query));
    }
                
    /**
     * @description Creates a list of property relations.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation
     *      - *propertyId* - integer
     *          - The property ID of the property relation
     *      - *type* - string
     *          - The type of the property relation
     *      - *targetId* - string
     *          - The ID of the target of the property relation
     *      - *groupId* - integer
     *          - The property group ID of the property relation
     *      - *markup* - number
     *          - The mark up of the property relation
     *      - *value* - string
     *          - The value of the property relation for properties of the following type: int, float, date and file.
     */
    public function createV2PropertiesUuidRelation(array $data): array
    {
        return $this->api("/rest/v2/properties/uuid/relations", 'POST', $data);
    }
                
    /**
     * @description Updates a list of property relations. The ID of the each relation must be specified.
     * @tag Property
     * @param array $data 
     * @return array
     */
    public function updateV2PropertiesUuidRelation(array $data): array
    {
        return $this->api("/rest/v2/properties/uuid/relations", 'PUT', $data);
    }
                    
    /**
     * @description Creates a property relation selection.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation selection value
     *      - *relationId* - integer
     *          - The relation ID of the property relation selection value
     *      - *selectionId* - integer
     *          - The selection ID of the property relation selection value
     */
    public function createV2PropertiesUuidRelationsSelection(array $data): array
    {
        return $this->api("/rest/v2/properties/uuid/relations/selections", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property relation selection. The ID of the relation selection must be specified.
     * @tag Property
     * @param int $relationSelectionId The ID of the relation selection
     */
    public function deleteV2PropertiesUuidRelationsSelectionByRelationSelectionId(int $relationSelectionId): void
    {
        $this->api("/rest/v2/properties/uuid/relations/selections/{$relationSelectionId}", 'DELETE');
    }
                
    /**
     * @description Gets a property relation selection. The ID of the relation selection must be specified.
     * @tag Property
     * @param int $relationSelectionId The ID of the relation selection
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'relation' = The relation of the property relation selection.</li><li>'selection' = The selection of the property relation selection.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation selection value
     *      - *relationId* - integer
     *          - The relation ID of the property relation selection value
     *      - *selectionId* - integer
     *          - The selection ID of the property relation selection value
     */
    public function getV2PropertiesUuidRelationsSelectionByRelationSelectionId(int $relationSelectionId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/uuid/relations/selections/{$relationSelectionId}"], $query));
    }
                
    /**
     * @description Updates a property relation selection. The ID of the relation selection must be specified.
     * @tag Property
     * @param int $relationSelectionId The ID of the relation selection
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation selection value
     *      - *relationId* - integer
     *          - The relation ID of the property relation selection value
     *      - *selectionId* - integer
     *          - The selection ID of the property relation selection value
     */
    public function updateV2PropertiesUuidRelationsSelectionByRelationSelectionId(int $relationSelectionId, array $data): array
    {
        return $this->api("/rest/v2/properties/uuid/relations/selections/{$relationSelectionId}", 'PUT', $data);
    }
                    
    /**
     * @description Creates a property relation value.
     * @tag Property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation value
     *      - *relationId* - integer
     *          - The ID of the property relation
     *      - *lang* - string
     *          - The language of the property relation value
     *      - *value* - string
     *          - The value of the property relation
     *      - *description* - string
     *          - The description of the property relation value
     */
    public function createV2PropertiesUuidRelationsValue(array $data): array
    {
        return $this->api("/rest/v2/properties/uuid/relations/values", 'POST', $data);
    }
                    
    /**
     * @description Deletes a property relation value. The ID of the relation value must be specified.
     * @tag Property
     * @param int $relationValueId The ID of the relation value
     */
    public function deleteV2PropertiesUuidRelationsValueByRelationValueId(int $relationValueId): void
    {
        $this->api("/rest/v2/properties/uuid/relations/values/{$relationValueId}", 'DELETE');
    }
                
    /**
     * @description Gets a property relation value. The ID of the relation value must be specified.
     * @tag Property
     * @param int $relationValueId The ID of the relation value
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'relation' = The relation of the property relation selection.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation value
     *      - *relationId* - integer
     *          - The ID of the property relation
     *      - *lang* - string
     *          - The language of the property relation value
     *      - *value* - string
     *          - The value of the property relation
     *      - *description* - string
     *          - The description of the property relation value
     */
    public function getV2PropertiesUuidRelationsValueByRelationValueId(int $relationValueId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/uuid/relations/values/{$relationValueId}"], $query));
    }
                
    /**
     * @description Updates a property relation value. The ID of the relation value must be specified.
     * @tag Property
     * @param int $relationValueId The ID of the relation value
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation value
     *      - *relationId* - integer
     *          - The ID of the property relation
     *      - *lang* - string
     *          - The language of the property relation value
     *      - *value* - string
     *          - The value of the property relation
     *      - *description* - string
     *          - The description of the property relation value
     */
    public function updateV2PropertiesUuidRelationsValueByRelationValueId(int $relationValueId, array $data): array
    {
        return $this->api("/rest/v2/properties/uuid/relations/values/{$relationValueId}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes a property relation. The ID of the relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the relation
     */
    public function deleteV2PropertiesUuidRelationByRelationId(int $relationId): void
    {
        $this->api("/rest/v2/properties/uuid/relations/{$relationId}", 'DELETE');
    }
                
    /**
     * @description Gets a property uuid relation. The ID of the property must be specified.
     * @tag Property
     * @param int $relationId The ID of the property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property relation.</li><li>'group' = The property group of the property relation.</li><li>'values' = The values of the property relation.</li><li>'selectionValues' = The selection values of the property relation.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation
     *      - *propertyId* - integer
     *          - The property ID of the property relation
     *      - *type* - string
     *          - The type of the property relation
     *      - *targetId* - string
     *          - The ID of the target of the property relation
     *      - *groupId* - integer
     *          - The property group ID of the property relation
     *      - *markup* - number
     *          - The mark up of the property relation
     *      - *value* - string
     *          - The value of the property relation for properties of the following type: int, float, date and file.
     */
    public function getV2PropertiesUuidRelationByRelationId(int $relationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/uuid/relations/{$relationId}"], $query));
    }
                
    /**
     * @description Updates a property relation. The ID of the relation must be specified.
     * @tag Property
     * @param int $relationId The ID of the relation
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property relation
     *      - *propertyId* - integer
     *          - The property ID of the property relation
     *      - *type* - string
     *          - The type of the property relation
     *      - *targetId* - string
     *          - The ID of the target of the property relation
     *      - *groupId* - integer
     *          - The property group ID of the property relation
     *      - *markup* - number
     *          - The mark up of the property relation
     *      - *value* - string
     *          - The value of the property relation for properties of the following type: int, float, date and file.
     */
    public function updateV2PropertiesUuidRelationByRelationId(int $relationId, array $data): array
    {
        return $this->api("/rest/v2/properties/uuid/relations/{$relationId}", 'PUT', $data);
    }
                    
    /**
     * @description Gets property relation selections for the specified relation ID.
     * @tag Property
     * @param int $relationId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'relation' = The relation of the property relation selection.</li><li>'selection' = The selection of the property relation selection.</li></ul>
     * @return array
     */
    public function getV2PropertiesUuidRelationsSelectionsByRelationId(int $relationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/uuid/relations/{$relationId}/selections"], $query));
    }
                    
    /**
     * @description Gets property relation values for the specified relation ID.
     * @tag Property
     * @param int $relationId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'relation' = The relation of the property relation selection.</li></ul>
     * @return array
     */
    public function getV2PropertiesUuidRelationsValuesByRelationId(int $relationId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/uuid/relations/{$relationId}/values"], $query));
    }
                    
    /**
     * @description Deletes a property. The ID of the property must be specified.
     * @tag Property
     * @param int $propertyId The ID of the property
     */
    public function deleteV2PropertyByPropertyId(int $propertyId): void
    {
        $this->api("/rest/v2/properties/{$propertyId}", 'DELETE');
    }
                
    /**
     * @description Gets a property. The ID of the property must be specified.
     * @tag Property
     * @param int $propertyId The ID of the property
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'names' = The names of the property.</li><li>'amazon' = The amazon values of the property.</li><li>'options' = The options of the property.</li><li>'groups' = The groups of the property.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the property
     *      - *cast* - string
     *          - The cast of the property (array values: 'empty','int','float','string','selection','text','html','date','file')
     *      - *type* - string
     *          - The type of the property (e.g. 'item' or 'contact')
     *      - *position* - integer
     *          - The position of the property
     */
    public function getV2PropertyByPropertyId(int $propertyId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/{$propertyId}"], $query));
    }
                
    /**
     * @description Updates a property. The ID of the property must be specified.
     * @tag Property
     * @param int $propertyId The ID of the property
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the property
     *      - *cast* - string
     *          - The cast of the property (array values: 'empty','int','float','string','selection','text','html','date','file')
     *      - *type* - string
     *          - The type of the property (e.g. 'item' or 'contact')
     *      - *position* - integer
     *          - The position of the property
     */
    public function updateV2PropertyByPropertyId(int $propertyId, array $data): array
    {
        return $this->api("/rest/v2/properties/{$propertyId}", 'PUT', $data);
    }
                    
    /**
     * @description Gets property amazons for the specified property ID.
     * @tag Property
     * @param int $propertyId 
     * @return array
     */
    public function getV2PropertiesAmazonByPropertyId(int $propertyId): array
    {
        return $this->api("/rest/v2/properties/{$propertyId}/amazon");
    }
                    
    /**
     * @description Gets property names for the specified property ID.
     * @tag Property
     * @param int $propertyId 
     * @return array
     */
    public function getV2PropertiesNamesByPropertyId(int $propertyId): array
    {
        return $this->api("/rest/v2/properties/{$propertyId}/names");
    }
                    
    /**
     * @description Gets property options for the specified property ID.
     * @tag Property
     * @param int $propertyId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property option.</li></ul>
     *      - *type* - string - optional
     *          - Filter restricts the list of results to properties which have have a matching type. Possible search operators are: 'eq', 'in'
     * @return array
     */
    public function getV2PropertiesOptionsByPropertyId(int $propertyId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/{$propertyId}/options"], $query));
    }
                
    /**
     * @description Gets property selections for the specified property ID.
     * @tag Property
     * @param int $propertyId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property selection.</li><li>'names' = The names of the property selection.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - string - optional
     *          - Filter restricts the list of results to property selections which have have a matching id. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *name* - string - optional
     *          - Filter restricts the list of results to property selections which have have a matching name. Possible search operators are: 'eq', 'like'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to property selections which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertySelection
     */
    public function eachV2PropertiesSelectionsByPropertyId(int $propertyId, array $query = []): Iterator
    {
        return $this->eachInternal('getV2PropertiesSelectionsByPropertyId', func_get_args());
    }
        
    /**
     * @description Gets property selections for the specified property ID.
     * @tag Property
     * @param int $propertyId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property selection.</li><li>'names' = The names of the property selection.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - string - optional
     *          - Filter restricts the list of results to property selections which have have a matching id. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *name* - string - optional
     *          - Filter restricts the list of results to property selections which have have a matching name. Possible search operators are: 'eq', 'like'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to property selections which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertySelection
     */
    public function batchV2PropertiesSelectionsByPropertyId(int $propertyId, array $query = []): Iterator
    {
        return $this->batchInternal('getV2PropertiesSelectionsByPropertyId', func_get_args());
    }
    
    /**
     * @description Gets property selections for the specified property ID.
     * @tag Property
     * @param int $propertyId 
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'property' = The property of the property selection.</li><li>'names' = The names of the property selection.</li></ul>
     *      - *orderBy* - string - optional
     *          - Sorts the results. Append '_asc' or '_desc' to specify the sorting order. '_desc' is the default value if no other is specified.
     *      - *page* - int - optional
     *          - The requested page of results. Default value is 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of results per page. Maximum value is 250. Default value is 50.
     *      - *id* - string - optional
     *          - Filter restricts the list of results to property selections which have have a matching id. Possible search operators are: 'eq', 'in', 'gte', 'gt', 'lte', 'lt', 'between'
     *      - *name* - string - optional
     *          - Filter restricts the list of results to property selections which have have a matching name. Possible search operators are: 'eq', 'like'
     *      - *updatedAt* - string - optional
     *          - Filter restricts the list of results to property selections which have a matching updatedAt. Possible search operators are: 'between', 'gte', 'lte', 'gt', 'lt'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of PropertySelection
     */
    public function getV2PropertiesSelectionsByPropertyId(int $propertyId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/properties/{$propertyId}/selections"], $query));
    }
    
}
