<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Returns extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Delete a return order by i given returns order ID. The returns order ID is mandatory.
     * @tag Returns
     * @param int $returnsId 
     * @param array $query
     *      - *$returnsId* - int - required
     *          - Return order ID
     */
    public function deleteOrdersShippingReturnByReturnsId(int $returnsId, array $query): void
    {
        $this->api(array_merge(["/rest/orders/shipping/returns/{$returnsId}"], $query), 'DELETE');
    }
                
    /**
     * @description Get Order returns specified by the request and the returnsId.
     * @tag Returns
     * @param int $returnsId The id of the order returns to search for.
     * @param array $query
     *      - *with* - array - optional
     *          - Load additional relations for an order. Currently possible are:
    <ul>
    <li>'documents' = The document objects that are associated with the order returns.</li>
    <li>'labels' = The base64 encoded labels that are associated with the order returns.</li>
    </ul>
    Example: <code>?with[]=documents&with[]=labels</code>
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderReturns
     */
    public function getOrdersShippingReturnByReturnsId(int $returnsId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/shipping/returns/{$returnsId}"], $query));
    }
                
    /**
     * @description Update return order by a given ID. The return order ID is mandatory.
     * @tag Returns
     * @param int $returnsId 
     * @param array $query
     *      - *$returnsId* - int - required
     *          - Return order ID
     *      - *$orderId* - int - optional
     *          - Order ID for the return order
     *      - *$providerId* - int - optional
     *          - Return provider ID
     *      - *$externalNumber* - string - optional
     *          - Returns package number
     *      - *$base64Label* - string - optional
     *          - Label in base64 format
     */
    public function updateOrdersShippingReturnByReturnsId(int $returnsId, array $query): void
    {
        $this->api(array_merge(["/rest/orders/shipping/returns/{$returnsId}"], $query), 'PUT');
    }
                
    /**
     * @description Get Order returns specified by the request and the orderId.
     * @tag Returns
     * @param int $orderId The id of the order to search the orders returns
     * @param array $query
     *      - *orderType* - string - optional
     *          - The order type to search for delivery or return orders
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order. Currently possible are:
    <ul>
    <li>'documents' = The document objects that are associated with the order returns.</li>
    <li>'labels' = The base64 encoded labels that are associated with the order returns.</li>
    </ul>
    Example: <code>?with[]=documents&with[]=labels</code>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderReturns
     */
    public function eachOrdersShippingReturnsByOrderId(int $orderId, array $query = []): Iterator
    {
        return $this->eachInternal('getOrdersShippingReturnsByOrderId', func_get_args());
    }
        
    /**
     * @description Get Order returns specified by the request and the orderId.
     * @tag Returns
     * @param int $orderId The id of the order to search the orders returns
     * @param array $query
     *      - *orderType* - string - optional
     *          - The order type to search for delivery or return orders
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order. Currently possible are:
    <ul>
    <li>'documents' = The document objects that are associated with the order returns.</li>
    <li>'labels' = The base64 encoded labels that are associated with the order returns.</li>
    </ul>
    Example: <code>?with[]=documents&with[]=labels</code>
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderReturns
     */
    public function batchOrdersShippingReturnsByOrderId(int $orderId, array $query = []): Iterator
    {
        return $this->batchInternal('getOrdersShippingReturnsByOrderId', func_get_args());
    }
    
    /**
     * @description Get Order returns specified by the request and the orderId.
     * @tag Returns
     * @param int $orderId The id of the order to search the orders returns
     * @param array $query
     *      - *orderType* - string - optional
     *          - The order type to search for delivery or return orders
     *      - *page* - int - optional
     *          - The page to get. The default page that will be returned is page 1.
     *      - *itemsPerPage* - int - optional
     *          - The number of orders to be displayed per page. The default number of orders per page is 50.
     *      - *with* - array - optional
     *          - Load additional relations for an order. Currently possible are:
    <ul>
    <li>'documents' = The document objects that are associated with the order returns.</li>
    <li>'labels' = The base64 encoded labels that are associated with the order returns.</li>
    </ul>
    Example: <code>?with[]=documents&with[]=labels</code>
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of OrderReturns
     */
    public function getOrdersShippingReturnsByOrderId(int $orderId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/orders/{$orderId}/shipping/returns"], $query));
    }
                
    /**
     * @description Add return order to an orderId
     * @tag Returns
     * @param int $orderId 
     * @param array $query
     *      - *$orderId* - int - required
     *          - Order ID
     *      - *$providerId* - int - required
     *          - Return provider ID
     *      - *$externalNumber* - string - required
     *          - Returns package number
     *      - *$base64Label* - string - optional
     *          - Label in base64 format
     */
    public function createOrdersShippingReturnByOrderId(int $orderId, array $query): void
    {
        $this->api(array_merge(["/rest/orders/{$orderId}/shipping/returns"], $query), 'POST');
    }
                    
    /**
     * @description Assign a label to order return specified by the orderId and the returnsId.
     * @tag Returns
     * @param int $returnsId The id of the order returns to be assigned.
     * @param int $orderId The id of the order that the order returns has to be assigned to.
     * @return array
     *      - *id* - integer
     *      - *orderId* - integer
     *      - *returnsOrderId* - integer
     *      - *providerId* - integer
     *      - *fileName* - string
     *      - *externalNumber* - string
     *      - *externalData* - string
     */
    public function updateOrdersShippingReturnsAssignLabelByReturnsIdOrderId(int $returnsId, int $orderId): array
    {
        return $this->api("/rest/orders/{$orderId}/shipping/returns/assign_label/{$returnsId}", 'PUT');
    }
    
}
