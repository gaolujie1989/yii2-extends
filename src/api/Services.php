<?php

namespace lujie\amazon\sp\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
*/
class Services extends \lujie\amazon\sp\BaseAmazonSPClient
{

                
    /**
     * @description Gets details of service job indicated by the provided `serviceJobID`.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 20 | 40 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $serviceJobId A service job identifier.
     * @return array
     *      - *payload* - 
     *          - The payload for the `getServiceJobByServiceJobId` operation.
     *      - *errors* - 
     *          - An unexpected condition occurred during the `getServiceJobByServiceJobId` operation.
     */
    public function getServiceJobByServiceJobId(string $serviceJobId): array
    {
        return $this->api("/service/v1/serviceJobs/{$serviceJobId}");
    }
                        
    /**
     * @description Cancels the service job indicated by the service job identifier specified.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $serviceJobId An Amazon defined service job identifier.
     * @param array $query
     *      - *cancellationReasonCode* - string - required
     *          - A cancel reason code that specifies the reason for cancelling a service job.
     * @return array
     *      - *errors* - 
     *          - Encountered errors for the `cancelServiceJobByServiceJobId` operation.
     */
    public function cancelServiceJobByServiceJobId(string $serviceJobId, array $query): array
    {
        return $this->api(array_merge(["/service/v1/serviceJobs/{$serviceJobId}/cancellations"], $query), 'PUT');
    }
                        
    /**
     * @description Completes the service job indicated by the service job identifier specified.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $serviceJobId An Amazon defined service job identifier.
     * @return array
     *      - *errors* - 
     *          - Encountered errors for the `completeServiceJobByServiceJobId` operation.
     */
    public function completeServiceJobByServiceJobId(string $serviceJobId): array
    {
        return $this->api("/service/v1/serviceJobs/{$serviceJobId}/completions", 'PUT');
    }
                        
    /**
     * @description Gets service job details for the specified filter query.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 10 | 40 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param array $query
     *      - *serviceOrderIds* - array - optional
     *          - List of service order ids for the query you want to perform.Max values supported 20.
     *      - *serviceJobStatus* - array - optional
     *          - A list of one or more job status by which to filter the list of jobs.
     *      - *pageToken* - string - optional
     *          - String returned in the response of your previous request.
     *      - *pageSize* - integer - optional
     *          - A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
     *      - *sortField* - string - optional
     *          - Sort fields on which you want to sort the output.
     *      - *sortOrder* - string - optional
     *          - Sort order for the query you want to perform.
     *      - *createdAfter* - string - optional
     *          - A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if `LastUpdatedAfter` is not specified. Specifying both `CreatedAfter` and `LastUpdatedAfter` returns an error.
     *      - *createdBefore* - string - optional
     *          - A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
     *      - *lastUpdatedAfter* - string - optional
     *          - A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if `createdAfter` is not specified. Specifying both `CreatedAfter` and `LastUpdatedAfter` returns an error.
     *      - *lastUpdatedBefore* - string - optional
     *          - A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
     *      - *scheduleStartDate* - string - optional
     *          - A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
     *      - *scheduleEndDate* - string - optional
     *          - A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
     *      - *marketplaceIds* - array - required
     *          - Used to select jobs that were placed in the specified marketplaces.
     *      - *asins* - array - optional
     *          - List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
     *      - *requiredSkills* - array - optional
     *          - A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
     *      - *storeIds* - array - optional
     *          - List of Amazon-defined identifiers for the region scope. Max values supported is 50.
     * @return array
     *      - *payload* - 
     *          - The payload for the `getServiceJobs` operation.
     *      - *errors* - 
     *          - An unexpected condition occurred during the `getServiceJobs` operation.
     */
    public function getServiceJobs(array $query): array
    {
        return $this->api(array_merge(["/service/v1/serviceJobs"], $query));
    }
                        
    /**
     * @description Adds an appointment to the service job indicated by the service job identifier specified.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $serviceJobId An Amazon defined service job identifier.
     * @param array $data 
     * @return array
     *      - *appointmentId* - 
     *          - New appointment identifier generated during the `addAppointmentForServiceJobByServiceJobId` or `rescheduleAppointmentForServiceJobByServiceJobId` operations.
     *      - *warnings* - 
     *          - Warnings generated during the `addAppointmentForServiceJobByServiceJobId` or `rescheduleAppointmentForServiceJobByServiceJobId` operations.
     *      - *errors* - 
     *          - Errors occurred during during the `addAppointmentForServiceJobByServiceJobId` or `rescheduleAppointmentForServiceJobByServiceJobId` operations.
     */
    public function addAppointmentForServiceJobByServiceJobId(string $serviceJobId, array $data): array
    {
        return $this->api("/service/v1/serviceJobs/{$serviceJobId}/appointments", 'POST', $data);
    }
                        
    /**
     * @description Reschedules an appointment for the service job indicated by the service job identifier specified.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $serviceJobId An Amazon defined service job identifier.
     * @param string $appointmentId An existing appointment identifier for the Service Job.
     * @param array $data 
     * @return array
     *      - *appointmentId* - 
     *          - New appointment identifier generated during the `addAppointmentForServiceJobByServiceJobId` or `rescheduleAppointmentForServiceJobByServiceJobId` operations.
     *      - *warnings* - 
     *          - Warnings generated during the `addAppointmentForServiceJobByServiceJobId` or `rescheduleAppointmentForServiceJobByServiceJobId` operations.
     *      - *errors* - 
     *          - Errors occurred during during the `addAppointmentForServiceJobByServiceJobId` or `rescheduleAppointmentForServiceJobByServiceJobId` operations.
     */
    public function rescheduleAppointmentForServiceJobByServiceJobId(string $serviceJobId, string $appointmentId, array $data): array
    {
        return $this->api("/service/v1/serviceJobs/{$serviceJobId}/appointments/{$appointmentId}", 'POST', $data);
    }
                        
    /**
     * @description Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 2 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $serviceJobId An Amazon-defined service job identifier. Get this value by calling the `getServiceJobs` operation of the Services API.
     * @param string $appointmentId An Amazon-defined identifier of active service job appointment.
     * @param array $data 
     * @return array
     *      - *payload* - object
     *          - The payload for the `assignAppointmentResource` operation.
     *      - *errors* - 
     *          - Errors occurred during during the `assignAppointmentResources` operation.
     */
    public function assignAppointmentResources(string $serviceJobId, string $appointmentId, array $data): array
    {
        return $this->api("/service/v1/serviceJobs/{$serviceJobId}/appointments/{$appointmentId}/resources", 'PUT', $data);
    }
                        
    /**
     * @description Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $serviceJobId An Amazon-defined service job identifier. Get this value by calling the `getServiceJobs` operation of the Services API.
     * @param string $appointmentId An Amazon-defined identifier of active service job appointment.
     * @param array $data 
     */
    public function setAppointmentFulfillmentData(string $serviceJobId, string $appointmentId, array $data): void
    {
        $this->api("/service/v1/serviceJobs/{$serviceJobId}/appointments/{$appointmentId}/fulfillment", 'PUT', $data);
    }
                        
    /**
     * @description Provides capacity slots in a format similar to availability records.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $resourceId Resource Identifier.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - An identifier for the marketplace in which the resource operates.
     *      - *nextPageToken* - string - optional
     *          - Next page token returned in the response of your previous request.
     * @param array $data 
     * @return array
     *      - *resourceId* - string
     *          - Resource Identifier.
     *      - *capacities* - array
     *          - Array of range capacities where each entry is for a specific capacity type.
     *      - *nextPageToken* - string
     *          - Next page token, if there are more pages.
     */
    public function getRangeSlotCapacity(string $resourceId, array $query, array $data): array
    {
        return $this->api(array_merge(["/service/v1/serviceResources/{$resourceId}/capacity/range"], $query), 'POST', $data);
    }
                        
    /**
     * @description Provides capacity in fixed-size slots. 

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $resourceId Resource Identifier.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - An identifier for the marketplace in which the resource operates.
     *      - *nextPageToken* - string - optional
     *          - Next page token returned in the response of your previous request.
     * @param array $data 
     * @return array
     *      - *resourceId* - string
     *          - Resource Identifier.
     *      - *slotDuration* - number
     *          - The duration of each slot which is returned. This value will be a multiple of 5 and fall in the following range: 5 <= `slotDuration` <= 360.
     *      - *capacities* - array
     *          - Array of capacity slots in fixed slot format.
     *      - *nextPageToken* - string
     *          - Next page token, if there are more pages.
     */
    public function getFixedSlotCapacity(string $resourceId, array $query, array $data): array
    {
        return $this->api(array_merge(["/service/v1/serviceResources/{$resourceId}/capacity/fixed"], $query), 'POST', $data);
    }
                        
    /**
     * @description Update the schedule of the given resource.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $resourceId Resource (store) Identifier
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - An identifier for the marketplace in which the resource operates.
     * @param array $data 
     * @return array
     *      - *payload* - array
     *          - Contains the `UpdateScheduleRecords` for which the error/warning has occurred.
     *      - *errors* - 
     *          - Errors encountered, if any.
     */
    public function updateSchedule(string $resourceId, array $query, array $data): array
    {
        return $this->api(array_merge(["/service/v1/serviceResources/{$resourceId}/schedules"], $query), 'PUT', $data);
    }
                        
    /**
     * @description Create a reservation.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - An identifier for the marketplace in which the resource operates.
     * @param array $data 
     * @return array
     *      - *payload* - 
     *          - `CreateReservationRecord` contains only the new `reservationId` if the operation was successful. Otherwise it will contain the reservation entity with warnings/errors.
     *      - *errors* - 
     *          - Errors encountered, if any.
     */
    public function createReservation(array $query, array $data): array
    {
        return $this->api(array_merge(["/service/v1/reservation"], $query), 'POST', $data);
    }
                        
    /**
     * @description Update a reservation.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $reservationId Reservation Identifier
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - An identifier for the marketplace in which the resource operates.
     * @param array $data 
     * @return array
     *      - *payload* - 
     *          - `UpdateReservationRecord` contains only the new `reservationId` if the operation was successful. Otherwise it will contain the reservation entity with warnings/errors.
     *      - *errors* - 
     *          - Errors encountered, if any.
     */
    public function updateReservation(string $reservationId, array $query, array $data): array
    {
        return $this->api(array_merge(["/service/v1/reservation/{$reservationId}"], $query), 'PUT', $data);
    }
                
    /**
     * @description Cancel a reservation. 

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $reservationId Reservation Identifier
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - An identifier for the marketplace in which the resource operates.
     * @return array
     *      - *errors* - 
     *          - Errors encountered, if any
     */
    public function cancelReservation(string $reservationId, array $query): array
    {
        return $this->api(array_merge(["/service/v1/reservation/{$reservationId}"], $query), 'DELETE');
    }
                        
    /**
     * @description Gets appointment slots for the service associated with the service job id specified.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param string $serviceJobId A service job identifier to retrive appointment slots for associated service.
     * @param array $query
     *      - *marketplaceIds* - array - required
     *          - An identifier for the marketplace in which the resource operates.
     *      - *startTime* - string - optional
     *          - A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `startTime` is provided, `endTime` should also be provided. Default value is as per business configuration.
     *      - *endTime* - string - optional
     *          - A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `endTime` is provided, `startTime` should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
     * @return array
     *      - *payload* - 
     *          - The appointment slots fetched based on service context.
     *      - *errors* - 
     *          - Errors occurred in getting schedule.
     */
    public function getAppointmmentSlotsByJobId(string $serviceJobId, array $query): array
    {
        return $this->api(array_merge(["/service/v1/serviceJobs/{$serviceJobId}/appointmentSlots"], $query));
    }
                        
    /**
     * @description Gets appointment slots as per the service context specified.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 20 | 40 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param array $query
     *      - *asin* - string - required
     *          - ASIN associated with the service.
     *      - *storeId* - string - required
     *          - Store identifier defining the region scope to retrive appointment slots.
     *      - *marketplaceIds* - array - required
     *          - An identifier for the marketplace for which appointment slots are queried
     *      - *startTime* - string - optional
     *          - A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `startTime` is provided, `endTime` should also be provided. Default value is as per business configuration.
     *      - *endTime* - string - optional
     *          - A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `endTime` is provided, `startTime` should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
     * @return array
     *      - *payload* - 
     *          - The appointment slots fetched based on service context.
     *      - *errors* - 
     *          - Errors occurred in getting schedule.
     */
    public function getAppointmentSlots(array $query): array
    {
        return $this->api(array_merge(["/service/v1/appointmentSlots"], $query));
    }
                        
    /**
     * @description Creates an upload destination.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @tag service
     * @param array $data 
     * @return array
     *      - *payload* - 
     *      - *errors* - 
     */
    public function createServiceDocumentUploadDestination(array $data): array
    {
        return $this->api("/service/v1/documents", 'POST', $data);
    }
        
}
