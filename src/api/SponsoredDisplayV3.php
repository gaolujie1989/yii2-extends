<?php

namespace lujie\amazon\advertising\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description This API enables programmatic access for campaign creation, management, and reporting for Sponsored Display campaigns. For more information on the functionality, see the [Sponsored Display Support Center](https://advertising.amazon.com/help#GTPPHE6RAWC2C4LZ). For API onboarding information, see the [account setup](https://advertising.amazon.com/API/docs/en-us/guides/onboarding/overview) topic.<br/><br/>
> This specification is available for download from the **[Advertising API developer portal](https://d3a0d0y2hgofx6.cloudfront.net/openapi/en-us/sponsored-display/3-0/openapi.yaml).**
*/
class SponsoredDisplayV3 extends \lujie\amazon\advertising\BaseAmazonAdvertisingClient
{

                
    /**
     * @description Gets an array of Campaign objects for a requested set of Sponsored Display campaigns. Note that the Campaign object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.     * @tag Campaigns
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
     *      - *name* - string - optional
     *          - Optional. The returned array includes only campaign with the specified name using an exact string match.
     *      - *campaignIdFilter* - string - optional
     *          - Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
     *      - *portfolioIdFilter* - string - optional
     *          - Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
     */
    public function listCampaigns(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/campaigns"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description 
     * @tag Campaigns
     * @param array $data An array of Campaign objects. For each object, specify a campaign identifier and mutable fields with their updated values. The mutable fields are `name`, `state`, `budget`, `startDate`, and `endDate`. Maximum length of the array is 100 objects.
     */
    public function updateCampaigns(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/campaigns", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description 
     * @tag Campaigns
     * @param array $data An array of Campaign objects. For each object, specify required fields and their values. Required fields are `name`, `tactic`, `state`, and `startDate`. Maximum length of the array is 100 objects. If you don't specify a `budget`, it will be set as the [default budget for your region](https://advertising.amazon.com/API/docs/en-us/concepts/limits#default-budgets). Campaign names must be unique across SD, SB, and SP.
  If you are using Optimization rules, the following campaign budget must be at least:
  - 5x the value of any COST_PER_ORDER threshold.
  - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.
  - 20x the value of any COST_PER_CLICK threshold.

     */
    public function createCampaigns(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/campaigns", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Returns a Campaign object for a requested campaign. Note that the Campaign object is designed for performance, with a small set of commonly used campaign fields to reduce size. If the extended set of fields is required, use the campaign operations that return the CampaignResponseEx object.     * @tag Campaigns
     * @param int $campaignId The identifier of the requested campaign.
     * @return array
     */
    public function getCampaign(int $campaignId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/campaigns/{$campaignId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.     * @tag Campaigns
     * @param int $campaignId The identifier of the campaign.
     * @return array
     *      - *code* - string
     *          - The HTTP status code of the response.
     *      - *description* - string
     *          - A human-readable description of the response.
     *      - *campaignId* - 
     */
    public function archiveCampaign(int $campaignId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/campaigns/{$campaignId}", 'DELETE', ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an array of CampaignResponseEx objects for a set of requested campaigns.     * @tag Campaigns
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
     *      - *name* - string - optional
     *          - Optional. The returned array includes only campaign with the specified name using an exact string match.
     *      - *campaignIdFilter* - string - optional
     *          - Optional. The returned array includes only campaigns with identifiers matching those specified in the comma-delimited string.
     *      - *portfolioIdFilter* - string - optional
     *          - Optional. The returned array includes only campaigns associated with Portfolio identifiers matching those specified in the comma-delimited string.
     */
    public function listCampaignsEx(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/campaigns/extended"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Returns a CampaignResponseEx object for a requested campaign. The CampaignResponseEx includes the extended set of available fields.     * @tag Campaigns
     * @param int $campaignId The identifier of the requested campaign.
     * @return array
     *      - *campaignId* - number
     *          - The identifier of the campaign.
     *      - *name* - string
     *          - The name of the campaign.
     *      - *tactic* - 
     *      - *budgetType* - string
     *          - The time period over which the amount specified in the `budget` property is allocated.
     *      - *budget* - number
     *          - The amount of the budget.
     *      - *startDate* - string
     *          - The YYYYMMDD start date of the campaign. The date must be today or in the future.
     *      - *endDate* - string
     *          - The YYYYMMDD end date of the campaign.
     *      - *state* - string
     *          - The state of the campaign.
     *      - *portfolioId* - integer
     *          - Identifier of the portfolio that will be associated with the campaign. If null then the campaign will be disassociated from existing portfolio. Campaigns with CPC and vCPM costType are supported.
     *      - *servingStatus* - string
     *          - The status of the campaign.
     *      - *costType* - string
     *          - Determines how the campaign will bid and charge.
|Name|Description|
|----|----------|-----------|
|cpc |[Default] The performance of this campaign is measured by the clicks triggered by the ad.|
|vcpm|The performance of this campaign is measured by the viewed impressions triggered by the ad. $1 is the minimum bid for vCPM.|
     *      - *creationDate* - integer
     *          - Epoch date the campaign was created.
     *      - *lastUpdatedDate* - integer
     *          - Epoch date of the last update to any property associated with the campaign.
     *      - *ruleBasedBudget* - 
     */
    public function getCampaignResponseEx(int $campaignId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/campaigns/extended/{$campaignId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an array of AdGroup objects for a requested set of Sponsored Display ad groups. Note that the AdGroup object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the ad group operations that return the AdGroupResponseEx object.     * @tag Ad Groups
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. Sets a cursor into the requested set of campaigns. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Sets the number of AdGroup objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten ad groups set `startIndex=0` and `count=10`. To return the next ten ad groups, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. The returned array is filtered to include only ad groups with state set to one of the values in the specified comma-delimited list.
     *      - *campaignIdFilter* - string - optional
     *          - Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the specified comma-delimited list.
     *      - *adGroupIdFilter* - string - optional
     *          - Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
     *      - *name* - string - optional
     *          - Optional. The returned array includes only ad groups with the specified name.
     */
    public function listAdGroups(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/adGroups"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description 
     * @tag Ad Groups
     * @param array $data An array of AdGroup objects. For each object, specify an ad group identifier and mutable fields with their updated values. The mutable fields are 'name', 'defaultBid', and 'state'. Maximum length of the array is 100 objects.
     */
    public function updateAdGroups(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/adGroups", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description 
     * @tag Ad Groups
     * @param array $data An array of AdGroup objects. For each object, specify required fields and their values. Required fields are `campaignId`, `name`, `state`, and `defaultBid`. Maximum length of the array is 100 objects. Note - when using landingPageType of OFF_AMAZON_LINK or STORES within productAds, only 1 adGroup is supported.
     */
    public function createAdGroups(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/adGroups", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Returns an AdGroup object for a requested campaign. Note that the AdGroup object is designed for performance, with a small set of commonly used ad group fields to reduce size. If the extended set of fields is required, use the campaign operations that return the AdGroupResponseEx object.     * @tag Ad Groups
     * @param int $adGroupId The identifier of the requested ad group.
     * @return array
     */
    public function getAdGroup(int $adGroupId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/adGroups/{$adGroupId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.     * @tag Ad Groups
     * @param int $adGroupId The identifier of the requested ad group.
     * @return array
     *      - *code* - string
     *          - The HTTP status code of the response.
     *      - *description* - string
     *          - A human-readable description of the response.
     *      - *adGroupId* - 
     */
    public function archiveAdGroup(int $adGroupId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/adGroups/{$adGroupId}", 'DELETE', ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an array of AdGroupResponseEx objects for a set of requested ad groups.     * @tag Ad Groups
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. Sets a cursor into the requested set of ad groups. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Sets the number of Campaign objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten campaigns set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. The returned array is filtered to include only campaigns with state set to one of the values in the comma-delimited list.
     *      - *campaignIdFilter* - string - optional
     *          - Optional. The returned array is filtered to include only ad groups associated with the campaign identifiers in the comma-delimited list.
     *      - *adGroupIdFilter* - string - optional
     *          - Optional. The returned array is filtered to include only ad groups with an identifier specified in the comma-delimited list.
     *      - *name* - string - optional
     *          - Optional. The returned array includes only ad groups with the specified name.
     */
    public function listAdGroupsEx(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/adGroups/extended"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description 
     * @tag Ad Groups
     * @param int $adGroupId The identifier of the requested ad group.
     * @return array
     *      - *adGroupId* - number
     *          - The identifier of the ad group.
     *      - *name* - string
     *          - The name of the ad group.
     *      - *campaignId* - number
     *          - The identifier of the campaign that this ad group is associated with.
     *      - *defaultBid* - number
     *          - The amount of the default bid associated with the ad group. Used if no bid is specified.
     *      - *state* - string
     *          - The delivery state of the ad group.
     *      - *tactic* - 
     *      - *creativeType* - 
     *      - *servingStatus* - string
     *          - The status of the ad group.
     *      - *bidOptimization* - string
     *          - Bid optimization type for the Adgroup. Default behavior is to optimize for clicks. Note, reach, clicks, leads are only accepted with productAds that include landingPageURL OFF_AMAZON_LINK.
|Name|CostType|Description|
|----|--------|-----------|
|reach|vcpm|Optimize for viewable impressions. $1 is the minimum bid for vCPM.|
|clicks [Default]|cpc|Optimize for page visits.|
|conversions|cpc|Optimize for conversion.|
|leads |cpc| Optimize for lead generation.|
     *      - *creationDate* - integer
     *          - Epoch time the ad group was created.
     *      - *lastUpdatedDate* - integer
     *          - Epoch time any property in the ad group was last updated.
     */
    public function getAdGroupResponseEx(int $adGroupId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/adGroups/extended/{$adGroupId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an array of ProductAd objects for a requested set of Sponsored Display product ads. Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operation that returns the ProductAdResponseEx object.     * @tag Product Ads
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Sets the number of ProductAd objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten product ad set `startIndex=0` and `count=10`. To return the next ten product ads, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. The returned array is filtered to include only products ads associated with campaigns that have state set to one of the values in the comma-delimited list.
     *      - *adIdFilter* - string - optional
     *          - Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
     *      - *adGroupIdFilter* - string - optional
     *          - Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
     *      - *campaignIdFilter* - string - optional
     *          - Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
     */
    public function listProductAds(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/productAds"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description 
     * @tag Product Ads
     * @param array $data An array of ProductAd objects. For each object, specify a product ad identifier and the only mutable field, `state`. Maximum length of the array is 100 objects.
     */
    public function updateProductAds(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/productAds", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description 
     * @tag Product Ads
     * @param array $data An array of ProductAd objects. For each object, specify required fields and their values. Required fields are `adGroupId` and `state`. Within any campaign, you must pass consistent fields of either `asin` (for vendors), `sku` (for sellers), or `landingPageURL` (when linking to other pages), these cannot be mixed for any given campaign. Maximum length of the array is 100 objects.
     */
    public function createProductAds(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/productAds", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Note that the ProductAd object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use a product ad operations that returns the ProductAdResponseEx object.     * @tag Product Ads
     * @param int $adId The identifier of the requested product ad.
     * @return array
     */
    public function getProductAd(int $adId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/productAds/{$adId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description This operation is equivalent to an update operation that sets the status field to 'archived'. Note that setting the status field to 'archived' is permanent and can't be undone. See [Developer Notes](https://advertising.amazon.com/API/docs/en-us/info/developer-notes#archiving) for more information.     * @tag Product Ads
     * @param int $adId The identifier of the produce ad.
     * @return array
     *      - *code* - string
     *          - The HTTP status code of the response.
     *      - *description* - string
     *          - A human-readable description of the response.
     *      - *adId* - number
     *          - The identifier of the ad.
     */
    public function archiveProductAd(int $adId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/productAds/{$adId}", 'DELETE', ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an array of ProductAdResponseEx objects for a set of requested ad groups. The ProductAdResponseEx object includes the extended set of available fields.     * @tag Product Ads
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. Sets a cursor into the requested set of product ads. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Sets the number of ProduceAdEx objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten product ads set `startIndex=0` and `count=10`. To return the next ten campaigns, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. The returned array is filtered to include only campaigns with state set to one of the values in the specified comma-delimited list.
     *      - *adIdFilter* - string - optional
     *          - Optional. The returned array includes only product ads with identifiers matching those in the comma-delimited string.
     *      - *adGroupIdFilter* - string - optional
     *          - Optional. The returned array is filtered to include only products ads associated with ad groups identifiers in the comma-delimited list.
     *      - *campaignIdFilter* - string - optional
     *          - Optional. The returned array is filtered to include only product ads associated with the campaign identifiers in the comma-delimited list.
     */
    public function listProductAdsEx(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/productAds/extended"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description 
     * @tag Product Ads
     * @param int $adId The identifier of the requested product ad.
     * @return array
     *      - *adId* - number
     *          - The identifier of the ad.
     *      - *adGroupId* - number
     *          - The identifier of the ad group associated with the ad.
     *      - *campaignId* - number
     *          - The identifier of the campaign associated with the ad.
     *      - *landingPageURL* - 
     *      - *landingPageType* - 
     *      - *adName* - 
     *      - *asin* - string
     *          - The ASIN of the product being advertised. This parameter is included in the response for sellers and vendors.
     *      - *sku* - string
     *          - The SKU of the product being advertised. This parameter is included in the response for sellers.
     *      - *state* - string
     *          - The state of the product ad.
     *      - *servingStatus* - string
     *          - The status of the product ad.
     *      - *creationDate* - integer
     *          - Epoch date the product ad was created.
     *      - *lastUpdatedDate* - integer
     *          - Epoch date of the last update to any property associated with the product ad.
     */
    public function getProductAdResponseEx(int $adId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/productAds/extended/{$adId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an array of websites/apps that are on the advertiser's Brand Safety Deny List. It can take up to 15 minutes
from the time a domain is added/deleted to the time it is reflected in the deny list.     * @tag Brand Safety List
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. Sets a cursor into the requested set of domains. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.

     *      - *count* - int - optional
     *          - Optional. Sets the number of domain objects in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 domains set startIndex=0 and count=1000. To return the next 1000 domains, set startIndex=1000 and count=1000, and so on. Defaults to max page size(1000).

     * @return array
     *      - *pagination* - 
     *      - *domains* - array
     *          - List of Brand Safety Deny List Domains
     */
    public function listDomains(array $query = [], string $contentType = 'application/json'): array
    {
        return $this->api(array_merge(["/sd/brandSafety/deny"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Creates one or more domains to add to a Brand Safety Deny List. The Brand Safety Deny List is at the advertiser level. It can take up to 15 minutes from the time a domain is added to the time it is reflected in the deny list.
     * @tag Brand Safety List
     * @param array $data An array of Brand Safety List Domain objects. For each object, specify required fields and their values. Maximum length of the array is 10,000 objects.

     *      - *domains* - array
     * @return array
     *      - *requestId* - string
     *          - The identifier of the request
     */
    public function createBrandSafetyDenyListDomains(array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/brandSafety/deny", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Archives all of the domains in the Brand Safety Deny List. It can take several hours from the time a domain is deleted to the time it is reflected in the deny list. You can check the status of the delete request by calling GET /sd/brandSafety/{requestId}/status. If the status is "COMPLETED", you can call GET /sd/brandSafety/deny to validate that your deny list has been successfully deleted.
     * @tag Brand Safety List
     * @return array
     *      - *requestId* - string
     *          - The identifier of the request
     */
    public function deleteBrandSafetyDenyList(string $contentType = 'application/json'): array
    {
        return $this->api("/sd/brandSafety/deny", 'DELETE', ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Uses the `reportId` value from the response of a report previously requested via `POST` method of the `/sd/{recordType}/report` operation.

**To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**     * @tag Reports
     * @param string $reportId The identifier of the requested report.
     * @return array
     *      - *reportId* - string
     *          - The identifier of the report.
     *      - *recordType* - string
     *          - The type of report requested.
     *      - *status* - string
     *          - The build status of the report.
     *      - *statusDetails* - string
     *          - A human-readable description of the current status.
     *      - *location* - string
     *          - The URI location of the report.
     *      - *fileSize* - integer
     *          - The size of the report file, in bytes.
     *      - *expiration* - integer
     *          - Epoch date of the expiration of the URI in the `location` property.
     */
    public function getReportStatus(string $reportId, string $contentType = 'application/json'): array
    {
        return $this->api("/v2/reports/{$reportId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets a `307 Temporary Redirect` response that includes a `location` header with the value set to an AWS S3 path where the report is located. The path expires after 30 seconds. If the path expires before the report is downloaded, a new report request must be created.

**To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**     * @tag Reports
     * @param string $reportId The identifier of the requested report.
     */
    public function downloadReport(string $reportId): void
    {
        $this->api("/v2/reports/{$reportId}/download");
    }
                    
    /**
     * @description **To understand the call flow for asynchronous reports, see [Getting started with sponsored ads reports](/API/docs/en-us/guides/reporting/v2/sponsored-ads-reports).**

The Sponsored Display API supports creation of reports for campaigns, ad groups, product ads, targets, and asins. Create a ReportRequest object specifying the fields corresponding to performance data metrics to include in the report.     * @tag Reports
     * @param string $recordType The type of report to generate, either `campaigns`, `adGroups`, `productAds`, `targets`, or `asins`. The 'asins' report, also known as the Purchased products report, is only available for seller brand owners.
     * @param array $data 
     *      - *reportDate* - string
     *          - Date in YYYYMMDD format. The report contains only metrics generated on the specified date. Note that the time zone used for date calculation is the one associated with the profile used to make the request.
     *      - *tactic* - 
     *      - *segment* - 
     *      - *metrics* - string
     *          - A comma-separated list of the metrics to be included in the report.

Each report type supports different metrics. **To understand supported metrics for each report type, see [Report types](/API/docs/en-us/guides/reporting/v2/report-types).**

**Note**: Campaigns with vCPM costType should use view+click based metrics (viewAttributedConversions14d, viewAttributedDetailPageView14d, viewAttributedSales14d, viewAttributedUnitsOrdered14d, viewImpressions).

**Note**: Detail page view metrics (attributedDetailPageView14d, viewAttributedDetailPageView14d) have an SLA of 3 days.

**Tip**: Use new-to-brand (NTB) metrics to calculate how efficient your campaigns are at driving new shoppers:

  1. Percentage of NTB orders = attributedOrdersNewToBrand14d / attributedConversions14d
  2. Percentage NTB sales = attributedSalesNewToBrand14d / attributedSales14d
  3. Percentage NTB units = attributedUnitsOrderedNewToBrand14d / attributedUnitsOrdered14d
  4. NTB order rate = attributedOrdersNewToBrand14 / impressions
     * @return array
     *      - *reportId* - string
     *          - The identifier of the report.
     *      - *recordType* - string
     *          - The type of report requested.
     *      - *status* - string
     *          - The build status of the report.
     *      - *statusDetails* - string
     *          - A human-readable description of the current status.
     *      - *location* - string
     *          - The URI location of the report.
     *      - *fileSize* - integer
     *          - The size of the report file, in bytes.
     *      - *expiration* - integer
     *          - Epoch date of the expiration of the URI in the `location` property.
     */
    public function requestReport(string $recordType, array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/{$recordType}/report", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets a list of targeting clauses objects for a requested set of Sponsored Display targets. Note that the Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the target operations that return the TargetingClauseEx object.     * @tag Targeting
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. 0-indexed record offset for the result set. Defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Number of records to include in the paged response. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. Restricts results to those with `state` set to values in the specified comma-separated list.
     *      - *targetIdFilter* - string - optional
     *          - Optional. Restricts results to ads with the specified `tagetId` specified in comma-separated list
     *      - *adGroupIdFilter* - string - optional
     *          - Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified `adGroupId`.
     *      - *campaignIdFilter* - string - optional
     *          - Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
     */
    public function listTargetingClauses(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/targets"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Updates one or more targeting clauses. Targeting clauses are identified using their targetId. The mutable fields are `bid` and `state`. Maximum length of the array is 100 objects.     * @tag Targeting
     * @param array $data A list of up to 1000 targeting clauses. Mutable fields:
* `state`
* `bid` (only mutable when the targeting clause's adGroup does not have any enabled optimization rule)
     */
    public function updateTargetingClauses(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/targets", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Successfully created targeting clauses are assigned a unique `targetId` value.

Create new targeting clauses for **both** Audience and Contextual campaigns with tactic 'T00030' using the above and the following:
| Contextual targeting clause | Description |
|------------------|-------------|
| similarProduct | Dynamic segment to target products that are similar to the advertised asin. We recommend using 'similarProduct' targeting for all adGroups. |
| asinSameAs=B0123456789 | Target this product. |
| asinCategorySameAs=12345 | Target products in the category. |
| asinCategorySameAs=12345 asinBrandSameAs=45678 | Target products in the category and brand. |

**Refinements:**
- asinBrandSameAs
- asinPriceBetween
- asinPriceGreaterThan
- asinPriceLessThan
- asinReviewRatingLessThan
- asinReviewRatingGreaterThan
- asinReviewRatingBetween
- asinIsPrimeShippingEligible
- asinAgeRangeSameAs
- asinGenreSameAs

**Refinement Notes:**
* Brand, price, and review predicates are optional and may only be specified if category is also specified.
* Review predicates accept numbers between 0 and 5 and are inclusive.
* When using either of the 'between' strings to construct a targeting expression the format of the string is 'double-double' where the first double must be smaller than the second double. Prices are not inclusive.
* 'similarProduct' has no expression value or refinements.

| Audience targeting clause | Description |
|------------------|-------------|
| views(exactProduct lookback=30) | Target an audience that has viewed the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN. |
| views(similarProduct lookback=60) | Target an audience that has viewed similar products to the advertised asins in the past 7,14,30,60, or 90 days. Note: This target should only be used for productAds with SKU or ASIN.|
| views(asinCategorySameAs=12345 lookback=90) | Target an audience that has viewed products in the given category in the past 7,14,30,60, or 90 days. |
| views(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=60) | Target an audience that has viewed products in the given category, brand, and price range in the past 7,14,30,60, or 90 days. |
| purchases(relatedProduct lookback=180) | Target an audience that has purchased a related product in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.|
| purchases(exactProduct lookback=365) | Target an audience that has purchased the advertised asins in the past 7,14,30,60,90,180 or 365 days. Note: This target should only be used for productAds with SKU or ASIN.|
| purchases(asinCategorySameAs=12345 asinBrandSameAs=45678 asinPriceBetween=50-100 lookback=90) | Target an audience that has purchased products in the given category, brand, and price range in the past 7,14,30,60,90,180 or 365 days |
| audiencesLikelyInterestedInAd | Dynamic segment to target audiences that are likely to consider and buy from your business. We recommend that you add this segment to all of your campaigns to help you achieve greater reach and campaign scale. Note: this is only supported when using landingPageType of OFF_AMAZON_LINK |
| audience(audienceSameAs=12345) | Target the given Amazon Audience. |

| Content targeting clause | Description |
|------------------|-------------|
| contentCategorySameAs=amzn1.iab-content.325 | Target an audience that has engaged with or shown interest in the given entertainment category. |

Notes on content targeting:
* The `contentCategorySameAs` targeting predicate is required
* For all iab categories, see [Discovering entertainment target categories](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/entertainment-targeting#discovering-entertainment-target-categories).

Note:
1. You can still create new targeting clauses for Contextual campaigns with tactic 'T00020' using the Contextual clauses above.
2. There is a limit of 200 targeting clauses per request for T00030.
3. There is a limit of 1000 targeting clauses per request for T00020.
4. There is a total limit of 1000 targeting clauses per ad group.
5. If you receive the error of "Cannot create targeting clause: audience size is too small", please expand or broaden your targeting clause to increase the audience size.     * @tag Targeting
     * @param array $data A list of targeting clauses for creation.
     */
    public function createTargetingClauses(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/targets", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description This call returns the minimal set of targeting clause fields.     * @tag Targeting
     * @param int $targetId The identifier of a targeting clause.
     * @return array
     */
    public function getTargets(int $targetId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/targets/{$targetId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Equivalent to using the `updateTargetingClauses` operation to set the `state` property of a targeting clause to `archived`. See [Developer
Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.     * @tag Targeting
     * @param int $targetId The identifer of a targeting clause.
     * @return array
     *      - *code* - string
     *          - The HTTP status code of the response.
     *      - *description* - string
     *          - A human-readable description of the response.
     *      - *targetId* - 
     */
    public function archiveTargetingClause(int $targetId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/targets/{$targetId}", 'DELETE', ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an array of TargetingClauseEx objects for a set of requested targets. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTargets.     * @tag Targeting
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. 0-indexed record offset for the result set. Defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Number of records to include in the paged response. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: `enabled`, `paused`, or `archived`. Default behavior is to include enabled, paused, and archived.
     *      - *targetIdFilter* - string - optional
     *          - Optional. Restricts results to ads with the specified `tagetId` specified in comma-separated list
     *      - *adGroupIdFilter* - string - optional
     *          - Optional list of comma separated adGroupIds. Restricts results to targeting clauses with the specified `adGroupId`.
     *      - *campaignIdFilter* - string - optional
     *          - Optional. Restricts results to ads within campaigns specified in comma-separated list.
     */
    public function listTargetingClausesEx(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/targets/extended"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets a targeting clause object with extended fields. Note that this call returns the full set of targeting clause extended fields, but is less efficient than getTarget.     * @tag Targeting
     * @param int $targetId The identifier of a targeting clause.
     * @return array
     *      - *targetId* - number
     *      - *adGroupId* - number
     *      - *campaignId* - number
     *      - *state* - string
     *      - *expressionType* - string
     *      - *bid* - number
     *          - If a value for `bid` is specified, it overrides the current adGroup bid. When using vcpm costType. $1 is the minimum bid for vCPM. Note that this field is ignored for negative targeting clauses.
     *      - *expression* - 
     *      - *resolvedExpression* - 
     *      - *servingStatus* - string
     *          - The status of the target.
     *      - *creationDate* - integer
     *          - Epoch date the target was created.
     *      - *lastUpdatedDate* - integer
     *          - Epoch date of the last update to any property associated with the target.
     */
    public function getTargetsEx(int $targetId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/targets/extended/{$targetId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description This API provides product, category and standard audience recommendations to target based on the list of input ASINs. Allow 1 week for our systems to process data for any new ASINs listed on Amazon before using this service. Note -  recommendations are only available for productAds with SKU or ASIN.

For API v3.0, the API returns up to 100 recommendations for contextual targeting.

For API v3.1, the API returns up to 100 recommendations for both product and category targeting.

For API v3.2, the API introduces contextual targeting themes in the request and returns product recommendations based on different targeting themes.

For API v3.3, the API introduces standard audience recommendations and translated category recommendations based on locale.

For API v3.4, the API includes the theme expression used in contextual targeting recommendations in the response.

[PREVIEW ONLY] For API v3.5, the API supports recommendations for landing pages for audience targeting with tactic T00030.
The API also supports entertainment targeting recommendations. Both features are currently limited to US marketplace.

The currently available tactic identifiers are:

|Tactic Name|Type|Description|
|-----------|----|-----------|
|T00020&nbsp;|Contextual Targeting|Products: Choose individual products to show your ads in placements related to those products.|
|T00030&nbsp;|Audiences or Contextual Targeting| Select individual products, categories, refined categories, or audiences to show your ads.|     * @tag Targeting Recommendations
     * @param array $data 
     *      - *tactic* - 
     *      - *products* - 
     *      - *typeFilter* - 
     *      - *themes* - 
     *      - *categoryType* - string
     *          - This field is optional unless the field locationExpression is present in the request. It is used for category audience targeting
to specify if the audience is for views (re-marketing) or purchases (re-purchasing). The specified categories will be returned accordingly.
     *      - *locationExpression* - array
     *          - This optional field is used to specify the locations used in SD location targeting for non-Amazon sellers only at the moment.
Therefore it's only supported if the product is a landing page url.
     * @param array $query
     *      - *locale* -  - optional
     *          - The requested locale from query parameter to return translated category recommendations.
     * @return array
     *      - *recommendations* - 
     */
    public function getTargetRecommendations(array $data, array $query = [], string $contentType = 'application/vnd.sdtargetingrecommendations.v3.5+json'): array
    {
        return $this->api(array_merge(["/sd/targets/recommendations"], $query), 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Given a list of campaigns as input, this API provides the following metrics:
<br> <b>1. Recommended daily budget - </b> Estimated budget needed to keep the campaign in budget for the full 24-hour period. Consider this budget to minimize your campaign's chances of running out of budget. 
<br> <b>2. Percent time in budget </b> - The share of time the campaign was in budget during the past 7 days.
<br> <b>3. Estimated missed impressions, clicks and sales </b> - These are the estimated additional impressions, clicks and sales the campaign might have generated had it adopted the recommended budget. These are estimates based on campaign's historical performance - and not a guarantee of actual impressions, clicks and sales. Consider using these metrics to further inform your budget allocation decisions.     * @tag Budget Recommendations
     * @param array $data 
     *      - *campaignIds* - array
     *          - A list of campaign ids for which to get budget recommendations and missed opportunities.
     * @return array
     *      - *budgetRecommendationsSuccessResults* - array
     *          - List of successful budget recommendation for campaigns.
     *      - *budgetRecommendationsErrorResults* - array
     *          - List of errors that occurred when generating budget recommendation.
     */
    public function getSDBudgetRecommendations(array $data, string $contentType = 'application/vnd.sdbudgetrecommendations.v3+json'): array
    {
        return $this->api("/sd/campaigns/budgetRecommendations", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets a list of negative targeting clauses objects for a requested set of Sponsored Display negative targets. Note that the Negative Targeting Clause object is designed for performance, and includes a small set of commonly used fields to reduce size. If the extended set of fields is required, use the negative target operations that return the NegativeTargetingClauseEx object.     * @tag Negative Targeting
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. 0-indexed record offset for the result set. Defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Number of records to include in the paged response. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: `enabled`, `paused`, or `archived`. Default behavior is to include enabled, paused, and archived.
     *      - *adGroupIdFilter* - string - optional
     *          - Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified `adGroupId`.
     *      - *campaignIdFilter* - string - optional
     *          - Optional. Restricts results to targeting clauses within campaigns specified in comma-separated list.
     */
    public function listNegativeTargetingClauses(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/negativeTargets"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Updates one or more negative targeting clauses. Negative targeting clauses are identified using their targetId. The mutable field is `state`. Maximum length of the array is 100 objects.     * @tag Negative Targeting
     * @param array $data A list of up to 100 negative targeting clauses. Note that the only mutable field is `state`.
     */
    public function updateNegativeTargetingClauses(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/negativeTargets", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Successfully created negative targeting clauses associated with an ad group are assigned a unique target identifier.
Product negative targeting clause examples:
| Negative targeting clause | Description |
|---------------------------|-------------|
| asinSameAs=B0123456789 | Negatively target this product.|
| asinBrandSameAs=12345 | Negatively target products in the brand.|     * @tag Negative Targeting
     * @param array $data A list of up to 100 negative targeting clauses for creation.
     */
    public function createNegativeTargetingClauses(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/negativeTargets", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description This call returns the minimal set of negative targeting clause fields, but is more efficient than getNegativeTargetsEx.     * @tag Negative Targeting
     * @param int $negativeTargetId The negative targeting clause identifier.
     * @return array
     */
    public function getNegativeTargets(int $negativeTargetId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/negativeTargets/{$negativeTargetId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Equivalent to using the updateNegativeTargetingClauses operation to set the `state` property of a targeting clause to `archived`. See [Developer Notes](http://advertising.amazon.com/API/docs/guides/developer_notes#Archiving) for more information.     * @tag Negative Targeting
     * @param int $negativeTargetId The identifier of a negative targeting clause.
     * @return array
     *      - *code* - string
     *          - The HTTP status code of the response.
     *      - *description* - string
     *          - A human-readable description of the response.
     *      - *targetId* - 
     */
    public function archiveNegativeTargetingClause(int $negativeTargetId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/negativeTargets/{$negativeTargetId}", 'DELETE', ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an array of NegativeTargetingClauseEx objects for a set of requested negative targets. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTargets.     * @tag Negative Targeting
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. 0-indexed record offset for the result set. Defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Number of records to include in the paged response. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. Restricts results to keywords with state within the specified comma-separated list. Must be one of: `enabled`, `paused`, or `archived`. Default behavior is to include `enabled`, `paused`, and `archived`.
     *      - *targetIdFilter* - string - optional
     *          - Optional. Restricts results to ads with the specified `tagetId` specified in comma-separated list
     *      - *adGroupIdFilter* - string - optional
     *          - Optional list of comma separated adGroupIds. Restricts results to negative targeting clauses with the specified `adGroupId`.
     *      - *campaignIdFilter* - string - optional
     *          - Optional. Restricts results to ads within campaigns specified in the comma-separated list.
     */
    public function listNegativeTargetingClausesEx(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/negativeTargets/extended"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets a negative targeting clause with extended fields. Note that this call returns the full set of negative targeting clause extended fields, but is less efficient than getNegativeTarget.     * @tag Negative Targeting
     * @param int $negativeTargetId The negative targeting clause identifier.
     * @return array
     *      - *targetId* - number
     *      - *adGroupId* - number
     *      - *state* - string
     *      - *expressionType* - string
     *      - *expression* - array
     *          - The expression to negatively match against.
* Only one brand may be specified per targeting expression.
* Only one asin may be specified per targeting expression.
* To exclude a brand from a targeting expression, you must create a negative targeting expression in the same ad group as the positive targeting expression.
     *      - *servingStatus* - string
     *          - The status of the target.
     *      - *creationDate* - integer
     *          - Epoch date the target was created.
     *      - *lastUpdatedDate* - integer
     *          - Epoch date of the last update to any property associated with the target.
     */
    public function getNegativeTargetsEx(int $negativeTargetId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/negativeTargets/extended/{$negativeTargetId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description **Note: Snapshots APIs are deprecated and will be shut off on October 15, 2024. For replacement functionality, see the [exports](guides/exports/overview) API. To learn more, view the [migration guide](reference/migration-guides/snapshots-exports).** 
To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).     * @tag Snapshots
     * @param string $recordType **Note: Snapshots APIs are deprecated and will be shut off on October 15, 2024. For replacement functionality, see the [exports](guides/exports/overview) API. To learn more, view the [migration guide](reference/migration-guides/snapshots-exports).** 
The type of entity for which the snapshot should be generated. Must be one of: `campaigns`, `adgroups`, `productAds`, or `targets`.
     * @param array $data Request a snapshot file for all entities of a single record type.
     *      - *stateFilter* - string
     *          - Optional. Restricts results to entities with state within the specified comma-separated list. Default behavior is to include 'enabled' and 'paused'. You can include 'enabled', 'paused', and 'archived' or any combination.
     *      - *tacticFilter* - 
     * @return array
     *      - *snapshotId* - string
     *          - The identifier of the snapshot that was requested.
     *      - *recordType* - string
     *          - The record type of the snapshot file.
     *      - *status* - string
     *          - The status of the generation of the snapshot.
     *      - *statusDetails* - string
     *          - Optional description of the status.
     *      - *location* - string
     *          - The URI for the snapshot. It's only available if status is SUCCESS.
     *      - *fileSize* - number
     *          - The size of the snapshot file in bytes. It's only available if status is SUCCESS.
     *      - *expiration* - number
     *          - The epoch time for expiration of the snapshot file and each snapshot file will be expired in 30 mins after generated. It's only available if status is SUCCESS.
     */
    public function createSnapshot(string $recordType, array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/{$recordType}/snapshot", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description **Note: Snapshots APIs are deprecated and will be shut off on October 15, 2024. For replacement functionality, see the [exports](guides/exports/overview) API. To learn more, view the [migration guide](reference/migration-guides/snapshots-exports).** 

To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/get-started).     * @tag Snapshots
     * @param string $snapshotId The Snapshot identifier.
     * @return array
     *      - *snapshotId* - string
     *          - The identifier of the snapshot that was requested.
     *      - *recordType* - string
     *          - The record type of the snapshot file.
     *      - *status* - string
     *          - The status of the generation of the snapshot.
     *      - *statusDetails* - string
     *          - Optional description of the status.
     *      - *location* - string
     *          - The URI for the snapshot. It's only available if status is SUCCESS.
     *      - *fileSize* - number
     *          - The size of the snapshot file in bytes. It's only available if status is SUCCESS.
     *      - *expiration* - number
     *          - The epoch time for expiration of the snapshot file and each snapshot file will be expired in 30 mins after generated. It's only available if status is SUCCESS.
     */
    public function getSnapshot(string $snapshotId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/snapshots/{$snapshotId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description **Note: Snapshots APIs are deprecated and will be shut off on October 15, 2024. For replacement functionality, see the [exports](guides/exports/overview) API. To learn more, view the [migration guide](reference/migration-guides/snapshots-exports).** 

To understand the call flow for asynchronous snapshots, see [Getting started with sponsored ads snapshots](/API/docs/en-us/guides/snapshots/overview).     * @tag Snapshots
     * @param string $snapshotId The Snapshot identifier.
     */
    public function downloadSnapshot(string $snapshotId): void
    {
        $this->api("/sd/snapshots/{$snapshotId}/download");
    }
                    
    /**
     * @description      * @tag Creatives
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Sets a cursor into the requested set of creatives. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     *      - *count* - int - optional
     *          - Sets the number of creative objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten creatives set `startIndex=0` and `count=10`. To return the next ten creatives, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.
     *      - *adGroupIdFilter* - string - optional
     *          - The returned array includes only creatives associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `creativeIdFilter` parameter.
     *      - *creativeIdFilter* - string - optional
     *          - The returned array includes only creatives with identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `adGroupIdFilter` parameter.
     */
    public function listCreatives(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/creatives"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description      * @tag Creatives
     * @param array $data An array of creative objects to update. Maximum length of the array is 100 objects.
     */
    public function updateCreatives(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/creatives", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description      * @tag Creatives
     * @param array $data An array of Creative objects to create. Maximum length of the array is 100 objects. Note - when using productAds with landingPageURL of OFF_AMAZON_LINK, STORE, or MOMENT, the following properties are required all together;
1) headline, 2) brandLogo, and 3) rectCustomImage, squareCustomImage.
     */
    public function createCreatives(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/creatives", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description      * @tag Creatives
     * @param array $data 
     *      - *creative* - 
     *      - *previewConfiguration* - 
     *      - *previewConfigurations* - 
     * @return array
     *      - *previewHtml* - string
     *      - *previewHtmls* - array
     */
    public function postCreativePreview(array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/creatives/preview", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description      * @tag Creatives
     * @param array $query
     *      - *language* -  - required
     *          - The language of the returned creative moderation metadata.
     *      - *startIndex* - int - optional
     *          - Sets a cursor into the requested set of creative moderations. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     *      - *count* - int - optional
     *          - Sets the number of creative objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten creative moderations set `startIndex=0` and `count=10`. To return the next ten creative moderations, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.
     *      - *adGroupIdFilter* - string - optional
     *          - The returned array includes only creative moderations associated with ad group identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `creativeIdFilter` parameter.
     *      - *creativeIdFilter* - string - optional
     *          - The returned array includes only creative moderations with creative identifiers matching those specified in the comma-delimited string. Cannot be used in conjunction with the `adGroupIdFilter` parameter.
     */
    public function listCreativeModerations(array $query, string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/moderation/creatives"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description When a user adds domains to their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to view the request results for up to 90 days from when the request was submitted. The results provide the status of each domain in the given request. Request results may contain multiple pages. This endpoint will only be available once the request has completed processing. To see the status of the request you can call GET /sd/brandSafety/{requestId}/status. Note that this endpoint only lists the results of POST requests to /sd/brandSafety/deny - it does not reflect the results of DELETE requests.
     * @tag Brand Safety List
     * @param string $requestId The ID of the request previously submitted.
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. Sets a cursor into the requested set of results. Use in conjunction with the count parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.

     *      - *count* - int - optional
     *          - Optional. Sets the number of results in the returned array. Use in conjunction with the startIndex parameter to control pagination. For example, to return the first 1000 results set startIndex=0 and count=1000. To return the next 1000 results, set startIndex=1000 and count=1000, and so on. Defaults to max page size(1000).

     * @return array
     *      - *results* - array
     *          - A list of results for the given requestId
     */
    public function getRequestResults(string $requestId, array $query = [], string $contentType = 'application/json'): array
    {
        return $this->api(array_merge(["/sd/brandSafety/{$requestId}/results"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description When a user modifies their Brand Safety Deny List, the request is processed asynchronously, and a requestId is provided to the user. This requestId can be used to check the status of the request for up to 90 days from when the request was submitted.
     * @tag Brand Safety List
     * @param string $requestId The ID of the request previously submitted.
     * @return array
     *      - *requestStatus* - 
     */
    public function getRequestStatus(string $requestId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/brandSafety/{$requestId}/status", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description List status of all Brand Safety List requests. The list will contain requests that were submitted in the past 90 days.
     * @tag Brand Safety List
     * @return array
     *      - *requestStatusList* - array
     *          - List of all requests' status.
     */
    public function listRequestStatus(string $contentType = 'application/json'): array
    {
        return $this->api("/sd/brandSafety/status", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. For each targeting clause in the request a corresponding bid recommendation will be returned in the response. Currently the API will accept up to 100 targeting clauses. Note - these recommendations are only available when productAds have ASIN or SKU fields.
This API provides a corresponding bid recommendation for each targeting clause in a request. Currently the API will accept up to 100 targeting clauses.

For API v3.1, the API provides a list of bid recommendations based on the list of input advertised ASINs and targeting clauses in the same format as the targeting API. Note - these recommendations are only available when productAds have ASIN or SKU fields.

For API v3.2, the API accepts optimizationType and costType and returns bid recommendations accordingly.

For API v3.3, the API accepts creativeType and returns bid recommendations accordingly.

[PREVIEW ONLY] For API v3.4, the API supports entertainment targeting bid recommendations which is currently limited to US marketplace.

The recommended bids are derived from the last 7 days of winning auction bids for the related targeting clause.


Receive bid recommendations using the following:
Contextual targeting clause|Description|
|-----------|----|
|asinSameAs=B0123456789|Receive a bid recommendation for this target product
|asinCategorySameAs=12345|Receive a bid recommendation for this target category
|similarProduct|Receive a bid recommendation for targets that are similar to the advertised asins.


Audience targeting clause|Description|
|-----------|----|
|views(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has viewed products in the given category
|views(similarProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed similar products to the advertised asins
|views(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has viewed the advertised asins
|purchases(asinCategorySameAs=12345 lookback=30)|Receive a bid recommendation for a target audience that has purchased products in the given category
|purchases(exactProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased the advertised asins
|purchases(relatedProduct lookback=30)|Receive a bid recommendation for a target audience that has purchased related products to the advertised asins
|audience(audienceSameAs=12345)|Receive a bid recommendation for the given target audience

| Content targeting clause | Description |
|------------------|-------------|
| [PREVIEW ONLY] contentCategorySameAs=amzn1.iab-content.325 | Receive a bid recommendation for the given content target |


#### Notes:
- Refinements are currently not supported and if included will not impact the bid recommendation for the target.


#### Advertised ASIN Notes:
- For asinSameAs targets the advertised asins will not impact the bid recommendation
- For asinCategorySameAs targets the advertised asins are optional, but including them will provide a more refined bid recommendation
- For similarProduct, exactProduct, and relatedProduct targets the advertised asins are required     * @tag Bid Recommendations
     * @param array $data 
     *      - *products* - array
     *          - A list of products to tailor bid recommendations for category and audience based targeting clauses.
This array must contain consistent fields of either asins or landing pages (when linking to other pages), these cannot be mixed for any given request.
If landingPageUrl is used, only one item is allowed for the list.
     *      - *bidOptimization* - 
     *      - *costType* - 
     *      - *creativeType* - 
     *      - *targetingClauses* - array
     *          - A list of targeting clauses to receive bid recommendations for.
     * @return array
     *      - *bidOptimization* - 
     *      - *costType* - 
     *      - *bidRecommendations* - 
     */
    public function getTargetBidRecommendations(array $data, string $contentType = 'application/vnd.sdtargetingrecommendations.v3.4+json'): array
    {
        return $this->api("/sd/targets/bid/recommendations", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description You can use this Sponsored Display API to retrieve creative headline recommendations from an array of ASINs.

**Requires one of these permissions**:
["advertiser_campaign_view"]     * @tag Headline Recommendations
     * @param array $data Request body for SD headline recommendations API.
     *      - *asins* - array
     *          - An array of ASINs associated with the creative.
     *      - *maxNumRecommendations* - number
     *          - Maximum number of recommendations that API should return. Response will [0, maxNumRecommendations] recommendations (recommendations are not guaranteed as there can be instances where the ML model can not generate policy compliant headlines for the given set of asins).
     *      - *adFormat* - string
     * @return array
     *      - *requestId* - string
     *          - An identifier for request made which is generated by server.
     *      - *recommendations* - array
     *          - Recommendations are sorted, i.e., more suitable headline has lesser array index value.
     */
    public function getHeadlineRecommendationsForSD(array $data, string $contentType = 'application/vnd.sdheadlinerecommendationrequest.v4.0+json'): array
    {
        return $this->api("/sd/recommendations/creative/headline", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an array of OptimizationRule objects for a requested set of Sponsored Display optimization rules.     * @tag Optimization Rules (beta)
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. Sets a cursor into the requested set of optimization rules. Use in conjunction with the `count` parameter to control pagination of the returned array. 0-indexed record offset for the result set, defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Sets the number of OptimizationRule objects in the returned array. Use in conjunction with the `startIndex` parameter to control pagination. For example, to return the first ten optimization rules set `startIndex=0` and `count=10`. To return the next ten optimization rules, set `startIndex=10` and `count=10`, and so on. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. The returned array is filtered to include only optimization rules with state set to one of the values in the specified comma-delimited list.
Available values:
  - enabled
  - paused [COMING LATER]
  - enabled, paused [COMING LATER]
     *      - *name* - string - optional
     *          - Optional. The returned array includes only optimization rules with the specified name using an exact string match.
     *      - *optimizationRuleIdFilter* - string - optional
     *          - Optional. The returned array is filtered to include only optimization rules associated with the optimization rule identifiers in the specified comma-delimited list.

Maximum size limit 50.
     *      - *adGroupIdFilter* - string - optional
     *          - Optional. The returned array is filtered to include only optimization rules associated with the ad group identifiers in the comma-delimited list.

Maximum size limit 50.
     */
    public function listOptimizationRules(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/optimizationRules"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description 
     * @tag Optimization Rules (beta)
     * @param array $data An array of OptimizationRule objects. For each object, specify an optimization rule identifier and mutable fields with their updated values. The mutable fields are `ruleName`, `state`, and `ruleConditions`.
     */
    public function updateOptimizationRules(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/optimizationRules", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description 
* When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden.
* Optimization rules can only be associated to ad groups that have productAds with ASIN or SKU.
* We may add targets while your campaign is running to try to stay at or below a cost per order value you have specified.
* Only one optimization rule can be associated per adGroup. 
* If you are using optimization rules, the following campaign budget must be at least:
  - 5x the value of any COST_PER_ORDER threshold.
  - 10x the value of any COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS threshold.
  - 20x the value of any COST_PER_CLICK threshold.     * @tag Optimization Rules (beta)
     * @param array $data An array of OptimizationRule objects. For each object, specify required fields and their values. Required fields are `state` and `ruleConditions`.
     */
    public function createOptimizationRules(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/optimizationRules", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets an OptimizationRule object for a requested Sponsored Display optimization rule.     * @tag Optimization Rules (beta)
     * @param string $optimizationRuleId The identifier of the requested optimization rule.
     * @return array
     */
    public function getOptimizationRule(string $optimizationRuleId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/optimizationRules/{$optimizationRuleId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description 
* When an optimization rule is associated to an ad group, manual bids for individual targets will be overridden.
* Only one optimization rule can be associated per adGroup. This note will be removed when multiple rules are supported per adGroup.     * @tag Optimization Rules (beta)
     * @param int $adGroupId The identifier of the ad group.
     * @param array $data A list of optimization rule identifiers. Only one optimization rule identifier is currently supported per request. This note will be removed when multiple rule identifiers are supported.

For each ad group, only one optimization rule metric name is supported, based on the ad group's `bidOptimization` type. Refer to the following table for the metric names supported for each type.
|  AdGroup.bidOptimization |     Supported OptimizationRule.metricName       |
|------------------|--------------------|
|   reach       | COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS  |
|   clicks      | COST_PER_CLICK          |
|  conversions  | COST_PER_ORDER          |
     *      - *optimizationRuleIds* - array
     *          - A list of optimization rule identifiers.
     */
    public function associateOptimizationRulesWithAdGroup(int $adGroupId, array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/adGroups/{$adGroupId}/optimizationRules", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description Gets an OptimizationRule object for a requested Sponsored Display optimization rule.     * @tag Optimization Rules (beta)
     * @param int $adGroupId The identifier of the ad group.
     */
    public function getOptimizationRulesByAdGroup(int $adGroupId, string $contentType = 'application/json'): void
    {
        $this->api("/sd/adGroups/{$adGroupId}/optimizationRules", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description 
* Only one optimization rule can be disassociated per adGroup. This note will be removed when multiple rules are supported per adGroup.
* When an optimization rule is disassociated from an ad group, you can set the manual bids for the individual targets under the adGroup.     * @tag Optimization Rules (beta)
     * @param int $adGroupId The identifier of the ad group.
     * @param array $data A list of optimization rule identifiers. Only one optimization rule identifier is currently supported per request. This note will be removed when multiple rule identifiers are supported.
     *      - *optimizationRuleIds* - array
     *          - A list of optimization rule identifiers.
     * @return array
     *      - *code* - string
     *          - The HTTP status code of the response.
     *      - *responses* - array
     *          - An array of response objects. Each response object has code, details and optimizationRuleId.
     */
    public function disassociateOptimizationRulesFromAdGroup(int $adGroupId, array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/adGroups/{$adGroupId}/optimizationRules/disassociate", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Returns forecasts for a given ad group specified in SD forecast request.     * @tag Forecasts
     * @param array $data 
     *      - *campaign* - 
     *      - *adGroup* - 
     *      - *optimizationRules* - array
     *          - A list of SD optimization rules. Forecast will be affected by the optimization strategy rules.  Currently, supported rule metrics by forecast are `COST_PER_CLICK`, `COST_PER_THOUSAND_VIEWABLE_IMPRESSIONS` and `COST_PER_ORDER`.
     *      - *productAds* - array
     *      - *targetingClauses* - array
     *          - A list of SD targeting clauses.
     *      - *negativeTargetingClauses* - array
     *          - A list of SD negative targeting clauses.
     *      - *locationExpressions* - array
     *          - A list of location expressions. Only applicable for advertisers using landingPageType of OFF_AMAZON_LINK.
     * @return array
     *      - *bidOptimization* - string
     *      - *lifetimeForecasts* - array
     *          - Forecasts for campaign start date and end date. Default end date is start date plus 7 days.
     *      - *weeklyForecasts* - array
     *          - Weekly average forecasts.
     *      - *dailyForecasts* - array
     *          - Daily average forecasts.
     *      - *curves* - array
     *          - Forecasting curves.
     *      - *forecastStatus* - 
     */
    public function createSDForecast(array $data, string $contentType = 'application/vnd.sdforecasts.v3.1+json'): array
    {
        return $this->api("/sd/forecasts", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description 
     * @tag Budget Rules
     * @param string $budgetRuleId The budget rule identifier.
     * @return array
     *      - *budgetRule* - 
     */
    public function getBudgetRuleByRuleIdForSDCampaigns(string $budgetRuleId, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/budgetRules/{$budgetRuleId}", ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description 
     * @tag Budget Rules
     * @param array $data 
     *      - *budgetRulesDetails* - array
     *          - A list of budget rule details.
     * @return array
     *      - *responses* - array
     */
    public function createBudgetRulesForSDCampaigns(array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/budgetRules", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
            
    /**
     * @description 
     * @tag Budget Rules
     * @param array $query
     *      - *nextToken* - string - optional
     *          - To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     *      - *pageSize* - int - required
     *          - Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
     * @return Iterator
     *      - *budgetRulesForAdvertiserResponse* - array
     *          - A list of rules created by the advertiser.
     *      - *nextToken* - string
     *          - To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     */
    public function eachSDBudgetRulesForAdvertiser(array $query, string $contentType = 'application/json'): Iterator
    {
        return $this->eachInternal('getSDBudgetRulesForAdvertiser', func_get_args());
    }
        
    /**
     * @description 
     * @tag Budget Rules
     * @param array $query
     *      - *nextToken* - string - optional
     *          - To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     *      - *pageSize* - int - required
     *          - Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
     * @return Iterator
     *      - *budgetRulesForAdvertiserResponse* - array
     *          - A list of rules created by the advertiser.
     *      - *nextToken* - string
     *          - To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     */
    public function batchSDBudgetRulesForAdvertiser(array $query, string $contentType = 'application/json'): Iterator
    {
        return $this->batchInternal('getSDBudgetRulesForAdvertiser', func_get_args());
    }
    
    /**
     * @description 
     * @tag Budget Rules
     * @param array $query
     *      - *nextToken* - string - optional
     *          - To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     *      - *pageSize* - int - required
     *          - Sets a limit on the number of results returned. Maximum limit of `pageSize` is 30.
     * @return array
     *      - *budgetRulesForAdvertiserResponse* - array
     *          - A list of rules created by the advertiser.
     *      - *nextToken* - string
     *          - To retrieve the next page of results, call the same operation and specify this token in the request. If the `nextToken` field is empty, there are no further results.
     */
    public function getSDBudgetRulesForAdvertiser(array $query, string $contentType = 'application/json'): array
    {
        return $this->api(array_merge(["/sd/budgetRules"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description 
     * @tag Budget Rules
     * @param array $data 
     *      - *budgetRulesDetails* - array
     *          - A list of budget rule details.
     * @return array
     *      - *responses* - array
     */
    public function updateBudgetRulesForSDCampaigns(array $data, string $contentType = 'application/json'): array
    {
        return $this->api("/sd/budgetRules", 'PUT', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description **Requires one of these permissions**:
["advertiser_campaign_edit","advertiser_campaign_view"]     * @tag Budget Usage
     * @param array $data 
     *      - *campaignIds* - array
     *          - A list of campaign IDs
     * @return array
     *      - *success* - array
     *          - List of budget usage percentages that were successfully pulled
     *      - *error* - array
     *          - List of budget usage percentages that failed to pull
     */
    public function sdCampaignsBudgetUsage(array $data, string $contentType = 'application/vnd.sdcampaignbudgetusage.v1+json'): array
    {
        return $this->api("/sd/campaigns/budget/usage", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description Gets a list of Sponsored Display Location objects. This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon. See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)     * @tag Locations (beta)
     * @param array $query
     *      - *startIndex* - int - optional
     *          - Optional. 0-indexed record offset for the result set. Defaults to 0.
     *      - *count* - int - optional
     *          - Optional. Number of records to include in the paged response. Defaults to max page size.
     *      - *stateFilter* - string - optional
     *          - Optional. Restricts results to those with state within the specified comma-separated list. Must be one of: `enabled`.
     *      - *adGroupIdFilter* - string - optional
     *          - Optional list of comma separated adGroupIds. Restricts results to locations with the specified `adGroupId`.
     *      - *campaignIdFilter* - string - optional
     *          - Optional list of comma separated campaignIds. Restricts results to locations with the specified `campaignId`.
     */
    public function listLocations(array $query = [], string $contentType = 'application/json'): void
    {
        $this->api(array_merge(["/sd/locations"], $query), ['content-type' => $contentType, 'accept' => $contentType]);
    }
                
    /**
     * @description This resource is not available when productAds have ASIN or SKU fields and only available for advertisers that do not sell products on Amazon.   See [Developer Guide](https://advertising.amazon.com/API/docs/en-us/guides/sponsored-display/non-amazon-sellers/get-started)

Locations optimize Ad Groups for delivery to users that have an association with those locations. For example,
an Ad Group might contain the following: 
- A Targeting Clause representing an audience of users that viewed a shoe 
- A Location representing Seattle, Washington, USA.
- A Location representing New York, New York, USA.
In this case, delivery of the Targeting Clause will be optimized for New York and Seattle.


You can discover predefined Locations to use in your ad group by calling the GET /locations API. The table below lists 
several example Locations.
| Location | Description |
|---------------------------|-------------|
| location=amzn1.ad-geo.XHvCjcKHXsKUwos= | Optimize the ad group for the specified location (either a 'city', 'state', 'dma', 'postal code', or 'country').|

Using locations is optional.      * @tag Locations (beta)
     * @param array $data A list of up to 100 Locations for creation for each call.  1000 locations can be added for each ad group.
     */
    public function createLocations(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/locations", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
                    
    /**
     * @description This is a bulk operation that accepts up to a limit of 1000 Location Expression Ids at a time.
This deletion operation is equivalent to using the `updateTargetingClauses` operation to set the `state` property of a Location clause to `archived`.     * @tag Locations (beta)
     * @param array $data A list of up to 1000 Location Expression Ids for archival.
     *      - *locationExpressionIdFilter* - 
     */
    public function archiveLocations(array $data, string $contentType = 'application/json'): void
    {
        $this->api("/sd/locations/delete", 'POST', $data, ['content-type' => $contentType, 'accept' => $contentType]);
    }
    
}
