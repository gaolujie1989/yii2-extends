<?php

namespace lujie\amazon\sp\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description Manage configurations and capabilities of seller supply sources.
*/
class SupplySources20200701 extends \lujie\amazon\sp\BaseAmazonSPClient
{

                
    /**
     * @description The path to retrieve paginated supply sources.
     * @tag supplySources
     * @param array $query
     *      - *nextPageToken* - string - optional
     *          - The pagination token to retrieve a specific page of results.
     *      - *pageSize* - number - optional
     *          - The number of supply sources to return per paginated request.
     * @return array
     *      - *supplySources* - 
     *      - *nextPageToken* - string
     *          - If present, use this pagination token to retrieve the next page of supply sources.
     */
    public function getSupplySources(array $query = []): array
    {
        return $this->api(array_merge(["/supplySources/2020-07-01/supplySources"], $query));
    }
                
    /**
     * @description Create a new supply source.
     * @tag supplySources
     * @param array $data 
     * @return array
     *      - *supplySourceId* - 
     *      - *supplySourceCode* - 
     */
    public function createSupplySource(array $data): array
    {
        return $this->api("/supplySources/2020-07-01/supplySources", 'POST', $data);
    }
                    
    /**
     * @description Retrieve a supply source.
     * @tag supplySources
     * @param string $supplySourceId The unique identifier of a supply source.
     * @return array
     *      - *supplySourceId* - 
     *      - *supplySourceCode* - 
     *      - *alias* - 
     *      - *status* - 
     *      - *address* - 
     *      - *configuration* - 
     *      - *capabilities* - 
     *      - *createdAt* - 
     *      - *updatedAt* - 
     */
    public function getSupplySource(string $supplySourceId): array
    {
        return $this->api("/supplySources/2020-07-01/supplySources/{$supplySourceId}");
    }
                
    /**
     * @description Update the configuration and capabilities of a supply source.
     * @tag supplySources
     * @param string $supplySourceId The unique identitier of a supply source.
     * @param array $data 
     * @return array
     *      - *errors* - array
     *          - A list of error responses returned when a request is unsuccessful.
     */
    public function updateSupplySource(string $supplySourceId, array $data): array
    {
        return $this->api("/supplySources/2020-07-01/supplySources/{$supplySourceId}", 'PUT', $data);
    }
                
    /**
     * @description Archive a supply source, making it inactive. Cannot be undone.
     * @tag supplySources
     * @param string $supplySourceId The unique identifier of a supply source.
     * @return array
     *      - *errors* - array
     *          - A list of error responses returned when a request is unsuccessful.
     */
    public function archiveSupplySource(string $supplySourceId): array
    {
        return $this->api("/supplySources/2020-07-01/supplySources/{$supplySourceId}", 'DELETE');
    }
                    
    /**
     * @description Update the status of a supply source.
     * @tag supplySources
     * @param string $supplySourceId The unique identifier of a supply source.
     * @param array $data 
     * @return array
     *      - *errors* - array
     *          - A list of error responses returned when a request is unsuccessful.
     */
    public function updateSupplySourceStatus(string $supplySourceId, array $data): array
    {
        return $this->api("/supplySources/2020-07-01/supplySources/{$supplySourceId}/status", 'PUT', $data);
    }
    
}
