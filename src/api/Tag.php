<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Tag extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Lists all tags. The results can be filtered.
     * @tag Tag
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified tag information in the results. The following parameters are available: <ul><li>availabilities = The tag availabilities</li><li>names = The tag names</li><li>relationship = The tag relationships</li></ul>More than one parameter should be separated by commas.
     *      - *tagName* - string - optional
     *          - Filter restricts the list of results to tags with the specified tag name. The tag name must be specified.
     *      - *tagAvailability* - string - optional
     *          - Filter restricts the list of results to tags with the specified availability type. The availability type must be specified.
     *      - *tagLang* - string - optional
     *          - Filter restricts the list of results to tags which have names in the specified language. The language must be specified.
     *      - *color* - string - optional
     *          - Filter restricts the list of results to tags with the specified color. The color must be specified.
     */
    public function getTags(array $query = []): void
    {
        $this->api(array_merge(["/rest/tags"], $query));
    }
                
    /**
     * @description Creates a tag. The fields tagName and names must be specified.
     * @tag Tag
     * @param array $data 
     * @param array $query
     *      - *tagName* - string - required
     *          - The name of the tag
     *      - *tagLang* - string - required
     *          - tagLang is used in names. The names field contains multiple languages.
     * @return array
     *      - *id* - integer
     *          - The ID of the tag
     *      - *name* - string
     *          - The backend name of the tag
     *      - *color* - string
     *          - The color for the tag
     */
    public function createTag(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/tags"], $query), 'POST', $data);
    }
                    
    /**
     * @description Creates up to 50 tags. The IDs of the tags must be specified.
     * @tag Tag
     * @param array $data 
     * @return array
     */
    public function createTagsBulk(array $data): array
    {
        return $this->api("/rest/tags/bulk", 'POST', $data);
    }
                
    /**
     * @description Updates up to 50 tags. The IDs of the tags must be specified.
     * @tag Tag
     * @param array $data 
     * @return array
     */
    public function updateTagsBulk(array $data): array
    {
        return $this->api("/rest/tags/bulk", 'PUT', $data);
    }
                    
    /**
     * @description Deletes a list of tag relationships. The tag ID, tag type and relation value must be specified.
     * @tag Tag

     */
    public function deleteTagsRelationship(): void
    {
        $this->api("/rest/tags/relationships", 'DELETE');
    }
                
    /**
     * @description Lists all relationships. The results can be filtered.
     * @tag Tag
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified tag information in the results. The following parameters are available: <ul><li>availability = The tag availability</li><li>tag = The tag</li></ul>More than one parameter should be separated by commas.
     *      - *tagId* - int - optional
     *          - Filter restricts the list of results to tag relationships with the specified tag ID. The tag ID must be specified.
     *      - *tagType* - string - optional
     *          - Filter restricts the list of results to tag relationships with the specified tag type. The tag type must be specified.
     *      - *relationshipValue* - int - optional
     *          - Filter restricts the list of results to tag relationships with the specified relationship value. This is the ID of the data record. The relationship value must be specified.
     */
    public function getTagsRelationships(array $query = []): void
    {
        $this->api(array_merge(["/rest/tags/relationships"], $query));
    }
                
    /**
     * @description Creates a tag relationship by linking a tag to a data record.
     * @tag Tag
     * @param array $data 
     * @param array $query
     *      - *tagId* - int - optional
     *          - The ID of the tag.
     *      - *tagType* - string - optional
     *          - The type of tag. Allowed values are category, ticket, variation, board, contact.
     *      - *relationshipValue* - int - optional
     *          - The ID of the data record for which a tag relationship is created.
     *      - *relatonshipUUID5* - string - optional
     *          - The ID of the data record for which a tag relationship is created. For models with uuid5 as primary key.
     * @return array
     *      - *tagId* - integer
     *          - The ID of the tag
     *      - *type* - string
     *          - The type of the relationship
     *      - *value* - string
     *          - The value of the relationship
     *      - *UUID5* - string
     *          - The UUID5 of the relationship
     */
    public function createTagsRelationship(array $data, array $query = []): array
    {
        return $this->api(array_merge(["/rest/tags/relationships"], $query), 'POST', $data);
    }
                    
    /**
     * @description Deletes a specific tag relationship that matches the specified data.
     * @tag Tag
     * @param int $relationshipValue The value of the relationship. This value is the ID of the data record the tag is linked to, e.g. item ID 1234.
     * @param string $tagType The type of the tag
     * @param int $id The ID of the tag
     * @param array $query
     *      - *relationshipType* - string - required
     *          - The type of the relationship, e.g. <b>category</b>, <b>item</b> or <b>ticket</b>
     */
    public function deleteTagsRelationshipByRelationshipValueTagTypeId(int $relationshipValue, string $tagType, int $id, array $query): void
    {
        $this->api(array_merge(["/rest/tags/relationships/{$relationshipValue}/{$tagType}/{$id}"], $query), 'DELETE');
    }
                    
    /**
     * @description Deletes a tag. The ID of the tag must be specified.
     * @tag Tag
     * @param int $id The ID of the tag
     */
    public function deleteTagById(int $id): void
    {
        $this->api("/rest/tags/{$id}", 'DELETE');
    }
                
    /**
     * @description Gets a tag by the ID. The ID of the tag must be specified.
     * @tag Tag
     * @param int $id The ID of the tag
     * @return array
     *      - *id* - integer
     *          - The ID of the tag
     *      - *name* - string
     *          - The backend name of the tag
     *      - *color* - string
     *          - The color for the tag
     */
    public function getTagById(int $id): array
    {
        return $this->api("/rest/tags/{$id}");
    }
                
    /**
     * @description Updates a tag. The ID of the tag must be specified.
     * @tag Tag
     * @param int $id The ID of the tag
     * @param array $data 
     * @return array
     *      - *id* - integer
     *          - The ID of the tag
     *      - *name* - string
     *          - The backend name of the tag
     *      - *color* - string
     *          - The color for the tag
     */
    public function updateTagById(int $id, array $data): array
    {
        return $this->api("/rest/tags/{$id}", 'PUT', $data);
    }
                    
    /**
     * @description Deletes a specific tag relationship that matches the specified data.
     * @tag Tag
     * @param int $id The ID of the tag
     * @param string $tagType The type of the relationship, i.e. <b>board</b>
     * @param string $relationshipUUID The UUID of the relationship
     */
    public function deleteTagsRelationshipByIdTagTypeRelationshipUUID(int $id, string $tagType, string $relationshipUUID): void
    {
        $this->api("/rest/tags/{$id}/relationships/{$tagType}/{$relationshipUUID}", 'DELETE');
    }
                    
    /**
     * @description Lists all tags. The results can be filtered.
     * @tag Tag
     * @param array $query
     *      - *id* - int - required
     *          - The ID of the tag. Allowed operators: `eq` and `in`.
     *      - *name* - string - required
     *          - The name of the tag. Allowed operators: `eq` and `in`.
     *      - *availability* - string - required
     *          - The availability of the tag. Allowed operators: `eq` and `in`.
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'names' = The names of the tag.</li><li>'clients' = The clients of the tag (only if the availability `variation` is set).</li><li>'availabilities' = The availabilities of the tag.</li></ul>
     *      - *orderBy* - string - optional
     *          - The field to order the results by.
     *      - *lang* - string - optional
     *          - The language to use when ordering by name.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Tag
     */
    public function getV2Tags(array $query): array
    {
        return $this->api(array_merge(["/rest/v2/tags"], $query));
    }
                
    /**
     * @description Creates a new tag.
     * @tag Tag
     * @return array
     *      - *id* - integer
     *          - The ID of the tag
     *      - *name* - string
     *          - The backend name of the tag
     *      - *color* - string
     *          - The color for the tag
     */
    public function createV2Tag(): array
    {
        return $this->api("/rest/v2/tags", 'POST');
    }
                    
    /**
     * @description Deletes a tag name. The ID of the tag name must be specified.
     * @tag Tag
     * @param int $id The ID of the tag name
     */
    public function deleteV2TagsNameById(int $id): void
    {
        $this->api("/rest/v2/tags/names/{$id}", 'DELETE');
    }
                    
    /**
     * @description Lists all tag relationships. The result can be filtered.

tagId
type
value
     * @tag Tag
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of TagRelationship
     */
    public function getV2TagsRelationships(): array
    {
        return $this->api("/rest/v2/tags/relationships");
    }
                
    /**
     * @description Creates a tag relationship. The ID of the tag, the type of the relation and a value must be specified.
     * @tag Tag
     * @return array
     *      - *tagId* - integer
     *          - The ID of the tag
     *      - *type* - string
     *          - The type of the relationship
     *      - *value* - string
     *          - The value of the relationship
     *      - *UUID5* - string
     *          - The UUID5 of the relationship
     */
    public function createV2TagsRelationship(): array
    {
        return $this->api("/rest/v2/tags/relationships", 'POST');
    }
                    
    /**
     * @description Deletes a tag relationship. The ID of the tag relationship must be specified.
     * @tag Tag
     * @param int $relationshipId The ID of the tag relationship
     */
    public function deleteV2TagsRelationshipByRelationshipId(int $relationshipId): void
    {
        $this->api("/rest/v2/tags/relationships/{$relationshipId}", 'DELETE');
    }
                    
    /**
     * @description Deletes a tag. The ID of the tag must be specified.
     * @tag Tag
     * @param int $tagId The ID of the tag
     */
    public function deleteV2TagByTagId(int $tagId): void
    {
        $this->api("/rest/v2/tags/{$tagId}", 'DELETE');
    }
                
    /**
     * @description Gets one tag. The ID must be specified.
     * @tag Tag
     * @param int $tagId The ID of the tag
     * @param array $query
     *      - *with* - string - optional
     *          - Includes the specified information in the results. More than one parameter should be separated by commas. The following parameters are available:<ul><li>'names' = The names of the tag.</li><li>'clients' = The clients of the tag (only if the availability `variation` is set).</li><li>'availabilities' = The availabilities of the tag.</li></ul>
     * @return array
     *      - *id* - integer
     *          - The ID of the tag
     *      - *name* - string
     *          - The backend name of the tag
     *      - *color* - string
     *          - The color for the tag
     */
    public function getV2TagByTagId(int $tagId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/v2/tags/{$tagId}"], $query));
    }
                
    /**
     * @description Updates an existing tag. The ID of the tag must be specified.
     * @tag Tag
     * @param int $tagId The ID of the tag
     * @return array
     *      - *id* - integer
     *          - The ID of the tag
     *      - *name* - string
     *          - The backend name of the tag
     *      - *color* - string
     *          - The color for the tag
     */
    public function updateV2TagByTagId(int $tagId): array
    {
        return $this->api("/rest/v2/tags/{$tagId}", 'PUT');
    }
    
}
