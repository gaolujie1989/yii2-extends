<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Ticket extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Lists the tickets by filters.
     * @tag Ticket
     * @param array $query
     *      - *id* - int - optional
     *          - Filter that restricts the search result to tickets of a specific ticket ID
     *      - *typeId* - int - optional
     *          - Filter that restricts the search result to tickets of specific ticket types
     *      - *priorityId* - int - optional
     *          - Filter that restricts the search result to tickets of a specific ticket priority ID
     *      - *parentTicketId* - int - optional
     *          - Filter that restricts the search result to tickets with a specified parent ticket ID
     *      - *statusId* - int - optional
     *          - Filter that restricts the search result to tickets with a specified status ID
     *      - *confidential* - int - optional
     *          - Filter that restricts the search result to tickets of a specific confidential value
     *      - *contactId* - int - optional
     *          - Filter that restricts the search result to tickets with a specified contact ID
     *      - *deadlineAt* - int - optional
     *          - Filter that restricts the search result to tickets with a specified deadline. Valid date formats are 'yyyy-mm-dd hh-mm-ss' or 'yyyy-mm-dd'.
     *      - *title* - int - optional
     *          - Filter that restricts the search result to tickets with a specified phrase in title
     *      - *progress* - int - optional
     *          - Filter that restricts the search result to tickets with a specified progress in percent
     *      - *plentyId* - int - optional
     *          - Filter that restricts the search result to tickets with a specified client (store) ID
     *      - *source* - int - optional
     *          - Filter that restricts the search result to tickets with a specific source value
     *      - *statusGroupId* - int - optional
     *          - Filter that restricts the search result to tickets with a specified status group ID
     *      - *roleId* - int - optional
     *          - Filter that restricts the search result to tickets with a specified role ID
     *      - *ownerId* - int - optional
     *          - Filter that restricts the search result to tickets with a specified owner ID
     *      - *fulltext* - int - optional
     *          - Filter that restricts the search result to tickets with full-text search. The search includes id, typeId, priorityId, title, source and the contact's firstName and lastName.
     *      - *customerClassId* - int - optional
     *          - Filter that restricts the search result to tickets with a specified customer class ID
     *      - *resubmissionAt* - int - optional
     *          - Filter that restricts the search result to tickets with a specified resubmission date. Valid date formats are 'yyyy-mm-dd hh-mm-ss' or 'yyyy-mm-dd'.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Ticket
     */
    public function getTickets(array $query = []): array
    {
        return $this->api(array_merge(["/rest/tickets"], $query));
    }
                
    /**
     * @description Creates a ticket. The fields typeId, statusId, title, plentyId, source and owners must be specified.
     * @tag Ticket
     * @param array $data 
     * @param array $query
     *      - *typeId* - string - required
     *          - The ID from the status of the ticket
     *      - *statusId* - string - required
     *          - The ID from the status of the ticket
     *      - *title* - string - required
     *          - The name of the ticket
     *      - *plentyId* - string - required
     *          - The plentyId
     *      - *source* - string - required
     *          - The source of the ticket
     *      - *userId* - string - required
     *          - userId is used in owners. The owners field contains multiple owners.
     *      - *roleId* - string - required
     *          - roleId is used in owners and refers to the ticket role. The owners field contains multiple owners.
     * @return array
     *      - *id* - integer
     *          - The ID of the ticket
     *      - *typeId* - integer
     *          - The type ID of the ticket
     *      - *priorityId* - integer
     *          - The priority ID of the ticket
     *      - *parentTicketId* - integer
     *          - The ID of the parent ticket
     *      - *statusId* - integer
     *          - The status ID of the ticket
     *      - *confidential* - array
     *          - The confidential value. Displays 1 if the ticket is confidential. Displays 0 if the ticket is not confidential.
     *      - *contactId* - integer
     *          - The ID of the contact that is linked with the ticket
     *      - *orderId* - integer
     *          - The ID of the order linked with the ticket
     *      - *createdAt* - string
     *          - The time the ticket was created as unix timestamp or carbon object
     *      - *updatedAt* - string
     *          - The time the ticket was last updated as unix timestamp or carbon object
     *      - *contactLastUpdateAt* - string
     *          - The time the contact was last updated
     *      - *deadlineAt* - string
     *          - The date of the ticket deadline
     *      - *finishedAt* - string
     *          - The date the ticket is solved and displays 100 percent in the progress bar
     *      - *title* - string
     *          - The title of the ticket
     *      - *progress* - integer
     *          - The progress of the ticket in percent
     *      - *plentyId* - integer
     *          - The ID of the client (store)
     *      - *source* - array
     *          - The source of the ticket. Possible values are 'frontend', 'backend', 'ebay' and 'email'.
     *      - *documentsCount* - integer
     *          - The number of documents that are attached to the ticket
     *      - *hasDocuments* - integer
     *          - Displays 1 if the ticket has one or more documents. Displays 0 if the ticket has no document.
     *      - *childrenCount* - integer
     *          - The number of child tickets
     *      - *resubmissionAt* - string
     *          - The date the ticket should be resubmitted
     *      - *parseData* - string
     *          - The ParseData from the ticket
     */
    public function createTicket(array $data, array $query): array
    {
        return $this->api(array_merge(["/rest/tickets"], $query), 'POST', $data);
    }
                    
    /**
     * @description Lists all status names of the ticket types.
     * @tag Ticket
     * @return array
     */
    public function getTicketsStatusNames(): array
    {
        return $this->api("/rest/tickets/status/names");
    }
                    
    /**
     * @description Lists status names with typeId.
     * @tag Ticket
     * @return array
     */
    public function getTicketsStatusTypeNames(): array
    {
        return $this->api("/rest/tickets/status/type/names");
    }
                    
    /**
     * @description Lists all type names.
     * @tag Ticket
     * @return array
     */
    public function getTicketsTypesNames(): array
    {
        return $this->api("/rest/tickets/types/names");
    }
                    
    /**
     * @description Gets the ticket. The ID of the ticket must be specified.
     * @tag Ticket
     * @param int $ticketId The ID of the ticket to be loaded.
     * @param array $query
     *      - *with* - array - optional
     *          - An array with relations to be loaded with the ticket. Possible values are 'order' and 'contact'
     * @return array
     *      - *id* - integer
     *          - The ID of the ticket
     *      - *typeId* - integer
     *          - The type ID of the ticket
     *      - *priorityId* - integer
     *          - The priority ID of the ticket
     *      - *parentTicketId* - integer
     *          - The ID of the parent ticket
     *      - *statusId* - integer
     *          - The status ID of the ticket
     *      - *confidential* - array
     *          - The confidential value. Displays 1 if the ticket is confidential. Displays 0 if the ticket is not confidential.
     *      - *contactId* - integer
     *          - The ID of the contact that is linked with the ticket
     *      - *orderId* - integer
     *          - The ID of the order linked with the ticket
     *      - *createdAt* - string
     *          - The time the ticket was created as unix timestamp or carbon object
     *      - *updatedAt* - string
     *          - The time the ticket was last updated as unix timestamp or carbon object
     *      - *contactLastUpdateAt* - string
     *          - The time the contact was last updated
     *      - *deadlineAt* - string
     *          - The date of the ticket deadline
     *      - *finishedAt* - string
     *          - The date the ticket is solved and displays 100 percent in the progress bar
     *      - *title* - string
     *          - The title of the ticket
     *      - *progress* - integer
     *          - The progress of the ticket in percent
     *      - *plentyId* - integer
     *          - The ID of the client (store)
     *      - *source* - array
     *          - The source of the ticket. Possible values are 'frontend', 'backend', 'ebay' and 'email'.
     *      - *documentsCount* - integer
     *          - The number of documents that are attached to the ticket
     *      - *hasDocuments* - integer
     *          - Displays 1 if the ticket has one or more documents. Displays 0 if the ticket has no document.
     *      - *childrenCount* - integer
     *          - The number of child tickets
     *      - *resubmissionAt* - string
     *          - The date the ticket should be resubmitted
     *      - *parseData* - string
     *          - The ParseData from the ticket
     */
    public function getTicketByTicketId(int $ticketId, array $query = []): array
    {
        return $this->api(array_merge(["/rest/tickets/{$ticketId}"], $query));
    }
                
    /**
     * @description Creates a message for the ticket. The ID of the ticket must be specified.
     * @tag Ticket
     * @param int $ticketId The ID of the ticket
     * @return array
     *      - *id* - integer
     *          - The ID of the message
     *      - *ticketId* - integer
     *          - The ticket ID the message belongs to
     *      - *userId* - integer
     *          - The user of the message
     *      - *createdAt* - string
     *          - The time the ticket message was created as unix timestamp or carbon object
     *      - *text* - string
     *          - The content of the message
     *      - *type* - array
     *          - The type of the message. Two types are available:
<ul>
<li>message (visible for the customer)</li>
<li>comment (not visible for the customer)</li>
</ul>
     *      - *source* - array
     *          - The origin of the message. The following sources are available by default and cannot be deleted.
<ul>
<li>backend</li>
<li>frontend</li>
<li>ebay</li>
<li>email</li>
</ul>
     *      - *topicId* - integer
     *          - The ID of the topic the message is assigned to
     */
    public function createTicketByTicketId(int $ticketId): array
    {
        return $this->api("/rest/tickets/{$ticketId}", 'POST');
    }
                
    /**
     * @description Updates a ticket. The ID of the ticket must be specified.
     * @tag Ticket
     * @param int $ticketId The ID of the ticket
     * @return array
     *      - *id* - integer
     *          - The ID of the ticket
     *      - *typeId* - integer
     *          - The type ID of the ticket
     *      - *priorityId* - integer
     *          - The priority ID of the ticket
     *      - *parentTicketId* - integer
     *          - The ID of the parent ticket
     *      - *statusId* - integer
     *          - The status ID of the ticket
     *      - *confidential* - array
     *          - The confidential value. Displays 1 if the ticket is confidential. Displays 0 if the ticket is not confidential.
     *      - *contactId* - integer
     *          - The ID of the contact that is linked with the ticket
     *      - *orderId* - integer
     *          - The ID of the order linked with the ticket
     *      - *createdAt* - string
     *          - The time the ticket was created as unix timestamp or carbon object
     *      - *updatedAt* - string
     *          - The time the ticket was last updated as unix timestamp or carbon object
     *      - *contactLastUpdateAt* - string
     *          - The time the contact was last updated
     *      - *deadlineAt* - string
     *          - The date of the ticket deadline
     *      - *finishedAt* - string
     *          - The date the ticket is solved and displays 100 percent in the progress bar
     *      - *title* - string
     *          - The title of the ticket
     *      - *progress* - integer
     *          - The progress of the ticket in percent
     *      - *plentyId* - integer
     *          - The ID of the client (store)
     *      - *source* - array
     *          - The source of the ticket. Possible values are 'frontend', 'backend', 'ebay' and 'email'.
     *      - *documentsCount* - integer
     *          - The number of documents that are attached to the ticket
     *      - *hasDocuments* - integer
     *          - Displays 1 if the ticket has one or more documents. Displays 0 if the ticket has no document.
     *      - *childrenCount* - integer
     *          - The number of child tickets
     *      - *resubmissionAt* - string
     *          - The date the ticket should be resubmitted
     *      - *parseData* - string
     *          - The ParseData from the ticket
     */
    public function updateTicketByTicketId(int $ticketId): array
    {
        return $this->api("/rest/tickets/{$ticketId}", 'PUT');
    }
    
}
