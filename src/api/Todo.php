<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Todo extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Deletes a list of todos.
     * @tag Todo

     */
    public function deleteTodo(): void
    {
        $this->api("/rest/todo", 'DELETE');
    }
            
    /**
     * @description Searches todos. Returns a paginated result.
     * @tag Todo
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Todo
     */
    public function eachTodo(array $query = []): Iterator
    {
        return $this->eachInternal('getTodo', func_get_args());
    }
        
    /**
     * @description Searches todos. Returns a paginated result.
     * @tag Todo
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     * @return Iterator
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Todo
     */
    public function batchTodo(array $query = []): Iterator
    {
        return $this->batchInternal('getTodo', func_get_args());
    }
    
    /**
     * @description Searches todos. Returns a paginated result.
     * @tag Todo
     * @param array $query
     *      - *page* - int - optional
     *          - The page of results to search for.
     * @return array
     *      - *page* - integer
     *          - Current page of the response
     *      - *totalsCount* - integer
     *          - The total number of entries in the response
     *      - *isLastPage* - boolean
     *          - Flag that indicates if the page shown is the last page of the response
     *      - *lastPageNumber* - integer
     *          - The last page number
     *      - *firstOnPage* - integer
     *          - The index of the first item of the current page result
     *      - *lastOnPage* - integer
     *          - The index of the last item of the current page result
     *      - *itemsPerPage* - integer
     *          - The requested amount of items per result page
     *      - *entries* - array
     *          - List of Todo
     */
    public function getTodo(array $query = []): array
    {
        return $this->api(array_merge(["/rest/todo"], $query));
    }
                
    /**
     * @description Creates a list of new todo.
     * @tag Todo

     */
    public function createTodo(): void
    {
        $this->api("/rest/todo", 'POST');
    }
                
    /**
     * @description Updates a list of tasks.
     * @tag Todo

     */
    public function updateTodo(): void
    {
        $this->api("/rest/todo", 'PUT');
    }
    
}
