<?php

namespace lujie\plentyMarkets\api;

use Yii;
use Iterator;

/**
* This class is autogenerated by the OpenAPI gii generator
* @description The plentymarkets REST API expands the functionality of the plentymarkets CMS and allows access to resources, i.e. data records, via unique URI paths
*/
class Wizard extends \lujie\plentyMarkets\BasePlentyMarketsRestClient
{

                
    /**
     * @description Lists all wizards.
     * @tag Wizard
     * @return array
     */
    public function getWizards(): array
    {
        return $this->api("/rest/wizards");
    }
                    
    /**
     * @description Lists wizard folders
     * @tag Wizard
     * @return array
     */
    public function getWizardsFolders(): array
    {
        return $this->api("/rest/wizards/folders");
    }
                    
    /**
     * @description Gets all non cached sets.
     * @tag Wizard

     */
    public function getWizardsPluginSets()
    {
        return $this->api("/rest/wizards/pluginSets");
    }
                    
    /**
     * @description Gets a specific wizard by wizard key.
     * @tag Wizard
     * @param int $wizardKey 
     * @return array
     *      - *title* - string
     *          - The title
     *      - *key* - string
     *          - The wizard's key
     *      - *settingsHandlerClass* - string
     *          - Settings handler
     *      - *shortDescription* - string
     *          - The short description
     *      - *translationKey* - string
     *          - The translation key
     *      - *deleteConfirmationText* - string
     *          - Delete confirmation Text in deletion overlay
     *      - *topics* - array
     *          - The topics
     *      - *steps* - array
     *          - Wizard's structure
     *      - *priority* - integer
     *          - Wizard's listing priority in the overview
     *      - *relevance* - string
     *          - Wizard's level of relevance
     *      - *keywords* - array
     *          - Keywords describing the wizard
     */
    public function getWizardByWizardKey(int $wizardKey): array
    {
        return $this->api("/rest/wizards/{$wizardKey}");
    }
                    
    /**
     * @description Performs an action of a registered actionHandlerClass of a given wizard
     * @tag Wizard
     * @param int $wizardKey 
     * @param int $actionKey 
     */
    public function createWizardsActionByWizardKeyActionKey(int $wizardKey, int $actionKey)
    {
        return $this->api("/rest/wizards/{$wizardKey}/actions/{$actionKey}", 'POST');
    }
                    
    /**
     * @description Deletes a wizard data
     * @tag Wizard
     * @param int $wizardKey 
     */
    public function deleteWizardsDatumByWizardKey(int $wizardKey)
    {
        return $this->api("/rest/wizards/{$wizardKey}/data", 'DELETE');
    }
                
    /**
     * @description Gets a wizard data.
     * @tag Wizard
     * @param int $wizardKey 
     */
    public function getWizardsDataByWizardKey(int $wizardKey)
    {
        return $this->api("/rest/wizards/{$wizardKey}/data");
    }
                
    /**
     * @description Creates wizard data for a specific wizard.
     * @tag Wizard
     * @param int $wizardKey 
     */
    public function createWizardsDatumByWizardKey(int $wizardKey)
    {
        return $this->api("/rest/wizards/{$wizardKey}/data", 'POST');
    }
                
    /**
     * @description Updates a wizard data
     * @tag Wizard
     * @param int $wizardKey 
     */
    public function updateWizardsDatumByWizardKey(int $wizardKey)
    {
        return $this->api("/rest/wizards/{$wizardKey}/data", 'PUT');
    }
                    
    /**
     * @description Deletes a wizard data option
     * @tag Wizard
     * @param int $wizardKey 
     * @param int $optionId 
     */
    public function deleteWizardsDatumByWizardKeyOptionId(int $wizardKey, int $optionId)
    {
        return $this->api("/rest/wizards/{$wizardKey}/data/{$optionId}", 'DELETE');
    }
                
    /**
     * @description Gets a wizard data by optionId
     * @tag Wizard
     * @param int $wizardKey 
     * @param int $optionId 
     */
    public function getWizardsDatumByWizardKeyOptionId(int $wizardKey, int $optionId)
    {
        return $this->api("/rest/wizards/{$wizardKey}/data/{$optionId}");
    }
                
    /**
     * @description Creates a wizard data option.
     * @tag Wizard
     * @param int $wizardKey 
     * @param int $optionId 
     */
    public function createWizardsDatumByWizardKeyOptionId(int $wizardKey, int $optionId)
    {
        return $this->api("/rest/wizards/{$wizardKey}/data/{$optionId}", 'POST');
    }
                
    /**
     * @description Updates a wizard data option
     * @tag Wizard
     * @param int $wizardKey 
     * @param int $optionId 
     */
    public function updateWizardsDatumByWizardKeyOptionId(int $wizardKey, int $optionId)
    {
        return $this->api("/rest/wizards/{$wizardKey}/data/{$optionId}", 'PUT');
    }
                    
    /**
     * @description Loads dynamic data of a given wizard.
     * @tag Wizard
     * @param int $wizardKey 
     * @param int $formfieldKey 
     */
    public function createWizardsFormfieldByWizardKeyFormfieldKey(int $wizardKey, int $formfieldKey)
    {
        return $this->api("/rest/wizards/{$wizardKey}/formfields/{$formfieldKey}", 'POST');
    }
                    
    /**
     * @description Rebuilds cache of a given wizardKey and retuns the new cached data
     * @tag Wizard
     * @param int $wizardKey 
     */
    public function getWizardsRebuildCacheByWizardKey(int $wizardKey)
    {
        return $this->api("/rest/wizards/{$wizardKey}/rebuildCache");
    }
                    
    /**
     * @description Finalizes a wizard by key.
     * @tag Wizard
     * @param int $wizardKey 
     * @param int $optionId 
     */
    public function createWizardsSettingByWizardKeyOptionId(int $wizardKey, int $optionId)
    {
        return $this->api("/rest/wizards/{$wizardKey}/settings/{$optionId}", 'POST');
    }
    
}
